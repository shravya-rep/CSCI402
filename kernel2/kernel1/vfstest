
user/usr/bin/vfstest.exec:     file format elf32-i386


Disassembly of section .text:

08048094 <makedirs>:

static char root_dir[64];

static int
makedirs(const char *dir)
{
 8048094:	55                   	push   %ebp
 8048095:	89 e5                	mov    %esp,%ebp
 8048097:	83 ec 28             	sub    $0x28,%esp
        int ret = 0;
 804809a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        char *d, *p;

        if (NULL == (d = malloc(strlen(dir) + 1))) {
 80480a1:	8b 45 08             	mov    0x8(%ebp),%eax
 80480a4:	89 04 24             	mov    %eax,(%esp)
 80480a7:	e8 be 23 01 00       	call   805a46a <strlen>
 80480ac:	40                   	inc    %eax
 80480ad:	89 04 24             	mov    %eax,(%esp)
 80480b0:	e8 79 48 01 00       	call   805c92e <malloc>
 80480b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
 80480b8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
 80480bc:	75 0a                	jne    80480c8 <makedirs+0x34>
                return ENOMEM;
 80480be:	b8 0c 00 00 00       	mov    $0xc,%eax
 80480c3:	e9 a6 00 00 00       	jmp    804816e <makedirs+0xda>
        }
        strcpy(d, dir);
 80480c8:	8b 45 08             	mov    0x8(%ebp),%eax
 80480cb:	89 44 24 04          	mov    %eax,0x4(%esp)
 80480cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
 80480d2:	89 04 24             	mov    %eax,(%esp)
 80480d5:	e8 50 22 01 00       	call   805a32a <strcpy>

        p = d;
 80480da:	8b 45 ec             	mov    -0x14(%ebp),%eax
 80480dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while (NULL != (p = strchr(p + 1, '/'))) {
 80480e0:	eb 37                	jmp    8048119 <makedirs+0x85>
                *p = '\0';
 80480e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
 80480e5:	c6 00 00             	movb   $0x0,(%eax)
                if (0 != mkdir(d, 0777) && EEXIST != errno) {
 80480e8:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 80480ef:	00 
 80480f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
 80480f3:	89 04 24             	mov    %eax,(%esp)
 80480f6:	e8 93 1a 01 00       	call   8059b8e <mkdir>
 80480fb:	85 c0                	test   %eax,%eax
 80480fd:	74 14                	je     8048113 <makedirs+0x7f>
 80480ff:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048104:	83 f8 11             	cmp    $0x11,%eax
 8048107:	74 0a                	je     8048113 <makedirs+0x7f>
                        ret = errno;
 8048109:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804810e:	89 45 f4             	mov    %eax,-0xc(%ebp)
                        goto error;
 8048111:	eb 4d                	jmp    8048160 <makedirs+0xcc>
                }
                *p = '/';
 8048113:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8048116:	c6 00 2f             	movb   $0x2f,(%eax)
                return ENOMEM;
        }
        strcpy(d, dir);

        p = d;
        while (NULL != (p = strchr(p + 1, '/'))) {
 8048119:	8b 45 f0             	mov    -0x10(%ebp),%eax
 804811c:	40                   	inc    %eax
 804811d:	c7 44 24 04 2f 00 00 	movl   $0x2f,0x4(%esp)
 8048124:	00 
 8048125:	89 04 24             	mov    %eax,(%esp)
 8048128:	e8 6e 23 01 00       	call   805a49b <strchr>
 804812d:	89 45 f0             	mov    %eax,-0x10(%ebp)
 8048130:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
 8048134:	75 ac                	jne    80480e2 <makedirs+0x4e>
                        ret = errno;
                        goto error;
                }
                *p = '/';
        }
        if (0 != mkdir(d, 0777) && EEXIST != errno) {
 8048136:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 804813d:	00 
 804813e:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8048141:	89 04 24             	mov    %eax,(%esp)
 8048144:	e8 45 1a 01 00       	call   8059b8e <mkdir>
 8048149:	85 c0                	test   %eax,%eax
 804814b:	74 13                	je     8048160 <makedirs+0xcc>
 804814d:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048152:	83 f8 11             	cmp    $0x11,%eax
 8048155:	74 09                	je     8048160 <makedirs+0xcc>
                ret = errno;
 8048157:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804815c:	89 45 f4             	mov    %eax,-0xc(%ebp)
                goto error;
 804815f:	90                   	nop
        }

error:
        free(d);
 8048160:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8048163:	89 04 24             	mov    %eax,(%esp)
 8048166:	e8 7c 48 01 00       	call   805c9e7 <free>
        return ret;
 804816b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 804816e:	c9                   	leave  
 804816f:	c3                   	ret    

08048170 <getdent>:

static int
getdent(const char *dir, dirent_t *dirent)
{
 8048170:	55                   	push   %ebp
 8048171:	89 e5                	mov    %esp,%ebp
 8048173:	83 ec 28             	sub    $0x28,%esp
        int ret, fd = -1;
 8048176:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)

        if (0 > (fd = open(dir, O_RDONLY, 0777))) {
 804817d:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 8048184:	00 
 8048185:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804818c:	00 
 804818d:	8b 45 08             	mov    0x8(%ebp),%eax
 8048190:	89 04 24             	mov    %eax,(%esp)
 8048193:	e8 d4 17 01 00       	call   805996c <open>
 8048198:	89 45 f0             	mov    %eax,-0x10(%ebp)
 804819b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
 804819f:	79 0a                	jns    80481ab <getdent+0x3b>
                return -1;
 80481a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80481a6:	e9 8f 00 00 00       	jmp    804823a <getdent+0xca>
        }

        ret = 1;
 80481ab:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        while (ret != 0) {
 80481b2:	eb 70                	jmp    8048224 <getdent+0xb4>
                if (0 > (ret = getdents(fd, dirent, sizeof(*dirent)))) {
 80481b4:	c7 44 24 08 28 00 00 	movl   $0x28,0x8(%esp)
 80481bb:	00 
 80481bc:	8b 45 0c             	mov    0xc(%ebp),%eax
 80481bf:	89 44 24 04          	mov    %eax,0x4(%esp)
 80481c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
 80481c6:	89 04 24             	mov    %eax,(%esp)
 80481c9:	e8 9c 1e 01 00       	call   805a06a <getdents>
 80481ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
 80481d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 80481d5:	79 07                	jns    80481de <getdent+0x6e>
                        return -1;
 80481d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80481dc:	eb 5c                	jmp    804823a <getdent+0xca>
                }
                if (0 != strcmp(".", dirent->d_name) && 0 != strcmp("..", dirent->d_name)) {
 80481de:	8b 45 0c             	mov    0xc(%ebp),%eax
 80481e1:	83 c0 08             	add    $0x8,%eax
 80481e4:	89 44 24 04          	mov    %eax,0x4(%esp)
 80481e8:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 80481ef:	e8 f2 20 01 00       	call   805a2e6 <strcmp>
 80481f4:	85 c0                	test   %eax,%eax
 80481f6:	74 2c                	je     8048224 <getdent+0xb4>
 80481f8:	8b 45 0c             	mov    0xc(%ebp),%eax
 80481fb:	83 c0 08             	add    $0x8,%eax
 80481fe:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048202:	c7 04 24 26 e6 05 08 	movl   $0x805e626,(%esp)
 8048209:	e8 d8 20 01 00       	call   805a2e6 <strcmp>
 804820e:	85 c0                	test   %eax,%eax
 8048210:	74 12                	je     8048224 <getdent+0xb4>
                        close(fd);
 8048212:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8048215:	89 04 24             	mov    %eax,(%esp)
 8048218:	e8 a6 18 01 00       	call   8059ac3 <close>
                        return 1;
 804821d:	b8 01 00 00 00       	mov    $0x1,%eax
 8048222:	eb 16                	jmp    804823a <getdent+0xca>
        if (0 > (fd = open(dir, O_RDONLY, 0777))) {
                return -1;
        }

        ret = 1;
        while (ret != 0) {
 8048224:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 8048228:	75 8a                	jne    80481b4 <getdent+0x44>
                        close(fd);
                        return 1;
                }
        }

        close(fd);
 804822a:	8b 45 f0             	mov    -0x10(%ebp),%eax
 804822d:	89 04 24             	mov    %eax,(%esp)
 8048230:	e8 8e 18 01 00       	call   8059ac3 <close>
        return 0;
 8048235:	b8 00 00 00 00       	mov    $0x0,%eax
}
 804823a:	c9                   	leave  
 804823b:	c3                   	ret    

0804823c <removeall>:

static int
removeall(const char *dir)
{
 804823c:	55                   	push   %ebp
 804823d:	89 e5                	mov    %esp,%ebp
 804823f:	83 ec 78             	sub    $0x78,%esp
        int ret;
        dirent_t dirent;
        struct stat status;

        if (0 > chdir(dir)) {
 8048242:	8b 45 08             	mov    0x8(%ebp),%eax
 8048245:	89 04 24             	mov    %eax,(%esp)
 8048248:	e8 27 1b 01 00       	call   8059d74 <chdir>
 804824d:	85 c0                	test   %eax,%eax
 804824f:	79 0a                	jns    804825b <removeall+0x1f>
                return errno;
 8048251:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048256:	e9 db 00 00 00       	jmp    8048336 <removeall+0xfa>
        }

        ret = 1;
 804825b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        while (ret != 0) {
 8048262:	e9 90 00 00 00       	jmp    80482f7 <removeall+0xbb>
                if (0 > (ret = getdent(".", &dirent))) {
 8048267:	8d 45 cc             	lea    -0x34(%ebp),%eax
 804826a:	89 44 24 04          	mov    %eax,0x4(%esp)
 804826e:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 8048275:	e8 f6 fe ff ff       	call   8048170 <getdent>
 804827a:	89 45 f4             	mov    %eax,-0xc(%ebp)
 804827d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 8048281:	79 0a                	jns    804828d <removeall+0x51>
                        return errno;
 8048283:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048288:	e9 a9 00 00 00       	jmp    8048336 <removeall+0xfa>
                }
                if (0 == ret) {
 804828d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 8048291:	74 70                	je     8048303 <removeall+0xc7>
                        break;
                }

                if (0 > stat(dirent.d_name, &status)) {
 8048293:	8d 45 98             	lea    -0x68(%ebp),%eax
 8048296:	89 44 24 04          	mov    %eax,0x4(%esp)
 804829a:	8d 45 cc             	lea    -0x34(%ebp),%eax
 804829d:	83 c0 08             	add    $0x8,%eax
 80482a0:	89 04 24             	mov    %eax,(%esp)
 80482a3:	e8 13 1e 01 00       	call   805a0bb <stat>
 80482a8:	85 c0                	test   %eax,%eax
 80482aa:	79 0a                	jns    80482b6 <removeall+0x7a>
                        return errno;
 80482ac:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80482b1:	e9 80 00 00 00       	jmp    8048336 <removeall+0xfa>
                }

                if (S_ISDIR(status.st_mode)) {
 80482b6:	8b 45 98             	mov    -0x68(%ebp),%eax
 80482b9:	25 00 ff 00 00       	and    $0xff00,%eax
 80482be:	3d 00 02 00 00       	cmp    $0x200,%eax
 80482c3:	75 19                	jne    80482de <removeall+0xa2>
                        if (0 > removeall(dirent.d_name)) {
 80482c5:	8d 45 cc             	lea    -0x34(%ebp),%eax
 80482c8:	83 c0 08             	add    $0x8,%eax
 80482cb:	89 04 24             	mov    %eax,(%esp)
 80482ce:	e8 69 ff ff ff       	call   804823c <removeall>
 80482d3:	85 c0                	test   %eax,%eax
 80482d5:	79 20                	jns    80482f7 <removeall+0xbb>
                                return errno;
 80482d7:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80482dc:	eb 58                	jmp    8048336 <removeall+0xfa>
                        }
                } else {
                        if (0 > unlink(dirent.d_name)) {
 80482de:	8d 45 cc             	lea    -0x34(%ebp),%eax
 80482e1:	83 c0 08             	add    $0x8,%eax
 80482e4:	89 04 24             	mov    %eax,(%esp)
 80482e7:	e8 58 19 01 00       	call   8059c44 <unlink>
 80482ec:	85 c0                	test   %eax,%eax
 80482ee:	79 07                	jns    80482f7 <removeall+0xbb>
                                return errno;
 80482f0:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80482f5:	eb 3f                	jmp    8048336 <removeall+0xfa>
        if (0 > chdir(dir)) {
                return errno;
        }

        ret = 1;
        while (ret != 0) {
 80482f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 80482fb:	0f 85 66 ff ff ff    	jne    8048267 <removeall+0x2b>
 8048301:	eb 01                	jmp    8048304 <removeall+0xc8>
                if (0 > (ret = getdent(".", &dirent))) {
                        return errno;
                }
                if (0 == ret) {
                        break;
 8048303:	90                   	nop
                                return errno;
                        }
                }
        }

        if (0 > chdir("..")) {
 8048304:	c7 04 24 26 e6 05 08 	movl   $0x805e626,(%esp)
 804830b:	e8 64 1a 01 00       	call   8059d74 <chdir>
 8048310:	85 c0                	test   %eax,%eax
 8048312:	79 07                	jns    804831b <removeall+0xdf>
                return errno;
 8048314:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048319:	eb 1b                	jmp    8048336 <removeall+0xfa>
        }

        if (0 > rmdir(dir)) {
 804831b:	8b 45 08             	mov    0x8(%ebp),%eax
 804831e:	89 04 24             	mov    %eax,(%esp)
 8048321:	e8 c6 18 01 00       	call   8059bec <rmdir>
 8048326:	85 c0                	test   %eax,%eax
 8048328:	79 07                	jns    8048331 <removeall+0xf5>
                return errno;
 804832a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804832f:	eb 05                	jmp    8048336 <removeall+0xfa>
        }

        return 0;
 8048331:	b8 00 00 00 00       	mov    $0x0,%eax

}
 8048336:	c9                   	leave  
 8048337:	c3                   	ret    

08048338 <vfstest_start>:

static void
vfstest_start(void)
{
 8048338:	55                   	push   %ebp
 8048339:	89 e5                	mov    %esp,%ebp
 804833b:	83 ec 28             	sub    $0x28,%esp
        int err;

        root_dir[0] = '\0';
 804833e:	c6 05 e0 69 06 08 00 	movb   $0x0,0x80669e0
        do {
                sprintf(root_dir, "vfstest-%d", rand());
 8048345:	e8 6a 48 01 00       	call   805cbb4 <rand>
 804834a:	89 44 24 08          	mov    %eax,0x8(%esp)
 804834e:	c7 44 24 04 29 e6 05 	movl   $0x805e629,0x4(%esp)
 8048355:	08 
 8048356:	c7 04 24 e0 69 06 08 	movl   $0x80669e0,(%esp)
 804835d:	e8 53 49 01 00       	call   805ccb5 <sprintf>
                err = mkdir(root_dir, 0777);
 8048362:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 8048369:	00 
 804836a:	c7 04 24 e0 69 06 08 	movl   $0x80669e0,(%esp)
 8048371:	e8 18 18 01 00       	call   8059b8e <mkdir>
 8048376:	89 45 f4             	mov    %eax,-0xc(%ebp)
        } while (err != 0);
 8048379:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 804837d:	75 c6                	jne    8048345 <vfstest_start+0xd>
        printf("Created test root directory: ./%s\n", root_dir);
 804837f:	c7 44 24 04 e0 69 06 	movl   $0x80669e0,0x4(%esp)
 8048386:	08 
 8048387:	c7 04 24 34 e6 05 08 	movl   $0x805e634,(%esp)
 804838e:	e8 ad 48 01 00       	call   805cc40 <printf>
}
 8048393:	90                   	nop
 8048394:	c9                   	leave  
 8048395:	c3                   	ret    

08048396 <vfstest_term>:
/*
 * Terminates the testing environment
 */
static void
vfstest_term(void)
{
 8048396:	55                   	push   %ebp
 8048397:	89 e5                	mov    %esp,%ebp
 8048399:	83 ec 18             	sub    $0x18,%esp
        if (0 != removeall(root_dir)) {
 804839c:	c7 04 24 e0 69 06 08 	movl   $0x80669e0,(%esp)
 80483a3:	e8 94 fe ff ff       	call   804823c <removeall>
 80483a8:	85 c0                	test   %eax,%eax
 80483aa:	74 3c                	je     80483e8 <vfstest_term+0x52>
                fprintf(stderr, "ERROR: could not remove testing root %s: %s\n", root_dir, strerror(errno));
 80483ac:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80483b1:	89 04 24             	mov    %eax,(%esp)
 80483b4:	e8 3f 23 01 00       	call   805a6f8 <strerror>
 80483b9:	89 c2                	mov    %eax,%edx
 80483bb:	a1 9c 68 06 08       	mov    0x806689c,%eax
 80483c0:	89 54 24 0c          	mov    %edx,0xc(%esp)
 80483c4:	c7 44 24 08 e0 69 06 	movl   $0x80669e0,0x8(%esp)
 80483cb:	08 
 80483cc:	c7 44 24 04 58 e6 05 	movl   $0x805e658,0x4(%esp)
 80483d3:	08 
 80483d4:	89 04 24             	mov    %eax,(%esp)
 80483d7:	e8 9b 48 01 00       	call   805cc77 <fprintf>
                exit(-1);
 80483dc:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 80483e3:	e8 a6 12 01 00       	call   805968e <exit>
        }
        printf("Removed test root directory: ./%s\n", root_dir);
 80483e8:	c7 44 24 04 e0 69 06 	movl   $0x80669e0,0x4(%esp)
 80483ef:	08 
 80483f0:	c7 04 24 88 e6 05 08 	movl   $0x805e688,(%esp)
 80483f7:	e8 44 48 01 00       	call   805cc40 <printf>
}
 80483fc:	90                   	nop
 80483fd:	c9                   	leave  
 80483fe:	c3                   	ret    

080483ff <vfstest_notdir>:
                test_assert((__g == __e), "fd %d fpos at %d, expected %d", fd, __g, __e);       \
        } while (0);

static void
vfstest_notdir(void)
{
 80483ff:	55                   	push   %ebp
 8048400:	89 e5                	mov    %esp,%ebp
 8048402:	57                   	push   %edi
 8048403:	56                   	push   %esi
 8048404:	53                   	push   %ebx
 8048405:	83 ec 7c             	sub    $0x7c,%esp
        int fd;
        struct stat s;
        syscall_success(mkdir("realdir", 0));
 8048408:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804840e:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048413:	89 04 24             	mov    %eax,(%esp)
 8048416:	e8 0e 5f 01 00       	call   805e329 <test_errstr>
 804841b:	89 c3                	mov    %eax,%ebx
 804841d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8048424:	00 
 8048425:	c7 04 24 ab e6 05 08 	movl   $0x805e6ab,(%esp)
 804842c:	e8 5d 17 01 00       	call   8059b8e <mkdir>
 8048431:	f7 d0                	not    %eax
 8048433:	c1 e8 1f             	shr    $0x1f,%eax
 8048436:	0f b6 c0             	movzbl %al,%eax
 8048439:	89 74 24 18          	mov    %esi,0x18(%esp)
 804843d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048441:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8048448:	08 
 8048449:	c7 44 24 0c ce e6 05 	movl   $0x805e6ce,0xc(%esp)
 8048450:	08 
 8048451:	c7 44 24 08 fd 00 00 	movl   $0xfd,0x8(%esp)
 8048458:	00 
 8048459:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048460:	08 
 8048461:	89 04 24             	mov    %eax,(%esp)
 8048464:	e8 27 61 01 00       	call   805e590 <_test_assert>
        syscall_success(fd = open("realdir/file", O_RDWR | O_CREAT, 0));
 8048469:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804846f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048474:	89 04 24             	mov    %eax,(%esp)
 8048477:	e8 ad 5e 01 00       	call   805e329 <test_errstr>
 804847c:	89 c3                	mov    %eax,%ebx
 804847e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8048485:	00 
 8048486:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
 804848d:	00 
 804848e:	c7 04 24 01 e7 05 08 	movl   $0x805e701,(%esp)
 8048495:	e8 d2 14 01 00       	call   805996c <open>
 804849a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 804849d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80484a0:	f7 d0                	not    %eax
 80484a2:	c1 e8 1f             	shr    $0x1f,%eax
 80484a5:	0f b6 c0             	movzbl %al,%eax
 80484a8:	89 74 24 18          	mov    %esi,0x18(%esp)
 80484ac:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80484b0:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80484b7:	08 
 80484b8:	c7 44 24 0c 10 e7 05 	movl   $0x805e710,0xc(%esp)
 80484bf:	08 
 80484c0:	c7 44 24 08 fe 00 00 	movl   $0xfe,0x8(%esp)
 80484c7:	00 
 80484c8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80484cf:	08 
 80484d0:	89 04 24             	mov    %eax,(%esp)
 80484d3:	e8 b8 60 01 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 80484d8:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80484de:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80484e3:	89 04 24             	mov    %eax,(%esp)
 80484e6:	e8 3e 5e 01 00       	call   805e329 <test_errstr>
 80484eb:	89 c3                	mov    %eax,%ebx
 80484ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80484f0:	89 04 24             	mov    %eax,(%esp)
 80484f3:	e8 cb 15 01 00       	call   8059ac3 <close>
 80484f8:	f7 d0                	not    %eax
 80484fa:	c1 e8 1f             	shr    $0x1f,%eax
 80484fd:	0f b6 c0             	movzbl %al,%eax
 8048500:	89 74 24 18          	mov    %esi,0x18(%esp)
 8048504:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048508:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804850f:	08 
 8048510:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 8048517:	08 
 8048518:	c7 44 24 08 ff 00 00 	movl   $0xff,0x8(%esp)
 804851f:	00 
 8048520:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048527:	08 
 8048528:	89 04 24             	mov    %eax,(%esp)
 804852b:	e8 60 60 01 00       	call   805e590 <_test_assert>
        syscall_success(fd = open("realdir/file2", O_RDWR | O_CREAT, 0));
 8048530:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8048536:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804853b:	89 04 24             	mov    %eax,(%esp)
 804853e:	e8 e6 5d 01 00       	call   805e329 <test_errstr>
 8048543:	89 c3                	mov    %eax,%ebx
 8048545:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804854c:	00 
 804854d:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
 8048554:	00 
 8048555:	c7 04 24 50 e7 05 08 	movl   $0x805e750,(%esp)
 804855c:	e8 0b 14 01 00       	call   805996c <open>
 8048561:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 8048564:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8048567:	f7 d0                	not    %eax
 8048569:	c1 e8 1f             	shr    $0x1f,%eax
 804856c:	0f b6 c0             	movzbl %al,%eax
 804856f:	89 74 24 18          	mov    %esi,0x18(%esp)
 8048573:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048577:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804857e:	08 
 804857f:	c7 44 24 0c 60 e7 05 	movl   $0x805e760,0xc(%esp)
 8048586:	08 
 8048587:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
 804858e:	00 
 804858f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048596:	08 
 8048597:	89 04 24             	mov    %eax,(%esp)
 804859a:	e8 f1 5f 01 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 804859f:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80485a5:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80485aa:	89 04 24             	mov    %eax,(%esp)
 80485ad:	e8 77 5d 01 00       	call   805e329 <test_errstr>
 80485b2:	89 c3                	mov    %eax,%ebx
 80485b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80485b7:	89 04 24             	mov    %eax,(%esp)
 80485ba:	e8 04 15 01 00       	call   8059ac3 <close>
 80485bf:	f7 d0                	not    %eax
 80485c1:	c1 e8 1f             	shr    $0x1f,%eax
 80485c4:	0f b6 c0             	movzbl %al,%eax
 80485c7:	89 74 24 18          	mov    %esi,0x18(%esp)
 80485cb:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80485cf:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80485d6:	08 
 80485d7:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 80485de:	08 
 80485df:	c7 44 24 08 01 01 00 	movl   $0x101,0x8(%esp)
 80485e6:	00 
 80485e7:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80485ee:	08 
 80485ef:	89 04 24             	mov    %eax,(%esp)
 80485f2:	e8 99 5f 01 00       	call   805e590 <_test_assert>

        syscall_fail(open("realdir/file/nope", O_CREAT|O_RDWR, 0), ENOTDIR);
 80485f7:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 80485fe:	e8 26 5d 01 00       	call   805e329 <test_errstr>
 8048603:	89 c3                	mov    %eax,%ebx
 8048605:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804860c:	00 00 00 
 804860f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8048616:	00 
 8048617:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
 804861e:	00 
 804861f:	c7 04 24 90 e7 05 08 	movl   $0x805e790,(%esp)
 8048626:	e8 41 13 01 00       	call   805996c <open>
 804862b:	83 f8 ff             	cmp    $0xffffffff,%eax
 804862e:	0f 94 c0             	sete   %al
 8048631:	0f b6 c0             	movzbl %al,%eax
 8048634:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 804863b:	00 
 804863c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048640:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8048647:	08 
 8048648:	c7 44 24 0c c8 e7 05 	movl   $0x805e7c8,0xc(%esp)
 804864f:	08 
 8048650:	c7 44 24 08 03 01 00 	movl   $0x103,0x8(%esp)
 8048657:	00 
 8048658:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804865f:	08 
 8048660:	89 04 24             	mov    %eax,(%esp)
 8048663:	e8 28 5f 01 00       	call   805e590 <_test_assert>
 8048668:	85 c0                	test   %eax,%eax
 804866a:	0f 84 89 00 00 00    	je     80486f9 <vfstest_notdir+0x2fa>
 8048670:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8048676:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804867b:	89 04 24             	mov    %eax,(%esp)
 804867e:	e8 a6 5c 01 00       	call   805e329 <test_errstr>
 8048683:	89 c6                	mov    %eax,%esi
 8048685:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804868c:	e8 98 5c 01 00       	call   805e329 <test_errstr>
 8048691:	89 c3                	mov    %eax,%ebx
 8048693:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804869a:	00 
 804869b:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
 80486a2:	00 
 80486a3:	c7 04 24 90 e7 05 08 	movl   $0x805e790,(%esp)
 80486aa:	e8 bd 12 01 00       	call   805996c <open>
 80486af:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80486b4:	83 f8 14             	cmp    $0x14,%eax
 80486b7:	0f 94 c0             	sete   %al
 80486ba:	0f b6 c0             	movzbl %al,%eax
 80486bd:	89 7c 24 20          	mov    %edi,0x20(%esp)
 80486c1:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 80486c5:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 80486cc:	00 
 80486cd:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80486d1:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 80486d8:	08 
 80486d9:	c7 44 24 0c 28 e8 05 	movl   $0x805e828,0xc(%esp)
 80486e0:	08 
 80486e1:	c7 44 24 08 03 01 00 	movl   $0x103,0x8(%esp)
 80486e8:	00 
 80486e9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80486f0:	08 
 80486f1:	89 04 24             	mov    %eax,(%esp)
 80486f4:	e8 97 5e 01 00       	call   805e590 <_test_assert>
        syscall_fail(link("realdir/file2", "realdir/file/nope"), ENOTDIR);
 80486f9:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 8048700:	e8 24 5c 01 00       	call   805e329 <test_errstr>
 8048705:	89 c3                	mov    %eax,%ebx
 8048707:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804870e:	00 00 00 
 8048711:	c7 44 24 04 90 e7 05 	movl   $0x805e790,0x4(%esp)
 8048718:	08 
 8048719:	c7 04 24 50 e7 05 08 	movl   $0x805e750,(%esp)
 8048720:	e8 77 15 01 00       	call   8059c9c <link>
 8048725:	83 f8 ff             	cmp    $0xffffffff,%eax
 8048728:	0f 94 c0             	sete   %al
 804872b:	0f b6 c0             	movzbl %al,%eax
 804872e:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 8048735:	00 
 8048736:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804873a:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8048741:	08 
 8048742:	c7 44 24 0c 60 e8 05 	movl   $0x805e860,0xc(%esp)
 8048749:	08 
 804874a:	c7 44 24 08 04 01 00 	movl   $0x104,0x8(%esp)
 8048751:	00 
 8048752:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048759:	08 
 804875a:	89 04 24             	mov    %eax,(%esp)
 804875d:	e8 2e 5e 01 00       	call   805e590 <_test_assert>
 8048762:	85 c0                	test   %eax,%eax
 8048764:	0f 84 81 00 00 00    	je     80487eb <vfstest_notdir+0x3ec>
 804876a:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8048770:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048775:	89 04 24             	mov    %eax,(%esp)
 8048778:	e8 ac 5b 01 00       	call   805e329 <test_errstr>
 804877d:	89 c6                	mov    %eax,%esi
 804877f:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 8048786:	e8 9e 5b 01 00       	call   805e329 <test_errstr>
 804878b:	89 c3                	mov    %eax,%ebx
 804878d:	c7 44 24 04 90 e7 05 	movl   $0x805e790,0x4(%esp)
 8048794:	08 
 8048795:	c7 04 24 50 e7 05 08 	movl   $0x805e750,(%esp)
 804879c:	e8 fb 14 01 00       	call   8059c9c <link>
 80487a1:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80487a6:	83 f8 14             	cmp    $0x14,%eax
 80487a9:	0f 94 c0             	sete   %al
 80487ac:	0f b6 c0             	movzbl %al,%eax
 80487af:	89 7c 24 20          	mov    %edi,0x20(%esp)
 80487b3:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 80487b7:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 80487be:	00 
 80487bf:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80487c3:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 80487ca:	08 
 80487cb:	c7 44 24 0c a0 e8 05 	movl   $0x805e8a0,0xc(%esp)
 80487d2:	08 
 80487d3:	c7 44 24 08 04 01 00 	movl   $0x104,0x8(%esp)
 80487da:	00 
 80487db:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80487e2:	08 
 80487e3:	89 04 24             	mov    %eax,(%esp)
 80487e6:	e8 a5 5d 01 00       	call   805e590 <_test_assert>
        syscall_fail(link("realdir/file/nope", "realdir/file3"), ENOTDIR);
 80487eb:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 80487f2:	e8 32 5b 01 00       	call   805e329 <test_errstr>
 80487f7:	89 c3                	mov    %eax,%ebx
 80487f9:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8048800:	00 00 00 
 8048803:	c7 44 24 04 da e8 05 	movl   $0x805e8da,0x4(%esp)
 804880a:	08 
 804880b:	c7 04 24 90 e7 05 08 	movl   $0x805e790,(%esp)
 8048812:	e8 85 14 01 00       	call   8059c9c <link>
 8048817:	83 f8 ff             	cmp    $0xffffffff,%eax
 804881a:	0f 94 c0             	sete   %al
 804881d:	0f b6 c0             	movzbl %al,%eax
 8048820:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 8048827:	00 
 8048828:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804882c:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8048833:	08 
 8048834:	c7 44 24 0c e8 e8 05 	movl   $0x805e8e8,0xc(%esp)
 804883b:	08 
 804883c:	c7 44 24 08 05 01 00 	movl   $0x105,0x8(%esp)
 8048843:	00 
 8048844:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804884b:	08 
 804884c:	89 04 24             	mov    %eax,(%esp)
 804884f:	e8 3c 5d 01 00       	call   805e590 <_test_assert>
 8048854:	85 c0                	test   %eax,%eax
 8048856:	0f 84 81 00 00 00    	je     80488dd <vfstest_notdir+0x4de>
 804885c:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8048862:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048867:	89 04 24             	mov    %eax,(%esp)
 804886a:	e8 ba 5a 01 00       	call   805e329 <test_errstr>
 804886f:	89 c6                	mov    %eax,%esi
 8048871:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 8048878:	e8 ac 5a 01 00       	call   805e329 <test_errstr>
 804887d:	89 c3                	mov    %eax,%ebx
 804887f:	c7 44 24 04 da e8 05 	movl   $0x805e8da,0x4(%esp)
 8048886:	08 
 8048887:	c7 04 24 90 e7 05 08 	movl   $0x805e790,(%esp)
 804888e:	e8 09 14 01 00       	call   8059c9c <link>
 8048893:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048898:	83 f8 14             	cmp    $0x14,%eax
 804889b:	0f 94 c0             	sete   %al
 804889e:	0f b6 c0             	movzbl %al,%eax
 80488a1:	89 7c 24 20          	mov    %edi,0x20(%esp)
 80488a5:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 80488a9:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 80488b0:	00 
 80488b1:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80488b5:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 80488bc:	08 
 80488bd:	c7 44 24 0c 28 e9 05 	movl   $0x805e928,0xc(%esp)
 80488c4:	08 
 80488c5:	c7 44 24 08 05 01 00 	movl   $0x105,0x8(%esp)
 80488cc:	00 
 80488cd:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80488d4:	08 
 80488d5:	89 04 24             	mov    %eax,(%esp)
 80488d8:	e8 b3 5c 01 00       	call   805e590 <_test_assert>
        syscall_fail(unlink("realdir/file/nope"), ENOTDIR);
 80488dd:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 80488e4:	e8 40 5a 01 00       	call   805e329 <test_errstr>
 80488e9:	89 c3                	mov    %eax,%ebx
 80488eb:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 80488f2:	00 00 00 
 80488f5:	c7 04 24 90 e7 05 08 	movl   $0x805e790,(%esp)
 80488fc:	e8 43 13 01 00       	call   8059c44 <unlink>
 8048901:	83 f8 ff             	cmp    $0xffffffff,%eax
 8048904:	0f 94 c0             	sete   %al
 8048907:	0f b6 c0             	movzbl %al,%eax
 804890a:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 8048911:	00 
 8048912:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048916:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804891d:	08 
 804891e:	c7 44 24 0c 64 e9 05 	movl   $0x805e964,0xc(%esp)
 8048925:	08 
 8048926:	c7 44 24 08 06 01 00 	movl   $0x106,0x8(%esp)
 804892d:	00 
 804892e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048935:	08 
 8048936:	89 04 24             	mov    %eax,(%esp)
 8048939:	e8 52 5c 01 00       	call   805e590 <_test_assert>
 804893e:	85 c0                	test   %eax,%eax
 8048940:	74 79                	je     80489bb <vfstest_notdir+0x5bc>
 8048942:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8048948:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804894d:	89 04 24             	mov    %eax,(%esp)
 8048950:	e8 d4 59 01 00       	call   805e329 <test_errstr>
 8048955:	89 c6                	mov    %eax,%esi
 8048957:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804895e:	e8 c6 59 01 00       	call   805e329 <test_errstr>
 8048963:	89 c3                	mov    %eax,%ebx
 8048965:	c7 04 24 90 e7 05 08 	movl   $0x805e790,(%esp)
 804896c:	e8 d3 12 01 00       	call   8059c44 <unlink>
 8048971:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048976:	83 f8 14             	cmp    $0x14,%eax
 8048979:	0f 94 c0             	sete   %al
 804897c:	0f b6 c0             	movzbl %al,%eax
 804897f:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8048983:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8048987:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 804898e:	00 
 804898f:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048993:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804899a:	08 
 804899b:	c7 44 24 0c 98 e9 05 	movl   $0x805e998,0xc(%esp)
 80489a2:	08 
 80489a3:	c7 44 24 08 06 01 00 	movl   $0x106,0x8(%esp)
 80489aa:	00 
 80489ab:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80489b2:	08 
 80489b3:	89 04 24             	mov    %eax,(%esp)
 80489b6:	e8 d5 5b 01 00       	call   805e590 <_test_assert>
        syscall_fail(rmdir("realdir/file/nope"), ENOTDIR);
 80489bb:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 80489c2:	e8 62 59 01 00       	call   805e329 <test_errstr>
 80489c7:	89 c3                	mov    %eax,%ebx
 80489c9:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 80489d0:	00 00 00 
 80489d3:	c7 04 24 90 e7 05 08 	movl   $0x805e790,(%esp)
 80489da:	e8 0d 12 01 00       	call   8059bec <rmdir>
 80489df:	83 f8 ff             	cmp    $0xffffffff,%eax
 80489e2:	0f 94 c0             	sete   %al
 80489e5:	0f b6 c0             	movzbl %al,%eax
 80489e8:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 80489ef:	00 
 80489f0:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80489f4:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 80489fb:	08 
 80489fc:	c7 44 24 0c c4 e9 05 	movl   $0x805e9c4,0xc(%esp)
 8048a03:	08 
 8048a04:	c7 44 24 08 07 01 00 	movl   $0x107,0x8(%esp)
 8048a0b:	00 
 8048a0c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048a13:	08 
 8048a14:	89 04 24             	mov    %eax,(%esp)
 8048a17:	e8 74 5b 01 00       	call   805e590 <_test_assert>
 8048a1c:	85 c0                	test   %eax,%eax
 8048a1e:	74 79                	je     8048a99 <vfstest_notdir+0x69a>
 8048a20:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8048a26:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048a2b:	89 04 24             	mov    %eax,(%esp)
 8048a2e:	e8 f6 58 01 00       	call   805e329 <test_errstr>
 8048a33:	89 c6                	mov    %eax,%esi
 8048a35:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 8048a3c:	e8 e8 58 01 00       	call   805e329 <test_errstr>
 8048a41:	89 c3                	mov    %eax,%ebx
 8048a43:	c7 04 24 90 e7 05 08 	movl   $0x805e790,(%esp)
 8048a4a:	e8 9d 11 01 00       	call   8059bec <rmdir>
 8048a4f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048a54:	83 f8 14             	cmp    $0x14,%eax
 8048a57:	0f 94 c0             	sete   %al
 8048a5a:	0f b6 c0             	movzbl %al,%eax
 8048a5d:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8048a61:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8048a65:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 8048a6c:	00 
 8048a6d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048a71:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8048a78:	08 
 8048a79:	c7 44 24 0c f4 e9 05 	movl   $0x805e9f4,0xc(%esp)
 8048a80:	08 
 8048a81:	c7 44 24 08 07 01 00 	movl   $0x107,0x8(%esp)
 8048a88:	00 
 8048a89:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048a90:	08 
 8048a91:	89 04 24             	mov    %eax,(%esp)
 8048a94:	e8 f7 5a 01 00       	call   805e590 <_test_assert>
        syscall_fail(stat("realdir/file/nope", &s), ENOTDIR);
 8048a99:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 8048aa0:	e8 84 58 01 00       	call   805e329 <test_errstr>
 8048aa5:	89 c3                	mov    %eax,%ebx
 8048aa7:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8048aae:	00 00 00 
 8048ab1:	8d 45 b0             	lea    -0x50(%ebp),%eax
 8048ab4:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048ab8:	c7 04 24 90 e7 05 08 	movl   $0x805e790,(%esp)
 8048abf:	e8 f7 15 01 00       	call   805a0bb <stat>
 8048ac4:	83 f8 ff             	cmp    $0xffffffff,%eax
 8048ac7:	0f 94 c0             	sete   %al
 8048aca:	0f b6 c0             	movzbl %al,%eax
 8048acd:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 8048ad4:	00 
 8048ad5:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048ad9:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8048ae0:	08 
 8048ae1:	c7 44 24 0c 20 ea 05 	movl   $0x805ea20,0xc(%esp)
 8048ae8:	08 
 8048ae9:	c7 44 24 08 08 01 00 	movl   $0x108,0x8(%esp)
 8048af0:	00 
 8048af1:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048af8:	08 
 8048af9:	89 04 24             	mov    %eax,(%esp)
 8048afc:	e8 8f 5a 01 00       	call   805e590 <_test_assert>
 8048b01:	85 c0                	test   %eax,%eax
 8048b03:	0f 84 80 00 00 00    	je     8048b89 <vfstest_notdir+0x78a>
 8048b09:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8048b0f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048b14:	89 04 24             	mov    %eax,(%esp)
 8048b17:	e8 0d 58 01 00       	call   805e329 <test_errstr>
 8048b1c:	89 c6                	mov    %eax,%esi
 8048b1e:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 8048b25:	e8 ff 57 01 00       	call   805e329 <test_errstr>
 8048b2a:	89 c3                	mov    %eax,%ebx
 8048b2c:	8d 45 b0             	lea    -0x50(%ebp),%eax
 8048b2f:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048b33:	c7 04 24 90 e7 05 08 	movl   $0x805e790,(%esp)
 8048b3a:	e8 7c 15 01 00       	call   805a0bb <stat>
 8048b3f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048b44:	83 f8 14             	cmp    $0x14,%eax
 8048b47:	0f 94 c0             	sete   %al
 8048b4a:	0f b6 c0             	movzbl %al,%eax
 8048b4d:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8048b51:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8048b55:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 8048b5c:	00 
 8048b5d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048b61:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8048b68:	08 
 8048b69:	c7 44 24 0c 54 ea 05 	movl   $0x805ea54,0xc(%esp)
 8048b70:	08 
 8048b71:	c7 44 24 08 08 01 00 	movl   $0x108,0x8(%esp)
 8048b78:	00 
 8048b79:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048b80:	08 
 8048b81:	89 04 24             	mov    %eax,(%esp)
 8048b84:	e8 07 5a 01 00       	call   805e590 <_test_assert>
        syscall_fail(rename("realdir/file2", "realdir/file/nope"), ENOTDIR);
 8048b89:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 8048b90:	e8 94 57 01 00       	call   805e329 <test_errstr>
 8048b95:	89 c3                	mov    %eax,%ebx
 8048b97:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8048b9e:	00 00 00 
 8048ba1:	c7 44 24 04 90 e7 05 	movl   $0x805e790,0x4(%esp)
 8048ba8:	08 
 8048ba9:	c7 04 24 50 e7 05 08 	movl   $0x805e750,(%esp)
 8048bb0:	e8 53 11 01 00       	call   8059d08 <rename>
 8048bb5:	83 f8 ff             	cmp    $0xffffffff,%eax
 8048bb8:	0f 94 c0             	sete   %al
 8048bbb:	0f b6 c0             	movzbl %al,%eax
 8048bbe:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 8048bc5:	00 
 8048bc6:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048bca:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8048bd1:	08 
 8048bd2:	c7 44 24 0c 84 ea 05 	movl   $0x805ea84,0xc(%esp)
 8048bd9:	08 
 8048bda:	c7 44 24 08 09 01 00 	movl   $0x109,0x8(%esp)
 8048be1:	00 
 8048be2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048be9:	08 
 8048bea:	89 04 24             	mov    %eax,(%esp)
 8048bed:	e8 9e 59 01 00       	call   805e590 <_test_assert>
 8048bf2:	85 c0                	test   %eax,%eax
 8048bf4:	0f 84 81 00 00 00    	je     8048c7b <vfstest_notdir+0x87c>
 8048bfa:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8048c00:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048c05:	89 04 24             	mov    %eax,(%esp)
 8048c08:	e8 1c 57 01 00       	call   805e329 <test_errstr>
 8048c0d:	89 c6                	mov    %eax,%esi
 8048c0f:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 8048c16:	e8 0e 57 01 00       	call   805e329 <test_errstr>
 8048c1b:	89 c3                	mov    %eax,%ebx
 8048c1d:	c7 44 24 04 90 e7 05 	movl   $0x805e790,0x4(%esp)
 8048c24:	08 
 8048c25:	c7 04 24 50 e7 05 08 	movl   $0x805e750,(%esp)
 8048c2c:	e8 d7 10 01 00       	call   8059d08 <rename>
 8048c31:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048c36:	83 f8 14             	cmp    $0x14,%eax
 8048c39:	0f 94 c0             	sete   %al
 8048c3c:	0f b6 c0             	movzbl %al,%eax
 8048c3f:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8048c43:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8048c47:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 8048c4e:	00 
 8048c4f:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048c53:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8048c5a:	08 
 8048c5b:	c7 44 24 0c c8 ea 05 	movl   $0x805eac8,0xc(%esp)
 8048c62:	08 
 8048c63:	c7 44 24 08 09 01 00 	movl   $0x109,0x8(%esp)
 8048c6a:	00 
 8048c6b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048c72:	08 
 8048c73:	89 04 24             	mov    %eax,(%esp)
 8048c76:	e8 15 59 01 00       	call   805e590 <_test_assert>
        syscall_fail(rename("realdir/file/nope", "realdir/file3"), ENOTDIR);
 8048c7b:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 8048c82:	e8 a2 56 01 00       	call   805e329 <test_errstr>
 8048c87:	89 c3                	mov    %eax,%ebx
 8048c89:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8048c90:	00 00 00 
 8048c93:	c7 44 24 04 da e8 05 	movl   $0x805e8da,0x4(%esp)
 8048c9a:	08 
 8048c9b:	c7 04 24 90 e7 05 08 	movl   $0x805e790,(%esp)
 8048ca2:	e8 61 10 01 00       	call   8059d08 <rename>
 8048ca7:	83 f8 ff             	cmp    $0xffffffff,%eax
 8048caa:	0f 94 c0             	sete   %al
 8048cad:	0f b6 c0             	movzbl %al,%eax
 8048cb0:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 8048cb7:	00 
 8048cb8:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048cbc:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8048cc3:	08 
 8048cc4:	c7 44 24 0c 04 eb 05 	movl   $0x805eb04,0xc(%esp)
 8048ccb:	08 
 8048ccc:	c7 44 24 08 0a 01 00 	movl   $0x10a,0x8(%esp)
 8048cd3:	00 
 8048cd4:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048cdb:	08 
 8048cdc:	89 04 24             	mov    %eax,(%esp)
 8048cdf:	e8 ac 58 01 00       	call   805e590 <_test_assert>
 8048ce4:	85 c0                	test   %eax,%eax
 8048ce6:	0f 84 81 00 00 00    	je     8048d6d <vfstest_notdir+0x96e>
 8048cec:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8048cf2:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048cf7:	89 04 24             	mov    %eax,(%esp)
 8048cfa:	e8 2a 56 01 00       	call   805e329 <test_errstr>
 8048cff:	89 c6                	mov    %eax,%esi
 8048d01:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 8048d08:	e8 1c 56 01 00       	call   805e329 <test_errstr>
 8048d0d:	89 c3                	mov    %eax,%ebx
 8048d0f:	c7 44 24 04 da e8 05 	movl   $0x805e8da,0x4(%esp)
 8048d16:	08 
 8048d17:	c7 04 24 90 e7 05 08 	movl   $0x805e790,(%esp)
 8048d1e:	e8 e5 0f 01 00       	call   8059d08 <rename>
 8048d23:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048d28:	83 f8 14             	cmp    $0x14,%eax
 8048d2b:	0f 94 c0             	sete   %al
 8048d2e:	0f b6 c0             	movzbl %al,%eax
 8048d31:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8048d35:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8048d39:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 8048d40:	00 
 8048d41:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048d45:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8048d4c:	08 
 8048d4d:	c7 44 24 0c 48 eb 05 	movl   $0x805eb48,0xc(%esp)
 8048d54:	08 
 8048d55:	c7 44 24 08 0a 01 00 	movl   $0x10a,0x8(%esp)
 8048d5c:	00 
 8048d5d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048d64:	08 
 8048d65:	89 04 24             	mov    %eax,(%esp)
 8048d68:	e8 23 58 01 00       	call   805e590 <_test_assert>

        /* Cleanup */
        syscall_success(unlink("realdir/file"));
 8048d6d:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8048d73:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048d78:	89 04 24             	mov    %eax,(%esp)
 8048d7b:	e8 a9 55 01 00       	call   805e329 <test_errstr>
 8048d80:	89 c3                	mov    %eax,%ebx
 8048d82:	c7 04 24 01 e7 05 08 	movl   $0x805e701,(%esp)
 8048d89:	e8 b6 0e 01 00       	call   8059c44 <unlink>
 8048d8e:	f7 d0                	not    %eax
 8048d90:	c1 e8 1f             	shr    $0x1f,%eax
 8048d93:	0f b6 c0             	movzbl %al,%eax
 8048d96:	89 74 24 18          	mov    %esi,0x18(%esp)
 8048d9a:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048d9e:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8048da5:	08 
 8048da6:	c7 44 24 0c 84 eb 05 	movl   $0x805eb84,0xc(%esp)
 8048dad:	08 
 8048dae:	c7 44 24 08 0d 01 00 	movl   $0x10d,0x8(%esp)
 8048db5:	00 
 8048db6:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048dbd:	08 
 8048dbe:	89 04 24             	mov    %eax,(%esp)
 8048dc1:	e8 ca 57 01 00       	call   805e590 <_test_assert>
        syscall_success(unlink("realdir/file2"));
 8048dc6:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8048dcc:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048dd1:	89 04 24             	mov    %eax,(%esp)
 8048dd4:	e8 50 55 01 00       	call   805e329 <test_errstr>
 8048dd9:	89 c3                	mov    %eax,%ebx
 8048ddb:	c7 04 24 50 e7 05 08 	movl   $0x805e750,(%esp)
 8048de2:	e8 5d 0e 01 00       	call   8059c44 <unlink>
 8048de7:	f7 d0                	not    %eax
 8048de9:	c1 e8 1f             	shr    $0x1f,%eax
 8048dec:	0f b6 c0             	movzbl %al,%eax
 8048def:	89 74 24 18          	mov    %esi,0x18(%esp)
 8048df3:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048df7:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8048dfe:	08 
 8048dff:	c7 44 24 0c a4 eb 05 	movl   $0x805eba4,0xc(%esp)
 8048e06:	08 
 8048e07:	c7 44 24 08 0e 01 00 	movl   $0x10e,0x8(%esp)
 8048e0e:	00 
 8048e0f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048e16:	08 
 8048e17:	89 04 24             	mov    %eax,(%esp)
 8048e1a:	e8 71 57 01 00       	call   805e590 <_test_assert>
        syscall_success(rmdir("realdir"));
 8048e1f:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8048e25:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048e2a:	89 04 24             	mov    %eax,(%esp)
 8048e2d:	e8 f7 54 01 00       	call   805e329 <test_errstr>
 8048e32:	89 c3                	mov    %eax,%ebx
 8048e34:	c7 04 24 ab e6 05 08 	movl   $0x805e6ab,(%esp)
 8048e3b:	e8 ac 0d 01 00       	call   8059bec <rmdir>
 8048e40:	f7 d0                	not    %eax
 8048e42:	c1 e8 1f             	shr    $0x1f,%eax
 8048e45:	0f b6 c0             	movzbl %al,%eax
 8048e48:	89 74 24 18          	mov    %esi,0x18(%esp)
 8048e4c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048e50:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8048e57:	08 
 8048e58:	c7 44 24 0c c3 eb 05 	movl   $0x805ebc3,0xc(%esp)
 8048e5f:	08 
 8048e60:	c7 44 24 08 0f 01 00 	movl   $0x10f,0x8(%esp)
 8048e67:	00 
 8048e68:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048e6f:	08 
 8048e70:	89 04 24             	mov    %eax,(%esp)
 8048e73:	e8 18 57 01 00       	call   805e590 <_test_assert>
        test_fini("vfstest_notdir");
 8048e78:	c7 04 24 db eb 05 08 	movl   $0x805ebdb,(%esp)
 8048e7f:	e8 f7 53 01 00       	call   805e27b <test_fini>
}
 8048e84:	90                   	nop
 8048e85:	83 c4 7c             	add    $0x7c,%esp
 8048e88:	5b                   	pop    %ebx
 8048e89:	5e                   	pop    %esi
 8048e8a:	5f                   	pop    %edi
 8048e8b:	5d                   	pop    %ebp
 8048e8c:	c3                   	ret    

08048e8d <vfstest_stat>:

static void
vfstest_stat(void)
{
 8048e8d:	55                   	push   %ebp
 8048e8e:	89 e5                	mov    %esp,%ebp
 8048e90:	57                   	push   %edi
 8048e91:	56                   	push   %esi
 8048e92:	53                   	push   %ebx
 8048e93:	83 ec 7c             	sub    $0x7c,%esp
        int fd;
        struct stat s;

        syscall_success(mkdir("stat", 0));
 8048e96:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8048e9c:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048ea1:	89 04 24             	mov    %eax,(%esp)
 8048ea4:	e8 80 54 01 00       	call   805e329 <test_errstr>
 8048ea9:	89 c3                	mov    %eax,%ebx
 8048eab:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8048eb2:	00 
 8048eb3:	c7 04 24 ea eb 05 08 	movl   $0x805ebea,(%esp)
 8048eba:	e8 cf 0c 01 00       	call   8059b8e <mkdir>
 8048ebf:	f7 d0                	not    %eax
 8048ec1:	c1 e8 1f             	shr    $0x1f,%eax
 8048ec4:	0f b6 c0             	movzbl %al,%eax
 8048ec7:	89 74 24 18          	mov    %esi,0x18(%esp)
 8048ecb:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048ecf:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8048ed6:	08 
 8048ed7:	c7 44 24 0c ef eb 05 	movl   $0x805ebef,0xc(%esp)
 8048ede:	08 
 8048edf:	c7 44 24 08 19 01 00 	movl   $0x119,0x8(%esp)
 8048ee6:	00 
 8048ee7:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048eee:	08 
 8048eef:	89 04 24             	mov    %eax,(%esp)
 8048ef2:	e8 99 56 01 00       	call   805e590 <_test_assert>
        syscall_success(chdir("stat"));
 8048ef7:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8048efd:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048f02:	89 04 24             	mov    %eax,(%esp)
 8048f05:	e8 1f 54 01 00       	call   805e329 <test_errstr>
 8048f0a:	89 c3                	mov    %eax,%ebx
 8048f0c:	c7 04 24 ea eb 05 08 	movl   $0x805ebea,(%esp)
 8048f13:	e8 5c 0e 01 00       	call   8059d74 <chdir>
 8048f18:	f7 d0                	not    %eax
 8048f1a:	c1 e8 1f             	shr    $0x1f,%eax
 8048f1d:	0f b6 c0             	movzbl %al,%eax
 8048f20:	89 74 24 18          	mov    %esi,0x18(%esp)
 8048f24:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048f28:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8048f2f:	08 
 8048f30:	c7 44 24 0c 07 ec 05 	movl   $0x805ec07,0xc(%esp)
 8048f37:	08 
 8048f38:	c7 44 24 08 1a 01 00 	movl   $0x11a,0x8(%esp)
 8048f3f:	00 
 8048f40:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048f47:	08 
 8048f48:	89 04 24             	mov    %eax,(%esp)
 8048f4b:	e8 40 56 01 00       	call   805e590 <_test_assert>

        syscall_success(stat(".", &s));
 8048f50:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8048f56:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048f5b:	89 04 24             	mov    %eax,(%esp)
 8048f5e:	e8 c6 53 01 00       	call   805e329 <test_errstr>
 8048f63:	89 c3                	mov    %eax,%ebx
 8048f65:	8d 45 ac             	lea    -0x54(%ebp),%eax
 8048f68:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048f6c:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 8048f73:	e8 43 11 01 00       	call   805a0bb <stat>
 8048f78:	f7 d0                	not    %eax
 8048f7a:	c1 e8 1f             	shr    $0x1f,%eax
 8048f7d:	0f b6 c0             	movzbl %al,%eax
 8048f80:	89 74 24 18          	mov    %esi,0x18(%esp)
 8048f84:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8048f88:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8048f8f:	08 
 8048f90:	c7 44 24 0c 1c ec 05 	movl   $0x805ec1c,0xc(%esp)
 8048f97:	08 
 8048f98:	c7 44 24 08 1c 01 00 	movl   $0x11c,0x8(%esp)
 8048f9f:	00 
 8048fa0:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048fa7:	08 
 8048fa8:	89 04 24             	mov    %eax,(%esp)
 8048fab:	e8 e0 55 01 00       	call   805e590 <_test_assert>
        test_assert(S_ISDIR(s.st_mode), NULL);
 8048fb0:	8b 45 ac             	mov    -0x54(%ebp),%eax
 8048fb3:	25 00 ff 00 00       	and    $0xff00,%eax
 8048fb8:	3d 00 02 00 00       	cmp    $0x200,%eax
 8048fbd:	0f 94 c0             	sete   %al
 8048fc0:	0f b6 c0             	movzbl %al,%eax
 8048fc3:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8048fca:	00 
 8048fcb:	c7 44 24 0c 31 ec 05 	movl   $0x805ec31,0xc(%esp)
 8048fd2:	08 
 8048fd3:	c7 44 24 08 1d 01 00 	movl   $0x11d,0x8(%esp)
 8048fda:	00 
 8048fdb:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8048fe2:	08 
 8048fe3:	89 04 24             	mov    %eax,(%esp)
 8048fe6:	e8 a5 55 01 00       	call   805e590 <_test_assert>

        create_file("file");
 8048feb:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8048ff1:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8048ff6:	89 04 24             	mov    %eax,(%esp)
 8048ff9:	e8 2b 53 01 00       	call   805e329 <test_errstr>
 8048ffe:	89 c3                	mov    %eax,%ebx
 8049000:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 8049007:	00 
 8049008:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 804900f:	00 
 8049010:	c7 04 24 44 ec 05 08 	movl   $0x805ec44,(%esp)
 8049017:	e8 50 09 01 00       	call   805996c <open>
 804901c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 804901f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8049022:	f7 d0                	not    %eax
 8049024:	c1 e8 1f             	shr    $0x1f,%eax
 8049027:	0f b6 c0             	movzbl %al,%eax
 804902a:	89 74 24 18          	mov    %esi,0x18(%esp)
 804902e:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049032:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8049039:	08 
 804903a:	c7 44 24 0c 4c ec 05 	movl   $0x805ec4c,0xc(%esp)
 8049041:	08 
 8049042:	c7 44 24 08 1f 01 00 	movl   $0x11f,0x8(%esp)
 8049049:	00 
 804904a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049051:	08 
 8049052:	89 04 24             	mov    %eax,(%esp)
 8049055:	e8 36 55 01 00       	call   805e590 <_test_assert>
 804905a:	85 c0                	test   %eax,%eax
 804905c:	74 58                	je     80490b6 <vfstest_stat+0x229>
 804905e:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8049064:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049069:	89 04 24             	mov    %eax,(%esp)
 804906c:	e8 b8 52 01 00       	call   805e329 <test_errstr>
 8049071:	89 c3                	mov    %eax,%ebx
 8049073:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8049076:	89 04 24             	mov    %eax,(%esp)
 8049079:	e8 45 0a 01 00       	call   8059ac3 <close>
 804907e:	f7 d0                	not    %eax
 8049080:	c1 e8 1f             	shr    $0x1f,%eax
 8049083:	0f b6 c0             	movzbl %al,%eax
 8049086:	89 74 24 18          	mov    %esi,0x18(%esp)
 804908a:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804908e:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8049095:	08 
 8049096:	c7 44 24 0c 78 ec 05 	movl   $0x805ec78,0xc(%esp)
 804909d:	08 
 804909e:	c7 44 24 08 1f 01 00 	movl   $0x11f,0x8(%esp)
 80490a5:	00 
 80490a6:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80490ad:	08 
 80490ae:	89 04 24             	mov    %eax,(%esp)
 80490b1:	e8 da 54 01 00       	call   805e590 <_test_assert>
        syscall_success(stat("file", &s));
 80490b6:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80490bc:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80490c1:	89 04 24             	mov    %eax,(%esp)
 80490c4:	e8 60 52 01 00       	call   805e329 <test_errstr>
 80490c9:	89 c3                	mov    %eax,%ebx
 80490cb:	8d 45 ac             	lea    -0x54(%ebp),%eax
 80490ce:	89 44 24 04          	mov    %eax,0x4(%esp)
 80490d2:	c7 04 24 44 ec 05 08 	movl   $0x805ec44,(%esp)
 80490d9:	e8 dd 0f 01 00       	call   805a0bb <stat>
 80490de:	f7 d0                	not    %eax
 80490e0:	c1 e8 1f             	shr    $0x1f,%eax
 80490e3:	0f b6 c0             	movzbl %al,%eax
 80490e6:	89 74 24 18          	mov    %esi,0x18(%esp)
 80490ea:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80490ee:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80490f5:	08 
 80490f6:	c7 44 24 0c 8b ec 05 	movl   $0x805ec8b,0xc(%esp)
 80490fd:	08 
 80490fe:	c7 44 24 08 20 01 00 	movl   $0x120,0x8(%esp)
 8049105:	00 
 8049106:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804910d:	08 
 804910e:	89 04 24             	mov    %eax,(%esp)
 8049111:	e8 7a 54 01 00       	call   805e590 <_test_assert>
        test_assert(S_ISREG(s.st_mode), NULL);
 8049116:	8b 45 ac             	mov    -0x54(%ebp),%eax
 8049119:	25 00 ff 00 00       	and    $0xff00,%eax
 804911e:	3d 00 08 00 00       	cmp    $0x800,%eax
 8049123:	0f 94 c0             	sete   %al
 8049126:	0f b6 c0             	movzbl %al,%eax
 8049129:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8049130:	00 
 8049131:	c7 44 24 0c a3 ec 05 	movl   $0x805eca3,0xc(%esp)
 8049138:	08 
 8049139:	c7 44 24 08 21 01 00 	movl   $0x121,0x8(%esp)
 8049140:	00 
 8049141:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049148:	08 
 8049149:	89 04 24             	mov    %eax,(%esp)
 804914c:	e8 3f 54 01 00       	call   805e590 <_test_assert>

        /* file size is correct */
        syscall_success(fd = open("file", O_RDWR, 0));
 8049151:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8049157:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804915c:	89 04 24             	mov    %eax,(%esp)
 804915f:	e8 c5 51 01 00       	call   805e329 <test_errstr>
 8049164:	89 c3                	mov    %eax,%ebx
 8049166:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804916d:	00 
 804916e:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 8049175:	00 
 8049176:	c7 04 24 44 ec 05 08 	movl   $0x805ec44,(%esp)
 804917d:	e8 ea 07 01 00       	call   805996c <open>
 8049182:	89 45 e0             	mov    %eax,-0x20(%ebp)
 8049185:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8049188:	f7 d0                	not    %eax
 804918a:	c1 e8 1f             	shr    $0x1f,%eax
 804918d:	0f b6 c0             	movzbl %al,%eax
 8049190:	89 74 24 18          	mov    %esi,0x18(%esp)
 8049194:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049198:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804919f:	08 
 80491a0:	c7 44 24 0c b8 ec 05 	movl   $0x805ecb8,0xc(%esp)
 80491a7:	08 
 80491a8:	c7 44 24 08 24 01 00 	movl   $0x124,0x8(%esp)
 80491af:	00 
 80491b0:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80491b7:	08 
 80491b8:	89 04 24             	mov    %eax,(%esp)
 80491bb:	e8 d0 53 01 00       	call   805e590 <_test_assert>
        syscall_success(write(fd, "foobar", 6));
 80491c0:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80491c6:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80491cb:	89 04 24             	mov    %eax,(%esp)
 80491ce:	e8 56 51 01 00       	call   805e329 <test_errstr>
 80491d3:	89 c3                	mov    %eax,%ebx
 80491d5:	c7 44 24 08 06 00 00 	movl   $0x6,0x8(%esp)
 80491dc:	00 
 80491dd:	c7 44 24 04 d7 ec 05 	movl   $0x805ecd7,0x4(%esp)
 80491e4:	08 
 80491e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
 80491e8:	89 04 24             	mov    %eax,(%esp)
 80491eb:	e8 82 08 01 00       	call   8059a72 <write>
 80491f0:	f7 d0                	not    %eax
 80491f2:	c1 e8 1f             	shr    $0x1f,%eax
 80491f5:	0f b6 c0             	movzbl %al,%eax
 80491f8:	89 74 24 18          	mov    %esi,0x18(%esp)
 80491fc:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049200:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8049207:	08 
 8049208:	c7 44 24 0c de ec 05 	movl   $0x805ecde,0xc(%esp)
 804920f:	08 
 8049210:	c7 44 24 08 25 01 00 	movl   $0x125,0x8(%esp)
 8049217:	00 
 8049218:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804921f:	08 
 8049220:	89 04 24             	mov    %eax,(%esp)
 8049223:	e8 68 53 01 00       	call   805e590 <_test_assert>
        syscall_success(stat("file", &s));
 8049228:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804922e:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049233:	89 04 24             	mov    %eax,(%esp)
 8049236:	e8 ee 50 01 00       	call   805e329 <test_errstr>
 804923b:	89 c3                	mov    %eax,%ebx
 804923d:	8d 45 ac             	lea    -0x54(%ebp),%eax
 8049240:	89 44 24 04          	mov    %eax,0x4(%esp)
 8049244:	c7 04 24 44 ec 05 08 	movl   $0x805ec44,(%esp)
 804924b:	e8 6b 0e 01 00       	call   805a0bb <stat>
 8049250:	f7 d0                	not    %eax
 8049252:	c1 e8 1f             	shr    $0x1f,%eax
 8049255:	0f b6 c0             	movzbl %al,%eax
 8049258:	89 74 24 18          	mov    %esi,0x18(%esp)
 804925c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049260:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8049267:	08 
 8049268:	c7 44 24 0c 8b ec 05 	movl   $0x805ec8b,0xc(%esp)
 804926f:	08 
 8049270:	c7 44 24 08 26 01 00 	movl   $0x126,0x8(%esp)
 8049277:	00 
 8049278:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804927f:	08 
 8049280:	89 04 24             	mov    %eax,(%esp)
 8049283:	e8 08 53 01 00       	call   805e590 <_test_assert>
        test_assert(s.st_size == 6, "unexpected file size");
 8049288:	8b 45 c8             	mov    -0x38(%ebp),%eax
 804928b:	83 f8 06             	cmp    $0x6,%eax
 804928e:	0f 94 c0             	sete   %al
 8049291:	0f b6 c0             	movzbl %al,%eax
 8049294:	c7 44 24 10 fc ec 05 	movl   $0x805ecfc,0x10(%esp)
 804929b:	08 
 804929c:	c7 44 24 0c 11 ed 05 	movl   $0x805ed11,0xc(%esp)
 80492a3:	08 
 80492a4:	c7 44 24 08 27 01 00 	movl   $0x127,0x8(%esp)
 80492ab:	00 
 80492ac:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80492b3:	08 
 80492b4:	89 04 24             	mov    %eax,(%esp)
 80492b7:	e8 d4 52 01 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 80492bc:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80492c2:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80492c7:	89 04 24             	mov    %eax,(%esp)
 80492ca:	e8 5a 50 01 00       	call   805e329 <test_errstr>
 80492cf:	89 c3                	mov    %eax,%ebx
 80492d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
 80492d4:	89 04 24             	mov    %eax,(%esp)
 80492d7:	e8 e7 07 01 00       	call   8059ac3 <close>
 80492dc:	f7 d0                	not    %eax
 80492de:	c1 e8 1f             	shr    $0x1f,%eax
 80492e1:	0f b6 c0             	movzbl %al,%eax
 80492e4:	89 74 24 18          	mov    %esi,0x18(%esp)
 80492e8:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80492ec:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80492f3:	08 
 80492f4:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 80492fb:	08 
 80492fc:	c7 44 24 08 28 01 00 	movl   $0x128,0x8(%esp)
 8049303:	00 
 8049304:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804930b:	08 
 804930c:	89 04 24             	mov    %eax,(%esp)
 804930f:	e8 7c 52 01 00       	call   805e590 <_test_assert>

        /* error cases */
#ifdef __VM__
        syscall_fail(stat(".", NULL), EFAULT);
 8049314:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
 804931b:	e8 09 50 01 00       	call   805e329 <test_errstr>
 8049320:	89 c3                	mov    %eax,%ebx
 8049322:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8049329:	00 00 00 
 804932c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8049333:	00 
 8049334:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804933b:	e8 7b 0d 01 00       	call   805a0bb <stat>
 8049340:	83 f8 ff             	cmp    $0xffffffff,%eax
 8049343:	0f 94 c0             	sete   %al
 8049346:	0f b6 c0             	movzbl %al,%eax
 8049349:	c7 44 24 18 0e 00 00 	movl   $0xe,0x18(%esp)
 8049350:	00 
 8049351:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049355:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804935c:	08 
 804935d:	c7 44 24 0c 20 ed 05 	movl   $0x805ed20,0xc(%esp)
 8049364:	08 
 8049365:	c7 44 24 08 2c 01 00 	movl   $0x12c,0x8(%esp)
 804936c:	00 
 804936d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049374:	08 
 8049375:	89 04 24             	mov    %eax,(%esp)
 8049378:	e8 13 52 01 00       	call   805e590 <_test_assert>
 804937d:	85 c0                	test   %eax,%eax
 804937f:	0f 84 81 00 00 00    	je     8049406 <vfstest_stat+0x579>
 8049385:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804938b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049390:	89 04 24             	mov    %eax,(%esp)
 8049393:	e8 91 4f 01 00       	call   805e329 <test_errstr>
 8049398:	89 c6                	mov    %eax,%esi
 804939a:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
 80493a1:	e8 83 4f 01 00       	call   805e329 <test_errstr>
 80493a6:	89 c3                	mov    %eax,%ebx
 80493a8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80493af:	00 
 80493b0:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 80493b7:	e8 ff 0c 01 00       	call   805a0bb <stat>
 80493bc:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80493c1:	83 f8 0e             	cmp    $0xe,%eax
 80493c4:	0f 94 c0             	sete   %al
 80493c7:	0f b6 c0             	movzbl %al,%eax
 80493ca:	89 7c 24 20          	mov    %edi,0x20(%esp)
 80493ce:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 80493d2:	c7 44 24 18 0e 00 00 	movl   $0xe,0x18(%esp)
 80493d9:	00 
 80493da:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80493de:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 80493e5:	08 
 80493e6:	c7 44 24 0c 42 ed 05 	movl   $0x805ed42,0xc(%esp)
 80493ed:	08 
 80493ee:	c7 44 24 08 2c 01 00 	movl   $0x12c,0x8(%esp)
 80493f5:	00 
 80493f6:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80493fd:	08 
 80493fe:	89 04 24             	mov    %eax,(%esp)
 8049401:	e8 8a 51 01 00       	call   805e590 <_test_assert>
#endif
        syscall_fail(stat("noent", &s), ENOENT);
 8049406:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 804940d:	e8 17 4f 01 00       	call   805e329 <test_errstr>
 8049412:	89 c3                	mov    %eax,%ebx
 8049414:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804941b:	00 00 00 
 804941e:	8d 45 ac             	lea    -0x54(%ebp),%eax
 8049421:	89 44 24 04          	mov    %eax,0x4(%esp)
 8049425:	c7 04 24 5e ed 05 08 	movl   $0x805ed5e,(%esp)
 804942c:	e8 8a 0c 01 00       	call   805a0bb <stat>
 8049431:	83 f8 ff             	cmp    $0xffffffff,%eax
 8049434:	0f 94 c0             	sete   %al
 8049437:	0f b6 c0             	movzbl %al,%eax
 804943a:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 8049441:	00 
 8049442:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049446:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804944d:	08 
 804944e:	c7 44 24 0c 64 ed 05 	movl   $0x805ed64,0xc(%esp)
 8049455:	08 
 8049456:	c7 44 24 08 2e 01 00 	movl   $0x12e,0x8(%esp)
 804945d:	00 
 804945e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049465:	08 
 8049466:	89 04 24             	mov    %eax,(%esp)
 8049469:	e8 22 51 01 00       	call   805e590 <_test_assert>
 804946e:	85 c0                	test   %eax,%eax
 8049470:	0f 84 80 00 00 00    	je     80494f6 <vfstest_stat+0x669>
 8049476:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804947c:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049481:	89 04 24             	mov    %eax,(%esp)
 8049484:	e8 a0 4e 01 00       	call   805e329 <test_errstr>
 8049489:	89 c6                	mov    %eax,%esi
 804948b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 8049492:	e8 92 4e 01 00       	call   805e329 <test_errstr>
 8049497:	89 c3                	mov    %eax,%ebx
 8049499:	8d 45 ac             	lea    -0x54(%ebp),%eax
 804949c:	89 44 24 04          	mov    %eax,0x4(%esp)
 80494a0:	c7 04 24 5e ed 05 08 	movl   $0x805ed5e,(%esp)
 80494a7:	e8 0f 0c 01 00       	call   805a0bb <stat>
 80494ac:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80494b1:	83 f8 02             	cmp    $0x2,%eax
 80494b4:	0f 94 c0             	sete   %al
 80494b7:	0f b6 c0             	movzbl %al,%eax
 80494ba:	89 7c 24 20          	mov    %edi,0x20(%esp)
 80494be:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 80494c2:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 80494c9:	00 
 80494ca:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80494ce:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 80494d5:	08 
 80494d6:	c7 44 24 0c 8c ed 05 	movl   $0x805ed8c,0xc(%esp)
 80494dd:	08 
 80494de:	c7 44 24 08 2e 01 00 	movl   $0x12e,0x8(%esp)
 80494e5:	00 
 80494e6:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80494ed:	08 
 80494ee:	89 04 24             	mov    %eax,(%esp)
 80494f1:	e8 9a 50 01 00       	call   805e590 <_test_assert>

        syscall_success(chdir(".."));
 80494f6:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80494fc:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049501:	89 04 24             	mov    %eax,(%esp)
 8049504:	e8 20 4e 01 00       	call   805e329 <test_errstr>
 8049509:	89 c3                	mov    %eax,%ebx
 804950b:	c7 04 24 26 e6 05 08 	movl   $0x805e626,(%esp)
 8049512:	e8 5d 08 01 00       	call   8059d74 <chdir>
 8049517:	f7 d0                	not    %eax
 8049519:	c1 e8 1f             	shr    $0x1f,%eax
 804951c:	0f b6 c0             	movzbl %al,%eax
 804951f:	89 74 24 18          	mov    %esi,0x18(%esp)
 8049523:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049527:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804952e:	08 
 804952f:	c7 44 24 0c ac ed 05 	movl   $0x805edac,0xc(%esp)
 8049536:	08 
 8049537:	c7 44 24 08 30 01 00 	movl   $0x130,0x8(%esp)
 804953e:	00 
 804953f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049546:	08 
 8049547:	89 04 24             	mov    %eax,(%esp)
 804954a:	e8 41 50 01 00       	call   805e590 <_test_assert>
        test_fini("vfstest_stat");
 804954f:	c7 04 24 bf ed 05 08 	movl   $0x805edbf,(%esp)
 8049556:	e8 20 4d 01 00       	call   805e27b <test_fini>
}
 804955b:	90                   	nop
 804955c:	83 c4 7c             	add    $0x7c,%esp
 804955f:	5b                   	pop    %ebx
 8049560:	5e                   	pop    %esi
 8049561:	5f                   	pop    %edi
 8049562:	5d                   	pop    %ebp
 8049563:	c3                   	ret    

08049564 <vfstest_mkdir>:

static void
vfstest_mkdir(void)
{
 8049564:	55                   	push   %ebp
 8049565:	89 e5                	mov    %esp,%ebp
 8049567:	57                   	push   %edi
 8049568:	56                   	push   %esi
 8049569:	53                   	push   %ebx
 804956a:	83 ec 4c             	sub    $0x4c,%esp
        syscall_success(mkdir("mkdir", 0777));
 804956d:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8049573:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049578:	89 04 24             	mov    %eax,(%esp)
 804957b:	e8 a9 4d 01 00       	call   805e329 <test_errstr>
 8049580:	89 c3                	mov    %eax,%ebx
 8049582:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 8049589:	00 
 804958a:	c7 04 24 cc ed 05 08 	movl   $0x805edcc,(%esp)
 8049591:	e8 f8 05 01 00       	call   8059b8e <mkdir>
 8049596:	f7 d0                	not    %eax
 8049598:	c1 e8 1f             	shr    $0x1f,%eax
 804959b:	0f b6 c0             	movzbl %al,%eax
 804959e:	89 74 24 18          	mov    %esi,0x18(%esp)
 80495a2:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80495a6:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80495ad:	08 
 80495ae:	c7 44 24 0c d2 ed 05 	movl   $0x805edd2,0xc(%esp)
 80495b5:	08 
 80495b6:	c7 44 24 08 37 01 00 	movl   $0x137,0x8(%esp)
 80495bd:	00 
 80495be:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80495c5:	08 
 80495c6:	89 04 24             	mov    %eax,(%esp)
 80495c9:	e8 c2 4f 01 00       	call   805e590 <_test_assert>
        syscall_success(chdir("mkdir"));
 80495ce:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80495d4:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80495d9:	89 04 24             	mov    %eax,(%esp)
 80495dc:	e8 48 4d 01 00       	call   805e329 <test_errstr>
 80495e1:	89 c3                	mov    %eax,%ebx
 80495e3:	c7 04 24 cc ed 05 08 	movl   $0x805edcc,(%esp)
 80495ea:	e8 85 07 01 00       	call   8059d74 <chdir>
 80495ef:	f7 d0                	not    %eax
 80495f1:	c1 e8 1f             	shr    $0x1f,%eax
 80495f4:	0f b6 c0             	movzbl %al,%eax
 80495f7:	89 74 24 18          	mov    %esi,0x18(%esp)
 80495fb:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80495ff:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8049606:	08 
 8049607:	c7 44 24 0c ee ed 05 	movl   $0x805edee,0xc(%esp)
 804960e:	08 
 804960f:	c7 44 24 08 38 01 00 	movl   $0x138,0x8(%esp)
 8049616:	00 
 8049617:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804961e:	08 
 804961f:	89 04 24             	mov    %eax,(%esp)
 8049622:	e8 69 4f 01 00       	call   805e590 <_test_assert>

        /* mkdir an existing file or directory */
        create_file("file");
 8049627:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804962d:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049632:	89 04 24             	mov    %eax,(%esp)
 8049635:	e8 ef 4c 01 00       	call   805e329 <test_errstr>
 804963a:	89 c3                	mov    %eax,%ebx
 804963c:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 8049643:	00 
 8049644:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 804964b:	00 
 804964c:	c7 04 24 44 ec 05 08 	movl   $0x805ec44,(%esp)
 8049653:	e8 14 03 01 00       	call   805996c <open>
 8049658:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 804965b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 804965e:	f7 d0                	not    %eax
 8049660:	c1 e8 1f             	shr    $0x1f,%eax
 8049663:	0f b6 c0             	movzbl %al,%eax
 8049666:	89 74 24 18          	mov    %esi,0x18(%esp)
 804966a:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804966e:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8049675:	08 
 8049676:	c7 44 24 0c 4c ec 05 	movl   $0x805ec4c,0xc(%esp)
 804967d:	08 
 804967e:	c7 44 24 08 3b 01 00 	movl   $0x13b,0x8(%esp)
 8049685:	00 
 8049686:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804968d:	08 
 804968e:	89 04 24             	mov    %eax,(%esp)
 8049691:	e8 fa 4e 01 00       	call   805e590 <_test_assert>
 8049696:	85 c0                	test   %eax,%eax
 8049698:	74 58                	je     80496f2 <vfstest_mkdir+0x18e>
 804969a:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80496a0:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80496a5:	89 04 24             	mov    %eax,(%esp)
 80496a8:	e8 7c 4c 01 00       	call   805e329 <test_errstr>
 80496ad:	89 c3                	mov    %eax,%ebx
 80496af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80496b2:	89 04 24             	mov    %eax,(%esp)
 80496b5:	e8 09 04 01 00       	call   8059ac3 <close>
 80496ba:	f7 d0                	not    %eax
 80496bc:	c1 e8 1f             	shr    $0x1f,%eax
 80496bf:	0f b6 c0             	movzbl %al,%eax
 80496c2:	89 74 24 18          	mov    %esi,0x18(%esp)
 80496c6:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80496ca:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80496d1:	08 
 80496d2:	c7 44 24 0c 78 ec 05 	movl   $0x805ec78,0xc(%esp)
 80496d9:	08 
 80496da:	c7 44 24 08 3b 01 00 	movl   $0x13b,0x8(%esp)
 80496e1:	00 
 80496e2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80496e9:	08 
 80496ea:	89 04 24             	mov    %eax,(%esp)
 80496ed:	e8 9e 4e 01 00       	call   805e590 <_test_assert>
        syscall_fail(mkdir("file", 0777), EEXIST);
 80496f2:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
 80496f9:	e8 2b 4c 01 00       	call   805e329 <test_errstr>
 80496fe:	89 c3                	mov    %eax,%ebx
 8049700:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8049707:	00 00 00 
 804970a:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 8049711:	00 
 8049712:	c7 04 24 44 ec 05 08 	movl   $0x805ec44,(%esp)
 8049719:	e8 70 04 01 00       	call   8059b8e <mkdir>
 804971e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8049721:	0f 94 c0             	sete   %al
 8049724:	0f b6 c0             	movzbl %al,%eax
 8049727:	c7 44 24 18 11 00 00 	movl   $0x11,0x18(%esp)
 804972e:	00 
 804972f:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049733:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804973a:	08 
 804973b:	c7 44 24 0c 04 ee 05 	movl   $0x805ee04,0xc(%esp)
 8049742:	08 
 8049743:	c7 44 24 08 3c 01 00 	movl   $0x13c,0x8(%esp)
 804974a:	00 
 804974b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049752:	08 
 8049753:	89 04 24             	mov    %eax,(%esp)
 8049756:	e8 35 4e 01 00       	call   805e590 <_test_assert>
 804975b:	85 c0                	test   %eax,%eax
 804975d:	0f 84 81 00 00 00    	je     80497e4 <vfstest_mkdir+0x280>
 8049763:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8049769:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804976e:	89 04 24             	mov    %eax,(%esp)
 8049771:	e8 b3 4b 01 00       	call   805e329 <test_errstr>
 8049776:	89 c6                	mov    %eax,%esi
 8049778:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
 804977f:	e8 a5 4b 01 00       	call   805e329 <test_errstr>
 8049784:	89 c3                	mov    %eax,%ebx
 8049786:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 804978d:	00 
 804978e:	c7 04 24 44 ec 05 08 	movl   $0x805ec44,(%esp)
 8049795:	e8 f4 03 01 00       	call   8059b8e <mkdir>
 804979a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804979f:	83 f8 11             	cmp    $0x11,%eax
 80497a2:	0f 94 c0             	sete   %al
 80497a5:	0f b6 c0             	movzbl %al,%eax
 80497a8:	89 7c 24 20          	mov    %edi,0x20(%esp)
 80497ac:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 80497b0:	c7 44 24 18 11 00 00 	movl   $0x11,0x18(%esp)
 80497b7:	00 
 80497b8:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80497bc:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 80497c3:	08 
 80497c4:	c7 44 24 0c 30 ee 05 	movl   $0x805ee30,0xc(%esp)
 80497cb:	08 
 80497cc:	c7 44 24 08 3c 01 00 	movl   $0x13c,0x8(%esp)
 80497d3:	00 
 80497d4:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80497db:	08 
 80497dc:	89 04 24             	mov    %eax,(%esp)
 80497df:	e8 ac 4d 01 00       	call   805e590 <_test_assert>
        syscall_success(mkdir("dir", 0777));
 80497e4:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80497ea:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80497ef:	89 04 24             	mov    %eax,(%esp)
 80497f2:	e8 32 4b 01 00       	call   805e329 <test_errstr>
 80497f7:	89 c3                	mov    %eax,%ebx
 80497f9:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 8049800:	00 
 8049801:	c7 04 24 53 ee 05 08 	movl   $0x805ee53,(%esp)
 8049808:	e8 81 03 01 00       	call   8059b8e <mkdir>
 804980d:	f7 d0                	not    %eax
 804980f:	c1 e8 1f             	shr    $0x1f,%eax
 8049812:	0f b6 c0             	movzbl %al,%eax
 8049815:	89 74 24 18          	mov    %esi,0x18(%esp)
 8049819:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804981d:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8049824:	08 
 8049825:	c7 44 24 0c 57 ee 05 	movl   $0x805ee57,0xc(%esp)
 804982c:	08 
 804982d:	c7 44 24 08 3d 01 00 	movl   $0x13d,0x8(%esp)
 8049834:	00 
 8049835:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804983c:	08 
 804983d:	89 04 24             	mov    %eax,(%esp)
 8049840:	e8 4b 4d 01 00       	call   805e590 <_test_assert>
        syscall_fail(mkdir("dir", 0777), EEXIST);
 8049845:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
 804984c:	e8 d8 4a 01 00       	call   805e329 <test_errstr>
 8049851:	89 c3                	mov    %eax,%ebx
 8049853:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804985a:	00 00 00 
 804985d:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 8049864:	00 
 8049865:	c7 04 24 53 ee 05 08 	movl   $0x805ee53,(%esp)
 804986c:	e8 1d 03 01 00       	call   8059b8e <mkdir>
 8049871:	83 f8 ff             	cmp    $0xffffffff,%eax
 8049874:	0f 94 c0             	sete   %al
 8049877:	0f b6 c0             	movzbl %al,%eax
 804987a:	c7 44 24 18 11 00 00 	movl   $0x11,0x18(%esp)
 8049881:	00 
 8049882:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049886:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804988d:	08 
 804988e:	c7 44 24 0c 74 ee 05 	movl   $0x805ee74,0xc(%esp)
 8049895:	08 
 8049896:	c7 44 24 08 3e 01 00 	movl   $0x13e,0x8(%esp)
 804989d:	00 
 804989e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80498a5:	08 
 80498a6:	89 04 24             	mov    %eax,(%esp)
 80498a9:	e8 e2 4c 01 00       	call   805e590 <_test_assert>
 80498ae:	85 c0                	test   %eax,%eax
 80498b0:	0f 84 81 00 00 00    	je     8049937 <vfstest_mkdir+0x3d3>
 80498b6:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 80498bc:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80498c1:	89 04 24             	mov    %eax,(%esp)
 80498c4:	e8 60 4a 01 00       	call   805e329 <test_errstr>
 80498c9:	89 c6                	mov    %eax,%esi
 80498cb:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
 80498d2:	e8 52 4a 01 00       	call   805e329 <test_errstr>
 80498d7:	89 c3                	mov    %eax,%ebx
 80498d9:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 80498e0:	00 
 80498e1:	c7 04 24 53 ee 05 08 	movl   $0x805ee53,(%esp)
 80498e8:	e8 a1 02 01 00       	call   8059b8e <mkdir>
 80498ed:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80498f2:	83 f8 11             	cmp    $0x11,%eax
 80498f5:	0f 94 c0             	sete   %al
 80498f8:	0f b6 c0             	movzbl %al,%eax
 80498fb:	89 7c 24 20          	mov    %edi,0x20(%esp)
 80498ff:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8049903:	c7 44 24 18 11 00 00 	movl   $0x11,0x18(%esp)
 804990a:	00 
 804990b:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804990f:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8049916:	08 
 8049917:	c7 44 24 0c 9c ee 05 	movl   $0x805ee9c,0xc(%esp)
 804991e:	08 
 804991f:	c7 44 24 08 3e 01 00 	movl   $0x13e,0x8(%esp)
 8049926:	00 
 8049927:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804992e:	08 
 804992f:	89 04 24             	mov    %eax,(%esp)
 8049932:	e8 59 4c 01 00       	call   805e590 <_test_assert>

        /* mkdir an invalid path */
        syscall_fail(mkdir(LONGNAME, 0777), ENAMETOOLONG);
 8049937:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
 804993e:	e8 e6 49 01 00       	call   805e329 <test_errstr>
 8049943:	89 c3                	mov    %eax,%ebx
 8049945:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804994c:	00 00 00 
 804994f:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 8049956:	00 
 8049957:	c7 04 24 c0 ee 05 08 	movl   $0x805eec0,(%esp)
 804995e:	e8 2b 02 01 00       	call   8059b8e <mkdir>
 8049963:	83 f8 ff             	cmp    $0xffffffff,%eax
 8049966:	0f 94 c0             	sete   %al
 8049969:	0f b6 c0             	movzbl %al,%eax
 804996c:	c7 44 24 18 24 00 00 	movl   $0x24,0x18(%esp)
 8049973:	00 
 8049974:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049978:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804997f:	08 
 8049980:	c7 44 24 0c e4 ee 05 	movl   $0x805eee4,0xc(%esp)
 8049987:	08 
 8049988:	c7 44 24 08 41 01 00 	movl   $0x141,0x8(%esp)
 804998f:	00 
 8049990:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049997:	08 
 8049998:	89 04 24             	mov    %eax,(%esp)
 804999b:	e8 f0 4b 01 00       	call   805e590 <_test_assert>
 80499a0:	85 c0                	test   %eax,%eax
 80499a2:	0f 84 81 00 00 00    	je     8049a29 <vfstest_mkdir+0x4c5>
 80499a8:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 80499ae:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80499b3:	89 04 24             	mov    %eax,(%esp)
 80499b6:	e8 6e 49 01 00       	call   805e329 <test_errstr>
 80499bb:	89 c6                	mov    %eax,%esi
 80499bd:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
 80499c4:	e8 60 49 01 00       	call   805e329 <test_errstr>
 80499c9:	89 c3                	mov    %eax,%ebx
 80499cb:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 80499d2:	00 
 80499d3:	c7 04 24 c0 ee 05 08 	movl   $0x805eec0,(%esp)
 80499da:	e8 af 01 01 00       	call   8059b8e <mkdir>
 80499df:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80499e4:	83 f8 24             	cmp    $0x24,%eax
 80499e7:	0f 94 c0             	sete   %al
 80499ea:	0f b6 c0             	movzbl %al,%eax
 80499ed:	89 7c 24 20          	mov    %edi,0x20(%esp)
 80499f1:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 80499f5:	c7 44 24 18 24 00 00 	movl   $0x24,0x18(%esp)
 80499fc:	00 
 80499fd:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049a01:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8049a08:	08 
 8049a09:	c7 44 24 0c 2c ef 05 	movl   $0x805ef2c,0xc(%esp)
 8049a10:	08 
 8049a11:	c7 44 24 08 41 01 00 	movl   $0x141,0x8(%esp)
 8049a18:	00 
 8049a19:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049a20:	08 
 8049a21:	89 04 24             	mov    %eax,(%esp)
 8049a24:	e8 67 4b 01 00       	call   805e590 <_test_assert>
        syscall_fail(mkdir("file/dir", 0777), ENOTDIR);
 8049a29:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 8049a30:	e8 f4 48 01 00       	call   805e329 <test_errstr>
 8049a35:	89 c3                	mov    %eax,%ebx
 8049a37:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8049a3e:	00 00 00 
 8049a41:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 8049a48:	00 
 8049a49:	c7 04 24 6d ef 05 08 	movl   $0x805ef6d,(%esp)
 8049a50:	e8 39 01 01 00       	call   8059b8e <mkdir>
 8049a55:	83 f8 ff             	cmp    $0xffffffff,%eax
 8049a58:	0f 94 c0             	sete   %al
 8049a5b:	0f b6 c0             	movzbl %al,%eax
 8049a5e:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 8049a65:	00 
 8049a66:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049a6a:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8049a71:	08 
 8049a72:	c7 44 24 0c 78 ef 05 	movl   $0x805ef78,0xc(%esp)
 8049a79:	08 
 8049a7a:	c7 44 24 08 42 01 00 	movl   $0x142,0x8(%esp)
 8049a81:	00 
 8049a82:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049a89:	08 
 8049a8a:	89 04 24             	mov    %eax,(%esp)
 8049a8d:	e8 fe 4a 01 00       	call   805e590 <_test_assert>
 8049a92:	85 c0                	test   %eax,%eax
 8049a94:	0f 84 81 00 00 00    	je     8049b1b <vfstest_mkdir+0x5b7>
 8049a9a:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8049aa0:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049aa5:	89 04 24             	mov    %eax,(%esp)
 8049aa8:	e8 7c 48 01 00       	call   805e329 <test_errstr>
 8049aad:	89 c6                	mov    %eax,%esi
 8049aaf:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 8049ab6:	e8 6e 48 01 00       	call   805e329 <test_errstr>
 8049abb:	89 c3                	mov    %eax,%ebx
 8049abd:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 8049ac4:	00 
 8049ac5:	c7 04 24 6d ef 05 08 	movl   $0x805ef6d,(%esp)
 8049acc:	e8 bd 00 01 00       	call   8059b8e <mkdir>
 8049ad1:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049ad6:	83 f8 14             	cmp    $0x14,%eax
 8049ad9:	0f 94 c0             	sete   %al
 8049adc:	0f b6 c0             	movzbl %al,%eax
 8049adf:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8049ae3:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8049ae7:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 8049aee:	00 
 8049aef:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049af3:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8049afa:	08 
 8049afb:	c7 44 24 0c a8 ef 05 	movl   $0x805efa8,0xc(%esp)
 8049b02:	08 
 8049b03:	c7 44 24 08 42 01 00 	movl   $0x142,0x8(%esp)
 8049b0a:	00 
 8049b0b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049b12:	08 
 8049b13:	89 04 24             	mov    %eax,(%esp)
 8049b16:	e8 75 4a 01 00       	call   805e590 <_test_assert>
        syscall_fail(mkdir("noent/dir", 0777), ENOENT);
 8049b1b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 8049b22:	e8 02 48 01 00       	call   805e329 <test_errstr>
 8049b27:	89 c3                	mov    %eax,%ebx
 8049b29:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8049b30:	00 00 00 
 8049b33:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 8049b3a:	00 
 8049b3b:	c7 04 24 cf ef 05 08 	movl   $0x805efcf,(%esp)
 8049b42:	e8 47 00 01 00       	call   8059b8e <mkdir>
 8049b47:	83 f8 ff             	cmp    $0xffffffff,%eax
 8049b4a:	0f 94 c0             	sete   %al
 8049b4d:	0f b6 c0             	movzbl %al,%eax
 8049b50:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 8049b57:	00 
 8049b58:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049b5c:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8049b63:	08 
 8049b64:	c7 44 24 0c dc ef 05 	movl   $0x805efdc,0xc(%esp)
 8049b6b:	08 
 8049b6c:	c7 44 24 08 43 01 00 	movl   $0x143,0x8(%esp)
 8049b73:	00 
 8049b74:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049b7b:	08 
 8049b7c:	89 04 24             	mov    %eax,(%esp)
 8049b7f:	e8 0c 4a 01 00       	call   805e590 <_test_assert>
 8049b84:	85 c0                	test   %eax,%eax
 8049b86:	0f 84 81 00 00 00    	je     8049c0d <vfstest_mkdir+0x6a9>
 8049b8c:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8049b92:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049b97:	89 04 24             	mov    %eax,(%esp)
 8049b9a:	e8 8a 47 01 00       	call   805e329 <test_errstr>
 8049b9f:	89 c6                	mov    %eax,%esi
 8049ba1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 8049ba8:	e8 7c 47 01 00       	call   805e329 <test_errstr>
 8049bad:	89 c3                	mov    %eax,%ebx
 8049baf:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 8049bb6:	00 
 8049bb7:	c7 04 24 cf ef 05 08 	movl   $0x805efcf,(%esp)
 8049bbe:	e8 cb ff 00 00       	call   8059b8e <mkdir>
 8049bc3:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049bc8:	83 f8 02             	cmp    $0x2,%eax
 8049bcb:	0f 94 c0             	sete   %al
 8049bce:	0f b6 c0             	movzbl %al,%eax
 8049bd1:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8049bd5:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8049bd9:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 8049be0:	00 
 8049be1:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049be5:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8049bec:	08 
 8049bed:	c7 44 24 0c 0c f0 05 	movl   $0x805f00c,0xc(%esp)
 8049bf4:	08 
 8049bf5:	c7 44 24 08 43 01 00 	movl   $0x143,0x8(%esp)
 8049bfc:	00 
 8049bfd:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049c04:	08 
 8049c05:	89 04 24             	mov    %eax,(%esp)
 8049c08:	e8 83 49 01 00       	call   805e590 <_test_assert>
        syscall_fail(rmdir("file/dir"), ENOTDIR);
 8049c0d:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 8049c14:	e8 10 47 01 00       	call   805e329 <test_errstr>
 8049c19:	89 c3                	mov    %eax,%ebx
 8049c1b:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8049c22:	00 00 00 
 8049c25:	c7 04 24 6d ef 05 08 	movl   $0x805ef6d,(%esp)
 8049c2c:	e8 bb ff 00 00       	call   8059bec <rmdir>
 8049c31:	83 f8 ff             	cmp    $0xffffffff,%eax
 8049c34:	0f 94 c0             	sete   %al
 8049c37:	0f b6 c0             	movzbl %al,%eax
 8049c3a:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 8049c41:	00 
 8049c42:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049c46:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8049c4d:	08 
 8049c4e:	c7 44 24 0c 34 f0 05 	movl   $0x805f034,0xc(%esp)
 8049c55:	08 
 8049c56:	c7 44 24 08 44 01 00 	movl   $0x144,0x8(%esp)
 8049c5d:	00 
 8049c5e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049c65:	08 
 8049c66:	89 04 24             	mov    %eax,(%esp)
 8049c69:	e8 22 49 01 00       	call   805e590 <_test_assert>
 8049c6e:	85 c0                	test   %eax,%eax
 8049c70:	74 79                	je     8049ceb <vfstest_mkdir+0x787>
 8049c72:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8049c78:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049c7d:	89 04 24             	mov    %eax,(%esp)
 8049c80:	e8 a4 46 01 00       	call   805e329 <test_errstr>
 8049c85:	89 c6                	mov    %eax,%esi
 8049c87:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 8049c8e:	e8 96 46 01 00       	call   805e329 <test_errstr>
 8049c93:	89 c3                	mov    %eax,%ebx
 8049c95:	c7 04 24 6d ef 05 08 	movl   $0x805ef6d,(%esp)
 8049c9c:	e8 4b ff 00 00       	call   8059bec <rmdir>
 8049ca1:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049ca6:	83 f8 14             	cmp    $0x14,%eax
 8049ca9:	0f 94 c0             	sete   %al
 8049cac:	0f b6 c0             	movzbl %al,%eax
 8049caf:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8049cb3:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8049cb7:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 8049cbe:	00 
 8049cbf:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049cc3:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8049cca:	08 
 8049ccb:	c7 44 24 0c 5c f0 05 	movl   $0x805f05c,0xc(%esp)
 8049cd2:	08 
 8049cd3:	c7 44 24 08 44 01 00 	movl   $0x144,0x8(%esp)
 8049cda:	00 
 8049cdb:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049ce2:	08 
 8049ce3:	89 04 24             	mov    %eax,(%esp)
 8049ce6:	e8 a5 48 01 00       	call   805e590 <_test_assert>
        syscall_fail(rmdir("noent/dir"), ENOENT);
 8049ceb:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 8049cf2:	e8 32 46 01 00       	call   805e329 <test_errstr>
 8049cf7:	89 c3                	mov    %eax,%ebx
 8049cf9:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8049d00:	00 00 00 
 8049d03:	c7 04 24 cf ef 05 08 	movl   $0x805efcf,(%esp)
 8049d0a:	e8 dd fe 00 00       	call   8059bec <rmdir>
 8049d0f:	83 f8 ff             	cmp    $0xffffffff,%eax
 8049d12:	0f 94 c0             	sete   %al
 8049d15:	0f b6 c0             	movzbl %al,%eax
 8049d18:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 8049d1f:	00 
 8049d20:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049d24:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8049d2b:	08 
 8049d2c:	c7 44 24 0c 80 f0 05 	movl   $0x805f080,0xc(%esp)
 8049d33:	08 
 8049d34:	c7 44 24 08 45 01 00 	movl   $0x145,0x8(%esp)
 8049d3b:	00 
 8049d3c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049d43:	08 
 8049d44:	89 04 24             	mov    %eax,(%esp)
 8049d47:	e8 44 48 01 00       	call   805e590 <_test_assert>
 8049d4c:	85 c0                	test   %eax,%eax
 8049d4e:	74 79                	je     8049dc9 <vfstest_mkdir+0x865>
 8049d50:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8049d56:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049d5b:	89 04 24             	mov    %eax,(%esp)
 8049d5e:	e8 c6 45 01 00       	call   805e329 <test_errstr>
 8049d63:	89 c6                	mov    %eax,%esi
 8049d65:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 8049d6c:	e8 b8 45 01 00       	call   805e329 <test_errstr>
 8049d71:	89 c3                	mov    %eax,%ebx
 8049d73:	c7 04 24 cf ef 05 08 	movl   $0x805efcf,(%esp)
 8049d7a:	e8 6d fe 00 00       	call   8059bec <rmdir>
 8049d7f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049d84:	83 f8 02             	cmp    $0x2,%eax
 8049d87:	0f 94 c0             	sete   %al
 8049d8a:	0f b6 c0             	movzbl %al,%eax
 8049d8d:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8049d91:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8049d95:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 8049d9c:	00 
 8049d9d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049da1:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8049da8:	08 
 8049da9:	c7 44 24 0c a8 f0 05 	movl   $0x805f0a8,0xc(%esp)
 8049db0:	08 
 8049db1:	c7 44 24 08 45 01 00 	movl   $0x145,0x8(%esp)
 8049db8:	00 
 8049db9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049dc0:	08 
 8049dc1:	89 04 24             	mov    %eax,(%esp)
 8049dc4:	e8 c7 47 01 00       	call   805e590 <_test_assert>
        syscall_fail(rmdir("noent"), ENOENT);
 8049dc9:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 8049dd0:	e8 54 45 01 00       	call   805e329 <test_errstr>
 8049dd5:	89 c3                	mov    %eax,%ebx
 8049dd7:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8049dde:	00 00 00 
 8049de1:	c7 04 24 5e ed 05 08 	movl   $0x805ed5e,(%esp)
 8049de8:	e8 ff fd 00 00       	call   8059bec <rmdir>
 8049ded:	83 f8 ff             	cmp    $0xffffffff,%eax
 8049df0:	0f 94 c0             	sete   %al
 8049df3:	0f b6 c0             	movzbl %al,%eax
 8049df6:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 8049dfd:	00 
 8049dfe:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049e02:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8049e09:	08 
 8049e0a:	c7 44 24 0c cc f0 05 	movl   $0x805f0cc,0xc(%esp)
 8049e11:	08 
 8049e12:	c7 44 24 08 46 01 00 	movl   $0x146,0x8(%esp)
 8049e19:	00 
 8049e1a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049e21:	08 
 8049e22:	89 04 24             	mov    %eax,(%esp)
 8049e25:	e8 66 47 01 00       	call   805e590 <_test_assert>
 8049e2a:	85 c0                	test   %eax,%eax
 8049e2c:	74 79                	je     8049ea7 <vfstest_mkdir+0x943>
 8049e2e:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8049e34:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049e39:	89 04 24             	mov    %eax,(%esp)
 8049e3c:	e8 e8 44 01 00       	call   805e329 <test_errstr>
 8049e41:	89 c6                	mov    %eax,%esi
 8049e43:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 8049e4a:	e8 da 44 01 00       	call   805e329 <test_errstr>
 8049e4f:	89 c3                	mov    %eax,%ebx
 8049e51:	c7 04 24 5e ed 05 08 	movl   $0x805ed5e,(%esp)
 8049e58:	e8 8f fd 00 00       	call   8059bec <rmdir>
 8049e5d:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049e62:	83 f8 02             	cmp    $0x2,%eax
 8049e65:	0f 94 c0             	sete   %al
 8049e68:	0f b6 c0             	movzbl %al,%eax
 8049e6b:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8049e6f:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8049e73:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 8049e7a:	00 
 8049e7b:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049e7f:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8049e86:	08 
 8049e87:	c7 44 24 0c f0 f0 05 	movl   $0x805f0f0,0xc(%esp)
 8049e8e:	08 
 8049e8f:	c7 44 24 08 46 01 00 	movl   $0x146,0x8(%esp)
 8049e96:	00 
 8049e97:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049e9e:	08 
 8049e9f:	89 04 24             	mov    %eax,(%esp)
 8049ea2:	e8 e9 46 01 00       	call   805e590 <_test_assert>
        syscall_fail(rmdir("."), EINVAL);
 8049ea7:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 8049eae:	e8 76 44 01 00       	call   805e329 <test_errstr>
 8049eb3:	89 c3                	mov    %eax,%ebx
 8049eb5:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8049ebc:	00 00 00 
 8049ebf:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 8049ec6:	e8 21 fd 00 00       	call   8059bec <rmdir>
 8049ecb:	83 f8 ff             	cmp    $0xffffffff,%eax
 8049ece:	0f 94 c0             	sete   %al
 8049ed1:	0f b6 c0             	movzbl %al,%eax
 8049ed4:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 8049edb:	00 
 8049edc:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049ee0:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8049ee7:	08 
 8049ee8:	c7 44 24 0c 10 f1 05 	movl   $0x805f110,0xc(%esp)
 8049eef:	08 
 8049ef0:	c7 44 24 08 47 01 00 	movl   $0x147,0x8(%esp)
 8049ef7:	00 
 8049ef8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049eff:	08 
 8049f00:	89 04 24             	mov    %eax,(%esp)
 8049f03:	e8 88 46 01 00       	call   805e590 <_test_assert>
 8049f08:	85 c0                	test   %eax,%eax
 8049f0a:	74 79                	je     8049f85 <vfstest_mkdir+0xa21>
 8049f0c:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8049f12:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049f17:	89 04 24             	mov    %eax,(%esp)
 8049f1a:	e8 0a 44 01 00       	call   805e329 <test_errstr>
 8049f1f:	89 c6                	mov    %eax,%esi
 8049f21:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 8049f28:	e8 fc 43 01 00       	call   805e329 <test_errstr>
 8049f2d:	89 c3                	mov    %eax,%ebx
 8049f2f:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 8049f36:	e8 b1 fc 00 00       	call   8059bec <rmdir>
 8049f3b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049f40:	83 f8 16             	cmp    $0x16,%eax
 8049f43:	0f 94 c0             	sete   %al
 8049f46:	0f b6 c0             	movzbl %al,%eax
 8049f49:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8049f4d:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8049f51:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 8049f58:	00 
 8049f59:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049f5d:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8049f64:	08 
 8049f65:	c7 44 24 0c 30 f1 05 	movl   $0x805f130,0xc(%esp)
 8049f6c:	08 
 8049f6d:	c7 44 24 08 47 01 00 	movl   $0x147,0x8(%esp)
 8049f74:	00 
 8049f75:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049f7c:	08 
 8049f7d:	89 04 24             	mov    %eax,(%esp)
 8049f80:	e8 0b 46 01 00       	call   805e590 <_test_assert>
        syscall_fail(rmdir(".."), ENOTEMPTY);
 8049f85:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
 8049f8c:	e8 98 43 01 00       	call   805e329 <test_errstr>
 8049f91:	89 c3                	mov    %eax,%ebx
 8049f93:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8049f9a:	00 00 00 
 8049f9d:	c7 04 24 26 e6 05 08 	movl   $0x805e626,(%esp)
 8049fa4:	e8 43 fc 00 00       	call   8059bec <rmdir>
 8049fa9:	83 f8 ff             	cmp    $0xffffffff,%eax
 8049fac:	0f 94 c0             	sete   %al
 8049faf:	0f b6 c0             	movzbl %al,%eax
 8049fb2:	c7 44 24 18 27 00 00 	movl   $0x27,0x18(%esp)
 8049fb9:	00 
 8049fba:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8049fbe:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8049fc5:	08 
 8049fc6:	c7 44 24 0c 4c f1 05 	movl   $0x805f14c,0xc(%esp)
 8049fcd:	08 
 8049fce:	c7 44 24 08 48 01 00 	movl   $0x148,0x8(%esp)
 8049fd5:	00 
 8049fd6:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8049fdd:	08 
 8049fde:	89 04 24             	mov    %eax,(%esp)
 8049fe1:	e8 aa 45 01 00       	call   805e590 <_test_assert>
 8049fe6:	85 c0                	test   %eax,%eax
 8049fe8:	74 79                	je     804a063 <vfstest_mkdir+0xaff>
 8049fea:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8049ff0:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8049ff5:	89 04 24             	mov    %eax,(%esp)
 8049ff8:	e8 2c 43 01 00       	call   805e329 <test_errstr>
 8049ffd:	89 c6                	mov    %eax,%esi
 8049fff:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
 804a006:	e8 1e 43 01 00       	call   805e329 <test_errstr>
 804a00b:	89 c3                	mov    %eax,%ebx
 804a00d:	c7 04 24 26 e6 05 08 	movl   $0x805e626,(%esp)
 804a014:	e8 d3 fb 00 00       	call   8059bec <rmdir>
 804a019:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a01e:	83 f8 27             	cmp    $0x27,%eax
 804a021:	0f 94 c0             	sete   %al
 804a024:	0f b6 c0             	movzbl %al,%eax
 804a027:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804a02b:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804a02f:	c7 44 24 18 27 00 00 	movl   $0x27,0x18(%esp)
 804a036:	00 
 804a037:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a03b:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804a042:	08 
 804a043:	c7 44 24 0c 6d f1 05 	movl   $0x805f16d,0xc(%esp)
 804a04a:	08 
 804a04b:	c7 44 24 08 48 01 00 	movl   $0x148,0x8(%esp)
 804a052:	00 
 804a053:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a05a:	08 
 804a05b:	89 04 24             	mov    %eax,(%esp)
 804a05e:	e8 2d 45 01 00       	call   805e590 <_test_assert>
        syscall_fail(rmdir("dir/."), EINVAL);
 804a063:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 804a06a:	e8 ba 42 01 00       	call   805e329 <test_errstr>
 804a06f:	89 c3                	mov    %eax,%ebx
 804a071:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804a078:	00 00 00 
 804a07b:	c7 04 24 88 f1 05 08 	movl   $0x805f188,(%esp)
 804a082:	e8 65 fb 00 00       	call   8059bec <rmdir>
 804a087:	83 f8 ff             	cmp    $0xffffffff,%eax
 804a08a:	0f 94 c0             	sete   %al
 804a08d:	0f b6 c0             	movzbl %al,%eax
 804a090:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 804a097:	00 
 804a098:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a09c:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804a0a3:	08 
 804a0a4:	c7 44 24 0c 90 f1 05 	movl   $0x805f190,0xc(%esp)
 804a0ab:	08 
 804a0ac:	c7 44 24 08 49 01 00 	movl   $0x149,0x8(%esp)
 804a0b3:	00 
 804a0b4:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a0bb:	08 
 804a0bc:	89 04 24             	mov    %eax,(%esp)
 804a0bf:	e8 cc 44 01 00       	call   805e590 <_test_assert>
 804a0c4:	85 c0                	test   %eax,%eax
 804a0c6:	74 79                	je     804a141 <vfstest_mkdir+0xbdd>
 804a0c8:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804a0ce:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a0d3:	89 04 24             	mov    %eax,(%esp)
 804a0d6:	e8 4e 42 01 00       	call   805e329 <test_errstr>
 804a0db:	89 c6                	mov    %eax,%esi
 804a0dd:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 804a0e4:	e8 40 42 01 00       	call   805e329 <test_errstr>
 804a0e9:	89 c3                	mov    %eax,%ebx
 804a0eb:	c7 04 24 88 f1 05 08 	movl   $0x805f188,(%esp)
 804a0f2:	e8 f5 fa 00 00       	call   8059bec <rmdir>
 804a0f7:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a0fc:	83 f8 16             	cmp    $0x16,%eax
 804a0ff:	0f 94 c0             	sete   %al
 804a102:	0f b6 c0             	movzbl %al,%eax
 804a105:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804a109:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804a10d:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 804a114:	00 
 804a115:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a119:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804a120:	08 
 804a121:	c7 44 24 0c b4 f1 05 	movl   $0x805f1b4,0xc(%esp)
 804a128:	08 
 804a129:	c7 44 24 08 49 01 00 	movl   $0x149,0x8(%esp)
 804a130:	00 
 804a131:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a138:	08 
 804a139:	89 04 24             	mov    %eax,(%esp)
 804a13c:	e8 4f 44 01 00       	call   805e590 <_test_assert>
        syscall_fail(rmdir("dir/.."), ENOTEMPTY);
 804a141:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
 804a148:	e8 dc 41 01 00       	call   805e329 <test_errstr>
 804a14d:	89 c3                	mov    %eax,%ebx
 804a14f:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804a156:	00 00 00 
 804a159:	c7 04 24 d2 f1 05 08 	movl   $0x805f1d2,(%esp)
 804a160:	e8 87 fa 00 00       	call   8059bec <rmdir>
 804a165:	83 f8 ff             	cmp    $0xffffffff,%eax
 804a168:	0f 94 c0             	sete   %al
 804a16b:	0f b6 c0             	movzbl %al,%eax
 804a16e:	c7 44 24 18 27 00 00 	movl   $0x27,0x18(%esp)
 804a175:	00 
 804a176:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a17a:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804a181:	08 
 804a182:	c7 44 24 0c dc f1 05 	movl   $0x805f1dc,0xc(%esp)
 804a189:	08 
 804a18a:	c7 44 24 08 4a 01 00 	movl   $0x14a,0x8(%esp)
 804a191:	00 
 804a192:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a199:	08 
 804a19a:	89 04 24             	mov    %eax,(%esp)
 804a19d:	e8 ee 43 01 00       	call   805e590 <_test_assert>
 804a1a2:	85 c0                	test   %eax,%eax
 804a1a4:	74 79                	je     804a21f <vfstest_mkdir+0xcbb>
 804a1a6:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804a1ac:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a1b1:	89 04 24             	mov    %eax,(%esp)
 804a1b4:	e8 70 41 01 00       	call   805e329 <test_errstr>
 804a1b9:	89 c6                	mov    %eax,%esi
 804a1bb:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
 804a1c2:	e8 62 41 01 00       	call   805e329 <test_errstr>
 804a1c7:	89 c3                	mov    %eax,%ebx
 804a1c9:	c7 04 24 d2 f1 05 08 	movl   $0x805f1d2,(%esp)
 804a1d0:	e8 17 fa 00 00       	call   8059bec <rmdir>
 804a1d5:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a1da:	83 f8 27             	cmp    $0x27,%eax
 804a1dd:	0f 94 c0             	sete   %al
 804a1e0:	0f b6 c0             	movzbl %al,%eax
 804a1e3:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804a1e7:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804a1eb:	c7 44 24 18 27 00 00 	movl   $0x27,0x18(%esp)
 804a1f2:	00 
 804a1f3:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a1f7:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804a1fe:	08 
 804a1ff:	c7 44 24 0c 04 f2 05 	movl   $0x805f204,0xc(%esp)
 804a206:	08 
 804a207:	c7 44 24 08 4a 01 00 	movl   $0x14a,0x8(%esp)
 804a20e:	00 
 804a20f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a216:	08 
 804a217:	89 04 24             	mov    %eax,(%esp)
 804a21a:	e8 71 43 01 00       	call   805e590 <_test_assert>
        syscall_fail(rmdir("noent/."), ENOENT);
 804a21f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 804a226:	e8 fe 40 01 00       	call   805e329 <test_errstr>
 804a22b:	89 c3                	mov    %eax,%ebx
 804a22d:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804a234:	00 00 00 
 804a237:	c7 04 24 23 f2 05 08 	movl   $0x805f223,(%esp)
 804a23e:	e8 a9 f9 00 00       	call   8059bec <rmdir>
 804a243:	83 f8 ff             	cmp    $0xffffffff,%eax
 804a246:	0f 94 c0             	sete   %al
 804a249:	0f b6 c0             	movzbl %al,%eax
 804a24c:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 804a253:	00 
 804a254:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a258:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804a25f:	08 
 804a260:	c7 44 24 0c 2c f2 05 	movl   $0x805f22c,0xc(%esp)
 804a267:	08 
 804a268:	c7 44 24 08 4b 01 00 	movl   $0x14b,0x8(%esp)
 804a26f:	00 
 804a270:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a277:	08 
 804a278:	89 04 24             	mov    %eax,(%esp)
 804a27b:	e8 10 43 01 00       	call   805e590 <_test_assert>
 804a280:	85 c0                	test   %eax,%eax
 804a282:	74 79                	je     804a2fd <vfstest_mkdir+0xd99>
 804a284:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804a28a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a28f:	89 04 24             	mov    %eax,(%esp)
 804a292:	e8 92 40 01 00       	call   805e329 <test_errstr>
 804a297:	89 c6                	mov    %eax,%esi
 804a299:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 804a2a0:	e8 84 40 01 00       	call   805e329 <test_errstr>
 804a2a5:	89 c3                	mov    %eax,%ebx
 804a2a7:	c7 04 24 23 f2 05 08 	movl   $0x805f223,(%esp)
 804a2ae:	e8 39 f9 00 00       	call   8059bec <rmdir>
 804a2b3:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a2b8:	83 f8 02             	cmp    $0x2,%eax
 804a2bb:	0f 94 c0             	sete   %al
 804a2be:	0f b6 c0             	movzbl %al,%eax
 804a2c1:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804a2c5:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804a2c9:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 804a2d0:	00 
 804a2d1:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a2d5:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804a2dc:	08 
 804a2dd:	c7 44 24 0c 54 f2 05 	movl   $0x805f254,0xc(%esp)
 804a2e4:	08 
 804a2e5:	c7 44 24 08 4b 01 00 	movl   $0x14b,0x8(%esp)
 804a2ec:	00 
 804a2ed:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a2f4:	08 
 804a2f5:	89 04 24             	mov    %eax,(%esp)
 804a2f8:	e8 93 42 01 00       	call   805e590 <_test_assert>
        syscall_fail(rmdir("noent/.."), ENOENT);
 804a2fd:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 804a304:	e8 20 40 01 00       	call   805e329 <test_errstr>
 804a309:	89 c3                	mov    %eax,%ebx
 804a30b:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804a312:	00 00 00 
 804a315:	c7 04 24 73 f2 05 08 	movl   $0x805f273,(%esp)
 804a31c:	e8 cb f8 00 00       	call   8059bec <rmdir>
 804a321:	83 f8 ff             	cmp    $0xffffffff,%eax
 804a324:	0f 94 c0             	sete   %al
 804a327:	0f b6 c0             	movzbl %al,%eax
 804a32a:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 804a331:	00 
 804a332:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a336:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804a33d:	08 
 804a33e:	c7 44 24 0c 7c f2 05 	movl   $0x805f27c,0xc(%esp)
 804a345:	08 
 804a346:	c7 44 24 08 4c 01 00 	movl   $0x14c,0x8(%esp)
 804a34d:	00 
 804a34e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a355:	08 
 804a356:	89 04 24             	mov    %eax,(%esp)
 804a359:	e8 32 42 01 00       	call   805e590 <_test_assert>
 804a35e:	85 c0                	test   %eax,%eax
 804a360:	74 79                	je     804a3db <vfstest_mkdir+0xe77>
 804a362:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804a368:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a36d:	89 04 24             	mov    %eax,(%esp)
 804a370:	e8 b4 3f 01 00       	call   805e329 <test_errstr>
 804a375:	89 c6                	mov    %eax,%esi
 804a377:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 804a37e:	e8 a6 3f 01 00       	call   805e329 <test_errstr>
 804a383:	89 c3                	mov    %eax,%ebx
 804a385:	c7 04 24 73 f2 05 08 	movl   $0x805f273,(%esp)
 804a38c:	e8 5b f8 00 00       	call   8059bec <rmdir>
 804a391:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a396:	83 f8 02             	cmp    $0x2,%eax
 804a399:	0f 94 c0             	sete   %al
 804a39c:	0f b6 c0             	movzbl %al,%eax
 804a39f:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804a3a3:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804a3a7:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 804a3ae:	00 
 804a3af:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a3b3:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804a3ba:	08 
 804a3bb:	c7 44 24 0c a4 f2 05 	movl   $0x805f2a4,0xc(%esp)
 804a3c2:	08 
 804a3c3:	c7 44 24 08 4c 01 00 	movl   $0x14c,0x8(%esp)
 804a3ca:	00 
 804a3cb:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a3d2:	08 
 804a3d3:	89 04 24             	mov    %eax,(%esp)
 804a3d6:	e8 b5 41 01 00       	call   805e590 <_test_assert>

        /* unlink and rmdir the inappropriate types */
        syscall_fail(rmdir("file"), ENOTDIR);
 804a3db:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804a3e2:	e8 42 3f 01 00       	call   805e329 <test_errstr>
 804a3e7:	89 c3                	mov    %eax,%ebx
 804a3e9:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804a3f0:	00 00 00 
 804a3f3:	c7 04 24 44 ec 05 08 	movl   $0x805ec44,(%esp)
 804a3fa:	e8 ed f7 00 00       	call   8059bec <rmdir>
 804a3ff:	83 f8 ff             	cmp    $0xffffffff,%eax
 804a402:	0f 94 c0             	sete   %al
 804a405:	0f b6 c0             	movzbl %al,%eax
 804a408:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 804a40f:	00 
 804a410:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a414:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804a41b:	08 
 804a41c:	c7 44 24 0c c4 f2 05 	movl   $0x805f2c4,0xc(%esp)
 804a423:	08 
 804a424:	c7 44 24 08 4f 01 00 	movl   $0x14f,0x8(%esp)
 804a42b:	00 
 804a42c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a433:	08 
 804a434:	89 04 24             	mov    %eax,(%esp)
 804a437:	e8 54 41 01 00       	call   805e590 <_test_assert>
 804a43c:	85 c0                	test   %eax,%eax
 804a43e:	74 79                	je     804a4b9 <vfstest_mkdir+0xf55>
 804a440:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804a446:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a44b:	89 04 24             	mov    %eax,(%esp)
 804a44e:	e8 d6 3e 01 00       	call   805e329 <test_errstr>
 804a453:	89 c6                	mov    %eax,%esi
 804a455:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804a45c:	e8 c8 3e 01 00       	call   805e329 <test_errstr>
 804a461:	89 c3                	mov    %eax,%ebx
 804a463:	c7 04 24 44 ec 05 08 	movl   $0x805ec44,(%esp)
 804a46a:	e8 7d f7 00 00       	call   8059bec <rmdir>
 804a46f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a474:	83 f8 14             	cmp    $0x14,%eax
 804a477:	0f 94 c0             	sete   %al
 804a47a:	0f b6 c0             	movzbl %al,%eax
 804a47d:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804a481:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804a485:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 804a48c:	00 
 804a48d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a491:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804a498:	08 
 804a499:	c7 44 24 0c e7 f2 05 	movl   $0x805f2e7,0xc(%esp)
 804a4a0:	08 
 804a4a1:	c7 44 24 08 4f 01 00 	movl   $0x14f,0x8(%esp)
 804a4a8:	00 
 804a4a9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a4b0:	08 
 804a4b1:	89 04 24             	mov    %eax,(%esp)
 804a4b4:	e8 d7 40 01 00       	call   805e590 <_test_assert>
        syscall_fail(unlink("dir"), EPERM);
 804a4b9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 804a4c0:	e8 64 3e 01 00       	call   805e329 <test_errstr>
 804a4c5:	89 c3                	mov    %eax,%ebx
 804a4c7:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804a4ce:	00 00 00 
 804a4d1:	c7 04 24 53 ee 05 08 	movl   $0x805ee53,(%esp)
 804a4d8:	e8 67 f7 00 00       	call   8059c44 <unlink>
 804a4dd:	83 f8 ff             	cmp    $0xffffffff,%eax
 804a4e0:	0f 94 c0             	sete   %al
 804a4e3:	0f b6 c0             	movzbl %al,%eax
 804a4e6:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 804a4ed:	00 
 804a4ee:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a4f2:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804a4f9:	08 
 804a4fa:	c7 44 24 0c 04 f3 05 	movl   $0x805f304,0xc(%esp)
 804a501:	08 
 804a502:	c7 44 24 08 50 01 00 	movl   $0x150,0x8(%esp)
 804a509:	00 
 804a50a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a511:	08 
 804a512:	89 04 24             	mov    %eax,(%esp)
 804a515:	e8 76 40 01 00       	call   805e590 <_test_assert>
 804a51a:	85 c0                	test   %eax,%eax
 804a51c:	74 79                	je     804a597 <vfstest_mkdir+0x1033>
 804a51e:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804a524:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a529:	89 04 24             	mov    %eax,(%esp)
 804a52c:	e8 f8 3d 01 00       	call   805e329 <test_errstr>
 804a531:	89 c6                	mov    %eax,%esi
 804a533:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 804a53a:	e8 ea 3d 01 00       	call   805e329 <test_errstr>
 804a53f:	89 c3                	mov    %eax,%ebx
 804a541:	c7 04 24 53 ee 05 08 	movl   $0x805ee53,(%esp)
 804a548:	e8 f7 f6 00 00       	call   8059c44 <unlink>
 804a54d:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a552:	83 f8 01             	cmp    $0x1,%eax
 804a555:	0f 94 c0             	sete   %al
 804a558:	0f b6 c0             	movzbl %al,%eax
 804a55b:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804a55f:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804a563:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 804a56a:	00 
 804a56b:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a56f:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804a576:	08 
 804a577:	c7 44 24 0c 27 f3 05 	movl   $0x805f327,0xc(%esp)
 804a57e:	08 
 804a57f:	c7 44 24 08 50 01 00 	movl   $0x150,0x8(%esp)
 804a586:	00 
 804a587:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a58e:	08 
 804a58f:	89 04 24             	mov    %eax,(%esp)
 804a592:	e8 f9 3f 01 00       	call   805e590 <_test_assert>

        /* remove non-empty directory */
        create_file("dir/file");
 804a597:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804a59d:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a5a2:	89 04 24             	mov    %eax,(%esp)
 804a5a5:	e8 7f 3d 01 00       	call   805e329 <test_errstr>
 804a5aa:	89 c3                	mov    %eax,%ebx
 804a5ac:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 804a5b3:	00 
 804a5b4:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 804a5bb:	00 
 804a5bc:	c7 04 24 43 f3 05 08 	movl   $0x805f343,(%esp)
 804a5c3:	e8 a4 f3 00 00       	call   805996c <open>
 804a5c8:	89 45 e0             	mov    %eax,-0x20(%ebp)
 804a5cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
 804a5ce:	f7 d0                	not    %eax
 804a5d0:	c1 e8 1f             	shr    $0x1f,%eax
 804a5d3:	0f b6 c0             	movzbl %al,%eax
 804a5d6:	89 74 24 18          	mov    %esi,0x18(%esp)
 804a5da:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a5de:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804a5e5:	08 
 804a5e6:	c7 44 24 0c 4c f3 05 	movl   $0x805f34c,0xc(%esp)
 804a5ed:	08 
 804a5ee:	c7 44 24 08 53 01 00 	movl   $0x153,0x8(%esp)
 804a5f5:	00 
 804a5f6:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a5fd:	08 
 804a5fe:	89 04 24             	mov    %eax,(%esp)
 804a601:	e8 8a 3f 01 00       	call   805e590 <_test_assert>
 804a606:	85 c0                	test   %eax,%eax
 804a608:	74 58                	je     804a662 <vfstest_mkdir+0x10fe>
 804a60a:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804a610:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a615:	89 04 24             	mov    %eax,(%esp)
 804a618:	e8 0c 3d 01 00       	call   805e329 <test_errstr>
 804a61d:	89 c3                	mov    %eax,%ebx
 804a61f:	8b 45 e0             	mov    -0x20(%ebp),%eax
 804a622:	89 04 24             	mov    %eax,(%esp)
 804a625:	e8 99 f4 00 00       	call   8059ac3 <close>
 804a62a:	f7 d0                	not    %eax
 804a62c:	c1 e8 1f             	shr    $0x1f,%eax
 804a62f:	0f b6 c0             	movzbl %al,%eax
 804a632:	89 74 24 18          	mov    %esi,0x18(%esp)
 804a636:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a63a:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804a641:	08 
 804a642:	c7 44 24 0c 78 ec 05 	movl   $0x805ec78,0xc(%esp)
 804a649:	08 
 804a64a:	c7 44 24 08 53 01 00 	movl   $0x153,0x8(%esp)
 804a651:	00 
 804a652:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a659:	08 
 804a65a:	89 04 24             	mov    %eax,(%esp)
 804a65d:	e8 2e 3f 01 00       	call   805e590 <_test_assert>
        syscall_fail(rmdir("dir"), ENOTEMPTY);
 804a662:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
 804a669:	e8 bb 3c 01 00       	call   805e329 <test_errstr>
 804a66e:	89 c3                	mov    %eax,%ebx
 804a670:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804a677:	00 00 00 
 804a67a:	c7 04 24 53 ee 05 08 	movl   $0x805ee53,(%esp)
 804a681:	e8 66 f5 00 00       	call   8059bec <rmdir>
 804a686:	83 f8 ff             	cmp    $0xffffffff,%eax
 804a689:	0f 94 c0             	sete   %al
 804a68c:	0f b6 c0             	movzbl %al,%eax
 804a68f:	c7 44 24 18 27 00 00 	movl   $0x27,0x18(%esp)
 804a696:	00 
 804a697:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a69b:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804a6a2:	08 
 804a6a3:	c7 44 24 0c 7c f3 05 	movl   $0x805f37c,0xc(%esp)
 804a6aa:	08 
 804a6ab:	c7 44 24 08 54 01 00 	movl   $0x154,0x8(%esp)
 804a6b2:	00 
 804a6b3:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a6ba:	08 
 804a6bb:	89 04 24             	mov    %eax,(%esp)
 804a6be:	e8 cd 3e 01 00       	call   805e590 <_test_assert>
 804a6c3:	85 c0                	test   %eax,%eax
 804a6c5:	74 79                	je     804a740 <vfstest_mkdir+0x11dc>
 804a6c7:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804a6cd:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a6d2:	89 04 24             	mov    %eax,(%esp)
 804a6d5:	e8 4f 3c 01 00       	call   805e329 <test_errstr>
 804a6da:	89 c6                	mov    %eax,%esi
 804a6dc:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
 804a6e3:	e8 41 3c 01 00       	call   805e329 <test_errstr>
 804a6e8:	89 c3                	mov    %eax,%ebx
 804a6ea:	c7 04 24 53 ee 05 08 	movl   $0x805ee53,(%esp)
 804a6f1:	e8 f6 f4 00 00       	call   8059bec <rmdir>
 804a6f6:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a6fb:	83 f8 27             	cmp    $0x27,%eax
 804a6fe:	0f 94 c0             	sete   %al
 804a701:	0f b6 c0             	movzbl %al,%eax
 804a704:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804a708:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804a70c:	c7 44 24 18 27 00 00 	movl   $0x27,0x18(%esp)
 804a713:	00 
 804a714:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a718:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804a71f:	08 
 804a720:	c7 44 24 0c 9e f3 05 	movl   $0x805f39e,0xc(%esp)
 804a727:	08 
 804a728:	c7 44 24 08 54 01 00 	movl   $0x154,0x8(%esp)
 804a72f:	00 
 804a730:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a737:	08 
 804a738:	89 04 24             	mov    %eax,(%esp)
 804a73b:	e8 50 3e 01 00       	call   805e590 <_test_assert>

        /* remove empty directory */
        syscall_success(unlink("dir/file"));
 804a740:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804a746:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a74b:	89 04 24             	mov    %eax,(%esp)
 804a74e:	e8 d6 3b 01 00       	call   805e329 <test_errstr>
 804a753:	89 c3                	mov    %eax,%ebx
 804a755:	c7 04 24 43 f3 05 08 	movl   $0x805f343,(%esp)
 804a75c:	e8 e3 f4 00 00       	call   8059c44 <unlink>
 804a761:	f7 d0                	not    %eax
 804a763:	c1 e8 1f             	shr    $0x1f,%eax
 804a766:	0f b6 c0             	movzbl %al,%eax
 804a769:	89 74 24 18          	mov    %esi,0x18(%esp)
 804a76d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a771:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804a778:	08 
 804a779:	c7 44 24 0c ba f3 05 	movl   $0x805f3ba,0xc(%esp)
 804a780:	08 
 804a781:	c7 44 24 08 57 01 00 	movl   $0x157,0x8(%esp)
 804a788:	00 
 804a789:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a790:	08 
 804a791:	89 04 24             	mov    %eax,(%esp)
 804a794:	e8 f7 3d 01 00       	call   805e590 <_test_assert>
        syscall_success(rmdir("dir"));
 804a799:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804a79f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a7a4:	89 04 24             	mov    %eax,(%esp)
 804a7a7:	e8 7d 3b 01 00       	call   805e329 <test_errstr>
 804a7ac:	89 c3                	mov    %eax,%ebx
 804a7ae:	c7 04 24 53 ee 05 08 	movl   $0x805ee53,(%esp)
 804a7b5:	e8 32 f4 00 00       	call   8059bec <rmdir>
 804a7ba:	f7 d0                	not    %eax
 804a7bc:	c1 e8 1f             	shr    $0x1f,%eax
 804a7bf:	0f b6 c0             	movzbl %al,%eax
 804a7c2:	89 74 24 18          	mov    %esi,0x18(%esp)
 804a7c6:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a7ca:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804a7d1:	08 
 804a7d2:	c7 44 24 0c d4 f3 05 	movl   $0x805f3d4,0xc(%esp)
 804a7d9:	08 
 804a7da:	c7 44 24 08 58 01 00 	movl   $0x158,0x8(%esp)
 804a7e1:	00 
 804a7e2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a7e9:	08 
 804a7ea:	89 04 24             	mov    %eax,(%esp)
 804a7ed:	e8 9e 3d 01 00       	call   805e590 <_test_assert>

        syscall_success(chdir(".."));
 804a7f2:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804a7f8:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a7fd:	89 04 24             	mov    %eax,(%esp)
 804a800:	e8 24 3b 01 00       	call   805e329 <test_errstr>
 804a805:	89 c3                	mov    %eax,%ebx
 804a807:	c7 04 24 26 e6 05 08 	movl   $0x805e626,(%esp)
 804a80e:	e8 61 f5 00 00       	call   8059d74 <chdir>
 804a813:	f7 d0                	not    %eax
 804a815:	c1 e8 1f             	shr    $0x1f,%eax
 804a818:	0f b6 c0             	movzbl %al,%eax
 804a81b:	89 74 24 18          	mov    %esi,0x18(%esp)
 804a81f:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a823:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804a82a:	08 
 804a82b:	c7 44 24 0c ac ed 05 	movl   $0x805edac,0xc(%esp)
 804a832:	08 
 804a833:	c7 44 24 08 5a 01 00 	movl   $0x15a,0x8(%esp)
 804a83a:	00 
 804a83b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a842:	08 
 804a843:	89 04 24             	mov    %eax,(%esp)
 804a846:	e8 45 3d 01 00       	call   805e590 <_test_assert>
        test_fini("vfstest_mkdir");
 804a84b:	c7 04 24 e8 f3 05 08 	movl   $0x805f3e8,(%esp)
 804a852:	e8 24 3a 01 00       	call   805e27b <test_fini>
}
 804a857:	90                   	nop
 804a858:	83 c4 4c             	add    $0x4c,%esp
 804a85b:	5b                   	pop    %ebx
 804a85c:	5e                   	pop    %esi
 804a85d:	5f                   	pop    %edi
 804a85e:	5d                   	pop    %ebp
 804a85f:	c3                   	ret    

0804a860 <vfstest_chdir>:

static void
vfstest_chdir(void)
{
 804a860:	55                   	push   %ebp
 804a861:	89 e5                	mov    %esp,%ebp
 804a863:	57                   	push   %edi
 804a864:	56                   	push   %esi
 804a865:	53                   	push   %ebx
 804a866:	81 ec 7c 01 00 00    	sub    $0x17c,%esp

        struct stat ssrc, sdest, sparent, sdir;
        struct stat rsrc, rdir;

        /* chdir back and forth to CHDIR_TEST_DIR */
        syscall_success(mkdir(CHDIR_TEST_DIR, 0777));
 804a86c:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804a872:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a877:	89 04 24             	mov    %eax,(%esp)
 804a87a:	e8 aa 3a 01 00       	call   805e329 <test_errstr>
 804a87f:	89 c3                	mov    %eax,%ebx
 804a881:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 804a888:	00 
 804a889:	c7 04 24 f6 f3 05 08 	movl   $0x805f3f6,(%esp)
 804a890:	e8 f9 f2 00 00       	call   8059b8e <mkdir>
 804a895:	f7 d0                	not    %eax
 804a897:	c1 e8 1f             	shr    $0x1f,%eax
 804a89a:	0f b6 c0             	movzbl %al,%eax
 804a89d:	89 74 24 18          	mov    %esi,0x18(%esp)
 804a8a1:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a8a5:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804a8ac:	08 
 804a8ad:	c7 44 24 0c fc f3 05 	movl   $0x805f3fc,0xc(%esp)
 804a8b4:	08 
 804a8b5:	c7 44 24 08 67 01 00 	movl   $0x167,0x8(%esp)
 804a8bc:	00 
 804a8bd:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a8c4:	08 
 804a8c5:	89 04 24             	mov    %eax,(%esp)
 804a8c8:	e8 c3 3c 01 00       	call   805e590 <_test_assert>
        syscall_success(stat(".", &ssrc));
 804a8cd:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804a8d3:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a8d8:	89 04 24             	mov    %eax,(%esp)
 804a8db:	e8 49 3a 01 00       	call   805e329 <test_errstr>
 804a8e0:	89 c3                	mov    %eax,%ebx
 804a8e2:	8d 45 b0             	lea    -0x50(%ebp),%eax
 804a8e5:	89 44 24 04          	mov    %eax,0x4(%esp)
 804a8e9:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804a8f0:	e8 c6 f7 00 00       	call   805a0bb <stat>
 804a8f5:	f7 d0                	not    %eax
 804a8f7:	c1 e8 1f             	shr    $0x1f,%eax
 804a8fa:	0f b6 c0             	movzbl %al,%eax
 804a8fd:	89 74 24 18          	mov    %esi,0x18(%esp)
 804a901:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a905:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804a90c:	08 
 804a90d:	c7 44 24 0c 18 f4 05 	movl   $0x805f418,0xc(%esp)
 804a914:	08 
 804a915:	c7 44 24 08 68 01 00 	movl   $0x168,0x8(%esp)
 804a91c:	00 
 804a91d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a924:	08 
 804a925:	89 04 24             	mov    %eax,(%esp)
 804a928:	e8 63 3c 01 00       	call   805e590 <_test_assert>
        syscall_success(stat(CHDIR_TEST_DIR, &sdir));
 804a92d:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804a933:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a938:	89 04 24             	mov    %eax,(%esp)
 804a93b:	e8 e9 39 01 00       	call   805e329 <test_errstr>
 804a940:	89 c3                	mov    %eax,%ebx
 804a942:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
 804a948:	89 44 24 04          	mov    %eax,0x4(%esp)
 804a94c:	c7 04 24 f6 f3 05 08 	movl   $0x805f3f6,(%esp)
 804a953:	e8 63 f7 00 00       	call   805a0bb <stat>
 804a958:	f7 d0                	not    %eax
 804a95a:	c1 e8 1f             	shr    $0x1f,%eax
 804a95d:	0f b6 c0             	movzbl %al,%eax
 804a960:	89 74 24 18          	mov    %esi,0x18(%esp)
 804a964:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a968:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804a96f:	08 
 804a970:	c7 44 24 0c 30 f4 05 	movl   $0x805f430,0xc(%esp)
 804a977:	08 
 804a978:	c7 44 24 08 69 01 00 	movl   $0x169,0x8(%esp)
 804a97f:	00 
 804a980:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a987:	08 
 804a988:	89 04 24             	mov    %eax,(%esp)
 804a98b:	e8 00 3c 01 00       	call   805e590 <_test_assert>

        test_assert(ssrc.st_ino != sdir.st_ino, NULL);
 804a990:	8b 55 b4             	mov    -0x4c(%ebp),%edx
 804a993:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
 804a999:	39 c2                	cmp    %eax,%edx
 804a99b:	0f 95 c0             	setne  %al
 804a99e:	0f b6 c0             	movzbl %al,%eax
 804a9a1:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 804a9a8:	00 
 804a9a9:	c7 44 24 0c 4c f4 05 	movl   $0x805f44c,0xc(%esp)
 804a9b0:	08 
 804a9b1:	c7 44 24 08 6b 01 00 	movl   $0x16b,0x8(%esp)
 804a9b8:	00 
 804a9b9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804a9c0:	08 
 804a9c1:	89 04 24             	mov    %eax,(%esp)
 804a9c4:	e8 c7 3b 01 00       	call   805e590 <_test_assert>

        syscall_success(chdir(CHDIR_TEST_DIR));
 804a9c9:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804a9cf:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804a9d4:	89 04 24             	mov    %eax,(%esp)
 804a9d7:	e8 4d 39 01 00       	call   805e329 <test_errstr>
 804a9dc:	89 c3                	mov    %eax,%ebx
 804a9de:	c7 04 24 f6 f3 05 08 	movl   $0x805f3f6,(%esp)
 804a9e5:	e8 8a f3 00 00       	call   8059d74 <chdir>
 804a9ea:	f7 d0                	not    %eax
 804a9ec:	c1 e8 1f             	shr    $0x1f,%eax
 804a9ef:	0f b6 c0             	movzbl %al,%eax
 804a9f2:	89 74 24 18          	mov    %esi,0x18(%esp)
 804a9f6:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804a9fa:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804aa01:	08 
 804aa02:	c7 44 24 0c 67 f4 05 	movl   $0x805f467,0xc(%esp)
 804aa09:	08 
 804aa0a:	c7 44 24 08 6d 01 00 	movl   $0x16d,0x8(%esp)
 804aa11:	00 
 804aa12:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804aa19:	08 
 804aa1a:	89 04 24             	mov    %eax,(%esp)
 804aa1d:	e8 6e 3b 01 00       	call   805e590 <_test_assert>
        syscall_success(stat(".", &sdest));
 804aa22:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804aa28:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804aa2d:	89 04 24             	mov    %eax,(%esp)
 804aa30:	e8 f4 38 01 00       	call   805e329 <test_errstr>
 804aa35:	89 c3                	mov    %eax,%ebx
 804aa37:	8d 85 7c ff ff ff    	lea    -0x84(%ebp),%eax
 804aa3d:	89 44 24 04          	mov    %eax,0x4(%esp)
 804aa41:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804aa48:	e8 6e f6 00 00       	call   805a0bb <stat>
 804aa4d:	f7 d0                	not    %eax
 804aa4f:	c1 e8 1f             	shr    $0x1f,%eax
 804aa52:	0f b6 c0             	movzbl %al,%eax
 804aa55:	89 74 24 18          	mov    %esi,0x18(%esp)
 804aa59:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804aa5d:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804aa64:	08 
 804aa65:	c7 44 24 0c 7d f4 05 	movl   $0x805f47d,0xc(%esp)
 804aa6c:	08 
 804aa6d:	c7 44 24 08 6e 01 00 	movl   $0x16e,0x8(%esp)
 804aa74:	00 
 804aa75:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804aa7c:	08 
 804aa7d:	89 04 24             	mov    %eax,(%esp)
 804aa80:	e8 0b 3b 01 00       	call   805e590 <_test_assert>
        syscall_success(stat("..", &sparent));
 804aa85:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804aa8b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804aa90:	89 04 24             	mov    %eax,(%esp)
 804aa93:	e8 91 38 01 00       	call   805e329 <test_errstr>
 804aa98:	89 c3                	mov    %eax,%ebx
 804aa9a:	8d 85 48 ff ff ff    	lea    -0xb8(%ebp),%eax
 804aaa0:	89 44 24 04          	mov    %eax,0x4(%esp)
 804aaa4:	c7 04 24 26 e6 05 08 	movl   $0x805e626,(%esp)
 804aaab:	e8 0b f6 00 00       	call   805a0bb <stat>
 804aab0:	f7 d0                	not    %eax
 804aab2:	c1 e8 1f             	shr    $0x1f,%eax
 804aab5:	0f b6 c0             	movzbl %al,%eax
 804aab8:	89 74 24 18          	mov    %esi,0x18(%esp)
 804aabc:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804aac0:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804aac7:	08 
 804aac8:	c7 44 24 0c 96 f4 05 	movl   $0x805f496,0xc(%esp)
 804aacf:	08 
 804aad0:	c7 44 24 08 6f 01 00 	movl   $0x16f,0x8(%esp)
 804aad7:	00 
 804aad8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804aadf:	08 
 804aae0:	89 04 24             	mov    %eax,(%esp)
 804aae3:	e8 a8 3a 01 00       	call   805e590 <_test_assert>

        test_assert(sdest.st_ino == sdir.st_ino, NULL);
 804aae8:	8b 55 80             	mov    -0x80(%ebp),%edx
 804aaeb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
 804aaf1:	39 c2                	cmp    %eax,%edx
 804aaf3:	0f 94 c0             	sete   %al
 804aaf6:	0f b6 c0             	movzbl %al,%eax
 804aaf9:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 804ab00:	00 
 804ab01:	c7 44 24 0c b2 f4 05 	movl   $0x805f4b2,0xc(%esp)
 804ab08:	08 
 804ab09:	c7 44 24 08 71 01 00 	movl   $0x171,0x8(%esp)
 804ab10:	00 
 804ab11:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ab18:	08 
 804ab19:	89 04 24             	mov    %eax,(%esp)
 804ab1c:	e8 6f 3a 01 00       	call   805e590 <_test_assert>
        test_assert(ssrc.st_ino == sparent.st_ino, NULL);
 804ab21:	8b 55 b4             	mov    -0x4c(%ebp),%edx
 804ab24:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
 804ab2a:	39 c2                	cmp    %eax,%edx
 804ab2c:	0f 94 c0             	sete   %al
 804ab2f:	0f b6 c0             	movzbl %al,%eax
 804ab32:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 804ab39:	00 
 804ab3a:	c7 44 24 0c ce f4 05 	movl   $0x805f4ce,0xc(%esp)
 804ab41:	08 
 804ab42:	c7 44 24 08 72 01 00 	movl   $0x172,0x8(%esp)
 804ab49:	00 
 804ab4a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ab51:	08 
 804ab52:	89 04 24             	mov    %eax,(%esp)
 804ab55:	e8 36 3a 01 00       	call   805e590 <_test_assert>
        test_assert(ssrc.st_ino != sdest.st_ino, NULL);
 804ab5a:	8b 55 b4             	mov    -0x4c(%ebp),%edx
 804ab5d:	8b 45 80             	mov    -0x80(%ebp),%eax
 804ab60:	39 c2                	cmp    %eax,%edx
 804ab62:	0f 95 c0             	setne  %al
 804ab65:	0f b6 c0             	movzbl %al,%eax
 804ab68:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 804ab6f:	00 
 804ab70:	c7 44 24 0c ec f4 05 	movl   $0x805f4ec,0xc(%esp)
 804ab77:	08 
 804ab78:	c7 44 24 08 73 01 00 	movl   $0x173,0x8(%esp)
 804ab7f:	00 
 804ab80:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ab87:	08 
 804ab88:	89 04 24             	mov    %eax,(%esp)
 804ab8b:	e8 00 3a 01 00       	call   805e590 <_test_assert>

        syscall_success(chdir(".."));
 804ab90:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804ab96:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ab9b:	89 04 24             	mov    %eax,(%esp)
 804ab9e:	e8 86 37 01 00       	call   805e329 <test_errstr>
 804aba3:	89 c3                	mov    %eax,%ebx
 804aba5:	c7 04 24 26 e6 05 08 	movl   $0x805e626,(%esp)
 804abac:	e8 c3 f1 00 00       	call   8059d74 <chdir>
 804abb1:	f7 d0                	not    %eax
 804abb3:	c1 e8 1f             	shr    $0x1f,%eax
 804abb6:	0f b6 c0             	movzbl %al,%eax
 804abb9:	89 74 24 18          	mov    %esi,0x18(%esp)
 804abbd:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804abc1:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804abc8:	08 
 804abc9:	c7 44 24 0c ac ed 05 	movl   $0x805edac,0xc(%esp)
 804abd0:	08 
 804abd1:	c7 44 24 08 75 01 00 	movl   $0x175,0x8(%esp)
 804abd8:	00 
 804abd9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804abe0:	08 
 804abe1:	89 04 24             	mov    %eax,(%esp)
 804abe4:	e8 a7 39 01 00       	call   805e590 <_test_assert>
        syscall_success(stat(".", &rsrc));
 804abe9:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804abef:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804abf4:	89 04 24             	mov    %eax,(%esp)
 804abf7:	e8 2d 37 01 00       	call   805e329 <test_errstr>
 804abfc:	89 c3                	mov    %eax,%ebx
 804abfe:	8d 85 e0 fe ff ff    	lea    -0x120(%ebp),%eax
 804ac04:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ac08:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804ac0f:	e8 a7 f4 00 00       	call   805a0bb <stat>
 804ac14:	f7 d0                	not    %eax
 804ac16:	c1 e8 1f             	shr    $0x1f,%eax
 804ac19:	0f b6 c0             	movzbl %al,%eax
 804ac1c:	89 74 24 18          	mov    %esi,0x18(%esp)
 804ac20:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804ac24:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804ac2b:	08 
 804ac2c:	c7 44 24 0c 08 f5 05 	movl   $0x805f508,0xc(%esp)
 804ac33:	08 
 804ac34:	c7 44 24 08 76 01 00 	movl   $0x176,0x8(%esp)
 804ac3b:	00 
 804ac3c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ac43:	08 
 804ac44:	89 04 24             	mov    %eax,(%esp)
 804ac47:	e8 44 39 01 00       	call   805e590 <_test_assert>
        syscall_success(stat(CHDIR_TEST_DIR, &rdir));
 804ac4c:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804ac52:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ac57:	89 04 24             	mov    %eax,(%esp)
 804ac5a:	e8 ca 36 01 00       	call   805e329 <test_errstr>
 804ac5f:	89 c3                	mov    %eax,%ebx
 804ac61:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
 804ac67:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ac6b:	c7 04 24 f6 f3 05 08 	movl   $0x805f3f6,(%esp)
 804ac72:	e8 44 f4 00 00       	call   805a0bb <stat>
 804ac77:	f7 d0                	not    %eax
 804ac79:	c1 e8 1f             	shr    $0x1f,%eax
 804ac7c:	0f b6 c0             	movzbl %al,%eax
 804ac7f:	89 74 24 18          	mov    %esi,0x18(%esp)
 804ac83:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804ac87:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804ac8e:	08 
 804ac8f:	c7 44 24 0c 20 f5 05 	movl   $0x805f520,0xc(%esp)
 804ac96:	08 
 804ac97:	c7 44 24 08 77 01 00 	movl   $0x177,0x8(%esp)
 804ac9e:	00 
 804ac9f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804aca6:	08 
 804aca7:	89 04 24             	mov    %eax,(%esp)
 804acaa:	e8 e1 38 01 00       	call   805e590 <_test_assert>

        test_assert(rsrc.st_ino == ssrc.st_ino, NULL);
 804acaf:	8b 95 e4 fe ff ff    	mov    -0x11c(%ebp),%edx
 804acb5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
 804acb8:	39 c2                	cmp    %eax,%edx
 804acba:	0f 94 c0             	sete   %al
 804acbd:	0f b6 c0             	movzbl %al,%eax
 804acc0:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 804acc7:	00 
 804acc8:	c7 44 24 0c 3c f5 05 	movl   $0x805f53c,0xc(%esp)
 804accf:	08 
 804acd0:	c7 44 24 08 79 01 00 	movl   $0x179,0x8(%esp)
 804acd7:	00 
 804acd8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804acdf:	08 
 804ace0:	89 04 24             	mov    %eax,(%esp)
 804ace3:	e8 a8 38 01 00       	call   805e590 <_test_assert>
        test_assert(rdir.st_ino == sdir.st_ino, NULL);
 804ace8:	8b 95 b0 fe ff ff    	mov    -0x150(%ebp),%edx
 804acee:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
 804acf4:	39 c2                	cmp    %eax,%edx
 804acf6:	0f 94 c0             	sete   %al
 804acf9:	0f b6 c0             	movzbl %al,%eax
 804acfc:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 804ad03:	00 
 804ad04:	c7 44 24 0c 57 f5 05 	movl   $0x805f557,0xc(%esp)
 804ad0b:	08 
 804ad0c:	c7 44 24 08 7a 01 00 	movl   $0x17a,0x8(%esp)
 804ad13:	00 
 804ad14:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ad1b:	08 
 804ad1c:	89 04 24             	mov    %eax,(%esp)
 804ad1f:	e8 6c 38 01 00       	call   805e590 <_test_assert>

        /* can't chdir into non-directory */
        syscall_success(chdir(CHDIR_TEST_DIR));
 804ad24:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804ad2a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ad2f:	89 04 24             	mov    %eax,(%esp)
 804ad32:	e8 f2 35 01 00       	call   805e329 <test_errstr>
 804ad37:	89 c3                	mov    %eax,%ebx
 804ad39:	c7 04 24 f6 f3 05 08 	movl   $0x805f3f6,(%esp)
 804ad40:	e8 2f f0 00 00       	call   8059d74 <chdir>
 804ad45:	f7 d0                	not    %eax
 804ad47:	c1 e8 1f             	shr    $0x1f,%eax
 804ad4a:	0f b6 c0             	movzbl %al,%eax
 804ad4d:	89 74 24 18          	mov    %esi,0x18(%esp)
 804ad51:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804ad55:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804ad5c:	08 
 804ad5d:	c7 44 24 0c 67 f4 05 	movl   $0x805f467,0xc(%esp)
 804ad64:	08 
 804ad65:	c7 44 24 08 7d 01 00 	movl   $0x17d,0x8(%esp)
 804ad6c:	00 
 804ad6d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ad74:	08 
 804ad75:	89 04 24             	mov    %eax,(%esp)
 804ad78:	e8 13 38 01 00       	call   805e590 <_test_assert>
        create_file("file");
 804ad7d:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804ad83:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ad88:	89 04 24             	mov    %eax,(%esp)
 804ad8b:	e8 99 35 01 00       	call   805e329 <test_errstr>
 804ad90:	89 c3                	mov    %eax,%ebx
 804ad92:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 804ad99:	00 
 804ad9a:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 804ada1:	00 
 804ada2:	c7 04 24 44 ec 05 08 	movl   $0x805ec44,(%esp)
 804ada9:	e8 be eb 00 00       	call   805996c <open>
 804adae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 804adb1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 804adb4:	f7 d0                	not    %eax
 804adb6:	c1 e8 1f             	shr    $0x1f,%eax
 804adb9:	0f b6 c0             	movzbl %al,%eax
 804adbc:	89 74 24 18          	mov    %esi,0x18(%esp)
 804adc0:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804adc4:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804adcb:	08 
 804adcc:	c7 44 24 0c 4c ec 05 	movl   $0x805ec4c,0xc(%esp)
 804add3:	08 
 804add4:	c7 44 24 08 7e 01 00 	movl   $0x17e,0x8(%esp)
 804addb:	00 
 804addc:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ade3:	08 
 804ade4:	89 04 24             	mov    %eax,(%esp)
 804ade7:	e8 a4 37 01 00       	call   805e590 <_test_assert>
 804adec:	85 c0                	test   %eax,%eax
 804adee:	74 58                	je     804ae48 <vfstest_chdir+0x5e8>
 804adf0:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804adf6:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804adfb:	89 04 24             	mov    %eax,(%esp)
 804adfe:	e8 26 35 01 00       	call   805e329 <test_errstr>
 804ae03:	89 c3                	mov    %eax,%ebx
 804ae05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 804ae08:	89 04 24             	mov    %eax,(%esp)
 804ae0b:	e8 b3 ec 00 00       	call   8059ac3 <close>
 804ae10:	f7 d0                	not    %eax
 804ae12:	c1 e8 1f             	shr    $0x1f,%eax
 804ae15:	0f b6 c0             	movzbl %al,%eax
 804ae18:	89 74 24 18          	mov    %esi,0x18(%esp)
 804ae1c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804ae20:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804ae27:	08 
 804ae28:	c7 44 24 0c 78 ec 05 	movl   $0x805ec78,0xc(%esp)
 804ae2f:	08 
 804ae30:	c7 44 24 08 7e 01 00 	movl   $0x17e,0x8(%esp)
 804ae37:	00 
 804ae38:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ae3f:	08 
 804ae40:	89 04 24             	mov    %eax,(%esp)
 804ae43:	e8 48 37 01 00       	call   805e590 <_test_assert>
        syscall_fail(chdir("file"), ENOTDIR);
 804ae48:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804ae4f:	e8 d5 34 01 00       	call   805e329 <test_errstr>
 804ae54:	89 c3                	mov    %eax,%ebx
 804ae56:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804ae5d:	00 00 00 
 804ae60:	c7 04 24 44 ec 05 08 	movl   $0x805ec44,(%esp)
 804ae67:	e8 08 ef 00 00       	call   8059d74 <chdir>
 804ae6c:	83 f8 ff             	cmp    $0xffffffff,%eax
 804ae6f:	0f 94 c0             	sete   %al
 804ae72:	0f b6 c0             	movzbl %al,%eax
 804ae75:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 804ae7c:	00 
 804ae7d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804ae81:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804ae88:	08 
 804ae89:	c7 44 24 0c 74 f5 05 	movl   $0x805f574,0xc(%esp)
 804ae90:	08 
 804ae91:	c7 44 24 08 7f 01 00 	movl   $0x17f,0x8(%esp)
 804ae98:	00 
 804ae99:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804aea0:	08 
 804aea1:	89 04 24             	mov    %eax,(%esp)
 804aea4:	e8 e7 36 01 00       	call   805e590 <_test_assert>
 804aea9:	85 c0                	test   %eax,%eax
 804aeab:	74 79                	je     804af26 <vfstest_chdir+0x6c6>
 804aead:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804aeb3:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804aeb8:	89 04 24             	mov    %eax,(%esp)
 804aebb:	e8 69 34 01 00       	call   805e329 <test_errstr>
 804aec0:	89 c6                	mov    %eax,%esi
 804aec2:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804aec9:	e8 5b 34 01 00       	call   805e329 <test_errstr>
 804aece:	89 c3                	mov    %eax,%ebx
 804aed0:	c7 04 24 44 ec 05 08 	movl   $0x805ec44,(%esp)
 804aed7:	e8 98 ee 00 00       	call   8059d74 <chdir>
 804aedc:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804aee1:	83 f8 14             	cmp    $0x14,%eax
 804aee4:	0f 94 c0             	sete   %al
 804aee7:	0f b6 c0             	movzbl %al,%eax
 804aeea:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804aeee:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804aef2:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 804aef9:	00 
 804aefa:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804aefe:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804af05:	08 
 804af06:	c7 44 24 0c 97 f5 05 	movl   $0x805f597,0xc(%esp)
 804af0d:	08 
 804af0e:	c7 44 24 08 7f 01 00 	movl   $0x17f,0x8(%esp)
 804af15:	00 
 804af16:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804af1d:	08 
 804af1e:	89 04 24             	mov    %eax,(%esp)
 804af21:	e8 6a 36 01 00       	call   805e590 <_test_assert>
        syscall_fail(chdir("noent"), ENOENT);
 804af26:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 804af2d:	e8 f7 33 01 00       	call   805e329 <test_errstr>
 804af32:	89 c3                	mov    %eax,%ebx
 804af34:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804af3b:	00 00 00 
 804af3e:	c7 04 24 5e ed 05 08 	movl   $0x805ed5e,(%esp)
 804af45:	e8 2a ee 00 00       	call   8059d74 <chdir>
 804af4a:	83 f8 ff             	cmp    $0xffffffff,%eax
 804af4d:	0f 94 c0             	sete   %al
 804af50:	0f b6 c0             	movzbl %al,%eax
 804af53:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 804af5a:	00 
 804af5b:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804af5f:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804af66:	08 
 804af67:	c7 44 24 0c b4 f5 05 	movl   $0x805f5b4,0xc(%esp)
 804af6e:	08 
 804af6f:	c7 44 24 08 80 01 00 	movl   $0x180,0x8(%esp)
 804af76:	00 
 804af77:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804af7e:	08 
 804af7f:	89 04 24             	mov    %eax,(%esp)
 804af82:	e8 09 36 01 00       	call   805e590 <_test_assert>
 804af87:	85 c0                	test   %eax,%eax
 804af89:	74 79                	je     804b004 <vfstest_chdir+0x7a4>
 804af8b:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804af91:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804af96:	89 04 24             	mov    %eax,(%esp)
 804af99:	e8 8b 33 01 00       	call   805e329 <test_errstr>
 804af9e:	89 c6                	mov    %eax,%esi
 804afa0:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 804afa7:	e8 7d 33 01 00       	call   805e329 <test_errstr>
 804afac:	89 c3                	mov    %eax,%ebx
 804afae:	c7 04 24 5e ed 05 08 	movl   $0x805ed5e,(%esp)
 804afb5:	e8 ba ed 00 00       	call   8059d74 <chdir>
 804afba:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804afbf:	83 f8 02             	cmp    $0x2,%eax
 804afc2:	0f 94 c0             	sete   %al
 804afc5:	0f b6 c0             	movzbl %al,%eax
 804afc8:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804afcc:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804afd0:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 804afd7:	00 
 804afd8:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804afdc:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804afe3:	08 
 804afe4:	c7 44 24 0c d8 f5 05 	movl   $0x805f5d8,0xc(%esp)
 804afeb:	08 
 804afec:	c7 44 24 08 80 01 00 	movl   $0x180,0x8(%esp)
 804aff3:	00 
 804aff4:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804affb:	08 
 804affc:	89 04 24             	mov    %eax,(%esp)
 804afff:	e8 8c 35 01 00       	call   805e590 <_test_assert>
        syscall_success(chdir(".."));
 804b004:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804b00a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804b00f:	89 04 24             	mov    %eax,(%esp)
 804b012:	e8 12 33 01 00       	call   805e329 <test_errstr>
 804b017:	89 c3                	mov    %eax,%ebx
 804b019:	c7 04 24 26 e6 05 08 	movl   $0x805e626,(%esp)
 804b020:	e8 4f ed 00 00       	call   8059d74 <chdir>
 804b025:	f7 d0                	not    %eax
 804b027:	c1 e8 1f             	shr    $0x1f,%eax
 804b02a:	0f b6 c0             	movzbl %al,%eax
 804b02d:	89 74 24 18          	mov    %esi,0x18(%esp)
 804b031:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804b035:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804b03c:	08 
 804b03d:	c7 44 24 0c ac ed 05 	movl   $0x805edac,0xc(%esp)
 804b044:	08 
 804b045:	c7 44 24 08 81 01 00 	movl   $0x181,0x8(%esp)
 804b04c:	00 
 804b04d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b054:	08 
 804b055:	89 04 24             	mov    %eax,(%esp)
 804b058:	e8 33 35 01 00       	call   805e590 <_test_assert>
        test_fini("vfstest_chdir");
 804b05d:	c7 04 24 f5 f5 05 08 	movl   $0x805f5f5,(%esp)
 804b064:	e8 12 32 01 00       	call   805e27b <test_fini>
}
 804b069:	90                   	nop
 804b06a:	81 c4 7c 01 00 00    	add    $0x17c,%esp
 804b070:	5b                   	pop    %ebx
 804b071:	5e                   	pop    %esi
 804b072:	5f                   	pop    %edi
 804b073:	5d                   	pop    %ebp
 804b074:	c3                   	ret    

0804b075 <vfstest_paths>:

static void
vfstest_paths(void)
{
 804b075:	55                   	push   %ebp
 804b076:	89 e5                	mov    %esp,%ebp
 804b078:	57                   	push   %edi
 804b079:	56                   	push   %esi
 804b07a:	53                   	push   %ebx
 804b07b:	81 ec 8c 01 00 00    	sub    $0x18c,%esp
#define PATHS_TEST_DIR "paths"

        struct stat s;

        syscall_success(mkdir(PATHS_TEST_DIR, 0777));
 804b081:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804b087:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804b08c:	89 04 24             	mov    %eax,(%esp)
 804b08f:	e8 95 32 01 00       	call   805e329 <test_errstr>
 804b094:	89 c3                	mov    %eax,%ebx
 804b096:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 804b09d:	00 
 804b09e:	c7 04 24 03 f6 05 08 	movl   $0x805f603,(%esp)
 804b0a5:	e8 e4 ea 00 00       	call   8059b8e <mkdir>
 804b0aa:	f7 d0                	not    %eax
 804b0ac:	c1 e8 1f             	shr    $0x1f,%eax
 804b0af:	0f b6 c0             	movzbl %al,%eax
 804b0b2:	89 74 24 18          	mov    %esi,0x18(%esp)
 804b0b6:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804b0ba:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804b0c1:	08 
 804b0c2:	c7 44 24 0c 09 f6 05 	movl   $0x805f609,0xc(%esp)
 804b0c9:	08 
 804b0ca:	c7 44 24 08 8c 01 00 	movl   $0x18c,0x8(%esp)
 804b0d1:	00 
 804b0d2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b0d9:	08 
 804b0da:	89 04 24             	mov    %eax,(%esp)
 804b0dd:	e8 ae 34 01 00       	call   805e590 <_test_assert>
        syscall_success(chdir(PATHS_TEST_DIR));
 804b0e2:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804b0e8:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804b0ed:	89 04 24             	mov    %eax,(%esp)
 804b0f0:	e8 34 32 01 00       	call   805e329 <test_errstr>
 804b0f5:	89 c3                	mov    %eax,%ebx
 804b0f7:	c7 04 24 03 f6 05 08 	movl   $0x805f603,(%esp)
 804b0fe:	e8 71 ec 00 00       	call   8059d74 <chdir>
 804b103:	f7 d0                	not    %eax
 804b105:	c1 e8 1f             	shr    $0x1f,%eax
 804b108:	0f b6 c0             	movzbl %al,%eax
 804b10b:	89 74 24 18          	mov    %esi,0x18(%esp)
 804b10f:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804b113:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804b11a:	08 
 804b11b:	c7 44 24 0c 25 f6 05 	movl   $0x805f625,0xc(%esp)
 804b122:	08 
 804b123:	c7 44 24 08 8d 01 00 	movl   $0x18d,0x8(%esp)
 804b12a:	00 
 804b12b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b132:	08 
 804b133:	89 04 24             	mov    %eax,(%esp)
 804b136:	e8 55 34 01 00       	call   805e590 <_test_assert>

        syscall_fail(stat("", &s), EINVAL);
 804b13b:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 804b142:	e8 e2 31 01 00       	call   805e329 <test_errstr>
 804b147:	89 c3                	mov    %eax,%ebx
 804b149:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804b150:	00 00 00 
 804b153:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
 804b159:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b15d:	c7 04 24 3b f6 05 08 	movl   $0x805f63b,(%esp)
 804b164:	e8 52 ef 00 00       	call   805a0bb <stat>
 804b169:	83 f8 ff             	cmp    $0xffffffff,%eax
 804b16c:	0f 94 c0             	sete   %al
 804b16f:	0f b6 c0             	movzbl %al,%eax
 804b172:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 804b179:	00 
 804b17a:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804b17e:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804b185:	08 
 804b186:	c7 44 24 0c 3c f6 05 	movl   $0x805f63c,0xc(%esp)
 804b18d:	08 
 804b18e:	c7 44 24 08 8f 01 00 	movl   $0x18f,0x8(%esp)
 804b195:	00 
 804b196:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b19d:	08 
 804b19e:	89 04 24             	mov    %eax,(%esp)
 804b1a1:	e8 ea 33 01 00       	call   805e590 <_test_assert>
 804b1a6:	85 c0                	test   %eax,%eax
 804b1a8:	0f 84 83 00 00 00    	je     804b231 <vfstest_paths+0x1bc>
 804b1ae:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804b1b4:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804b1b9:	89 04 24             	mov    %eax,(%esp)
 804b1bc:	e8 68 31 01 00       	call   805e329 <test_errstr>
 804b1c1:	89 c6                	mov    %eax,%esi
 804b1c3:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 804b1ca:	e8 5a 31 01 00       	call   805e329 <test_errstr>
 804b1cf:	89 c3                	mov    %eax,%ebx
 804b1d1:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
 804b1d7:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b1db:	c7 04 24 3b f6 05 08 	movl   $0x805f63b,(%esp)
 804b1e2:	e8 d4 ee 00 00       	call   805a0bb <stat>
 804b1e7:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804b1ec:	83 f8 16             	cmp    $0x16,%eax
 804b1ef:	0f 94 c0             	sete   %al
 804b1f2:	0f b6 c0             	movzbl %al,%eax
 804b1f5:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804b1f9:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804b1fd:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 804b204:	00 
 804b205:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804b209:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804b210:	08 
 804b211:	c7 44 24 0c 5e f6 05 	movl   $0x805f65e,0xc(%esp)
 804b218:	08 
 804b219:	c7 44 24 08 8f 01 00 	movl   $0x18f,0x8(%esp)
 804b220:	00 
 804b221:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b228:	08 
 804b229:	89 04 24             	mov    %eax,(%esp)
 804b22c:	e8 5f 33 01 00       	call   805e590 <_test_assert>

        paths_equal(".", ".");
 804b231:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804b238:	e8 57 ce ff ff       	call   8048094 <makedirs>
 804b23d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 804b240:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 804b243:	89 04 24             	mov    %eax,(%esp)
 804b246:	e8 de 30 01 00       	call   805e329 <test_errstr>
 804b24b:	89 c2                	mov    %eax,%edx
 804b24d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
 804b251:	0f 94 c0             	sete   %al
 804b254:	0f b6 c0             	movzbl %al,%eax
 804b257:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b25b:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804b262:	08 
 804b263:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804b26a:	08 
 804b26b:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804b272:	08 
 804b273:	c7 44 24 08 91 01 00 	movl   $0x191,0x8(%esp)
 804b27a:	00 
 804b27b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b282:	08 
 804b283:	89 04 24             	mov    %eax,(%esp)
 804b286:	e8 05 33 01 00       	call   805e590 <_test_assert>
 804b28b:	85 c0                	test   %eax,%eax
 804b28d:	0f 84 3a 01 00 00    	je     804b3cd <vfstest_paths+0x358>
 804b293:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804b299:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b29d:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804b2a4:	e8 12 ee 00 00       	call   805a0bb <stat>
 804b2a9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 804b2ac:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804b2b1:	89 04 24             	mov    %eax,(%esp)
 804b2b4:	e8 70 30 01 00       	call   805e329 <test_errstr>
 804b2b9:	89 c2                	mov    %eax,%edx
 804b2bb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
 804b2bf:	0f 94 c0             	sete   %al
 804b2c2:	0f b6 c0             	movzbl %al,%eax
 804b2c5:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b2c9:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804b2d0:	08 
 804b2d1:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804b2d8:	08 
 804b2d9:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804b2e0:	08 
 804b2e1:	c7 44 24 08 91 01 00 	movl   $0x191,0x8(%esp)
 804b2e8:	00 
 804b2e9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b2f0:	08 
 804b2f1:	89 04 24             	mov    %eax,(%esp)
 804b2f4:	e8 97 32 01 00       	call   805e590 <_test_assert>
 804b2f9:	85 c0                	test   %eax,%eax
 804b2fb:	0f 84 cc 00 00 00    	je     804b3cd <vfstest_paths+0x358>
 804b301:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804b307:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b30b:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804b312:	e8 a4 ed 00 00       	call   805a0bb <stat>
 804b317:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 804b31a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804b31f:	89 04 24             	mov    %eax,(%esp)
 804b322:	e8 02 30 01 00       	call   805e329 <test_errstr>
 804b327:	89 c2                	mov    %eax,%edx
 804b329:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
 804b32d:	0f 94 c0             	sete   %al
 804b330:	0f b6 c0             	movzbl %al,%eax
 804b333:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b337:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804b33e:	08 
 804b33f:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804b346:	08 
 804b347:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804b34e:	08 
 804b34f:	c7 44 24 08 91 01 00 	movl   $0x191,0x8(%esp)
 804b356:	00 
 804b357:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b35e:	08 
 804b35f:	89 04 24             	mov    %eax,(%esp)
 804b362:	e8 29 32 01 00       	call   805e590 <_test_assert>
 804b367:	85 c0                	test   %eax,%eax
 804b369:	74 62                	je     804b3cd <vfstest_paths+0x358>
 804b36b:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804b371:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804b377:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804b37d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804b383:	39 c3                	cmp    %eax,%ebx
 804b385:	0f 94 c0             	sete   %al
 804b388:	0f b6 c0             	movzbl %al,%eax
 804b38b:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804b38f:	c7 44 24 1c 24 e6 05 	movl   $0x805e624,0x1c(%esp)
 804b396:	08 
 804b397:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b39b:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804b3a2:	08 
 804b3a3:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804b3aa:	08 
 804b3ab:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804b3b2:	08 
 804b3b3:	c7 44 24 08 91 01 00 	movl   $0x191,0x8(%esp)
 804b3ba:	00 
 804b3bb:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b3c2:	08 
 804b3c3:	89 04 24             	mov    %eax,(%esp)
 804b3c6:	e8 c5 31 01 00       	call   805e590 <_test_assert>
 804b3cb:	eb 01                	jmp    804b3ce <vfstest_paths+0x359>
 804b3cd:	90                   	nop
        paths_equal("1/2/3", "1/2/3");
 804b3ce:	c7 04 24 ee f6 05 08 	movl   $0x805f6ee,(%esp)
 804b3d5:	e8 ba cc ff ff       	call   8048094 <makedirs>
 804b3da:	89 45 e0             	mov    %eax,-0x20(%ebp)
 804b3dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
 804b3e0:	89 04 24             	mov    %eax,(%esp)
 804b3e3:	e8 41 2f 01 00       	call   805e329 <test_errstr>
 804b3e8:	89 c2                	mov    %eax,%edx
 804b3ea:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
 804b3ee:	0f 94 c0             	sete   %al
 804b3f1:	0f b6 c0             	movzbl %al,%eax
 804b3f4:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b3f8:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804b3ff:	08 
 804b400:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804b407:	08 
 804b408:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804b40f:	08 
 804b410:	c7 44 24 08 92 01 00 	movl   $0x192,0x8(%esp)
 804b417:	00 
 804b418:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b41f:	08 
 804b420:	89 04 24             	mov    %eax,(%esp)
 804b423:	e8 68 31 01 00       	call   805e590 <_test_assert>
 804b428:	85 c0                	test   %eax,%eax
 804b42a:	0f 84 3a 01 00 00    	je     804b56a <vfstest_paths+0x4f5>
 804b430:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804b436:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b43a:	c7 04 24 ee f6 05 08 	movl   $0x805f6ee,(%esp)
 804b441:	e8 75 ec 00 00       	call   805a0bb <stat>
 804b446:	89 45 e0             	mov    %eax,-0x20(%ebp)
 804b449:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804b44e:	89 04 24             	mov    %eax,(%esp)
 804b451:	e8 d3 2e 01 00       	call   805e329 <test_errstr>
 804b456:	89 c2                	mov    %eax,%edx
 804b458:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
 804b45c:	0f 94 c0             	sete   %al
 804b45f:	0f b6 c0             	movzbl %al,%eax
 804b462:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b466:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804b46d:	08 
 804b46e:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804b475:	08 
 804b476:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804b47d:	08 
 804b47e:	c7 44 24 08 92 01 00 	movl   $0x192,0x8(%esp)
 804b485:	00 
 804b486:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b48d:	08 
 804b48e:	89 04 24             	mov    %eax,(%esp)
 804b491:	e8 fa 30 01 00       	call   805e590 <_test_assert>
 804b496:	85 c0                	test   %eax,%eax
 804b498:	0f 84 cc 00 00 00    	je     804b56a <vfstest_paths+0x4f5>
 804b49e:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804b4a4:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b4a8:	c7 04 24 ee f6 05 08 	movl   $0x805f6ee,(%esp)
 804b4af:	e8 07 ec 00 00       	call   805a0bb <stat>
 804b4b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
 804b4b7:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804b4bc:	89 04 24             	mov    %eax,(%esp)
 804b4bf:	e8 65 2e 01 00       	call   805e329 <test_errstr>
 804b4c4:	89 c2                	mov    %eax,%edx
 804b4c6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
 804b4ca:	0f 94 c0             	sete   %al
 804b4cd:	0f b6 c0             	movzbl %al,%eax
 804b4d0:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b4d4:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804b4db:	08 
 804b4dc:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804b4e3:	08 
 804b4e4:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804b4eb:	08 
 804b4ec:	c7 44 24 08 92 01 00 	movl   $0x192,0x8(%esp)
 804b4f3:	00 
 804b4f4:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b4fb:	08 
 804b4fc:	89 04 24             	mov    %eax,(%esp)
 804b4ff:	e8 8c 30 01 00       	call   805e590 <_test_assert>
 804b504:	85 c0                	test   %eax,%eax
 804b506:	74 62                	je     804b56a <vfstest_paths+0x4f5>
 804b508:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804b50e:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804b514:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804b51a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804b520:	39 c3                	cmp    %eax,%ebx
 804b522:	0f 94 c0             	sete   %al
 804b525:	0f b6 c0             	movzbl %al,%eax
 804b528:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804b52c:	c7 44 24 1c ee f6 05 	movl   $0x805f6ee,0x1c(%esp)
 804b533:	08 
 804b534:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b538:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804b53f:	08 
 804b540:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804b547:	08 
 804b548:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804b54f:	08 
 804b550:	c7 44 24 08 92 01 00 	movl   $0x192,0x8(%esp)
 804b557:	00 
 804b558:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b55f:	08 
 804b560:	89 04 24             	mov    %eax,(%esp)
 804b563:	e8 28 30 01 00       	call   805e590 <_test_assert>
 804b568:	eb 01                	jmp    804b56b <vfstest_paths+0x4f6>
 804b56a:	90                   	nop
        paths_equal("4/5/6", "4/5/6");
 804b56b:	c7 04 24 f4 f6 05 08 	movl   $0x805f6f4,(%esp)
 804b572:	e8 1d cb ff ff       	call   8048094 <makedirs>
 804b577:	89 45 dc             	mov    %eax,-0x24(%ebp)
 804b57a:	8b 45 dc             	mov    -0x24(%ebp),%eax
 804b57d:	89 04 24             	mov    %eax,(%esp)
 804b580:	e8 a4 2d 01 00       	call   805e329 <test_errstr>
 804b585:	89 c2                	mov    %eax,%edx
 804b587:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
 804b58b:	0f 94 c0             	sete   %al
 804b58e:	0f b6 c0             	movzbl %al,%eax
 804b591:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b595:	c7 44 24 14 f4 f6 05 	movl   $0x805f6f4,0x14(%esp)
 804b59c:	08 
 804b59d:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804b5a4:	08 
 804b5a5:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804b5ac:	08 
 804b5ad:	c7 44 24 08 93 01 00 	movl   $0x193,0x8(%esp)
 804b5b4:	00 
 804b5b5:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b5bc:	08 
 804b5bd:	89 04 24             	mov    %eax,(%esp)
 804b5c0:	e8 cb 2f 01 00       	call   805e590 <_test_assert>
 804b5c5:	85 c0                	test   %eax,%eax
 804b5c7:	0f 84 3a 01 00 00    	je     804b707 <vfstest_paths+0x692>
 804b5cd:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804b5d3:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b5d7:	c7 04 24 f4 f6 05 08 	movl   $0x805f6f4,(%esp)
 804b5de:	e8 d8 ea 00 00       	call   805a0bb <stat>
 804b5e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
 804b5e6:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804b5eb:	89 04 24             	mov    %eax,(%esp)
 804b5ee:	e8 36 2d 01 00       	call   805e329 <test_errstr>
 804b5f3:	89 c2                	mov    %eax,%edx
 804b5f5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
 804b5f9:	0f 94 c0             	sete   %al
 804b5fc:	0f b6 c0             	movzbl %al,%eax
 804b5ff:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b603:	c7 44 24 14 f4 f6 05 	movl   $0x805f6f4,0x14(%esp)
 804b60a:	08 
 804b60b:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804b612:	08 
 804b613:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804b61a:	08 
 804b61b:	c7 44 24 08 93 01 00 	movl   $0x193,0x8(%esp)
 804b622:	00 
 804b623:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b62a:	08 
 804b62b:	89 04 24             	mov    %eax,(%esp)
 804b62e:	e8 5d 2f 01 00       	call   805e590 <_test_assert>
 804b633:	85 c0                	test   %eax,%eax
 804b635:	0f 84 cc 00 00 00    	je     804b707 <vfstest_paths+0x692>
 804b63b:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804b641:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b645:	c7 04 24 f4 f6 05 08 	movl   $0x805f6f4,(%esp)
 804b64c:	e8 6a ea 00 00       	call   805a0bb <stat>
 804b651:	89 45 dc             	mov    %eax,-0x24(%ebp)
 804b654:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804b659:	89 04 24             	mov    %eax,(%esp)
 804b65c:	e8 c8 2c 01 00       	call   805e329 <test_errstr>
 804b661:	89 c2                	mov    %eax,%edx
 804b663:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
 804b667:	0f 94 c0             	sete   %al
 804b66a:	0f b6 c0             	movzbl %al,%eax
 804b66d:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b671:	c7 44 24 14 f4 f6 05 	movl   $0x805f6f4,0x14(%esp)
 804b678:	08 
 804b679:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804b680:	08 
 804b681:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804b688:	08 
 804b689:	c7 44 24 08 93 01 00 	movl   $0x193,0x8(%esp)
 804b690:	00 
 804b691:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b698:	08 
 804b699:	89 04 24             	mov    %eax,(%esp)
 804b69c:	e8 ef 2e 01 00       	call   805e590 <_test_assert>
 804b6a1:	85 c0                	test   %eax,%eax
 804b6a3:	74 62                	je     804b707 <vfstest_paths+0x692>
 804b6a5:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804b6ab:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804b6b1:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804b6b7:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804b6bd:	39 c3                	cmp    %eax,%ebx
 804b6bf:	0f 94 c0             	sete   %al
 804b6c2:	0f b6 c0             	movzbl %al,%eax
 804b6c5:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804b6c9:	c7 44 24 1c f4 f6 05 	movl   $0x805f6f4,0x1c(%esp)
 804b6d0:	08 
 804b6d1:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b6d5:	c7 44 24 14 f4 f6 05 	movl   $0x805f6f4,0x14(%esp)
 804b6dc:	08 
 804b6dd:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804b6e4:	08 
 804b6e5:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804b6ec:	08 
 804b6ed:	c7 44 24 08 93 01 00 	movl   $0x193,0x8(%esp)
 804b6f4:	00 
 804b6f5:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b6fc:	08 
 804b6fd:	89 04 24             	mov    %eax,(%esp)
 804b700:	e8 8b 2e 01 00       	call   805e590 <_test_assert>
 804b705:	eb 01                	jmp    804b708 <vfstest_paths+0x693>
 804b707:	90                   	nop

        /* root directory */
        paths_equal("/", "/");
 804b708:	c7 04 24 fa f6 05 08 	movl   $0x805f6fa,(%esp)
 804b70f:	e8 80 c9 ff ff       	call   8048094 <makedirs>
 804b714:	89 45 d8             	mov    %eax,-0x28(%ebp)
 804b717:	8b 45 d8             	mov    -0x28(%ebp),%eax
 804b71a:	89 04 24             	mov    %eax,(%esp)
 804b71d:	e8 07 2c 01 00       	call   805e329 <test_errstr>
 804b722:	89 c2                	mov    %eax,%edx
 804b724:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
 804b728:	0f 94 c0             	sete   %al
 804b72b:	0f b6 c0             	movzbl %al,%eax
 804b72e:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b732:	c7 44 24 14 fa f6 05 	movl   $0x805f6fa,0x14(%esp)
 804b739:	08 
 804b73a:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804b741:	08 
 804b742:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804b749:	08 
 804b74a:	c7 44 24 08 96 01 00 	movl   $0x196,0x8(%esp)
 804b751:	00 
 804b752:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b759:	08 
 804b75a:	89 04 24             	mov    %eax,(%esp)
 804b75d:	e8 2e 2e 01 00       	call   805e590 <_test_assert>
 804b762:	85 c0                	test   %eax,%eax
 804b764:	0f 84 3a 01 00 00    	je     804b8a4 <vfstest_paths+0x82f>
 804b76a:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804b770:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b774:	c7 04 24 fa f6 05 08 	movl   $0x805f6fa,(%esp)
 804b77b:	e8 3b e9 00 00       	call   805a0bb <stat>
 804b780:	89 45 d8             	mov    %eax,-0x28(%ebp)
 804b783:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804b788:	89 04 24             	mov    %eax,(%esp)
 804b78b:	e8 99 2b 01 00       	call   805e329 <test_errstr>
 804b790:	89 c2                	mov    %eax,%edx
 804b792:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
 804b796:	0f 94 c0             	sete   %al
 804b799:	0f b6 c0             	movzbl %al,%eax
 804b79c:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b7a0:	c7 44 24 14 fa f6 05 	movl   $0x805f6fa,0x14(%esp)
 804b7a7:	08 
 804b7a8:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804b7af:	08 
 804b7b0:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804b7b7:	08 
 804b7b8:	c7 44 24 08 96 01 00 	movl   $0x196,0x8(%esp)
 804b7bf:	00 
 804b7c0:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b7c7:	08 
 804b7c8:	89 04 24             	mov    %eax,(%esp)
 804b7cb:	e8 c0 2d 01 00       	call   805e590 <_test_assert>
 804b7d0:	85 c0                	test   %eax,%eax
 804b7d2:	0f 84 cc 00 00 00    	je     804b8a4 <vfstest_paths+0x82f>
 804b7d8:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804b7de:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b7e2:	c7 04 24 fa f6 05 08 	movl   $0x805f6fa,(%esp)
 804b7e9:	e8 cd e8 00 00       	call   805a0bb <stat>
 804b7ee:	89 45 d8             	mov    %eax,-0x28(%ebp)
 804b7f1:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804b7f6:	89 04 24             	mov    %eax,(%esp)
 804b7f9:	e8 2b 2b 01 00       	call   805e329 <test_errstr>
 804b7fe:	89 c2                	mov    %eax,%edx
 804b800:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
 804b804:	0f 94 c0             	sete   %al
 804b807:	0f b6 c0             	movzbl %al,%eax
 804b80a:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b80e:	c7 44 24 14 fa f6 05 	movl   $0x805f6fa,0x14(%esp)
 804b815:	08 
 804b816:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804b81d:	08 
 804b81e:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804b825:	08 
 804b826:	c7 44 24 08 96 01 00 	movl   $0x196,0x8(%esp)
 804b82d:	00 
 804b82e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b835:	08 
 804b836:	89 04 24             	mov    %eax,(%esp)
 804b839:	e8 52 2d 01 00       	call   805e590 <_test_assert>
 804b83e:	85 c0                	test   %eax,%eax
 804b840:	74 62                	je     804b8a4 <vfstest_paths+0x82f>
 804b842:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804b848:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804b84e:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804b854:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804b85a:	39 c3                	cmp    %eax,%ebx
 804b85c:	0f 94 c0             	sete   %al
 804b85f:	0f b6 c0             	movzbl %al,%eax
 804b862:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804b866:	c7 44 24 1c fa f6 05 	movl   $0x805f6fa,0x1c(%esp)
 804b86d:	08 
 804b86e:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b872:	c7 44 24 14 fa f6 05 	movl   $0x805f6fa,0x14(%esp)
 804b879:	08 
 804b87a:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804b881:	08 
 804b882:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804b889:	08 
 804b88a:	c7 44 24 08 96 01 00 	movl   $0x196,0x8(%esp)
 804b891:	00 
 804b892:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b899:	08 
 804b89a:	89 04 24             	mov    %eax,(%esp)
 804b89d:	e8 ee 2c 01 00       	call   805e590 <_test_assert>
 804b8a2:	eb 01                	jmp    804b8a5 <vfstest_paths+0x830>
 804b8a4:	90                   	nop
        paths_equal("/", "/..");
 804b8a5:	c7 04 24 fa f6 05 08 	movl   $0x805f6fa,(%esp)
 804b8ac:	e8 e3 c7 ff ff       	call   8048094 <makedirs>
 804b8b1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 804b8b4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804b8b7:	89 04 24             	mov    %eax,(%esp)
 804b8ba:	e8 6a 2a 01 00       	call   805e329 <test_errstr>
 804b8bf:	89 c2                	mov    %eax,%edx
 804b8c1:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
 804b8c5:	0f 94 c0             	sete   %al
 804b8c8:	0f b6 c0             	movzbl %al,%eax
 804b8cb:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b8cf:	c7 44 24 14 fa f6 05 	movl   $0x805f6fa,0x14(%esp)
 804b8d6:	08 
 804b8d7:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804b8de:	08 
 804b8df:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804b8e6:	08 
 804b8e7:	c7 44 24 08 97 01 00 	movl   $0x197,0x8(%esp)
 804b8ee:	00 
 804b8ef:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b8f6:	08 
 804b8f7:	89 04 24             	mov    %eax,(%esp)
 804b8fa:	e8 91 2c 01 00       	call   805e590 <_test_assert>
 804b8ff:	85 c0                	test   %eax,%eax
 804b901:	0f 84 3a 01 00 00    	je     804ba41 <vfstest_paths+0x9cc>
 804b907:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804b90d:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b911:	c7 04 24 fa f6 05 08 	movl   $0x805f6fa,(%esp)
 804b918:	e8 9e e7 00 00       	call   805a0bb <stat>
 804b91d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 804b920:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804b925:	89 04 24             	mov    %eax,(%esp)
 804b928:	e8 fc 29 01 00       	call   805e329 <test_errstr>
 804b92d:	89 c2                	mov    %eax,%edx
 804b92f:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
 804b933:	0f 94 c0             	sete   %al
 804b936:	0f b6 c0             	movzbl %al,%eax
 804b939:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b93d:	c7 44 24 14 fa f6 05 	movl   $0x805f6fa,0x14(%esp)
 804b944:	08 
 804b945:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804b94c:	08 
 804b94d:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804b954:	08 
 804b955:	c7 44 24 08 97 01 00 	movl   $0x197,0x8(%esp)
 804b95c:	00 
 804b95d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b964:	08 
 804b965:	89 04 24             	mov    %eax,(%esp)
 804b968:	e8 23 2c 01 00       	call   805e590 <_test_assert>
 804b96d:	85 c0                	test   %eax,%eax
 804b96f:	0f 84 cc 00 00 00    	je     804ba41 <vfstest_paths+0x9cc>
 804b975:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804b97b:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b97f:	c7 04 24 fc f6 05 08 	movl   $0x805f6fc,(%esp)
 804b986:	e8 30 e7 00 00       	call   805a0bb <stat>
 804b98b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 804b98e:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804b993:	89 04 24             	mov    %eax,(%esp)
 804b996:	e8 8e 29 01 00       	call   805e329 <test_errstr>
 804b99b:	89 c2                	mov    %eax,%edx
 804b99d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
 804b9a1:	0f 94 c0             	sete   %al
 804b9a4:	0f b6 c0             	movzbl %al,%eax
 804b9a7:	89 54 24 18          	mov    %edx,0x18(%esp)
 804b9ab:	c7 44 24 14 fc f6 05 	movl   $0x805f6fc,0x14(%esp)
 804b9b2:	08 
 804b9b3:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804b9ba:	08 
 804b9bb:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804b9c2:	08 
 804b9c3:	c7 44 24 08 97 01 00 	movl   $0x197,0x8(%esp)
 804b9ca:	00 
 804b9cb:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804b9d2:	08 
 804b9d3:	89 04 24             	mov    %eax,(%esp)
 804b9d6:	e8 b5 2b 01 00       	call   805e590 <_test_assert>
 804b9db:	85 c0                	test   %eax,%eax
 804b9dd:	74 62                	je     804ba41 <vfstest_paths+0x9cc>
 804b9df:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804b9e5:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804b9eb:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804b9f1:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804b9f7:	39 c3                	cmp    %eax,%ebx
 804b9f9:	0f 94 c0             	sete   %al
 804b9fc:	0f b6 c0             	movzbl %al,%eax
 804b9ff:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804ba03:	c7 44 24 1c fc f6 05 	movl   $0x805f6fc,0x1c(%esp)
 804ba0a:	08 
 804ba0b:	89 54 24 18          	mov    %edx,0x18(%esp)
 804ba0f:	c7 44 24 14 fa f6 05 	movl   $0x805f6fa,0x14(%esp)
 804ba16:	08 
 804ba17:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804ba1e:	08 
 804ba1f:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804ba26:	08 
 804ba27:	c7 44 24 08 97 01 00 	movl   $0x197,0x8(%esp)
 804ba2e:	00 
 804ba2f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ba36:	08 
 804ba37:	89 04 24             	mov    %eax,(%esp)
 804ba3a:	e8 51 2b 01 00       	call   805e590 <_test_assert>
 804ba3f:	eb 01                	jmp    804ba42 <vfstest_paths+0x9cd>
 804ba41:	90                   	nop
        paths_equal("/", "/../");
 804ba42:	c7 04 24 fa f6 05 08 	movl   $0x805f6fa,(%esp)
 804ba49:	e8 46 c6 ff ff       	call   8048094 <makedirs>
 804ba4e:	89 45 d0             	mov    %eax,-0x30(%ebp)
 804ba51:	8b 45 d0             	mov    -0x30(%ebp),%eax
 804ba54:	89 04 24             	mov    %eax,(%esp)
 804ba57:	e8 cd 28 01 00       	call   805e329 <test_errstr>
 804ba5c:	89 c2                	mov    %eax,%edx
 804ba5e:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
 804ba62:	0f 94 c0             	sete   %al
 804ba65:	0f b6 c0             	movzbl %al,%eax
 804ba68:	89 54 24 18          	mov    %edx,0x18(%esp)
 804ba6c:	c7 44 24 14 fa f6 05 	movl   $0x805f6fa,0x14(%esp)
 804ba73:	08 
 804ba74:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804ba7b:	08 
 804ba7c:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804ba83:	08 
 804ba84:	c7 44 24 08 98 01 00 	movl   $0x198,0x8(%esp)
 804ba8b:	00 
 804ba8c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ba93:	08 
 804ba94:	89 04 24             	mov    %eax,(%esp)
 804ba97:	e8 f4 2a 01 00       	call   805e590 <_test_assert>
 804ba9c:	85 c0                	test   %eax,%eax
 804ba9e:	0f 84 3a 01 00 00    	je     804bbde <vfstest_paths+0xb69>
 804baa4:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804baaa:	89 44 24 04          	mov    %eax,0x4(%esp)
 804baae:	c7 04 24 fa f6 05 08 	movl   $0x805f6fa,(%esp)
 804bab5:	e8 01 e6 00 00       	call   805a0bb <stat>
 804baba:	89 45 d0             	mov    %eax,-0x30(%ebp)
 804babd:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804bac2:	89 04 24             	mov    %eax,(%esp)
 804bac5:	e8 5f 28 01 00       	call   805e329 <test_errstr>
 804baca:	89 c2                	mov    %eax,%edx
 804bacc:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
 804bad0:	0f 94 c0             	sete   %al
 804bad3:	0f b6 c0             	movzbl %al,%eax
 804bad6:	89 54 24 18          	mov    %edx,0x18(%esp)
 804bada:	c7 44 24 14 fa f6 05 	movl   $0x805f6fa,0x14(%esp)
 804bae1:	08 
 804bae2:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804bae9:	08 
 804baea:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804baf1:	08 
 804baf2:	c7 44 24 08 98 01 00 	movl   $0x198,0x8(%esp)
 804baf9:	00 
 804bafa:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804bb01:	08 
 804bb02:	89 04 24             	mov    %eax,(%esp)
 804bb05:	e8 86 2a 01 00       	call   805e590 <_test_assert>
 804bb0a:	85 c0                	test   %eax,%eax
 804bb0c:	0f 84 cc 00 00 00    	je     804bbde <vfstest_paths+0xb69>
 804bb12:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804bb18:	89 44 24 04          	mov    %eax,0x4(%esp)
 804bb1c:	c7 04 24 00 f7 05 08 	movl   $0x805f700,(%esp)
 804bb23:	e8 93 e5 00 00       	call   805a0bb <stat>
 804bb28:	89 45 d0             	mov    %eax,-0x30(%ebp)
 804bb2b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804bb30:	89 04 24             	mov    %eax,(%esp)
 804bb33:	e8 f1 27 01 00       	call   805e329 <test_errstr>
 804bb38:	89 c2                	mov    %eax,%edx
 804bb3a:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
 804bb3e:	0f 94 c0             	sete   %al
 804bb41:	0f b6 c0             	movzbl %al,%eax
 804bb44:	89 54 24 18          	mov    %edx,0x18(%esp)
 804bb48:	c7 44 24 14 00 f7 05 	movl   $0x805f700,0x14(%esp)
 804bb4f:	08 
 804bb50:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804bb57:	08 
 804bb58:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804bb5f:	08 
 804bb60:	c7 44 24 08 98 01 00 	movl   $0x198,0x8(%esp)
 804bb67:	00 
 804bb68:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804bb6f:	08 
 804bb70:	89 04 24             	mov    %eax,(%esp)
 804bb73:	e8 18 2a 01 00       	call   805e590 <_test_assert>
 804bb78:	85 c0                	test   %eax,%eax
 804bb7a:	74 62                	je     804bbde <vfstest_paths+0xb69>
 804bb7c:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804bb82:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804bb88:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804bb8e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804bb94:	39 c3                	cmp    %eax,%ebx
 804bb96:	0f 94 c0             	sete   %al
 804bb99:	0f b6 c0             	movzbl %al,%eax
 804bb9c:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804bba0:	c7 44 24 1c 00 f7 05 	movl   $0x805f700,0x1c(%esp)
 804bba7:	08 
 804bba8:	89 54 24 18          	mov    %edx,0x18(%esp)
 804bbac:	c7 44 24 14 fa f6 05 	movl   $0x805f6fa,0x14(%esp)
 804bbb3:	08 
 804bbb4:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804bbbb:	08 
 804bbbc:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804bbc3:	08 
 804bbc4:	c7 44 24 08 98 01 00 	movl   $0x198,0x8(%esp)
 804bbcb:	00 
 804bbcc:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804bbd3:	08 
 804bbd4:	89 04 24             	mov    %eax,(%esp)
 804bbd7:	e8 b4 29 01 00       	call   805e590 <_test_assert>
 804bbdc:	eb 01                	jmp    804bbdf <vfstest_paths+0xb6a>
 804bbde:	90                   	nop
        paths_equal("/", "/../.");
 804bbdf:	c7 04 24 fa f6 05 08 	movl   $0x805f6fa,(%esp)
 804bbe6:	e8 a9 c4 ff ff       	call   8048094 <makedirs>
 804bbeb:	89 45 cc             	mov    %eax,-0x34(%ebp)
 804bbee:	8b 45 cc             	mov    -0x34(%ebp),%eax
 804bbf1:	89 04 24             	mov    %eax,(%esp)
 804bbf4:	e8 30 27 01 00       	call   805e329 <test_errstr>
 804bbf9:	89 c2                	mov    %eax,%edx
 804bbfb:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
 804bbff:	0f 94 c0             	sete   %al
 804bc02:	0f b6 c0             	movzbl %al,%eax
 804bc05:	89 54 24 18          	mov    %edx,0x18(%esp)
 804bc09:	c7 44 24 14 fa f6 05 	movl   $0x805f6fa,0x14(%esp)
 804bc10:	08 
 804bc11:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804bc18:	08 
 804bc19:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804bc20:	08 
 804bc21:	c7 44 24 08 99 01 00 	movl   $0x199,0x8(%esp)
 804bc28:	00 
 804bc29:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804bc30:	08 
 804bc31:	89 04 24             	mov    %eax,(%esp)
 804bc34:	e8 57 29 01 00       	call   805e590 <_test_assert>
 804bc39:	85 c0                	test   %eax,%eax
 804bc3b:	0f 84 3a 01 00 00    	je     804bd7b <vfstest_paths+0xd06>
 804bc41:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804bc47:	89 44 24 04          	mov    %eax,0x4(%esp)
 804bc4b:	c7 04 24 fa f6 05 08 	movl   $0x805f6fa,(%esp)
 804bc52:	e8 64 e4 00 00       	call   805a0bb <stat>
 804bc57:	89 45 cc             	mov    %eax,-0x34(%ebp)
 804bc5a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804bc5f:	89 04 24             	mov    %eax,(%esp)
 804bc62:	e8 c2 26 01 00       	call   805e329 <test_errstr>
 804bc67:	89 c2                	mov    %eax,%edx
 804bc69:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
 804bc6d:	0f 94 c0             	sete   %al
 804bc70:	0f b6 c0             	movzbl %al,%eax
 804bc73:	89 54 24 18          	mov    %edx,0x18(%esp)
 804bc77:	c7 44 24 14 fa f6 05 	movl   $0x805f6fa,0x14(%esp)
 804bc7e:	08 
 804bc7f:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804bc86:	08 
 804bc87:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804bc8e:	08 
 804bc8f:	c7 44 24 08 99 01 00 	movl   $0x199,0x8(%esp)
 804bc96:	00 
 804bc97:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804bc9e:	08 
 804bc9f:	89 04 24             	mov    %eax,(%esp)
 804bca2:	e8 e9 28 01 00       	call   805e590 <_test_assert>
 804bca7:	85 c0                	test   %eax,%eax
 804bca9:	0f 84 cc 00 00 00    	je     804bd7b <vfstest_paths+0xd06>
 804bcaf:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804bcb5:	89 44 24 04          	mov    %eax,0x4(%esp)
 804bcb9:	c7 04 24 05 f7 05 08 	movl   $0x805f705,(%esp)
 804bcc0:	e8 f6 e3 00 00       	call   805a0bb <stat>
 804bcc5:	89 45 cc             	mov    %eax,-0x34(%ebp)
 804bcc8:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804bccd:	89 04 24             	mov    %eax,(%esp)
 804bcd0:	e8 54 26 01 00       	call   805e329 <test_errstr>
 804bcd5:	89 c2                	mov    %eax,%edx
 804bcd7:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
 804bcdb:	0f 94 c0             	sete   %al
 804bcde:	0f b6 c0             	movzbl %al,%eax
 804bce1:	89 54 24 18          	mov    %edx,0x18(%esp)
 804bce5:	c7 44 24 14 05 f7 05 	movl   $0x805f705,0x14(%esp)
 804bcec:	08 
 804bced:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804bcf4:	08 
 804bcf5:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804bcfc:	08 
 804bcfd:	c7 44 24 08 99 01 00 	movl   $0x199,0x8(%esp)
 804bd04:	00 
 804bd05:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804bd0c:	08 
 804bd0d:	89 04 24             	mov    %eax,(%esp)
 804bd10:	e8 7b 28 01 00       	call   805e590 <_test_assert>
 804bd15:	85 c0                	test   %eax,%eax
 804bd17:	74 62                	je     804bd7b <vfstest_paths+0xd06>
 804bd19:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804bd1f:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804bd25:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804bd2b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804bd31:	39 c3                	cmp    %eax,%ebx
 804bd33:	0f 94 c0             	sete   %al
 804bd36:	0f b6 c0             	movzbl %al,%eax
 804bd39:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804bd3d:	c7 44 24 1c 05 f7 05 	movl   $0x805f705,0x1c(%esp)
 804bd44:	08 
 804bd45:	89 54 24 18          	mov    %edx,0x18(%esp)
 804bd49:	c7 44 24 14 fa f6 05 	movl   $0x805f6fa,0x14(%esp)
 804bd50:	08 
 804bd51:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804bd58:	08 
 804bd59:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804bd60:	08 
 804bd61:	c7 44 24 08 99 01 00 	movl   $0x199,0x8(%esp)
 804bd68:	00 
 804bd69:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804bd70:	08 
 804bd71:	89 04 24             	mov    %eax,(%esp)
 804bd74:	e8 17 28 01 00       	call   805e590 <_test_assert>
 804bd79:	eb 01                	jmp    804bd7c <vfstest_paths+0xd07>
 804bd7b:	90                   	nop

        /* . and .. */
        paths_equal(".", "./.");
 804bd7c:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804bd83:	e8 0c c3 ff ff       	call   8048094 <makedirs>
 804bd88:	89 45 c8             	mov    %eax,-0x38(%ebp)
 804bd8b:	8b 45 c8             	mov    -0x38(%ebp),%eax
 804bd8e:	89 04 24             	mov    %eax,(%esp)
 804bd91:	e8 93 25 01 00       	call   805e329 <test_errstr>
 804bd96:	89 c2                	mov    %eax,%edx
 804bd98:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
 804bd9c:	0f 94 c0             	sete   %al
 804bd9f:	0f b6 c0             	movzbl %al,%eax
 804bda2:	89 54 24 18          	mov    %edx,0x18(%esp)
 804bda6:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804bdad:	08 
 804bdae:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804bdb5:	08 
 804bdb6:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804bdbd:	08 
 804bdbe:	c7 44 24 08 9c 01 00 	movl   $0x19c,0x8(%esp)
 804bdc5:	00 
 804bdc6:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804bdcd:	08 
 804bdce:	89 04 24             	mov    %eax,(%esp)
 804bdd1:	e8 ba 27 01 00       	call   805e590 <_test_assert>
 804bdd6:	85 c0                	test   %eax,%eax
 804bdd8:	0f 84 3a 01 00 00    	je     804bf18 <vfstest_paths+0xea3>
 804bdde:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804bde4:	89 44 24 04          	mov    %eax,0x4(%esp)
 804bde8:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804bdef:	e8 c7 e2 00 00       	call   805a0bb <stat>
 804bdf4:	89 45 c8             	mov    %eax,-0x38(%ebp)
 804bdf7:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804bdfc:	89 04 24             	mov    %eax,(%esp)
 804bdff:	e8 25 25 01 00       	call   805e329 <test_errstr>
 804be04:	89 c2                	mov    %eax,%edx
 804be06:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
 804be0a:	0f 94 c0             	sete   %al
 804be0d:	0f b6 c0             	movzbl %al,%eax
 804be10:	89 54 24 18          	mov    %edx,0x18(%esp)
 804be14:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804be1b:	08 
 804be1c:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804be23:	08 
 804be24:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804be2b:	08 
 804be2c:	c7 44 24 08 9c 01 00 	movl   $0x19c,0x8(%esp)
 804be33:	00 
 804be34:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804be3b:	08 
 804be3c:	89 04 24             	mov    %eax,(%esp)
 804be3f:	e8 4c 27 01 00       	call   805e590 <_test_assert>
 804be44:	85 c0                	test   %eax,%eax
 804be46:	0f 84 cc 00 00 00    	je     804bf18 <vfstest_paths+0xea3>
 804be4c:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804be52:	89 44 24 04          	mov    %eax,0x4(%esp)
 804be56:	c7 04 24 0b f7 05 08 	movl   $0x805f70b,(%esp)
 804be5d:	e8 59 e2 00 00       	call   805a0bb <stat>
 804be62:	89 45 c8             	mov    %eax,-0x38(%ebp)
 804be65:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804be6a:	89 04 24             	mov    %eax,(%esp)
 804be6d:	e8 b7 24 01 00       	call   805e329 <test_errstr>
 804be72:	89 c2                	mov    %eax,%edx
 804be74:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
 804be78:	0f 94 c0             	sete   %al
 804be7b:	0f b6 c0             	movzbl %al,%eax
 804be7e:	89 54 24 18          	mov    %edx,0x18(%esp)
 804be82:	c7 44 24 14 0b f7 05 	movl   $0x805f70b,0x14(%esp)
 804be89:	08 
 804be8a:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804be91:	08 
 804be92:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804be99:	08 
 804be9a:	c7 44 24 08 9c 01 00 	movl   $0x19c,0x8(%esp)
 804bea1:	00 
 804bea2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804bea9:	08 
 804beaa:	89 04 24             	mov    %eax,(%esp)
 804bead:	e8 de 26 01 00       	call   805e590 <_test_assert>
 804beb2:	85 c0                	test   %eax,%eax
 804beb4:	74 62                	je     804bf18 <vfstest_paths+0xea3>
 804beb6:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804bebc:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804bec2:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804bec8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804bece:	39 c3                	cmp    %eax,%ebx
 804bed0:	0f 94 c0             	sete   %al
 804bed3:	0f b6 c0             	movzbl %al,%eax
 804bed6:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804beda:	c7 44 24 1c 0b f7 05 	movl   $0x805f70b,0x1c(%esp)
 804bee1:	08 
 804bee2:	89 54 24 18          	mov    %edx,0x18(%esp)
 804bee6:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804beed:	08 
 804beee:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804bef5:	08 
 804bef6:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804befd:	08 
 804befe:	c7 44 24 08 9c 01 00 	movl   $0x19c,0x8(%esp)
 804bf05:	00 
 804bf06:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804bf0d:	08 
 804bf0e:	89 04 24             	mov    %eax,(%esp)
 804bf11:	e8 7a 26 01 00       	call   805e590 <_test_assert>
 804bf16:	eb 01                	jmp    804bf19 <vfstest_paths+0xea4>
 804bf18:	90                   	nop
        paths_equal(".", "1/..");
 804bf19:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804bf20:	e8 6f c1 ff ff       	call   8048094 <makedirs>
 804bf25:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 804bf28:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 804bf2b:	89 04 24             	mov    %eax,(%esp)
 804bf2e:	e8 f6 23 01 00       	call   805e329 <test_errstr>
 804bf33:	89 c2                	mov    %eax,%edx
 804bf35:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
 804bf39:	0f 94 c0             	sete   %al
 804bf3c:	0f b6 c0             	movzbl %al,%eax
 804bf3f:	89 54 24 18          	mov    %edx,0x18(%esp)
 804bf43:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804bf4a:	08 
 804bf4b:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804bf52:	08 
 804bf53:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804bf5a:	08 
 804bf5b:	c7 44 24 08 9d 01 00 	movl   $0x19d,0x8(%esp)
 804bf62:	00 
 804bf63:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804bf6a:	08 
 804bf6b:	89 04 24             	mov    %eax,(%esp)
 804bf6e:	e8 1d 26 01 00       	call   805e590 <_test_assert>
 804bf73:	85 c0                	test   %eax,%eax
 804bf75:	0f 84 3a 01 00 00    	je     804c0b5 <vfstest_paths+0x1040>
 804bf7b:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804bf81:	89 44 24 04          	mov    %eax,0x4(%esp)
 804bf85:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804bf8c:	e8 2a e1 00 00       	call   805a0bb <stat>
 804bf91:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 804bf94:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804bf99:	89 04 24             	mov    %eax,(%esp)
 804bf9c:	e8 88 23 01 00       	call   805e329 <test_errstr>
 804bfa1:	89 c2                	mov    %eax,%edx
 804bfa3:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
 804bfa7:	0f 94 c0             	sete   %al
 804bfaa:	0f b6 c0             	movzbl %al,%eax
 804bfad:	89 54 24 18          	mov    %edx,0x18(%esp)
 804bfb1:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804bfb8:	08 
 804bfb9:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804bfc0:	08 
 804bfc1:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804bfc8:	08 
 804bfc9:	c7 44 24 08 9d 01 00 	movl   $0x19d,0x8(%esp)
 804bfd0:	00 
 804bfd1:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804bfd8:	08 
 804bfd9:	89 04 24             	mov    %eax,(%esp)
 804bfdc:	e8 af 25 01 00       	call   805e590 <_test_assert>
 804bfe1:	85 c0                	test   %eax,%eax
 804bfe3:	0f 84 cc 00 00 00    	je     804c0b5 <vfstest_paths+0x1040>
 804bfe9:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804bfef:	89 44 24 04          	mov    %eax,0x4(%esp)
 804bff3:	c7 04 24 0f f7 05 08 	movl   $0x805f70f,(%esp)
 804bffa:	e8 bc e0 00 00       	call   805a0bb <stat>
 804bfff:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 804c002:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804c007:	89 04 24             	mov    %eax,(%esp)
 804c00a:	e8 1a 23 01 00       	call   805e329 <test_errstr>
 804c00f:	89 c2                	mov    %eax,%edx
 804c011:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
 804c015:	0f 94 c0             	sete   %al
 804c018:	0f b6 c0             	movzbl %al,%eax
 804c01b:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c01f:	c7 44 24 14 0f f7 05 	movl   $0x805f70f,0x14(%esp)
 804c026:	08 
 804c027:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804c02e:	08 
 804c02f:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c036:	08 
 804c037:	c7 44 24 08 9d 01 00 	movl   $0x19d,0x8(%esp)
 804c03e:	00 
 804c03f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c046:	08 
 804c047:	89 04 24             	mov    %eax,(%esp)
 804c04a:	e8 41 25 01 00       	call   805e590 <_test_assert>
 804c04f:	85 c0                	test   %eax,%eax
 804c051:	74 62                	je     804c0b5 <vfstest_paths+0x1040>
 804c053:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804c059:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804c05f:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804c065:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804c06b:	39 c3                	cmp    %eax,%ebx
 804c06d:	0f 94 c0             	sete   %al
 804c070:	0f b6 c0             	movzbl %al,%eax
 804c073:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804c077:	c7 44 24 1c 0f f7 05 	movl   $0x805f70f,0x1c(%esp)
 804c07e:	08 
 804c07f:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c083:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804c08a:	08 
 804c08b:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804c092:	08 
 804c093:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804c09a:	08 
 804c09b:	c7 44 24 08 9d 01 00 	movl   $0x19d,0x8(%esp)
 804c0a2:	00 
 804c0a3:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c0aa:	08 
 804c0ab:	89 04 24             	mov    %eax,(%esp)
 804c0ae:	e8 dd 24 01 00       	call   805e590 <_test_assert>
 804c0b3:	eb 01                	jmp    804c0b6 <vfstest_paths+0x1041>
 804c0b5:	90                   	nop
        paths_equal(".", "1/../");
 804c0b6:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804c0bd:	e8 d2 bf ff ff       	call   8048094 <makedirs>
 804c0c2:	89 45 c0             	mov    %eax,-0x40(%ebp)
 804c0c5:	8b 45 c0             	mov    -0x40(%ebp),%eax
 804c0c8:	89 04 24             	mov    %eax,(%esp)
 804c0cb:	e8 59 22 01 00       	call   805e329 <test_errstr>
 804c0d0:	89 c2                	mov    %eax,%edx
 804c0d2:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
 804c0d6:	0f 94 c0             	sete   %al
 804c0d9:	0f b6 c0             	movzbl %al,%eax
 804c0dc:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c0e0:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804c0e7:	08 
 804c0e8:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804c0ef:	08 
 804c0f0:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c0f7:	08 
 804c0f8:	c7 44 24 08 9e 01 00 	movl   $0x19e,0x8(%esp)
 804c0ff:	00 
 804c100:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c107:	08 
 804c108:	89 04 24             	mov    %eax,(%esp)
 804c10b:	e8 80 24 01 00       	call   805e590 <_test_assert>
 804c110:	85 c0                	test   %eax,%eax
 804c112:	0f 84 3a 01 00 00    	je     804c252 <vfstest_paths+0x11dd>
 804c118:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804c11e:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c122:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804c129:	e8 8d df 00 00       	call   805a0bb <stat>
 804c12e:	89 45 c0             	mov    %eax,-0x40(%ebp)
 804c131:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804c136:	89 04 24             	mov    %eax,(%esp)
 804c139:	e8 eb 21 01 00       	call   805e329 <test_errstr>
 804c13e:	89 c2                	mov    %eax,%edx
 804c140:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
 804c144:	0f 94 c0             	sete   %al
 804c147:	0f b6 c0             	movzbl %al,%eax
 804c14a:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c14e:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804c155:	08 
 804c156:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804c15d:	08 
 804c15e:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c165:	08 
 804c166:	c7 44 24 08 9e 01 00 	movl   $0x19e,0x8(%esp)
 804c16d:	00 
 804c16e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c175:	08 
 804c176:	89 04 24             	mov    %eax,(%esp)
 804c179:	e8 12 24 01 00       	call   805e590 <_test_assert>
 804c17e:	85 c0                	test   %eax,%eax
 804c180:	0f 84 cc 00 00 00    	je     804c252 <vfstest_paths+0x11dd>
 804c186:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804c18c:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c190:	c7 04 24 14 f7 05 08 	movl   $0x805f714,(%esp)
 804c197:	e8 1f df 00 00       	call   805a0bb <stat>
 804c19c:	89 45 c0             	mov    %eax,-0x40(%ebp)
 804c19f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804c1a4:	89 04 24             	mov    %eax,(%esp)
 804c1a7:	e8 7d 21 01 00       	call   805e329 <test_errstr>
 804c1ac:	89 c2                	mov    %eax,%edx
 804c1ae:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
 804c1b2:	0f 94 c0             	sete   %al
 804c1b5:	0f b6 c0             	movzbl %al,%eax
 804c1b8:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c1bc:	c7 44 24 14 14 f7 05 	movl   $0x805f714,0x14(%esp)
 804c1c3:	08 
 804c1c4:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804c1cb:	08 
 804c1cc:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c1d3:	08 
 804c1d4:	c7 44 24 08 9e 01 00 	movl   $0x19e,0x8(%esp)
 804c1db:	00 
 804c1dc:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c1e3:	08 
 804c1e4:	89 04 24             	mov    %eax,(%esp)
 804c1e7:	e8 a4 23 01 00       	call   805e590 <_test_assert>
 804c1ec:	85 c0                	test   %eax,%eax
 804c1ee:	74 62                	je     804c252 <vfstest_paths+0x11dd>
 804c1f0:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804c1f6:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804c1fc:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804c202:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804c208:	39 c3                	cmp    %eax,%ebx
 804c20a:	0f 94 c0             	sete   %al
 804c20d:	0f b6 c0             	movzbl %al,%eax
 804c210:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804c214:	c7 44 24 1c 14 f7 05 	movl   $0x805f714,0x1c(%esp)
 804c21b:	08 
 804c21c:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c220:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804c227:	08 
 804c228:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804c22f:	08 
 804c230:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804c237:	08 
 804c238:	c7 44 24 08 9e 01 00 	movl   $0x19e,0x8(%esp)
 804c23f:	00 
 804c240:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c247:	08 
 804c248:	89 04 24             	mov    %eax,(%esp)
 804c24b:	e8 40 23 01 00       	call   805e590 <_test_assert>
 804c250:	eb 01                	jmp    804c253 <vfstest_paths+0x11de>
 804c252:	90                   	nop
        paths_equal(".", "1/2/../..");
 804c253:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804c25a:	e8 35 be ff ff       	call   8048094 <makedirs>
 804c25f:	89 45 bc             	mov    %eax,-0x44(%ebp)
 804c262:	8b 45 bc             	mov    -0x44(%ebp),%eax
 804c265:	89 04 24             	mov    %eax,(%esp)
 804c268:	e8 bc 20 01 00       	call   805e329 <test_errstr>
 804c26d:	89 c2                	mov    %eax,%edx
 804c26f:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
 804c273:	0f 94 c0             	sete   %al
 804c276:	0f b6 c0             	movzbl %al,%eax
 804c279:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c27d:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804c284:	08 
 804c285:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804c28c:	08 
 804c28d:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c294:	08 
 804c295:	c7 44 24 08 9f 01 00 	movl   $0x19f,0x8(%esp)
 804c29c:	00 
 804c29d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c2a4:	08 
 804c2a5:	89 04 24             	mov    %eax,(%esp)
 804c2a8:	e8 e3 22 01 00       	call   805e590 <_test_assert>
 804c2ad:	85 c0                	test   %eax,%eax
 804c2af:	0f 84 3a 01 00 00    	je     804c3ef <vfstest_paths+0x137a>
 804c2b5:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804c2bb:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c2bf:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804c2c6:	e8 f0 dd 00 00       	call   805a0bb <stat>
 804c2cb:	89 45 bc             	mov    %eax,-0x44(%ebp)
 804c2ce:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804c2d3:	89 04 24             	mov    %eax,(%esp)
 804c2d6:	e8 4e 20 01 00       	call   805e329 <test_errstr>
 804c2db:	89 c2                	mov    %eax,%edx
 804c2dd:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
 804c2e1:	0f 94 c0             	sete   %al
 804c2e4:	0f b6 c0             	movzbl %al,%eax
 804c2e7:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c2eb:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804c2f2:	08 
 804c2f3:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804c2fa:	08 
 804c2fb:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c302:	08 
 804c303:	c7 44 24 08 9f 01 00 	movl   $0x19f,0x8(%esp)
 804c30a:	00 
 804c30b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c312:	08 
 804c313:	89 04 24             	mov    %eax,(%esp)
 804c316:	e8 75 22 01 00       	call   805e590 <_test_assert>
 804c31b:	85 c0                	test   %eax,%eax
 804c31d:	0f 84 cc 00 00 00    	je     804c3ef <vfstest_paths+0x137a>
 804c323:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804c329:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c32d:	c7 04 24 1a f7 05 08 	movl   $0x805f71a,(%esp)
 804c334:	e8 82 dd 00 00       	call   805a0bb <stat>
 804c339:	89 45 bc             	mov    %eax,-0x44(%ebp)
 804c33c:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804c341:	89 04 24             	mov    %eax,(%esp)
 804c344:	e8 e0 1f 01 00       	call   805e329 <test_errstr>
 804c349:	89 c2                	mov    %eax,%edx
 804c34b:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
 804c34f:	0f 94 c0             	sete   %al
 804c352:	0f b6 c0             	movzbl %al,%eax
 804c355:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c359:	c7 44 24 14 1a f7 05 	movl   $0x805f71a,0x14(%esp)
 804c360:	08 
 804c361:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804c368:	08 
 804c369:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c370:	08 
 804c371:	c7 44 24 08 9f 01 00 	movl   $0x19f,0x8(%esp)
 804c378:	00 
 804c379:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c380:	08 
 804c381:	89 04 24             	mov    %eax,(%esp)
 804c384:	e8 07 22 01 00       	call   805e590 <_test_assert>
 804c389:	85 c0                	test   %eax,%eax
 804c38b:	74 62                	je     804c3ef <vfstest_paths+0x137a>
 804c38d:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804c393:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804c399:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804c39f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804c3a5:	39 c3                	cmp    %eax,%ebx
 804c3a7:	0f 94 c0             	sete   %al
 804c3aa:	0f b6 c0             	movzbl %al,%eax
 804c3ad:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804c3b1:	c7 44 24 1c 1a f7 05 	movl   $0x805f71a,0x1c(%esp)
 804c3b8:	08 
 804c3b9:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c3bd:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804c3c4:	08 
 804c3c5:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804c3cc:	08 
 804c3cd:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804c3d4:	08 
 804c3d5:	c7 44 24 08 9f 01 00 	movl   $0x19f,0x8(%esp)
 804c3dc:	00 
 804c3dd:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c3e4:	08 
 804c3e5:	89 04 24             	mov    %eax,(%esp)
 804c3e8:	e8 a3 21 01 00       	call   805e590 <_test_assert>
 804c3ed:	eb 01                	jmp    804c3f0 <vfstest_paths+0x137b>
 804c3ef:	90                   	nop
        paths_equal(".", "1/2/../..");
 804c3f0:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804c3f7:	e8 98 bc ff ff       	call   8048094 <makedirs>
 804c3fc:	89 45 b8             	mov    %eax,-0x48(%ebp)
 804c3ff:	8b 45 b8             	mov    -0x48(%ebp),%eax
 804c402:	89 04 24             	mov    %eax,(%esp)
 804c405:	e8 1f 1f 01 00       	call   805e329 <test_errstr>
 804c40a:	89 c2                	mov    %eax,%edx
 804c40c:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
 804c410:	0f 94 c0             	sete   %al
 804c413:	0f b6 c0             	movzbl %al,%eax
 804c416:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c41a:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804c421:	08 
 804c422:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804c429:	08 
 804c42a:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c431:	08 
 804c432:	c7 44 24 08 a0 01 00 	movl   $0x1a0,0x8(%esp)
 804c439:	00 
 804c43a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c441:	08 
 804c442:	89 04 24             	mov    %eax,(%esp)
 804c445:	e8 46 21 01 00       	call   805e590 <_test_assert>
 804c44a:	85 c0                	test   %eax,%eax
 804c44c:	0f 84 3a 01 00 00    	je     804c58c <vfstest_paths+0x1517>
 804c452:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804c458:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c45c:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804c463:	e8 53 dc 00 00       	call   805a0bb <stat>
 804c468:	89 45 b8             	mov    %eax,-0x48(%ebp)
 804c46b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804c470:	89 04 24             	mov    %eax,(%esp)
 804c473:	e8 b1 1e 01 00       	call   805e329 <test_errstr>
 804c478:	89 c2                	mov    %eax,%edx
 804c47a:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
 804c47e:	0f 94 c0             	sete   %al
 804c481:	0f b6 c0             	movzbl %al,%eax
 804c484:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c488:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804c48f:	08 
 804c490:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804c497:	08 
 804c498:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c49f:	08 
 804c4a0:	c7 44 24 08 a0 01 00 	movl   $0x1a0,0x8(%esp)
 804c4a7:	00 
 804c4a8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c4af:	08 
 804c4b0:	89 04 24             	mov    %eax,(%esp)
 804c4b3:	e8 d8 20 01 00       	call   805e590 <_test_assert>
 804c4b8:	85 c0                	test   %eax,%eax
 804c4ba:	0f 84 cc 00 00 00    	je     804c58c <vfstest_paths+0x1517>
 804c4c0:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804c4c6:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c4ca:	c7 04 24 1a f7 05 08 	movl   $0x805f71a,(%esp)
 804c4d1:	e8 e5 db 00 00       	call   805a0bb <stat>
 804c4d6:	89 45 b8             	mov    %eax,-0x48(%ebp)
 804c4d9:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804c4de:	89 04 24             	mov    %eax,(%esp)
 804c4e1:	e8 43 1e 01 00       	call   805e329 <test_errstr>
 804c4e6:	89 c2                	mov    %eax,%edx
 804c4e8:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
 804c4ec:	0f 94 c0             	sete   %al
 804c4ef:	0f b6 c0             	movzbl %al,%eax
 804c4f2:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c4f6:	c7 44 24 14 1a f7 05 	movl   $0x805f71a,0x14(%esp)
 804c4fd:	08 
 804c4fe:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804c505:	08 
 804c506:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c50d:	08 
 804c50e:	c7 44 24 08 a0 01 00 	movl   $0x1a0,0x8(%esp)
 804c515:	00 
 804c516:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c51d:	08 
 804c51e:	89 04 24             	mov    %eax,(%esp)
 804c521:	e8 6a 20 01 00       	call   805e590 <_test_assert>
 804c526:	85 c0                	test   %eax,%eax
 804c528:	74 62                	je     804c58c <vfstest_paths+0x1517>
 804c52a:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804c530:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804c536:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804c53c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804c542:	39 c3                	cmp    %eax,%ebx
 804c544:	0f 94 c0             	sete   %al
 804c547:	0f b6 c0             	movzbl %al,%eax
 804c54a:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804c54e:	c7 44 24 1c 1a f7 05 	movl   $0x805f71a,0x1c(%esp)
 804c555:	08 
 804c556:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c55a:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804c561:	08 
 804c562:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804c569:	08 
 804c56a:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804c571:	08 
 804c572:	c7 44 24 08 a0 01 00 	movl   $0x1a0,0x8(%esp)
 804c579:	00 
 804c57a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c581:	08 
 804c582:	89 04 24             	mov    %eax,(%esp)
 804c585:	e8 06 20 01 00       	call   805e590 <_test_assert>
 804c58a:	eb 01                	jmp    804c58d <vfstest_paths+0x1518>
 804c58c:	90                   	nop
        paths_equal(".", "1/2/3/../../..");
 804c58d:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804c594:	e8 fb ba ff ff       	call   8048094 <makedirs>
 804c599:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 804c59c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
 804c59f:	89 04 24             	mov    %eax,(%esp)
 804c5a2:	e8 82 1d 01 00       	call   805e329 <test_errstr>
 804c5a7:	89 c2                	mov    %eax,%edx
 804c5a9:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
 804c5ad:	0f 94 c0             	sete   %al
 804c5b0:	0f b6 c0             	movzbl %al,%eax
 804c5b3:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c5b7:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804c5be:	08 
 804c5bf:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804c5c6:	08 
 804c5c7:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c5ce:	08 
 804c5cf:	c7 44 24 08 a1 01 00 	movl   $0x1a1,0x8(%esp)
 804c5d6:	00 
 804c5d7:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c5de:	08 
 804c5df:	89 04 24             	mov    %eax,(%esp)
 804c5e2:	e8 a9 1f 01 00       	call   805e590 <_test_assert>
 804c5e7:	85 c0                	test   %eax,%eax
 804c5e9:	0f 84 3a 01 00 00    	je     804c729 <vfstest_paths+0x16b4>
 804c5ef:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804c5f5:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c5f9:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804c600:	e8 b6 da 00 00       	call   805a0bb <stat>
 804c605:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 804c608:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804c60d:	89 04 24             	mov    %eax,(%esp)
 804c610:	e8 14 1d 01 00       	call   805e329 <test_errstr>
 804c615:	89 c2                	mov    %eax,%edx
 804c617:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
 804c61b:	0f 94 c0             	sete   %al
 804c61e:	0f b6 c0             	movzbl %al,%eax
 804c621:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c625:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804c62c:	08 
 804c62d:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804c634:	08 
 804c635:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c63c:	08 
 804c63d:	c7 44 24 08 a1 01 00 	movl   $0x1a1,0x8(%esp)
 804c644:	00 
 804c645:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c64c:	08 
 804c64d:	89 04 24             	mov    %eax,(%esp)
 804c650:	e8 3b 1f 01 00       	call   805e590 <_test_assert>
 804c655:	85 c0                	test   %eax,%eax
 804c657:	0f 84 cc 00 00 00    	je     804c729 <vfstest_paths+0x16b4>
 804c65d:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804c663:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c667:	c7 04 24 24 f7 05 08 	movl   $0x805f724,(%esp)
 804c66e:	e8 48 da 00 00       	call   805a0bb <stat>
 804c673:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 804c676:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804c67b:	89 04 24             	mov    %eax,(%esp)
 804c67e:	e8 a6 1c 01 00       	call   805e329 <test_errstr>
 804c683:	89 c2                	mov    %eax,%edx
 804c685:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
 804c689:	0f 94 c0             	sete   %al
 804c68c:	0f b6 c0             	movzbl %al,%eax
 804c68f:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c693:	c7 44 24 14 24 f7 05 	movl   $0x805f724,0x14(%esp)
 804c69a:	08 
 804c69b:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804c6a2:	08 
 804c6a3:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c6aa:	08 
 804c6ab:	c7 44 24 08 a1 01 00 	movl   $0x1a1,0x8(%esp)
 804c6b2:	00 
 804c6b3:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c6ba:	08 
 804c6bb:	89 04 24             	mov    %eax,(%esp)
 804c6be:	e8 cd 1e 01 00       	call   805e590 <_test_assert>
 804c6c3:	85 c0                	test   %eax,%eax
 804c6c5:	74 62                	je     804c729 <vfstest_paths+0x16b4>
 804c6c7:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804c6cd:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804c6d3:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804c6d9:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804c6df:	39 c3                	cmp    %eax,%ebx
 804c6e1:	0f 94 c0             	sete   %al
 804c6e4:	0f b6 c0             	movzbl %al,%eax
 804c6e7:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804c6eb:	c7 44 24 1c 24 f7 05 	movl   $0x805f724,0x1c(%esp)
 804c6f2:	08 
 804c6f3:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c6f7:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804c6fe:	08 
 804c6ff:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804c706:	08 
 804c707:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804c70e:	08 
 804c70f:	c7 44 24 08 a1 01 00 	movl   $0x1a1,0x8(%esp)
 804c716:	00 
 804c717:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c71e:	08 
 804c71f:	89 04 24             	mov    %eax,(%esp)
 804c722:	e8 69 1e 01 00       	call   805e590 <_test_assert>
 804c727:	eb 01                	jmp    804c72a <vfstest_paths+0x16b5>
 804c729:	90                   	nop
        paths_equal(".", "1/../1/..");
 804c72a:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804c731:	e8 5e b9 ff ff       	call   8048094 <makedirs>
 804c736:	89 45 b0             	mov    %eax,-0x50(%ebp)
 804c739:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804c73c:	89 04 24             	mov    %eax,(%esp)
 804c73f:	e8 e5 1b 01 00       	call   805e329 <test_errstr>
 804c744:	89 c2                	mov    %eax,%edx
 804c746:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
 804c74a:	0f 94 c0             	sete   %al
 804c74d:	0f b6 c0             	movzbl %al,%eax
 804c750:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c754:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804c75b:	08 
 804c75c:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804c763:	08 
 804c764:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c76b:	08 
 804c76c:	c7 44 24 08 a2 01 00 	movl   $0x1a2,0x8(%esp)
 804c773:	00 
 804c774:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c77b:	08 
 804c77c:	89 04 24             	mov    %eax,(%esp)
 804c77f:	e8 0c 1e 01 00       	call   805e590 <_test_assert>
 804c784:	85 c0                	test   %eax,%eax
 804c786:	0f 84 3a 01 00 00    	je     804c8c6 <vfstest_paths+0x1851>
 804c78c:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804c792:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c796:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804c79d:	e8 19 d9 00 00       	call   805a0bb <stat>
 804c7a2:	89 45 b0             	mov    %eax,-0x50(%ebp)
 804c7a5:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804c7aa:	89 04 24             	mov    %eax,(%esp)
 804c7ad:	e8 77 1b 01 00       	call   805e329 <test_errstr>
 804c7b2:	89 c2                	mov    %eax,%edx
 804c7b4:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
 804c7b8:	0f 94 c0             	sete   %al
 804c7bb:	0f b6 c0             	movzbl %al,%eax
 804c7be:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c7c2:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804c7c9:	08 
 804c7ca:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804c7d1:	08 
 804c7d2:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c7d9:	08 
 804c7da:	c7 44 24 08 a2 01 00 	movl   $0x1a2,0x8(%esp)
 804c7e1:	00 
 804c7e2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c7e9:	08 
 804c7ea:	89 04 24             	mov    %eax,(%esp)
 804c7ed:	e8 9e 1d 01 00       	call   805e590 <_test_assert>
 804c7f2:	85 c0                	test   %eax,%eax
 804c7f4:	0f 84 cc 00 00 00    	je     804c8c6 <vfstest_paths+0x1851>
 804c7fa:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804c800:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c804:	c7 04 24 33 f7 05 08 	movl   $0x805f733,(%esp)
 804c80b:	e8 ab d8 00 00       	call   805a0bb <stat>
 804c810:	89 45 b0             	mov    %eax,-0x50(%ebp)
 804c813:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804c818:	89 04 24             	mov    %eax,(%esp)
 804c81b:	e8 09 1b 01 00       	call   805e329 <test_errstr>
 804c820:	89 c2                	mov    %eax,%edx
 804c822:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
 804c826:	0f 94 c0             	sete   %al
 804c829:	0f b6 c0             	movzbl %al,%eax
 804c82c:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c830:	c7 44 24 14 33 f7 05 	movl   $0x805f733,0x14(%esp)
 804c837:	08 
 804c838:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804c83f:	08 
 804c840:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c847:	08 
 804c848:	c7 44 24 08 a2 01 00 	movl   $0x1a2,0x8(%esp)
 804c84f:	00 
 804c850:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c857:	08 
 804c858:	89 04 24             	mov    %eax,(%esp)
 804c85b:	e8 30 1d 01 00       	call   805e590 <_test_assert>
 804c860:	85 c0                	test   %eax,%eax
 804c862:	74 62                	je     804c8c6 <vfstest_paths+0x1851>
 804c864:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804c86a:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804c870:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804c876:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804c87c:	39 c3                	cmp    %eax,%ebx
 804c87e:	0f 94 c0             	sete   %al
 804c881:	0f b6 c0             	movzbl %al,%eax
 804c884:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804c888:	c7 44 24 1c 33 f7 05 	movl   $0x805f733,0x1c(%esp)
 804c88f:	08 
 804c890:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c894:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804c89b:	08 
 804c89c:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804c8a3:	08 
 804c8a4:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804c8ab:	08 
 804c8ac:	c7 44 24 08 a2 01 00 	movl   $0x1a2,0x8(%esp)
 804c8b3:	00 
 804c8b4:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c8bb:	08 
 804c8bc:	89 04 24             	mov    %eax,(%esp)
 804c8bf:	e8 cc 1c 01 00       	call   805e590 <_test_assert>
 804c8c4:	eb 01                	jmp    804c8c7 <vfstest_paths+0x1852>
 804c8c6:	90                   	nop
        paths_equal(".", "1/../4/..");
 804c8c7:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804c8ce:	e8 c1 b7 ff ff       	call   8048094 <makedirs>
 804c8d3:	89 45 ac             	mov    %eax,-0x54(%ebp)
 804c8d6:	8b 45 ac             	mov    -0x54(%ebp),%eax
 804c8d9:	89 04 24             	mov    %eax,(%esp)
 804c8dc:	e8 48 1a 01 00       	call   805e329 <test_errstr>
 804c8e1:	89 c2                	mov    %eax,%edx
 804c8e3:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
 804c8e7:	0f 94 c0             	sete   %al
 804c8ea:	0f b6 c0             	movzbl %al,%eax
 804c8ed:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c8f1:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804c8f8:	08 
 804c8f9:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804c900:	08 
 804c901:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c908:	08 
 804c909:	c7 44 24 08 a3 01 00 	movl   $0x1a3,0x8(%esp)
 804c910:	00 
 804c911:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c918:	08 
 804c919:	89 04 24             	mov    %eax,(%esp)
 804c91c:	e8 6f 1c 01 00       	call   805e590 <_test_assert>
 804c921:	85 c0                	test   %eax,%eax
 804c923:	0f 84 3a 01 00 00    	je     804ca63 <vfstest_paths+0x19ee>
 804c929:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804c92f:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c933:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804c93a:	e8 7c d7 00 00       	call   805a0bb <stat>
 804c93f:	89 45 ac             	mov    %eax,-0x54(%ebp)
 804c942:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804c947:	89 04 24             	mov    %eax,(%esp)
 804c94a:	e8 da 19 01 00       	call   805e329 <test_errstr>
 804c94f:	89 c2                	mov    %eax,%edx
 804c951:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
 804c955:	0f 94 c0             	sete   %al
 804c958:	0f b6 c0             	movzbl %al,%eax
 804c95b:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c95f:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804c966:	08 
 804c967:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804c96e:	08 
 804c96f:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c976:	08 
 804c977:	c7 44 24 08 a3 01 00 	movl   $0x1a3,0x8(%esp)
 804c97e:	00 
 804c97f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c986:	08 
 804c987:	89 04 24             	mov    %eax,(%esp)
 804c98a:	e8 01 1c 01 00       	call   805e590 <_test_assert>
 804c98f:	85 c0                	test   %eax,%eax
 804c991:	0f 84 cc 00 00 00    	je     804ca63 <vfstest_paths+0x19ee>
 804c997:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804c99d:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c9a1:	c7 04 24 3d f7 05 08 	movl   $0x805f73d,(%esp)
 804c9a8:	e8 0e d7 00 00       	call   805a0bb <stat>
 804c9ad:	89 45 ac             	mov    %eax,-0x54(%ebp)
 804c9b0:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804c9b5:	89 04 24             	mov    %eax,(%esp)
 804c9b8:	e8 6c 19 01 00       	call   805e329 <test_errstr>
 804c9bd:	89 c2                	mov    %eax,%edx
 804c9bf:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
 804c9c3:	0f 94 c0             	sete   %al
 804c9c6:	0f b6 c0             	movzbl %al,%eax
 804c9c9:	89 54 24 18          	mov    %edx,0x18(%esp)
 804c9cd:	c7 44 24 14 3d f7 05 	movl   $0x805f73d,0x14(%esp)
 804c9d4:	08 
 804c9d5:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804c9dc:	08 
 804c9dd:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804c9e4:	08 
 804c9e5:	c7 44 24 08 a3 01 00 	movl   $0x1a3,0x8(%esp)
 804c9ec:	00 
 804c9ed:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804c9f4:	08 
 804c9f5:	89 04 24             	mov    %eax,(%esp)
 804c9f8:	e8 93 1b 01 00       	call   805e590 <_test_assert>
 804c9fd:	85 c0                	test   %eax,%eax
 804c9ff:	74 62                	je     804ca63 <vfstest_paths+0x19ee>
 804ca01:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804ca07:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804ca0d:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804ca13:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804ca19:	39 c3                	cmp    %eax,%ebx
 804ca1b:	0f 94 c0             	sete   %al
 804ca1e:	0f b6 c0             	movzbl %al,%eax
 804ca21:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804ca25:	c7 44 24 1c 3d f7 05 	movl   $0x805f73d,0x1c(%esp)
 804ca2c:	08 
 804ca2d:	89 54 24 18          	mov    %edx,0x18(%esp)
 804ca31:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804ca38:	08 
 804ca39:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804ca40:	08 
 804ca41:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804ca48:	08 
 804ca49:	c7 44 24 08 a3 01 00 	movl   $0x1a3,0x8(%esp)
 804ca50:	00 
 804ca51:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ca58:	08 
 804ca59:	89 04 24             	mov    %eax,(%esp)
 804ca5c:	e8 2f 1b 01 00       	call   805e590 <_test_assert>
 804ca61:	eb 01                	jmp    804ca64 <vfstest_paths+0x19ef>
 804ca63:	90                   	nop
        paths_equal(".", "1/../1/..");
 804ca64:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804ca6b:	e8 24 b6 ff ff       	call   8048094 <makedirs>
 804ca70:	89 45 a8             	mov    %eax,-0x58(%ebp)
 804ca73:	8b 45 a8             	mov    -0x58(%ebp),%eax
 804ca76:	89 04 24             	mov    %eax,(%esp)
 804ca79:	e8 ab 18 01 00       	call   805e329 <test_errstr>
 804ca7e:	89 c2                	mov    %eax,%edx
 804ca80:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
 804ca84:	0f 94 c0             	sete   %al
 804ca87:	0f b6 c0             	movzbl %al,%eax
 804ca8a:	89 54 24 18          	mov    %edx,0x18(%esp)
 804ca8e:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804ca95:	08 
 804ca96:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804ca9d:	08 
 804ca9e:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804caa5:	08 
 804caa6:	c7 44 24 08 a4 01 00 	movl   $0x1a4,0x8(%esp)
 804caad:	00 
 804caae:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804cab5:	08 
 804cab6:	89 04 24             	mov    %eax,(%esp)
 804cab9:	e8 d2 1a 01 00       	call   805e590 <_test_assert>
 804cabe:	85 c0                	test   %eax,%eax
 804cac0:	0f 84 3a 01 00 00    	je     804cc00 <vfstest_paths+0x1b8b>
 804cac6:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804cacc:	89 44 24 04          	mov    %eax,0x4(%esp)
 804cad0:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804cad7:	e8 df d5 00 00       	call   805a0bb <stat>
 804cadc:	89 45 a8             	mov    %eax,-0x58(%ebp)
 804cadf:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804cae4:	89 04 24             	mov    %eax,(%esp)
 804cae7:	e8 3d 18 01 00       	call   805e329 <test_errstr>
 804caec:	89 c2                	mov    %eax,%edx
 804caee:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
 804caf2:	0f 94 c0             	sete   %al
 804caf5:	0f b6 c0             	movzbl %al,%eax
 804caf8:	89 54 24 18          	mov    %edx,0x18(%esp)
 804cafc:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804cb03:	08 
 804cb04:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804cb0b:	08 
 804cb0c:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804cb13:	08 
 804cb14:	c7 44 24 08 a4 01 00 	movl   $0x1a4,0x8(%esp)
 804cb1b:	00 
 804cb1c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804cb23:	08 
 804cb24:	89 04 24             	mov    %eax,(%esp)
 804cb27:	e8 64 1a 01 00       	call   805e590 <_test_assert>
 804cb2c:	85 c0                	test   %eax,%eax
 804cb2e:	0f 84 cc 00 00 00    	je     804cc00 <vfstest_paths+0x1b8b>
 804cb34:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804cb3a:	89 44 24 04          	mov    %eax,0x4(%esp)
 804cb3e:	c7 04 24 33 f7 05 08 	movl   $0x805f733,(%esp)
 804cb45:	e8 71 d5 00 00       	call   805a0bb <stat>
 804cb4a:	89 45 a8             	mov    %eax,-0x58(%ebp)
 804cb4d:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804cb52:	89 04 24             	mov    %eax,(%esp)
 804cb55:	e8 cf 17 01 00       	call   805e329 <test_errstr>
 804cb5a:	89 c2                	mov    %eax,%edx
 804cb5c:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
 804cb60:	0f 94 c0             	sete   %al
 804cb63:	0f b6 c0             	movzbl %al,%eax
 804cb66:	89 54 24 18          	mov    %edx,0x18(%esp)
 804cb6a:	c7 44 24 14 33 f7 05 	movl   $0x805f733,0x14(%esp)
 804cb71:	08 
 804cb72:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804cb79:	08 
 804cb7a:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804cb81:	08 
 804cb82:	c7 44 24 08 a4 01 00 	movl   $0x1a4,0x8(%esp)
 804cb89:	00 
 804cb8a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804cb91:	08 
 804cb92:	89 04 24             	mov    %eax,(%esp)
 804cb95:	e8 f6 19 01 00       	call   805e590 <_test_assert>
 804cb9a:	85 c0                	test   %eax,%eax
 804cb9c:	74 62                	je     804cc00 <vfstest_paths+0x1b8b>
 804cb9e:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804cba4:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804cbaa:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804cbb0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804cbb6:	39 c3                	cmp    %eax,%ebx
 804cbb8:	0f 94 c0             	sete   %al
 804cbbb:	0f b6 c0             	movzbl %al,%eax
 804cbbe:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804cbc2:	c7 44 24 1c 33 f7 05 	movl   $0x805f733,0x1c(%esp)
 804cbc9:	08 
 804cbca:	89 54 24 18          	mov    %edx,0x18(%esp)
 804cbce:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804cbd5:	08 
 804cbd6:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804cbdd:	08 
 804cbde:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804cbe5:	08 
 804cbe6:	c7 44 24 08 a4 01 00 	movl   $0x1a4,0x8(%esp)
 804cbed:	00 
 804cbee:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804cbf5:	08 
 804cbf6:	89 04 24             	mov    %eax,(%esp)
 804cbf9:	e8 92 19 01 00       	call   805e590 <_test_assert>
 804cbfe:	eb 01                	jmp    804cc01 <vfstest_paths+0x1b8c>
 804cc00:	90                   	nop
        paths_equal(".", "1/2/3/../../../4/5/6/../../..");
 804cc01:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804cc08:	e8 87 b4 ff ff       	call   8048094 <makedirs>
 804cc0d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 804cc10:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 804cc13:	89 04 24             	mov    %eax,(%esp)
 804cc16:	e8 0e 17 01 00       	call   805e329 <test_errstr>
 804cc1b:	89 c2                	mov    %eax,%edx
 804cc1d:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
 804cc21:	0f 94 c0             	sete   %al
 804cc24:	0f b6 c0             	movzbl %al,%eax
 804cc27:	89 54 24 18          	mov    %edx,0x18(%esp)
 804cc2b:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804cc32:	08 
 804cc33:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804cc3a:	08 
 804cc3b:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804cc42:	08 
 804cc43:	c7 44 24 08 a5 01 00 	movl   $0x1a5,0x8(%esp)
 804cc4a:	00 
 804cc4b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804cc52:	08 
 804cc53:	89 04 24             	mov    %eax,(%esp)
 804cc56:	e8 35 19 01 00       	call   805e590 <_test_assert>
 804cc5b:	85 c0                	test   %eax,%eax
 804cc5d:	0f 84 3a 01 00 00    	je     804cd9d <vfstest_paths+0x1d28>
 804cc63:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804cc69:	89 44 24 04          	mov    %eax,0x4(%esp)
 804cc6d:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804cc74:	e8 42 d4 00 00       	call   805a0bb <stat>
 804cc79:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 804cc7c:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804cc81:	89 04 24             	mov    %eax,(%esp)
 804cc84:	e8 a0 16 01 00       	call   805e329 <test_errstr>
 804cc89:	89 c2                	mov    %eax,%edx
 804cc8b:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
 804cc8f:	0f 94 c0             	sete   %al
 804cc92:	0f b6 c0             	movzbl %al,%eax
 804cc95:	89 54 24 18          	mov    %edx,0x18(%esp)
 804cc99:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804cca0:	08 
 804cca1:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804cca8:	08 
 804cca9:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804ccb0:	08 
 804ccb1:	c7 44 24 08 a5 01 00 	movl   $0x1a5,0x8(%esp)
 804ccb8:	00 
 804ccb9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ccc0:	08 
 804ccc1:	89 04 24             	mov    %eax,(%esp)
 804ccc4:	e8 c7 18 01 00       	call   805e590 <_test_assert>
 804ccc9:	85 c0                	test   %eax,%eax
 804cccb:	0f 84 cc 00 00 00    	je     804cd9d <vfstest_paths+0x1d28>
 804ccd1:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804ccd7:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ccdb:	c7 04 24 47 f7 05 08 	movl   $0x805f747,(%esp)
 804cce2:	e8 d4 d3 00 00       	call   805a0bb <stat>
 804cce7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 804ccea:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ccef:	89 04 24             	mov    %eax,(%esp)
 804ccf2:	e8 32 16 01 00       	call   805e329 <test_errstr>
 804ccf7:	89 c2                	mov    %eax,%edx
 804ccf9:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
 804ccfd:	0f 94 c0             	sete   %al
 804cd00:	0f b6 c0             	movzbl %al,%eax
 804cd03:	89 54 24 18          	mov    %edx,0x18(%esp)
 804cd07:	c7 44 24 14 47 f7 05 	movl   $0x805f747,0x14(%esp)
 804cd0e:	08 
 804cd0f:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804cd16:	08 
 804cd17:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804cd1e:	08 
 804cd1f:	c7 44 24 08 a5 01 00 	movl   $0x1a5,0x8(%esp)
 804cd26:	00 
 804cd27:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804cd2e:	08 
 804cd2f:	89 04 24             	mov    %eax,(%esp)
 804cd32:	e8 59 18 01 00       	call   805e590 <_test_assert>
 804cd37:	85 c0                	test   %eax,%eax
 804cd39:	74 62                	je     804cd9d <vfstest_paths+0x1d28>
 804cd3b:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804cd41:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804cd47:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804cd4d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804cd53:	39 c3                	cmp    %eax,%ebx
 804cd55:	0f 94 c0             	sete   %al
 804cd58:	0f b6 c0             	movzbl %al,%eax
 804cd5b:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804cd5f:	c7 44 24 1c 47 f7 05 	movl   $0x805f747,0x1c(%esp)
 804cd66:	08 
 804cd67:	89 54 24 18          	mov    %edx,0x18(%esp)
 804cd6b:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804cd72:	08 
 804cd73:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804cd7a:	08 
 804cd7b:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804cd82:	08 
 804cd83:	c7 44 24 08 a5 01 00 	movl   $0x1a5,0x8(%esp)
 804cd8a:	00 
 804cd8b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804cd92:	08 
 804cd93:	89 04 24             	mov    %eax,(%esp)
 804cd96:	e8 f5 17 01 00       	call   805e590 <_test_assert>
 804cd9b:	eb 01                	jmp    804cd9e <vfstest_paths+0x1d29>
 804cd9d:	90                   	nop
        paths_equal(".", "1/./2/./3/./.././.././.././4/./5/./6/./.././.././..");
 804cd9e:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804cda5:	e8 ea b2 ff ff       	call   8048094 <makedirs>
 804cdaa:	89 45 a0             	mov    %eax,-0x60(%ebp)
 804cdad:	8b 45 a0             	mov    -0x60(%ebp),%eax
 804cdb0:	89 04 24             	mov    %eax,(%esp)
 804cdb3:	e8 71 15 01 00       	call   805e329 <test_errstr>
 804cdb8:	89 c2                	mov    %eax,%edx
 804cdba:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
 804cdbe:	0f 94 c0             	sete   %al
 804cdc1:	0f b6 c0             	movzbl %al,%eax
 804cdc4:	89 54 24 18          	mov    %edx,0x18(%esp)
 804cdc8:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804cdcf:	08 
 804cdd0:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804cdd7:	08 
 804cdd8:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804cddf:	08 
 804cde0:	c7 44 24 08 a6 01 00 	movl   $0x1a6,0x8(%esp)
 804cde7:	00 
 804cde8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804cdef:	08 
 804cdf0:	89 04 24             	mov    %eax,(%esp)
 804cdf3:	e8 98 17 01 00       	call   805e590 <_test_assert>
 804cdf8:	85 c0                	test   %eax,%eax
 804cdfa:	0f 84 3a 01 00 00    	je     804cf3a <vfstest_paths+0x1ec5>
 804ce00:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804ce06:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ce0a:	c7 04 24 24 e6 05 08 	movl   $0x805e624,(%esp)
 804ce11:	e8 a5 d2 00 00       	call   805a0bb <stat>
 804ce16:	89 45 a0             	mov    %eax,-0x60(%ebp)
 804ce19:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ce1e:	89 04 24             	mov    %eax,(%esp)
 804ce21:	e8 03 15 01 00       	call   805e329 <test_errstr>
 804ce26:	89 c2                	mov    %eax,%edx
 804ce28:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
 804ce2c:	0f 94 c0             	sete   %al
 804ce2f:	0f b6 c0             	movzbl %al,%eax
 804ce32:	89 54 24 18          	mov    %edx,0x18(%esp)
 804ce36:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804ce3d:	08 
 804ce3e:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804ce45:	08 
 804ce46:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804ce4d:	08 
 804ce4e:	c7 44 24 08 a6 01 00 	movl   $0x1a6,0x8(%esp)
 804ce55:	00 
 804ce56:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ce5d:	08 
 804ce5e:	89 04 24             	mov    %eax,(%esp)
 804ce61:	e8 2a 17 01 00       	call   805e590 <_test_assert>
 804ce66:	85 c0                	test   %eax,%eax
 804ce68:	0f 84 cc 00 00 00    	je     804cf3a <vfstest_paths+0x1ec5>
 804ce6e:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804ce74:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ce78:	c7 04 24 68 f7 05 08 	movl   $0x805f768,(%esp)
 804ce7f:	e8 37 d2 00 00       	call   805a0bb <stat>
 804ce84:	89 45 a0             	mov    %eax,-0x60(%ebp)
 804ce87:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ce8c:	89 04 24             	mov    %eax,(%esp)
 804ce8f:	e8 95 14 01 00       	call   805e329 <test_errstr>
 804ce94:	89 c2                	mov    %eax,%edx
 804ce96:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
 804ce9a:	0f 94 c0             	sete   %al
 804ce9d:	0f b6 c0             	movzbl %al,%eax
 804cea0:	89 54 24 18          	mov    %edx,0x18(%esp)
 804cea4:	c7 44 24 14 68 f7 05 	movl   $0x805f768,0x14(%esp)
 804ceab:	08 
 804ceac:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804ceb3:	08 
 804ceb4:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804cebb:	08 
 804cebc:	c7 44 24 08 a6 01 00 	movl   $0x1a6,0x8(%esp)
 804cec3:	00 
 804cec4:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804cecb:	08 
 804cecc:	89 04 24             	mov    %eax,(%esp)
 804cecf:	e8 bc 16 01 00       	call   805e590 <_test_assert>
 804ced4:	85 c0                	test   %eax,%eax
 804ced6:	74 62                	je     804cf3a <vfstest_paths+0x1ec5>
 804ced8:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804cede:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804cee4:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804ceea:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804cef0:	39 c3                	cmp    %eax,%ebx
 804cef2:	0f 94 c0             	sete   %al
 804cef5:	0f b6 c0             	movzbl %al,%eax
 804cef8:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804cefc:	c7 44 24 1c 68 f7 05 	movl   $0x805f768,0x1c(%esp)
 804cf03:	08 
 804cf04:	89 54 24 18          	mov    %edx,0x18(%esp)
 804cf08:	c7 44 24 14 24 e6 05 	movl   $0x805e624,0x14(%esp)
 804cf0f:	08 
 804cf10:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804cf17:	08 
 804cf18:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804cf1f:	08 
 804cf20:	c7 44 24 08 a6 01 00 	movl   $0x1a6,0x8(%esp)
 804cf27:	00 
 804cf28:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804cf2f:	08 
 804cf30:	89 04 24             	mov    %eax,(%esp)
 804cf33:	e8 58 16 01 00       	call   805e590 <_test_assert>
 804cf38:	eb 01                	jmp    804cf3b <vfstest_paths+0x1ec6>
 804cf3a:	90                   	nop

        /* extra slashes */
        paths_equal("1/2/3", "1/2/3/");
 804cf3b:	c7 04 24 ee f6 05 08 	movl   $0x805f6ee,(%esp)
 804cf42:	e8 4d b1 ff ff       	call   8048094 <makedirs>
 804cf47:	89 45 9c             	mov    %eax,-0x64(%ebp)
 804cf4a:	8b 45 9c             	mov    -0x64(%ebp),%eax
 804cf4d:	89 04 24             	mov    %eax,(%esp)
 804cf50:	e8 d4 13 01 00       	call   805e329 <test_errstr>
 804cf55:	89 c2                	mov    %eax,%edx
 804cf57:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
 804cf5b:	0f 94 c0             	sete   %al
 804cf5e:	0f b6 c0             	movzbl %al,%eax
 804cf61:	89 54 24 18          	mov    %edx,0x18(%esp)
 804cf65:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804cf6c:	08 
 804cf6d:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804cf74:	08 
 804cf75:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804cf7c:	08 
 804cf7d:	c7 44 24 08 a9 01 00 	movl   $0x1a9,0x8(%esp)
 804cf84:	00 
 804cf85:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804cf8c:	08 
 804cf8d:	89 04 24             	mov    %eax,(%esp)
 804cf90:	e8 fb 15 01 00       	call   805e590 <_test_assert>
 804cf95:	85 c0                	test   %eax,%eax
 804cf97:	0f 84 3a 01 00 00    	je     804d0d7 <vfstest_paths+0x2062>
 804cf9d:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804cfa3:	89 44 24 04          	mov    %eax,0x4(%esp)
 804cfa7:	c7 04 24 ee f6 05 08 	movl   $0x805f6ee,(%esp)
 804cfae:	e8 08 d1 00 00       	call   805a0bb <stat>
 804cfb3:	89 45 9c             	mov    %eax,-0x64(%ebp)
 804cfb6:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804cfbb:	89 04 24             	mov    %eax,(%esp)
 804cfbe:	e8 66 13 01 00       	call   805e329 <test_errstr>
 804cfc3:	89 c2                	mov    %eax,%edx
 804cfc5:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
 804cfc9:	0f 94 c0             	sete   %al
 804cfcc:	0f b6 c0             	movzbl %al,%eax
 804cfcf:	89 54 24 18          	mov    %edx,0x18(%esp)
 804cfd3:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804cfda:	08 
 804cfdb:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804cfe2:	08 
 804cfe3:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804cfea:	08 
 804cfeb:	c7 44 24 08 a9 01 00 	movl   $0x1a9,0x8(%esp)
 804cff2:	00 
 804cff3:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804cffa:	08 
 804cffb:	89 04 24             	mov    %eax,(%esp)
 804cffe:	e8 8d 15 01 00       	call   805e590 <_test_assert>
 804d003:	85 c0                	test   %eax,%eax
 804d005:	0f 84 cc 00 00 00    	je     804d0d7 <vfstest_paths+0x2062>
 804d00b:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804d011:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d015:	c7 04 24 9c f7 05 08 	movl   $0x805f79c,(%esp)
 804d01c:	e8 9a d0 00 00       	call   805a0bb <stat>
 804d021:	89 45 9c             	mov    %eax,-0x64(%ebp)
 804d024:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804d029:	89 04 24             	mov    %eax,(%esp)
 804d02c:	e8 f8 12 01 00       	call   805e329 <test_errstr>
 804d031:	89 c2                	mov    %eax,%edx
 804d033:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
 804d037:	0f 94 c0             	sete   %al
 804d03a:	0f b6 c0             	movzbl %al,%eax
 804d03d:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d041:	c7 44 24 14 9c f7 05 	movl   $0x805f79c,0x14(%esp)
 804d048:	08 
 804d049:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804d050:	08 
 804d051:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804d058:	08 
 804d059:	c7 44 24 08 a9 01 00 	movl   $0x1a9,0x8(%esp)
 804d060:	00 
 804d061:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d068:	08 
 804d069:	89 04 24             	mov    %eax,(%esp)
 804d06c:	e8 1f 15 01 00       	call   805e590 <_test_assert>
 804d071:	85 c0                	test   %eax,%eax
 804d073:	74 62                	je     804d0d7 <vfstest_paths+0x2062>
 804d075:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804d07b:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804d081:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804d087:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804d08d:	39 c3                	cmp    %eax,%ebx
 804d08f:	0f 94 c0             	sete   %al
 804d092:	0f b6 c0             	movzbl %al,%eax
 804d095:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804d099:	c7 44 24 1c 9c f7 05 	movl   $0x805f79c,0x1c(%esp)
 804d0a0:	08 
 804d0a1:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d0a5:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804d0ac:	08 
 804d0ad:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804d0b4:	08 
 804d0b5:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804d0bc:	08 
 804d0bd:	c7 44 24 08 a9 01 00 	movl   $0x1a9,0x8(%esp)
 804d0c4:	00 
 804d0c5:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d0cc:	08 
 804d0cd:	89 04 24             	mov    %eax,(%esp)
 804d0d0:	e8 bb 14 01 00       	call   805e590 <_test_assert>
 804d0d5:	eb 01                	jmp    804d0d8 <vfstest_paths+0x2063>
 804d0d7:	90                   	nop
        paths_equal("1/2/3", "1//2/3");
 804d0d8:	c7 04 24 ee f6 05 08 	movl   $0x805f6ee,(%esp)
 804d0df:	e8 b0 af ff ff       	call   8048094 <makedirs>
 804d0e4:	89 45 98             	mov    %eax,-0x68(%ebp)
 804d0e7:	8b 45 98             	mov    -0x68(%ebp),%eax
 804d0ea:	89 04 24             	mov    %eax,(%esp)
 804d0ed:	e8 37 12 01 00       	call   805e329 <test_errstr>
 804d0f2:	89 c2                	mov    %eax,%edx
 804d0f4:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
 804d0f8:	0f 94 c0             	sete   %al
 804d0fb:	0f b6 c0             	movzbl %al,%eax
 804d0fe:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d102:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804d109:	08 
 804d10a:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804d111:	08 
 804d112:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804d119:	08 
 804d11a:	c7 44 24 08 aa 01 00 	movl   $0x1aa,0x8(%esp)
 804d121:	00 
 804d122:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d129:	08 
 804d12a:	89 04 24             	mov    %eax,(%esp)
 804d12d:	e8 5e 14 01 00       	call   805e590 <_test_assert>
 804d132:	85 c0                	test   %eax,%eax
 804d134:	0f 84 3a 01 00 00    	je     804d274 <vfstest_paths+0x21ff>
 804d13a:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804d140:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d144:	c7 04 24 ee f6 05 08 	movl   $0x805f6ee,(%esp)
 804d14b:	e8 6b cf 00 00       	call   805a0bb <stat>
 804d150:	89 45 98             	mov    %eax,-0x68(%ebp)
 804d153:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804d158:	89 04 24             	mov    %eax,(%esp)
 804d15b:	e8 c9 11 01 00       	call   805e329 <test_errstr>
 804d160:	89 c2                	mov    %eax,%edx
 804d162:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
 804d166:	0f 94 c0             	sete   %al
 804d169:	0f b6 c0             	movzbl %al,%eax
 804d16c:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d170:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804d177:	08 
 804d178:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804d17f:	08 
 804d180:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804d187:	08 
 804d188:	c7 44 24 08 aa 01 00 	movl   $0x1aa,0x8(%esp)
 804d18f:	00 
 804d190:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d197:	08 
 804d198:	89 04 24             	mov    %eax,(%esp)
 804d19b:	e8 f0 13 01 00       	call   805e590 <_test_assert>
 804d1a0:	85 c0                	test   %eax,%eax
 804d1a2:	0f 84 cc 00 00 00    	je     804d274 <vfstest_paths+0x21ff>
 804d1a8:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804d1ae:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d1b2:	c7 04 24 a3 f7 05 08 	movl   $0x805f7a3,(%esp)
 804d1b9:	e8 fd ce 00 00       	call   805a0bb <stat>
 804d1be:	89 45 98             	mov    %eax,-0x68(%ebp)
 804d1c1:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804d1c6:	89 04 24             	mov    %eax,(%esp)
 804d1c9:	e8 5b 11 01 00       	call   805e329 <test_errstr>
 804d1ce:	89 c2                	mov    %eax,%edx
 804d1d0:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
 804d1d4:	0f 94 c0             	sete   %al
 804d1d7:	0f b6 c0             	movzbl %al,%eax
 804d1da:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d1de:	c7 44 24 14 a3 f7 05 	movl   $0x805f7a3,0x14(%esp)
 804d1e5:	08 
 804d1e6:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804d1ed:	08 
 804d1ee:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804d1f5:	08 
 804d1f6:	c7 44 24 08 aa 01 00 	movl   $0x1aa,0x8(%esp)
 804d1fd:	00 
 804d1fe:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d205:	08 
 804d206:	89 04 24             	mov    %eax,(%esp)
 804d209:	e8 82 13 01 00       	call   805e590 <_test_assert>
 804d20e:	85 c0                	test   %eax,%eax
 804d210:	74 62                	je     804d274 <vfstest_paths+0x21ff>
 804d212:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804d218:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804d21e:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804d224:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804d22a:	39 c3                	cmp    %eax,%ebx
 804d22c:	0f 94 c0             	sete   %al
 804d22f:	0f b6 c0             	movzbl %al,%eax
 804d232:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804d236:	c7 44 24 1c a3 f7 05 	movl   $0x805f7a3,0x1c(%esp)
 804d23d:	08 
 804d23e:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d242:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804d249:	08 
 804d24a:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804d251:	08 
 804d252:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804d259:	08 
 804d25a:	c7 44 24 08 aa 01 00 	movl   $0x1aa,0x8(%esp)
 804d261:	00 
 804d262:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d269:	08 
 804d26a:	89 04 24             	mov    %eax,(%esp)
 804d26d:	e8 1e 13 01 00       	call   805e590 <_test_assert>
 804d272:	eb 01                	jmp    804d275 <vfstest_paths+0x2200>
 804d274:	90                   	nop
        paths_equal("1/2/3", "1/2//3");
 804d275:	c7 04 24 ee f6 05 08 	movl   $0x805f6ee,(%esp)
 804d27c:	e8 13 ae ff ff       	call   8048094 <makedirs>
 804d281:	89 45 94             	mov    %eax,-0x6c(%ebp)
 804d284:	8b 45 94             	mov    -0x6c(%ebp),%eax
 804d287:	89 04 24             	mov    %eax,(%esp)
 804d28a:	e8 9a 10 01 00       	call   805e329 <test_errstr>
 804d28f:	89 c2                	mov    %eax,%edx
 804d291:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
 804d295:	0f 94 c0             	sete   %al
 804d298:	0f b6 c0             	movzbl %al,%eax
 804d29b:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d29f:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804d2a6:	08 
 804d2a7:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804d2ae:	08 
 804d2af:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804d2b6:	08 
 804d2b7:	c7 44 24 08 ab 01 00 	movl   $0x1ab,0x8(%esp)
 804d2be:	00 
 804d2bf:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d2c6:	08 
 804d2c7:	89 04 24             	mov    %eax,(%esp)
 804d2ca:	e8 c1 12 01 00       	call   805e590 <_test_assert>
 804d2cf:	85 c0                	test   %eax,%eax
 804d2d1:	0f 84 3a 01 00 00    	je     804d411 <vfstest_paths+0x239c>
 804d2d7:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804d2dd:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d2e1:	c7 04 24 ee f6 05 08 	movl   $0x805f6ee,(%esp)
 804d2e8:	e8 ce cd 00 00       	call   805a0bb <stat>
 804d2ed:	89 45 94             	mov    %eax,-0x6c(%ebp)
 804d2f0:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804d2f5:	89 04 24             	mov    %eax,(%esp)
 804d2f8:	e8 2c 10 01 00       	call   805e329 <test_errstr>
 804d2fd:	89 c2                	mov    %eax,%edx
 804d2ff:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
 804d303:	0f 94 c0             	sete   %al
 804d306:	0f b6 c0             	movzbl %al,%eax
 804d309:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d30d:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804d314:	08 
 804d315:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804d31c:	08 
 804d31d:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804d324:	08 
 804d325:	c7 44 24 08 ab 01 00 	movl   $0x1ab,0x8(%esp)
 804d32c:	00 
 804d32d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d334:	08 
 804d335:	89 04 24             	mov    %eax,(%esp)
 804d338:	e8 53 12 01 00       	call   805e590 <_test_assert>
 804d33d:	85 c0                	test   %eax,%eax
 804d33f:	0f 84 cc 00 00 00    	je     804d411 <vfstest_paths+0x239c>
 804d345:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804d34b:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d34f:	c7 04 24 aa f7 05 08 	movl   $0x805f7aa,(%esp)
 804d356:	e8 60 cd 00 00       	call   805a0bb <stat>
 804d35b:	89 45 94             	mov    %eax,-0x6c(%ebp)
 804d35e:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804d363:	89 04 24             	mov    %eax,(%esp)
 804d366:	e8 be 0f 01 00       	call   805e329 <test_errstr>
 804d36b:	89 c2                	mov    %eax,%edx
 804d36d:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
 804d371:	0f 94 c0             	sete   %al
 804d374:	0f b6 c0             	movzbl %al,%eax
 804d377:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d37b:	c7 44 24 14 aa f7 05 	movl   $0x805f7aa,0x14(%esp)
 804d382:	08 
 804d383:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804d38a:	08 
 804d38b:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804d392:	08 
 804d393:	c7 44 24 08 ab 01 00 	movl   $0x1ab,0x8(%esp)
 804d39a:	00 
 804d39b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d3a2:	08 
 804d3a3:	89 04 24             	mov    %eax,(%esp)
 804d3a6:	e8 e5 11 01 00       	call   805e590 <_test_assert>
 804d3ab:	85 c0                	test   %eax,%eax
 804d3ad:	74 62                	je     804d411 <vfstest_paths+0x239c>
 804d3af:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804d3b5:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804d3bb:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804d3c1:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804d3c7:	39 c3                	cmp    %eax,%ebx
 804d3c9:	0f 94 c0             	sete   %al
 804d3cc:	0f b6 c0             	movzbl %al,%eax
 804d3cf:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804d3d3:	c7 44 24 1c aa f7 05 	movl   $0x805f7aa,0x1c(%esp)
 804d3da:	08 
 804d3db:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d3df:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804d3e6:	08 
 804d3e7:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804d3ee:	08 
 804d3ef:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804d3f6:	08 
 804d3f7:	c7 44 24 08 ab 01 00 	movl   $0x1ab,0x8(%esp)
 804d3fe:	00 
 804d3ff:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d406:	08 
 804d407:	89 04 24             	mov    %eax,(%esp)
 804d40a:	e8 81 11 01 00       	call   805e590 <_test_assert>
 804d40f:	eb 01                	jmp    804d412 <vfstest_paths+0x239d>
 804d411:	90                   	nop
        paths_equal("1/2/3", "1//2//3");
 804d412:	c7 04 24 ee f6 05 08 	movl   $0x805f6ee,(%esp)
 804d419:	e8 76 ac ff ff       	call   8048094 <makedirs>
 804d41e:	89 45 90             	mov    %eax,-0x70(%ebp)
 804d421:	8b 45 90             	mov    -0x70(%ebp),%eax
 804d424:	89 04 24             	mov    %eax,(%esp)
 804d427:	e8 fd 0e 01 00       	call   805e329 <test_errstr>
 804d42c:	89 c2                	mov    %eax,%edx
 804d42e:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
 804d432:	0f 94 c0             	sete   %al
 804d435:	0f b6 c0             	movzbl %al,%eax
 804d438:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d43c:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804d443:	08 
 804d444:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804d44b:	08 
 804d44c:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804d453:	08 
 804d454:	c7 44 24 08 ac 01 00 	movl   $0x1ac,0x8(%esp)
 804d45b:	00 
 804d45c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d463:	08 
 804d464:	89 04 24             	mov    %eax,(%esp)
 804d467:	e8 24 11 01 00       	call   805e590 <_test_assert>
 804d46c:	85 c0                	test   %eax,%eax
 804d46e:	0f 84 3a 01 00 00    	je     804d5ae <vfstest_paths+0x2539>
 804d474:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804d47a:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d47e:	c7 04 24 ee f6 05 08 	movl   $0x805f6ee,(%esp)
 804d485:	e8 31 cc 00 00       	call   805a0bb <stat>
 804d48a:	89 45 90             	mov    %eax,-0x70(%ebp)
 804d48d:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804d492:	89 04 24             	mov    %eax,(%esp)
 804d495:	e8 8f 0e 01 00       	call   805e329 <test_errstr>
 804d49a:	89 c2                	mov    %eax,%edx
 804d49c:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
 804d4a0:	0f 94 c0             	sete   %al
 804d4a3:	0f b6 c0             	movzbl %al,%eax
 804d4a6:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d4aa:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804d4b1:	08 
 804d4b2:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804d4b9:	08 
 804d4ba:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804d4c1:	08 
 804d4c2:	c7 44 24 08 ac 01 00 	movl   $0x1ac,0x8(%esp)
 804d4c9:	00 
 804d4ca:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d4d1:	08 
 804d4d2:	89 04 24             	mov    %eax,(%esp)
 804d4d5:	e8 b6 10 01 00       	call   805e590 <_test_assert>
 804d4da:	85 c0                	test   %eax,%eax
 804d4dc:	0f 84 cc 00 00 00    	je     804d5ae <vfstest_paths+0x2539>
 804d4e2:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804d4e8:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d4ec:	c7 04 24 b1 f7 05 08 	movl   $0x805f7b1,(%esp)
 804d4f3:	e8 c3 cb 00 00       	call   805a0bb <stat>
 804d4f8:	89 45 90             	mov    %eax,-0x70(%ebp)
 804d4fb:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804d500:	89 04 24             	mov    %eax,(%esp)
 804d503:	e8 21 0e 01 00       	call   805e329 <test_errstr>
 804d508:	89 c2                	mov    %eax,%edx
 804d50a:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
 804d50e:	0f 94 c0             	sete   %al
 804d511:	0f b6 c0             	movzbl %al,%eax
 804d514:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d518:	c7 44 24 14 b1 f7 05 	movl   $0x805f7b1,0x14(%esp)
 804d51f:	08 
 804d520:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804d527:	08 
 804d528:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804d52f:	08 
 804d530:	c7 44 24 08 ac 01 00 	movl   $0x1ac,0x8(%esp)
 804d537:	00 
 804d538:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d53f:	08 
 804d540:	89 04 24             	mov    %eax,(%esp)
 804d543:	e8 48 10 01 00       	call   805e590 <_test_assert>
 804d548:	85 c0                	test   %eax,%eax
 804d54a:	74 62                	je     804d5ae <vfstest_paths+0x2539>
 804d54c:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804d552:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804d558:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804d55e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804d564:	39 c3                	cmp    %eax,%ebx
 804d566:	0f 94 c0             	sete   %al
 804d569:	0f b6 c0             	movzbl %al,%eax
 804d56c:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804d570:	c7 44 24 1c b1 f7 05 	movl   $0x805f7b1,0x1c(%esp)
 804d577:	08 
 804d578:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d57c:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804d583:	08 
 804d584:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804d58b:	08 
 804d58c:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804d593:	08 
 804d594:	c7 44 24 08 ac 01 00 	movl   $0x1ac,0x8(%esp)
 804d59b:	00 
 804d59c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d5a3:	08 
 804d5a4:	89 04 24             	mov    %eax,(%esp)
 804d5a7:	e8 e4 0f 01 00       	call   805e590 <_test_assert>
 804d5ac:	eb 01                	jmp    804d5af <vfstest_paths+0x253a>
 804d5ae:	90                   	nop
        paths_equal("1/2/3", "1//2//3/");
 804d5af:	c7 04 24 ee f6 05 08 	movl   $0x805f6ee,(%esp)
 804d5b6:	e8 d9 aa ff ff       	call   8048094 <makedirs>
 804d5bb:	89 45 8c             	mov    %eax,-0x74(%ebp)
 804d5be:	8b 45 8c             	mov    -0x74(%ebp),%eax
 804d5c1:	89 04 24             	mov    %eax,(%esp)
 804d5c4:	e8 60 0d 01 00       	call   805e329 <test_errstr>
 804d5c9:	89 c2                	mov    %eax,%edx
 804d5cb:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
 804d5cf:	0f 94 c0             	sete   %al
 804d5d2:	0f b6 c0             	movzbl %al,%eax
 804d5d5:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d5d9:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804d5e0:	08 
 804d5e1:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804d5e8:	08 
 804d5e9:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804d5f0:	08 
 804d5f1:	c7 44 24 08 ad 01 00 	movl   $0x1ad,0x8(%esp)
 804d5f8:	00 
 804d5f9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d600:	08 
 804d601:	89 04 24             	mov    %eax,(%esp)
 804d604:	e8 87 0f 01 00       	call   805e590 <_test_assert>
 804d609:	85 c0                	test   %eax,%eax
 804d60b:	0f 84 3a 01 00 00    	je     804d74b <vfstest_paths+0x26d6>
 804d611:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804d617:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d61b:	c7 04 24 ee f6 05 08 	movl   $0x805f6ee,(%esp)
 804d622:	e8 94 ca 00 00       	call   805a0bb <stat>
 804d627:	89 45 8c             	mov    %eax,-0x74(%ebp)
 804d62a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804d62f:	89 04 24             	mov    %eax,(%esp)
 804d632:	e8 f2 0c 01 00       	call   805e329 <test_errstr>
 804d637:	89 c2                	mov    %eax,%edx
 804d639:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
 804d63d:	0f 94 c0             	sete   %al
 804d640:	0f b6 c0             	movzbl %al,%eax
 804d643:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d647:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804d64e:	08 
 804d64f:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804d656:	08 
 804d657:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804d65e:	08 
 804d65f:	c7 44 24 08 ad 01 00 	movl   $0x1ad,0x8(%esp)
 804d666:	00 
 804d667:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d66e:	08 
 804d66f:	89 04 24             	mov    %eax,(%esp)
 804d672:	e8 19 0f 01 00       	call   805e590 <_test_assert>
 804d677:	85 c0                	test   %eax,%eax
 804d679:	0f 84 cc 00 00 00    	je     804d74b <vfstest_paths+0x26d6>
 804d67f:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804d685:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d689:	c7 04 24 b9 f7 05 08 	movl   $0x805f7b9,(%esp)
 804d690:	e8 26 ca 00 00       	call   805a0bb <stat>
 804d695:	89 45 8c             	mov    %eax,-0x74(%ebp)
 804d698:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804d69d:	89 04 24             	mov    %eax,(%esp)
 804d6a0:	e8 84 0c 01 00       	call   805e329 <test_errstr>
 804d6a5:	89 c2                	mov    %eax,%edx
 804d6a7:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
 804d6ab:	0f 94 c0             	sete   %al
 804d6ae:	0f b6 c0             	movzbl %al,%eax
 804d6b1:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d6b5:	c7 44 24 14 b9 f7 05 	movl   $0x805f7b9,0x14(%esp)
 804d6bc:	08 
 804d6bd:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804d6c4:	08 
 804d6c5:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804d6cc:	08 
 804d6cd:	c7 44 24 08 ad 01 00 	movl   $0x1ad,0x8(%esp)
 804d6d4:	00 
 804d6d5:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d6dc:	08 
 804d6dd:	89 04 24             	mov    %eax,(%esp)
 804d6e0:	e8 ab 0e 01 00       	call   805e590 <_test_assert>
 804d6e5:	85 c0                	test   %eax,%eax
 804d6e7:	74 62                	je     804d74b <vfstest_paths+0x26d6>
 804d6e9:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804d6ef:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804d6f5:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804d6fb:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804d701:	39 c3                	cmp    %eax,%ebx
 804d703:	0f 94 c0             	sete   %al
 804d706:	0f b6 c0             	movzbl %al,%eax
 804d709:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804d70d:	c7 44 24 1c b9 f7 05 	movl   $0x805f7b9,0x1c(%esp)
 804d714:	08 
 804d715:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d719:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804d720:	08 
 804d721:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804d728:	08 
 804d729:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804d730:	08 
 804d731:	c7 44 24 08 ad 01 00 	movl   $0x1ad,0x8(%esp)
 804d738:	00 
 804d739:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d740:	08 
 804d741:	89 04 24             	mov    %eax,(%esp)
 804d744:	e8 47 0e 01 00       	call   805e590 <_test_assert>
 804d749:	eb 01                	jmp    804d74c <vfstest_paths+0x26d7>
 804d74b:	90                   	nop
        paths_equal("1/2/3", "1///2///3///");
 804d74c:	c7 04 24 ee f6 05 08 	movl   $0x805f6ee,(%esp)
 804d753:	e8 3c a9 ff ff       	call   8048094 <makedirs>
 804d758:	89 45 88             	mov    %eax,-0x78(%ebp)
 804d75b:	8b 45 88             	mov    -0x78(%ebp),%eax
 804d75e:	89 04 24             	mov    %eax,(%esp)
 804d761:	e8 c3 0b 01 00       	call   805e329 <test_errstr>
 804d766:	89 c2                	mov    %eax,%edx
 804d768:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
 804d76c:	0f 94 c0             	sete   %al
 804d76f:	0f b6 c0             	movzbl %al,%eax
 804d772:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d776:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804d77d:	08 
 804d77e:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804d785:	08 
 804d786:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804d78d:	08 
 804d78e:	c7 44 24 08 ae 01 00 	movl   $0x1ae,0x8(%esp)
 804d795:	00 
 804d796:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d79d:	08 
 804d79e:	89 04 24             	mov    %eax,(%esp)
 804d7a1:	e8 ea 0d 01 00       	call   805e590 <_test_assert>
 804d7a6:	85 c0                	test   %eax,%eax
 804d7a8:	0f 84 3a 01 00 00    	je     804d8e8 <vfstest_paths+0x2873>
 804d7ae:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804d7b4:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d7b8:	c7 04 24 ee f6 05 08 	movl   $0x805f6ee,(%esp)
 804d7bf:	e8 f7 c8 00 00       	call   805a0bb <stat>
 804d7c4:	89 45 88             	mov    %eax,-0x78(%ebp)
 804d7c7:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804d7cc:	89 04 24             	mov    %eax,(%esp)
 804d7cf:	e8 55 0b 01 00       	call   805e329 <test_errstr>
 804d7d4:	89 c2                	mov    %eax,%edx
 804d7d6:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
 804d7da:	0f 94 c0             	sete   %al
 804d7dd:	0f b6 c0             	movzbl %al,%eax
 804d7e0:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d7e4:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804d7eb:	08 
 804d7ec:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804d7f3:	08 
 804d7f4:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804d7fb:	08 
 804d7fc:	c7 44 24 08 ae 01 00 	movl   $0x1ae,0x8(%esp)
 804d803:	00 
 804d804:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d80b:	08 
 804d80c:	89 04 24             	mov    %eax,(%esp)
 804d80f:	e8 7c 0d 01 00       	call   805e590 <_test_assert>
 804d814:	85 c0                	test   %eax,%eax
 804d816:	0f 84 cc 00 00 00    	je     804d8e8 <vfstest_paths+0x2873>
 804d81c:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804d822:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d826:	c7 04 24 c2 f7 05 08 	movl   $0x805f7c2,(%esp)
 804d82d:	e8 89 c8 00 00       	call   805a0bb <stat>
 804d832:	89 45 88             	mov    %eax,-0x78(%ebp)
 804d835:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804d83a:	89 04 24             	mov    %eax,(%esp)
 804d83d:	e8 e7 0a 01 00       	call   805e329 <test_errstr>
 804d842:	89 c2                	mov    %eax,%edx
 804d844:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
 804d848:	0f 94 c0             	sete   %al
 804d84b:	0f b6 c0             	movzbl %al,%eax
 804d84e:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d852:	c7 44 24 14 c2 f7 05 	movl   $0x805f7c2,0x14(%esp)
 804d859:	08 
 804d85a:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804d861:	08 
 804d862:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804d869:	08 
 804d86a:	c7 44 24 08 ae 01 00 	movl   $0x1ae,0x8(%esp)
 804d871:	00 
 804d872:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d879:	08 
 804d87a:	89 04 24             	mov    %eax,(%esp)
 804d87d:	e8 0e 0d 01 00       	call   805e590 <_test_assert>
 804d882:	85 c0                	test   %eax,%eax
 804d884:	74 62                	je     804d8e8 <vfstest_paths+0x2873>
 804d886:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804d88c:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804d892:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804d898:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804d89e:	39 c3                	cmp    %eax,%ebx
 804d8a0:	0f 94 c0             	sete   %al
 804d8a3:	0f b6 c0             	movzbl %al,%eax
 804d8a6:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804d8aa:	c7 44 24 1c c2 f7 05 	movl   $0x805f7c2,0x1c(%esp)
 804d8b1:	08 
 804d8b2:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d8b6:	c7 44 24 14 ee f6 05 	movl   $0x805f6ee,0x14(%esp)
 804d8bd:	08 
 804d8be:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804d8c5:	08 
 804d8c6:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804d8cd:	08 
 804d8ce:	c7 44 24 08 ae 01 00 	movl   $0x1ae,0x8(%esp)
 804d8d5:	00 
 804d8d6:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d8dd:	08 
 804d8de:	89 04 24             	mov    %eax,(%esp)
 804d8e1:	e8 aa 0c 01 00       	call   805e590 <_test_assert>
 804d8e6:	eb 01                	jmp    804d8e9 <vfstest_paths+0x2874>
 804d8e8:	90                   	nop

        /* strange names */
        paths_equal("-", "-");
 804d8e9:	c7 04 24 cf f7 05 08 	movl   $0x805f7cf,(%esp)
 804d8f0:	e8 9f a7 ff ff       	call   8048094 <makedirs>
 804d8f5:	89 45 84             	mov    %eax,-0x7c(%ebp)
 804d8f8:	8b 45 84             	mov    -0x7c(%ebp),%eax
 804d8fb:	89 04 24             	mov    %eax,(%esp)
 804d8fe:	e8 26 0a 01 00       	call   805e329 <test_errstr>
 804d903:	89 c2                	mov    %eax,%edx
 804d905:	83 7d 84 00          	cmpl   $0x0,-0x7c(%ebp)
 804d909:	0f 94 c0             	sete   %al
 804d90c:	0f b6 c0             	movzbl %al,%eax
 804d90f:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d913:	c7 44 24 14 cf f7 05 	movl   $0x805f7cf,0x14(%esp)
 804d91a:	08 
 804d91b:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804d922:	08 
 804d923:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804d92a:	08 
 804d92b:	c7 44 24 08 b1 01 00 	movl   $0x1b1,0x8(%esp)
 804d932:	00 
 804d933:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d93a:	08 
 804d93b:	89 04 24             	mov    %eax,(%esp)
 804d93e:	e8 4d 0c 01 00       	call   805e590 <_test_assert>
 804d943:	85 c0                	test   %eax,%eax
 804d945:	0f 84 3a 01 00 00    	je     804da85 <vfstest_paths+0x2a10>
 804d94b:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804d951:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d955:	c7 04 24 cf f7 05 08 	movl   $0x805f7cf,(%esp)
 804d95c:	e8 5a c7 00 00       	call   805a0bb <stat>
 804d961:	89 45 84             	mov    %eax,-0x7c(%ebp)
 804d964:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804d969:	89 04 24             	mov    %eax,(%esp)
 804d96c:	e8 b8 09 01 00       	call   805e329 <test_errstr>
 804d971:	89 c2                	mov    %eax,%edx
 804d973:	83 7d 84 00          	cmpl   $0x0,-0x7c(%ebp)
 804d977:	0f 94 c0             	sete   %al
 804d97a:	0f b6 c0             	movzbl %al,%eax
 804d97d:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d981:	c7 44 24 14 cf f7 05 	movl   $0x805f7cf,0x14(%esp)
 804d988:	08 
 804d989:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804d990:	08 
 804d991:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804d998:	08 
 804d999:	c7 44 24 08 b1 01 00 	movl   $0x1b1,0x8(%esp)
 804d9a0:	00 
 804d9a1:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804d9a8:	08 
 804d9a9:	89 04 24             	mov    %eax,(%esp)
 804d9ac:	e8 df 0b 01 00       	call   805e590 <_test_assert>
 804d9b1:	85 c0                	test   %eax,%eax
 804d9b3:	0f 84 cc 00 00 00    	je     804da85 <vfstest_paths+0x2a10>
 804d9b9:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804d9bf:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d9c3:	c7 04 24 cf f7 05 08 	movl   $0x805f7cf,(%esp)
 804d9ca:	e8 ec c6 00 00       	call   805a0bb <stat>
 804d9cf:	89 45 84             	mov    %eax,-0x7c(%ebp)
 804d9d2:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804d9d7:	89 04 24             	mov    %eax,(%esp)
 804d9da:	e8 4a 09 01 00       	call   805e329 <test_errstr>
 804d9df:	89 c2                	mov    %eax,%edx
 804d9e1:	83 7d 84 00          	cmpl   $0x0,-0x7c(%ebp)
 804d9e5:	0f 94 c0             	sete   %al
 804d9e8:	0f b6 c0             	movzbl %al,%eax
 804d9eb:	89 54 24 18          	mov    %edx,0x18(%esp)
 804d9ef:	c7 44 24 14 cf f7 05 	movl   $0x805f7cf,0x14(%esp)
 804d9f6:	08 
 804d9f7:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804d9fe:	08 
 804d9ff:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804da06:	08 
 804da07:	c7 44 24 08 b1 01 00 	movl   $0x1b1,0x8(%esp)
 804da0e:	00 
 804da0f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804da16:	08 
 804da17:	89 04 24             	mov    %eax,(%esp)
 804da1a:	e8 71 0b 01 00       	call   805e590 <_test_assert>
 804da1f:	85 c0                	test   %eax,%eax
 804da21:	74 62                	je     804da85 <vfstest_paths+0x2a10>
 804da23:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804da29:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804da2f:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804da35:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804da3b:	39 c3                	cmp    %eax,%ebx
 804da3d:	0f 94 c0             	sete   %al
 804da40:	0f b6 c0             	movzbl %al,%eax
 804da43:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804da47:	c7 44 24 1c cf f7 05 	movl   $0x805f7cf,0x1c(%esp)
 804da4e:	08 
 804da4f:	89 54 24 18          	mov    %edx,0x18(%esp)
 804da53:	c7 44 24 14 cf f7 05 	movl   $0x805f7cf,0x14(%esp)
 804da5a:	08 
 804da5b:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804da62:	08 
 804da63:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804da6a:	08 
 804da6b:	c7 44 24 08 b1 01 00 	movl   $0x1b1,0x8(%esp)
 804da72:	00 
 804da73:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804da7a:	08 
 804da7b:	89 04 24             	mov    %eax,(%esp)
 804da7e:	e8 0d 0b 01 00       	call   805e590 <_test_assert>
 804da83:	eb 01                	jmp    804da86 <vfstest_paths+0x2a11>
 804da85:	90                   	nop
        paths_equal(" ", " ");
 804da86:	c7 04 24 d1 f7 05 08 	movl   $0x805f7d1,(%esp)
 804da8d:	e8 02 a6 ff ff       	call   8048094 <makedirs>
 804da92:	89 45 80             	mov    %eax,-0x80(%ebp)
 804da95:	8b 45 80             	mov    -0x80(%ebp),%eax
 804da98:	89 04 24             	mov    %eax,(%esp)
 804da9b:	e8 89 08 01 00       	call   805e329 <test_errstr>
 804daa0:	89 c2                	mov    %eax,%edx
 804daa2:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
 804daa6:	0f 94 c0             	sete   %al
 804daa9:	0f b6 c0             	movzbl %al,%eax
 804daac:	89 54 24 18          	mov    %edx,0x18(%esp)
 804dab0:	c7 44 24 14 d1 f7 05 	movl   $0x805f7d1,0x14(%esp)
 804dab7:	08 
 804dab8:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804dabf:	08 
 804dac0:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804dac7:	08 
 804dac8:	c7 44 24 08 b2 01 00 	movl   $0x1b2,0x8(%esp)
 804dacf:	00 
 804dad0:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804dad7:	08 
 804dad8:	89 04 24             	mov    %eax,(%esp)
 804dadb:	e8 b0 0a 01 00       	call   805e590 <_test_assert>
 804dae0:	85 c0                	test   %eax,%eax
 804dae2:	0f 84 3a 01 00 00    	je     804dc22 <vfstest_paths+0x2bad>
 804dae8:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804daee:	89 44 24 04          	mov    %eax,0x4(%esp)
 804daf2:	c7 04 24 d1 f7 05 08 	movl   $0x805f7d1,(%esp)
 804daf9:	e8 bd c5 00 00       	call   805a0bb <stat>
 804dafe:	89 45 80             	mov    %eax,-0x80(%ebp)
 804db01:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804db06:	89 04 24             	mov    %eax,(%esp)
 804db09:	e8 1b 08 01 00       	call   805e329 <test_errstr>
 804db0e:	89 c2                	mov    %eax,%edx
 804db10:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
 804db14:	0f 94 c0             	sete   %al
 804db17:	0f b6 c0             	movzbl %al,%eax
 804db1a:	89 54 24 18          	mov    %edx,0x18(%esp)
 804db1e:	c7 44 24 14 d1 f7 05 	movl   $0x805f7d1,0x14(%esp)
 804db25:	08 
 804db26:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804db2d:	08 
 804db2e:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804db35:	08 
 804db36:	c7 44 24 08 b2 01 00 	movl   $0x1b2,0x8(%esp)
 804db3d:	00 
 804db3e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804db45:	08 
 804db46:	89 04 24             	mov    %eax,(%esp)
 804db49:	e8 42 0a 01 00       	call   805e590 <_test_assert>
 804db4e:	85 c0                	test   %eax,%eax
 804db50:	0f 84 cc 00 00 00    	je     804dc22 <vfstest_paths+0x2bad>
 804db56:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804db5c:	89 44 24 04          	mov    %eax,0x4(%esp)
 804db60:	c7 04 24 d1 f7 05 08 	movl   $0x805f7d1,(%esp)
 804db67:	e8 4f c5 00 00       	call   805a0bb <stat>
 804db6c:	89 45 80             	mov    %eax,-0x80(%ebp)
 804db6f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804db74:	89 04 24             	mov    %eax,(%esp)
 804db77:	e8 ad 07 01 00       	call   805e329 <test_errstr>
 804db7c:	89 c2                	mov    %eax,%edx
 804db7e:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
 804db82:	0f 94 c0             	sete   %al
 804db85:	0f b6 c0             	movzbl %al,%eax
 804db88:	89 54 24 18          	mov    %edx,0x18(%esp)
 804db8c:	c7 44 24 14 d1 f7 05 	movl   $0x805f7d1,0x14(%esp)
 804db93:	08 
 804db94:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804db9b:	08 
 804db9c:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804dba3:	08 
 804dba4:	c7 44 24 08 b2 01 00 	movl   $0x1b2,0x8(%esp)
 804dbab:	00 
 804dbac:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804dbb3:	08 
 804dbb4:	89 04 24             	mov    %eax,(%esp)
 804dbb7:	e8 d4 09 01 00       	call   805e590 <_test_assert>
 804dbbc:	85 c0                	test   %eax,%eax
 804dbbe:	74 62                	je     804dc22 <vfstest_paths+0x2bad>
 804dbc0:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804dbc6:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804dbcc:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804dbd2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804dbd8:	39 c3                	cmp    %eax,%ebx
 804dbda:	0f 94 c0             	sete   %al
 804dbdd:	0f b6 c0             	movzbl %al,%eax
 804dbe0:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804dbe4:	c7 44 24 1c d1 f7 05 	movl   $0x805f7d1,0x1c(%esp)
 804dbeb:	08 
 804dbec:	89 54 24 18          	mov    %edx,0x18(%esp)
 804dbf0:	c7 44 24 14 d1 f7 05 	movl   $0x805f7d1,0x14(%esp)
 804dbf7:	08 
 804dbf8:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804dbff:	08 
 804dc00:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804dc07:	08 
 804dc08:	c7 44 24 08 b2 01 00 	movl   $0x1b2,0x8(%esp)
 804dc0f:	00 
 804dc10:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804dc17:	08 
 804dc18:	89 04 24             	mov    %eax,(%esp)
 804dc1b:	e8 70 09 01 00       	call   805e590 <_test_assert>
 804dc20:	eb 01                	jmp    804dc23 <vfstest_paths+0x2bae>
 804dc22:	90                   	nop
        paths_equal("\\", "\\");
 804dc23:	c7 04 24 d3 f7 05 08 	movl   $0x805f7d3,(%esp)
 804dc2a:	e8 65 a4 ff ff       	call   8048094 <makedirs>
 804dc2f:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
 804dc35:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
 804dc3b:	89 04 24             	mov    %eax,(%esp)
 804dc3e:	e8 e6 06 01 00       	call   805e329 <test_errstr>
 804dc43:	89 c2                	mov    %eax,%edx
 804dc45:	83 bd 7c ff ff ff 00 	cmpl   $0x0,-0x84(%ebp)
 804dc4c:	0f 94 c0             	sete   %al
 804dc4f:	0f b6 c0             	movzbl %al,%eax
 804dc52:	89 54 24 18          	mov    %edx,0x18(%esp)
 804dc56:	c7 44 24 14 d3 f7 05 	movl   $0x805f7d3,0x14(%esp)
 804dc5d:	08 
 804dc5e:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804dc65:	08 
 804dc66:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804dc6d:	08 
 804dc6e:	c7 44 24 08 b3 01 00 	movl   $0x1b3,0x8(%esp)
 804dc75:	00 
 804dc76:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804dc7d:	08 
 804dc7e:	89 04 24             	mov    %eax,(%esp)
 804dc81:	e8 0a 09 01 00       	call   805e590 <_test_assert>
 804dc86:	85 c0                	test   %eax,%eax
 804dc88:	0f 84 46 01 00 00    	je     804ddd4 <vfstest_paths+0x2d5f>
 804dc8e:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804dc94:	89 44 24 04          	mov    %eax,0x4(%esp)
 804dc98:	c7 04 24 d3 f7 05 08 	movl   $0x805f7d3,(%esp)
 804dc9f:	e8 17 c4 00 00       	call   805a0bb <stat>
 804dca4:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
 804dcaa:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804dcaf:	89 04 24             	mov    %eax,(%esp)
 804dcb2:	e8 72 06 01 00       	call   805e329 <test_errstr>
 804dcb7:	89 c2                	mov    %eax,%edx
 804dcb9:	83 bd 7c ff ff ff 00 	cmpl   $0x0,-0x84(%ebp)
 804dcc0:	0f 94 c0             	sete   %al
 804dcc3:	0f b6 c0             	movzbl %al,%eax
 804dcc6:	89 54 24 18          	mov    %edx,0x18(%esp)
 804dcca:	c7 44 24 14 d3 f7 05 	movl   $0x805f7d3,0x14(%esp)
 804dcd1:	08 
 804dcd2:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804dcd9:	08 
 804dcda:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804dce1:	08 
 804dce2:	c7 44 24 08 b3 01 00 	movl   $0x1b3,0x8(%esp)
 804dce9:	00 
 804dcea:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804dcf1:	08 
 804dcf2:	89 04 24             	mov    %eax,(%esp)
 804dcf5:	e8 96 08 01 00       	call   805e590 <_test_assert>
 804dcfa:	85 c0                	test   %eax,%eax
 804dcfc:	0f 84 d2 00 00 00    	je     804ddd4 <vfstest_paths+0x2d5f>
 804dd02:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804dd08:	89 44 24 04          	mov    %eax,0x4(%esp)
 804dd0c:	c7 04 24 d3 f7 05 08 	movl   $0x805f7d3,(%esp)
 804dd13:	e8 a3 c3 00 00       	call   805a0bb <stat>
 804dd18:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
 804dd1e:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804dd23:	89 04 24             	mov    %eax,(%esp)
 804dd26:	e8 fe 05 01 00       	call   805e329 <test_errstr>
 804dd2b:	89 c2                	mov    %eax,%edx
 804dd2d:	83 bd 7c ff ff ff 00 	cmpl   $0x0,-0x84(%ebp)
 804dd34:	0f 94 c0             	sete   %al
 804dd37:	0f b6 c0             	movzbl %al,%eax
 804dd3a:	89 54 24 18          	mov    %edx,0x18(%esp)
 804dd3e:	c7 44 24 14 d3 f7 05 	movl   $0x805f7d3,0x14(%esp)
 804dd45:	08 
 804dd46:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804dd4d:	08 
 804dd4e:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804dd55:	08 
 804dd56:	c7 44 24 08 b3 01 00 	movl   $0x1b3,0x8(%esp)
 804dd5d:	00 
 804dd5e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804dd65:	08 
 804dd66:	89 04 24             	mov    %eax,(%esp)
 804dd69:	e8 22 08 01 00       	call   805e590 <_test_assert>
 804dd6e:	85 c0                	test   %eax,%eax
 804dd70:	74 62                	je     804ddd4 <vfstest_paths+0x2d5f>
 804dd72:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804dd78:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804dd7e:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804dd84:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804dd8a:	39 c3                	cmp    %eax,%ebx
 804dd8c:	0f 94 c0             	sete   %al
 804dd8f:	0f b6 c0             	movzbl %al,%eax
 804dd92:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804dd96:	c7 44 24 1c d3 f7 05 	movl   $0x805f7d3,0x1c(%esp)
 804dd9d:	08 
 804dd9e:	89 54 24 18          	mov    %edx,0x18(%esp)
 804dda2:	c7 44 24 14 d3 f7 05 	movl   $0x805f7d3,0x14(%esp)
 804dda9:	08 
 804ddaa:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804ddb1:	08 
 804ddb2:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804ddb9:	08 
 804ddba:	c7 44 24 08 b3 01 00 	movl   $0x1b3,0x8(%esp)
 804ddc1:	00 
 804ddc2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ddc9:	08 
 804ddca:	89 04 24             	mov    %eax,(%esp)
 804ddcd:	e8 be 07 01 00       	call   805e590 <_test_assert>
 804ddd2:	eb 01                	jmp    804ddd5 <vfstest_paths+0x2d60>
 804ddd4:	90                   	nop
        paths_equal("0", "0");
 804ddd5:	c7 04 24 d5 f7 05 08 	movl   $0x805f7d5,(%esp)
 804dddc:	e8 b3 a2 ff ff       	call   8048094 <makedirs>
 804dde1:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
 804dde7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
 804dded:	89 04 24             	mov    %eax,(%esp)
 804ddf0:	e8 34 05 01 00       	call   805e329 <test_errstr>
 804ddf5:	89 c2                	mov    %eax,%edx
 804ddf7:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
 804ddfe:	0f 94 c0             	sete   %al
 804de01:	0f b6 c0             	movzbl %al,%eax
 804de04:	89 54 24 18          	mov    %edx,0x18(%esp)
 804de08:	c7 44 24 14 d5 f7 05 	movl   $0x805f7d5,0x14(%esp)
 804de0f:	08 
 804de10:	c7 44 24 10 7a f6 05 	movl   $0x805f67a,0x10(%esp)
 804de17:	08 
 804de18:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804de1f:	08 
 804de20:	c7 44 24 08 b4 01 00 	movl   $0x1b4,0x8(%esp)
 804de27:	00 
 804de28:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804de2f:	08 
 804de30:	89 04 24             	mov    %eax,(%esp)
 804de33:	e8 58 07 01 00       	call   805e590 <_test_assert>
 804de38:	85 c0                	test   %eax,%eax
 804de3a:	0f 84 46 01 00 00    	je     804df86 <vfstest_paths+0x2f11>
 804de40:	8d 85 a4 fe ff ff    	lea    -0x15c(%ebp),%eax
 804de46:	89 44 24 04          	mov    %eax,0x4(%esp)
 804de4a:	c7 04 24 d5 f7 05 08 	movl   $0x805f7d5,(%esp)
 804de51:	e8 65 c2 00 00       	call   805a0bb <stat>
 804de56:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
 804de5c:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804de61:	89 04 24             	mov    %eax,(%esp)
 804de64:	e8 c0 04 01 00       	call   805e329 <test_errstr>
 804de69:	89 c2                	mov    %eax,%edx
 804de6b:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
 804de72:	0f 94 c0             	sete   %al
 804de75:	0f b6 c0             	movzbl %al,%eax
 804de78:	89 54 24 18          	mov    %edx,0x18(%esp)
 804de7c:	c7 44 24 14 d5 f7 05 	movl   $0x805f7d5,0x14(%esp)
 804de83:	08 
 804de84:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804de8b:	08 
 804de8c:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804de93:	08 
 804de94:	c7 44 24 08 b4 01 00 	movl   $0x1b4,0x8(%esp)
 804de9b:	00 
 804de9c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804dea3:	08 
 804dea4:	89 04 24             	mov    %eax,(%esp)
 804dea7:	e8 e4 06 01 00       	call   805e590 <_test_assert>
 804deac:	85 c0                	test   %eax,%eax
 804deae:	0f 84 d2 00 00 00    	je     804df86 <vfstest_paths+0x2f11>
 804deb4:	8d 85 d8 fe ff ff    	lea    -0x128(%ebp),%eax
 804deba:	89 44 24 04          	mov    %eax,0x4(%esp)
 804debe:	c7 04 24 d5 f7 05 08 	movl   $0x805f7d5,(%esp)
 804dec5:	e8 f1 c1 00 00       	call   805a0bb <stat>
 804deca:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
 804ded0:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ded5:	89 04 24             	mov    %eax,(%esp)
 804ded8:	e8 4c 04 01 00       	call   805e329 <test_errstr>
 804dedd:	89 c2                	mov    %eax,%edx
 804dedf:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
 804dee6:	0f 94 c0             	sete   %al
 804dee9:	0f b6 c0             	movzbl %al,%eax
 804deec:	89 54 24 18          	mov    %edx,0x18(%esp)
 804def0:	c7 44 24 14 d5 f7 05 	movl   $0x805f7d5,0x14(%esp)
 804def7:	08 
 804def8:	c7 44 24 10 96 f6 05 	movl   $0x805f696,0x10(%esp)
 804deff:	08 
 804df00:	c7 44 24 0c 8d f6 05 	movl   $0x805f68d,0xc(%esp)
 804df07:	08 
 804df08:	c7 44 24 08 b4 01 00 	movl   $0x1b4,0x8(%esp)
 804df0f:	00 
 804df10:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804df17:	08 
 804df18:	89 04 24             	mov    %eax,(%esp)
 804df1b:	e8 70 06 01 00       	call   805e590 <_test_assert>
 804df20:	85 c0                	test   %eax,%eax
 804df22:	74 62                	je     804df86 <vfstest_paths+0x2f11>
 804df24:	8b 8d dc fe ff ff    	mov    -0x124(%ebp),%ecx
 804df2a:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
 804df30:	8b 9d a8 fe ff ff    	mov    -0x158(%ebp),%ebx
 804df36:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
 804df3c:	39 c3                	cmp    %eax,%ebx
 804df3e:	0f 94 c0             	sete   %al
 804df41:	0f b6 c0             	movzbl %al,%eax
 804df44:	89 4c 24 20          	mov    %ecx,0x20(%esp)
 804df48:	c7 44 24 1c d5 f7 05 	movl   $0x805f7d5,0x1c(%esp)
 804df4f:	08 
 804df50:	89 54 24 18          	mov    %edx,0x18(%esp)
 804df54:	c7 44 24 14 d5 f7 05 	movl   $0x805f7d5,0x14(%esp)
 804df5b:	08 
 804df5c:	c7 44 24 10 a8 f6 05 	movl   $0x805f6a8,0x10(%esp)
 804df63:	08 
 804df64:	c7 44 24 0c d3 f6 05 	movl   $0x805f6d3,0xc(%esp)
 804df6b:	08 
 804df6c:	c7 44 24 08 b4 01 00 	movl   $0x1b4,0x8(%esp)
 804df73:	00 
 804df74:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804df7b:	08 
 804df7c:	89 04 24             	mov    %eax,(%esp)
 804df7f:	e8 0c 06 01 00       	call   805e590 <_test_assert>
 804df84:	eb 01                	jmp    804df87 <vfstest_paths+0x2f12>
 804df86:	90                   	nop

        struct stat st;

        /* error cases */
        syscall_fail(stat("asdf", &st), ENOENT);
 804df87:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 804df8e:	e8 96 03 01 00       	call   805e329 <test_errstr>
 804df93:	89 c3                	mov    %eax,%ebx
 804df95:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804df9c:	00 00 00 
 804df9f:	8d 85 0c ff ff ff    	lea    -0xf4(%ebp),%eax
 804dfa5:	89 44 24 04          	mov    %eax,0x4(%esp)
 804dfa9:	c7 04 24 d7 f7 05 08 	movl   $0x805f7d7,(%esp)
 804dfb0:	e8 06 c1 00 00       	call   805a0bb <stat>
 804dfb5:	83 f8 ff             	cmp    $0xffffffff,%eax
 804dfb8:	0f 94 c0             	sete   %al
 804dfbb:	0f b6 c0             	movzbl %al,%eax
 804dfbe:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 804dfc5:	00 
 804dfc6:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804dfca:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804dfd1:	08 
 804dfd2:	c7 44 24 0c dc f7 05 	movl   $0x805f7dc,0xc(%esp)
 804dfd9:	08 
 804dfda:	c7 44 24 08 b9 01 00 	movl   $0x1b9,0x8(%esp)
 804dfe1:	00 
 804dfe2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804dfe9:	08 
 804dfea:	89 04 24             	mov    %eax,(%esp)
 804dfed:	e8 9e 05 01 00       	call   805e590 <_test_assert>
 804dff2:	85 c0                	test   %eax,%eax
 804dff4:	0f 84 83 00 00 00    	je     804e07d <vfstest_paths+0x3008>
 804dffa:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804e000:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e005:	89 04 24             	mov    %eax,(%esp)
 804e008:	e8 1c 03 01 00       	call   805e329 <test_errstr>
 804e00d:	89 c6                	mov    %eax,%esi
 804e00f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 804e016:	e8 0e 03 01 00       	call   805e329 <test_errstr>
 804e01b:	89 c3                	mov    %eax,%ebx
 804e01d:	8d 85 0c ff ff ff    	lea    -0xf4(%ebp),%eax
 804e023:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e027:	c7 04 24 d7 f7 05 08 	movl   $0x805f7d7,(%esp)
 804e02e:	e8 88 c0 00 00       	call   805a0bb <stat>
 804e033:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e038:	83 f8 02             	cmp    $0x2,%eax
 804e03b:	0f 94 c0             	sete   %al
 804e03e:	0f b6 c0             	movzbl %al,%eax
 804e041:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804e045:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804e049:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 804e050:	00 
 804e051:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e055:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804e05c:	08 
 804e05d:	c7 44 24 0c 04 f8 05 	movl   $0x805f804,0xc(%esp)
 804e064:	08 
 804e065:	c7 44 24 08 b9 01 00 	movl   $0x1b9,0x8(%esp)
 804e06c:	00 
 804e06d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e074:	08 
 804e075:	89 04 24             	mov    %eax,(%esp)
 804e078:	e8 13 05 01 00       	call   805e590 <_test_assert>
        syscall_fail(stat("1/asdf", &st), ENOENT);
 804e07d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 804e084:	e8 a0 02 01 00       	call   805e329 <test_errstr>
 804e089:	89 c3                	mov    %eax,%ebx
 804e08b:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804e092:	00 00 00 
 804e095:	8d 85 0c ff ff ff    	lea    -0xf4(%ebp),%eax
 804e09b:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e09f:	c7 04 24 24 f8 05 08 	movl   $0x805f824,(%esp)
 804e0a6:	e8 10 c0 00 00       	call   805a0bb <stat>
 804e0ab:	83 f8 ff             	cmp    $0xffffffff,%eax
 804e0ae:	0f 94 c0             	sete   %al
 804e0b1:	0f b6 c0             	movzbl %al,%eax
 804e0b4:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 804e0bb:	00 
 804e0bc:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e0c0:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804e0c7:	08 
 804e0c8:	c7 44 24 0c 2c f8 05 	movl   $0x805f82c,0xc(%esp)
 804e0cf:	08 
 804e0d0:	c7 44 24 08 ba 01 00 	movl   $0x1ba,0x8(%esp)
 804e0d7:	00 
 804e0d8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e0df:	08 
 804e0e0:	89 04 24             	mov    %eax,(%esp)
 804e0e3:	e8 a8 04 01 00       	call   805e590 <_test_assert>
 804e0e8:	85 c0                	test   %eax,%eax
 804e0ea:	0f 84 83 00 00 00    	je     804e173 <vfstest_paths+0x30fe>
 804e0f0:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804e0f6:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e0fb:	89 04 24             	mov    %eax,(%esp)
 804e0fe:	e8 26 02 01 00       	call   805e329 <test_errstr>
 804e103:	89 c6                	mov    %eax,%esi
 804e105:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 804e10c:	e8 18 02 01 00       	call   805e329 <test_errstr>
 804e111:	89 c3                	mov    %eax,%ebx
 804e113:	8d 85 0c ff ff ff    	lea    -0xf4(%ebp),%eax
 804e119:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e11d:	c7 04 24 24 f8 05 08 	movl   $0x805f824,(%esp)
 804e124:	e8 92 bf 00 00       	call   805a0bb <stat>
 804e129:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e12e:	83 f8 02             	cmp    $0x2,%eax
 804e131:	0f 94 c0             	sete   %al
 804e134:	0f b6 c0             	movzbl %al,%eax
 804e137:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804e13b:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804e13f:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 804e146:	00 
 804e147:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e14b:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804e152:	08 
 804e153:	c7 44 24 0c 58 f8 05 	movl   $0x805f858,0xc(%esp)
 804e15a:	08 
 804e15b:	c7 44 24 08 ba 01 00 	movl   $0x1ba,0x8(%esp)
 804e162:	00 
 804e163:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e16a:	08 
 804e16b:	89 04 24             	mov    %eax,(%esp)
 804e16e:	e8 1d 04 01 00       	call   805e590 <_test_assert>
        syscall_fail(stat("1/../asdf", &st), ENOENT);
 804e173:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 804e17a:	e8 aa 01 01 00       	call   805e329 <test_errstr>
 804e17f:	89 c3                	mov    %eax,%ebx
 804e181:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804e188:	00 00 00 
 804e18b:	8d 85 0c ff ff ff    	lea    -0xf4(%ebp),%eax
 804e191:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e195:	c7 04 24 7a f8 05 08 	movl   $0x805f87a,(%esp)
 804e19c:	e8 1a bf 00 00       	call   805a0bb <stat>
 804e1a1:	83 f8 ff             	cmp    $0xffffffff,%eax
 804e1a4:	0f 94 c0             	sete   %al
 804e1a7:	0f b6 c0             	movzbl %al,%eax
 804e1aa:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 804e1b1:	00 
 804e1b2:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e1b6:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804e1bd:	08 
 804e1be:	c7 44 24 0c 84 f8 05 	movl   $0x805f884,0xc(%esp)
 804e1c5:	08 
 804e1c6:	c7 44 24 08 bb 01 00 	movl   $0x1bb,0x8(%esp)
 804e1cd:	00 
 804e1ce:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e1d5:	08 
 804e1d6:	89 04 24             	mov    %eax,(%esp)
 804e1d9:	e8 b2 03 01 00       	call   805e590 <_test_assert>
 804e1de:	85 c0                	test   %eax,%eax
 804e1e0:	0f 84 83 00 00 00    	je     804e269 <vfstest_paths+0x31f4>
 804e1e6:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804e1ec:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e1f1:	89 04 24             	mov    %eax,(%esp)
 804e1f4:	e8 30 01 01 00       	call   805e329 <test_errstr>
 804e1f9:	89 c6                	mov    %eax,%esi
 804e1fb:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 804e202:	e8 22 01 01 00       	call   805e329 <test_errstr>
 804e207:	89 c3                	mov    %eax,%ebx
 804e209:	8d 85 0c ff ff ff    	lea    -0xf4(%ebp),%eax
 804e20f:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e213:	c7 04 24 7a f8 05 08 	movl   $0x805f87a,(%esp)
 804e21a:	e8 9c be 00 00       	call   805a0bb <stat>
 804e21f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e224:	83 f8 02             	cmp    $0x2,%eax
 804e227:	0f 94 c0             	sete   %al
 804e22a:	0f b6 c0             	movzbl %al,%eax
 804e22d:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804e231:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804e235:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 804e23c:	00 
 804e23d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e241:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804e248:	08 
 804e249:	c7 44 24 0c b0 f8 05 	movl   $0x805f8b0,0xc(%esp)
 804e250:	08 
 804e251:	c7 44 24 08 bb 01 00 	movl   $0x1bb,0x8(%esp)
 804e258:	00 
 804e259:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e260:	08 
 804e261:	89 04 24             	mov    %eax,(%esp)
 804e264:	e8 27 03 01 00       	call   805e590 <_test_assert>
        syscall_fail(stat("1/2/asdf", &st), ENOENT);
 804e269:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 804e270:	e8 b4 00 01 00       	call   805e329 <test_errstr>
 804e275:	89 c3                	mov    %eax,%ebx
 804e277:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804e27e:	00 00 00 
 804e281:	8d 85 0c ff ff ff    	lea    -0xf4(%ebp),%eax
 804e287:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e28b:	c7 04 24 d5 f8 05 08 	movl   $0x805f8d5,(%esp)
 804e292:	e8 24 be 00 00       	call   805a0bb <stat>
 804e297:	83 f8 ff             	cmp    $0xffffffff,%eax
 804e29a:	0f 94 c0             	sete   %al
 804e29d:	0f b6 c0             	movzbl %al,%eax
 804e2a0:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 804e2a7:	00 
 804e2a8:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e2ac:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804e2b3:	08 
 804e2b4:	c7 44 24 0c e0 f8 05 	movl   $0x805f8e0,0xc(%esp)
 804e2bb:	08 
 804e2bc:	c7 44 24 08 bc 01 00 	movl   $0x1bc,0x8(%esp)
 804e2c3:	00 
 804e2c4:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e2cb:	08 
 804e2cc:	89 04 24             	mov    %eax,(%esp)
 804e2cf:	e8 bc 02 01 00       	call   805e590 <_test_assert>
 804e2d4:	85 c0                	test   %eax,%eax
 804e2d6:	0f 84 83 00 00 00    	je     804e35f <vfstest_paths+0x32ea>
 804e2dc:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804e2e2:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e2e7:	89 04 24             	mov    %eax,(%esp)
 804e2ea:	e8 3a 00 01 00       	call   805e329 <test_errstr>
 804e2ef:	89 c6                	mov    %eax,%esi
 804e2f1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 804e2f8:	e8 2c 00 01 00       	call   805e329 <test_errstr>
 804e2fd:	89 c3                	mov    %eax,%ebx
 804e2ff:	8d 85 0c ff ff ff    	lea    -0xf4(%ebp),%eax
 804e305:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e309:	c7 04 24 d5 f8 05 08 	movl   $0x805f8d5,(%esp)
 804e310:	e8 a6 bd 00 00       	call   805a0bb <stat>
 804e315:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e31a:	83 f8 02             	cmp    $0x2,%eax
 804e31d:	0f 94 c0             	sete   %al
 804e320:	0f b6 c0             	movzbl %al,%eax
 804e323:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804e327:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804e32b:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 804e332:	00 
 804e333:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e337:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804e33e:	08 
 804e33f:	c7 44 24 0c 0c f9 05 	movl   $0x805f90c,0xc(%esp)
 804e346:	08 
 804e347:	c7 44 24 08 bc 01 00 	movl   $0x1bc,0x8(%esp)
 804e34e:	00 
 804e34f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e356:	08 
 804e357:	89 04 24             	mov    %eax,(%esp)
 804e35a:	e8 31 02 01 00       	call   805e590 <_test_assert>

        create_file("1/file");
 804e35f:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804e365:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e36a:	89 04 24             	mov    %eax,(%esp)
 804e36d:	e8 b7 ff 00 00       	call   805e329 <test_errstr>
 804e372:	89 c3                	mov    %eax,%ebx
 804e374:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 804e37b:	00 
 804e37c:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 804e383:	00 
 804e384:	c7 04 24 30 f9 05 08 	movl   $0x805f930,(%esp)
 804e38b:	e8 dc b5 00 00       	call   805996c <open>
 804e390:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
 804e396:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
 804e39c:	f7 d0                	not    %eax
 804e39e:	c1 e8 1f             	shr    $0x1f,%eax
 804e3a1:	0f b6 c0             	movzbl %al,%eax
 804e3a4:	89 74 24 18          	mov    %esi,0x18(%esp)
 804e3a8:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e3ac:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804e3b3:	08 
 804e3b4:	c7 44 24 0c 38 f9 05 	movl   $0x805f938,0xc(%esp)
 804e3bb:	08 
 804e3bc:	c7 44 24 08 be 01 00 	movl   $0x1be,0x8(%esp)
 804e3c3:	00 
 804e3c4:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e3cb:	08 
 804e3cc:	89 04 24             	mov    %eax,(%esp)
 804e3cf:	e8 bc 01 01 00       	call   805e590 <_test_assert>
 804e3d4:	85 c0                	test   %eax,%eax
 804e3d6:	74 5b                	je     804e433 <vfstest_paths+0x33be>
 804e3d8:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804e3de:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e3e3:	89 04 24             	mov    %eax,(%esp)
 804e3e6:	e8 3e ff 00 00       	call   805e329 <test_errstr>
 804e3eb:	89 c3                	mov    %eax,%ebx
 804e3ed:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
 804e3f3:	89 04 24             	mov    %eax,(%esp)
 804e3f6:	e8 c8 b6 00 00       	call   8059ac3 <close>
 804e3fb:	f7 d0                	not    %eax
 804e3fd:	c1 e8 1f             	shr    $0x1f,%eax
 804e400:	0f b6 c0             	movzbl %al,%eax
 804e403:	89 74 24 18          	mov    %esi,0x18(%esp)
 804e407:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e40b:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804e412:	08 
 804e413:	c7 44 24 0c 78 ec 05 	movl   $0x805ec78,0xc(%esp)
 804e41a:	08 
 804e41b:	c7 44 24 08 be 01 00 	movl   $0x1be,0x8(%esp)
 804e422:	00 
 804e423:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e42a:	08 
 804e42b:	89 04 24             	mov    %eax,(%esp)
 804e42e:	e8 5d 01 01 00       	call   805e590 <_test_assert>
        syscall_fail(open("1/file/other", O_RDONLY, 0777), ENOTDIR);
 804e433:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804e43a:	e8 ea fe 00 00       	call   805e329 <test_errstr>
 804e43f:	89 c3                	mov    %eax,%ebx
 804e441:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804e448:	00 00 00 
 804e44b:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 804e452:	00 
 804e453:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804e45a:	00 
 804e45b:	c7 04 24 66 f9 05 08 	movl   $0x805f966,(%esp)
 804e462:	e8 05 b5 00 00       	call   805996c <open>
 804e467:	83 f8 ff             	cmp    $0xffffffff,%eax
 804e46a:	0f 94 c0             	sete   %al
 804e46d:	0f b6 c0             	movzbl %al,%eax
 804e470:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 804e477:	00 
 804e478:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e47c:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804e483:	08 
 804e484:	c7 44 24 0c 74 f9 05 	movl   $0x805f974,0xc(%esp)
 804e48b:	08 
 804e48c:	c7 44 24 08 bf 01 00 	movl   $0x1bf,0x8(%esp)
 804e493:	00 
 804e494:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e49b:	08 
 804e49c:	89 04 24             	mov    %eax,(%esp)
 804e49f:	e8 ec 00 01 00       	call   805e590 <_test_assert>
 804e4a4:	85 c0                	test   %eax,%eax
 804e4a6:	0f 84 89 00 00 00    	je     804e535 <vfstest_paths+0x34c0>
 804e4ac:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804e4b2:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e4b7:	89 04 24             	mov    %eax,(%esp)
 804e4ba:	e8 6a fe 00 00       	call   805e329 <test_errstr>
 804e4bf:	89 c6                	mov    %eax,%esi
 804e4c1:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804e4c8:	e8 5c fe 00 00       	call   805e329 <test_errstr>
 804e4cd:	89 c3                	mov    %eax,%ebx
 804e4cf:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 804e4d6:	00 
 804e4d7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804e4de:	00 
 804e4df:	c7 04 24 66 f9 05 08 	movl   $0x805f966,(%esp)
 804e4e6:	e8 81 b4 00 00       	call   805996c <open>
 804e4eb:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e4f0:	83 f8 14             	cmp    $0x14,%eax
 804e4f3:	0f 94 c0             	sete   %al
 804e4f6:	0f b6 c0             	movzbl %al,%eax
 804e4f9:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804e4fd:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804e501:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 804e508:	00 
 804e509:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e50d:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804e514:	08 
 804e515:	c7 44 24 0c a8 f9 05 	movl   $0x805f9a8,0xc(%esp)
 804e51c:	08 
 804e51d:	c7 44 24 08 bf 01 00 	movl   $0x1bf,0x8(%esp)
 804e524:	00 
 804e525:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e52c:	08 
 804e52d:	89 04 24             	mov    %eax,(%esp)
 804e530:	e8 5b 00 01 00       	call   805e590 <_test_assert>
        syscall_fail(open("1/file/other", O_RDONLY | O_CREAT, 0777), ENOTDIR);
 804e535:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804e53c:	e8 e8 fd 00 00       	call   805e329 <test_errstr>
 804e541:	89 c3                	mov    %eax,%ebx
 804e543:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804e54a:	00 00 00 
 804e54d:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 804e554:	00 
 804e555:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 804e55c:	00 
 804e55d:	c7 04 24 66 f9 05 08 	movl   $0x805f966,(%esp)
 804e564:	e8 03 b4 00 00       	call   805996c <open>
 804e569:	83 f8 ff             	cmp    $0xffffffff,%eax
 804e56c:	0f 94 c0             	sete   %al
 804e56f:	0f b6 c0             	movzbl %al,%eax
 804e572:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 804e579:	00 
 804e57a:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e57e:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804e585:	08 
 804e586:	c7 44 24 0c d8 f9 05 	movl   $0x805f9d8,0xc(%esp)
 804e58d:	08 
 804e58e:	c7 44 24 08 c0 01 00 	movl   $0x1c0,0x8(%esp)
 804e595:	00 
 804e596:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e59d:	08 
 804e59e:	89 04 24             	mov    %eax,(%esp)
 804e5a1:	e8 ea ff 00 00       	call   805e590 <_test_assert>
 804e5a6:	85 c0                	test   %eax,%eax
 804e5a8:	0f 84 89 00 00 00    	je     804e637 <vfstest_paths+0x35c2>
 804e5ae:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804e5b4:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e5b9:	89 04 24             	mov    %eax,(%esp)
 804e5bc:	e8 68 fd 00 00       	call   805e329 <test_errstr>
 804e5c1:	89 c6                	mov    %eax,%esi
 804e5c3:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804e5ca:	e8 5a fd 00 00       	call   805e329 <test_errstr>
 804e5cf:	89 c3                	mov    %eax,%ebx
 804e5d1:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 804e5d8:	00 
 804e5d9:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 804e5e0:	00 
 804e5e1:	c7 04 24 66 f9 05 08 	movl   $0x805f966,(%esp)
 804e5e8:	e8 7f b3 00 00       	call   805996c <open>
 804e5ed:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e5f2:	83 f8 14             	cmp    $0x14,%eax
 804e5f5:	0f 94 c0             	sete   %al
 804e5f8:	0f b6 c0             	movzbl %al,%eax
 804e5fb:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804e5ff:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804e603:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 804e60a:	00 
 804e60b:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e60f:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804e616:	08 
 804e617:	c7 44 24 0c 14 fa 05 	movl   $0x805fa14,0xc(%esp)
 804e61e:	08 
 804e61f:	c7 44 24 08 c0 01 00 	movl   $0x1c0,0x8(%esp)
 804e626:	00 
 804e627:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e62e:	08 
 804e62f:	89 04 24             	mov    %eax,(%esp)
 804e632:	e8 59 ff 00 00       	call   805e590 <_test_assert>

        syscall_success(chdir(".."));
 804e637:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804e63d:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e642:	89 04 24             	mov    %eax,(%esp)
 804e645:	e8 df fc 00 00       	call   805e329 <test_errstr>
 804e64a:	89 c3                	mov    %eax,%ebx
 804e64c:	c7 04 24 26 e6 05 08 	movl   $0x805e626,(%esp)
 804e653:	e8 1c b7 00 00       	call   8059d74 <chdir>
 804e658:	f7 d0                	not    %eax
 804e65a:	c1 e8 1f             	shr    $0x1f,%eax
 804e65d:	0f b6 c0             	movzbl %al,%eax
 804e660:	89 74 24 18          	mov    %esi,0x18(%esp)
 804e664:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e668:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804e66f:	08 
 804e670:	c7 44 24 0c ac ed 05 	movl   $0x805edac,0xc(%esp)
 804e677:	08 
 804e678:	c7 44 24 08 c2 01 00 	movl   $0x1c2,0x8(%esp)
 804e67f:	00 
 804e680:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e687:	08 
 804e688:	89 04 24             	mov    %eax,(%esp)
 804e68b:	e8 00 ff 00 00       	call   805e590 <_test_assert>
        test_fini("vfstest_paths");
 804e690:	c7 04 24 49 fa 05 08 	movl   $0x805fa49,(%esp)
 804e697:	e8 df fb 00 00       	call   805e27b <test_fini>
}
 804e69c:	90                   	nop
 804e69d:	81 c4 8c 01 00 00    	add    $0x18c,%esp
 804e6a3:	5b                   	pop    %ebx
 804e6a4:	5e                   	pop    %esi
 804e6a5:	5f                   	pop    %edi
 804e6a6:	5d                   	pop    %ebp
 804e6a7:	c3                   	ret    

0804e6a8 <vfstest_fd>:

static void
vfstest_fd(void)
{
 804e6a8:	55                   	push   %ebp
 804e6a9:	89 e5                	mov    %esp,%ebp
 804e6ab:	57                   	push   %edi
 804e6ac:	56                   	push   %esi
 804e6ad:	53                   	push   %ebx
 804e6ae:	81 ec 3c 01 00 00    	sub    $0x13c,%esp

        int fd1, fd2;
        char buf[FD_BUFSIZE];
        struct dirent d;

        syscall_success(mkdir("fd", 0));
 804e6b4:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804e6ba:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e6bf:	89 04 24             	mov    %eax,(%esp)
 804e6c2:	e8 62 fc 00 00       	call   805e329 <test_errstr>
 804e6c7:	89 c3                	mov    %eax,%ebx
 804e6c9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804e6d0:	00 
 804e6d1:	c7 04 24 57 fa 05 08 	movl   $0x805fa57,(%esp)
 804e6d8:	e8 b1 b4 00 00       	call   8059b8e <mkdir>
 804e6dd:	f7 d0                	not    %eax
 804e6df:	c1 e8 1f             	shr    $0x1f,%eax
 804e6e2:	0f b6 c0             	movzbl %al,%eax
 804e6e5:	89 74 24 18          	mov    %esi,0x18(%esp)
 804e6e9:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e6ed:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804e6f4:	08 
 804e6f5:	c7 44 24 0c 5a fa 05 	movl   $0x805fa5a,0xc(%esp)
 804e6fc:	08 
 804e6fd:	c7 44 24 08 d1 01 00 	movl   $0x1d1,0x8(%esp)
 804e704:	00 
 804e705:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e70c:	08 
 804e70d:	89 04 24             	mov    %eax,(%esp)
 804e710:	e8 7b fe 00 00       	call   805e590 <_test_assert>
        syscall_success(chdir("fd"));
 804e715:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 804e71b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e720:	89 04 24             	mov    %eax,(%esp)
 804e723:	e8 01 fc 00 00       	call   805e329 <test_errstr>
 804e728:	89 c3                	mov    %eax,%ebx
 804e72a:	c7 04 24 57 fa 05 08 	movl   $0x805fa57,(%esp)
 804e731:	e8 3e b6 00 00       	call   8059d74 <chdir>
 804e736:	f7 d0                	not    %eax
 804e738:	c1 e8 1f             	shr    $0x1f,%eax
 804e73b:	0f b6 c0             	movzbl %al,%eax
 804e73e:	89 74 24 18          	mov    %esi,0x18(%esp)
 804e742:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e746:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 804e74d:	08 
 804e74e:	c7 44 24 0c 70 fa 05 	movl   $0x805fa70,0xc(%esp)
 804e755:	08 
 804e756:	c7 44 24 08 d2 01 00 	movl   $0x1d2,0x8(%esp)
 804e75d:	00 
 804e75e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e765:	08 
 804e766:	89 04 24             	mov    %eax,(%esp)
 804e769:	e8 22 fe 00 00       	call   805e590 <_test_assert>

        /* read/write/close/getdents/dup nonexistent file descriptors */
        syscall_fail(read(BAD_FD, buf, FD_BUFSIZE), EBADF);
 804e76e:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804e775:	e8 af fb 00 00       	call   805e329 <test_errstr>
 804e77a:	89 c3                	mov    %eax,%ebx
 804e77c:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804e783:	00 00 00 
 804e786:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 804e78d:	00 
 804e78e:	8d 85 5f ff ff ff    	lea    -0xa1(%ebp),%eax
 804e794:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e798:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804e79f:	e8 7d b2 00 00       	call   8059a21 <read>
 804e7a4:	83 f8 ff             	cmp    $0xffffffff,%eax
 804e7a7:	0f 94 c0             	sete   %al
 804e7aa:	0f b6 c0             	movzbl %al,%eax
 804e7ad:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804e7b4:	00 
 804e7b5:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e7b9:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804e7c0:	08 
 804e7c1:	c7 44 24 0c 84 fa 05 	movl   $0x805fa84,0xc(%esp)
 804e7c8:	08 
 804e7c9:	c7 44 24 08 d5 01 00 	movl   $0x1d5,0x8(%esp)
 804e7d0:	00 
 804e7d1:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e7d8:	08 
 804e7d9:	89 04 24             	mov    %eax,(%esp)
 804e7dc:	e8 af fd 00 00       	call   805e590 <_test_assert>
 804e7e1:	85 c0                	test   %eax,%eax
 804e7e3:	0f 84 8b 00 00 00    	je     804e874 <vfstest_fd+0x1cc>
 804e7e9:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804e7ef:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e7f4:	89 04 24             	mov    %eax,(%esp)
 804e7f7:	e8 2d fb 00 00       	call   805e329 <test_errstr>
 804e7fc:	89 c6                	mov    %eax,%esi
 804e7fe:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804e805:	e8 1f fb 00 00       	call   805e329 <test_errstr>
 804e80a:	89 c3                	mov    %eax,%ebx
 804e80c:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 804e813:	00 
 804e814:	8d 85 5f ff ff ff    	lea    -0xa1(%ebp),%eax
 804e81a:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e81e:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804e825:	e8 f7 b1 00 00       	call   8059a21 <read>
 804e82a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e82f:	83 f8 09             	cmp    $0x9,%eax
 804e832:	0f 94 c0             	sete   %al
 804e835:	0f b6 c0             	movzbl %al,%eax
 804e838:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804e83c:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804e840:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804e847:	00 
 804e848:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e84c:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804e853:	08 
 804e854:	c7 44 24 0c ac fa 05 	movl   $0x805faac,0xc(%esp)
 804e85b:	08 
 804e85c:	c7 44 24 08 d5 01 00 	movl   $0x1d5,0x8(%esp)
 804e863:	00 
 804e864:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e86b:	08 
 804e86c:	89 04 24             	mov    %eax,(%esp)
 804e86f:	e8 1c fd 00 00       	call   805e590 <_test_assert>
        syscall_fail(read(HUGE_FD, buf, FD_BUFSIZE), EBADF);
 804e874:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804e87b:	e8 a9 fa 00 00       	call   805e329 <test_errstr>
 804e880:	89 c3                	mov    %eax,%ebx
 804e882:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804e889:	00 00 00 
 804e88c:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 804e893:	00 
 804e894:	8d 85 5f ff ff ff    	lea    -0xa1(%ebp),%eax
 804e89a:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e89e:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
 804e8a5:	e8 77 b1 00 00       	call   8059a21 <read>
 804e8aa:	83 f8 ff             	cmp    $0xffffffff,%eax
 804e8ad:	0f 94 c0             	sete   %al
 804e8b0:	0f b6 c0             	movzbl %al,%eax
 804e8b3:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804e8ba:	00 
 804e8bb:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e8bf:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804e8c6:	08 
 804e8c7:	c7 44 24 0c cc fa 05 	movl   $0x805facc,0xc(%esp)
 804e8ce:	08 
 804e8cf:	c7 44 24 08 d6 01 00 	movl   $0x1d6,0x8(%esp)
 804e8d6:	00 
 804e8d7:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e8de:	08 
 804e8df:	89 04 24             	mov    %eax,(%esp)
 804e8e2:	e8 a9 fc 00 00       	call   805e590 <_test_assert>
 804e8e7:	85 c0                	test   %eax,%eax
 804e8e9:	0f 84 8b 00 00 00    	je     804e97a <vfstest_fd+0x2d2>
 804e8ef:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804e8f5:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e8fa:	89 04 24             	mov    %eax,(%esp)
 804e8fd:	e8 27 fa 00 00       	call   805e329 <test_errstr>
 804e902:	89 c6                	mov    %eax,%esi
 804e904:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804e90b:	e8 19 fa 00 00       	call   805e329 <test_errstr>
 804e910:	89 c3                	mov    %eax,%ebx
 804e912:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 804e919:	00 
 804e91a:	8d 85 5f ff ff ff    	lea    -0xa1(%ebp),%eax
 804e920:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e924:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
 804e92b:	e8 f1 b0 00 00       	call   8059a21 <read>
 804e930:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804e935:	83 f8 09             	cmp    $0x9,%eax
 804e938:	0f 94 c0             	sete   %al
 804e93b:	0f b6 c0             	movzbl %al,%eax
 804e93e:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804e942:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804e946:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804e94d:	00 
 804e94e:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e952:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804e959:	08 
 804e95a:	c7 44 24 0c f4 fa 05 	movl   $0x805faf4,0xc(%esp)
 804e961:	08 
 804e962:	c7 44 24 08 d6 01 00 	movl   $0x1d6,0x8(%esp)
 804e969:	00 
 804e96a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e971:	08 
 804e972:	89 04 24             	mov    %eax,(%esp)
 804e975:	e8 16 fc 00 00       	call   805e590 <_test_assert>
        syscall_fail(read(-1, buf, FD_BUFSIZE), EBADF);
 804e97a:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804e981:	e8 a3 f9 00 00       	call   805e329 <test_errstr>
 804e986:	89 c3                	mov    %eax,%ebx
 804e988:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804e98f:	00 00 00 
 804e992:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 804e999:	00 
 804e99a:	8d 85 5f ff ff ff    	lea    -0xa1(%ebp),%eax
 804e9a0:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e9a4:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 804e9ab:	e8 71 b0 00 00       	call   8059a21 <read>
 804e9b0:	83 f8 ff             	cmp    $0xffffffff,%eax
 804e9b3:	0f 94 c0             	sete   %al
 804e9b6:	0f b6 c0             	movzbl %al,%eax
 804e9b9:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804e9c0:	00 
 804e9c1:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804e9c5:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804e9cc:	08 
 804e9cd:	c7 44 24 0c 18 fb 05 	movl   $0x805fb18,0xc(%esp)
 804e9d4:	08 
 804e9d5:	c7 44 24 08 d7 01 00 	movl   $0x1d7,0x8(%esp)
 804e9dc:	00 
 804e9dd:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804e9e4:	08 
 804e9e5:	89 04 24             	mov    %eax,(%esp)
 804e9e8:	e8 a3 fb 00 00       	call   805e590 <_test_assert>
 804e9ed:	85 c0                	test   %eax,%eax
 804e9ef:	0f 84 8b 00 00 00    	je     804ea80 <vfstest_fd+0x3d8>
 804e9f5:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804e9fb:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ea00:	89 04 24             	mov    %eax,(%esp)
 804ea03:	e8 21 f9 00 00       	call   805e329 <test_errstr>
 804ea08:	89 c6                	mov    %eax,%esi
 804ea0a:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804ea11:	e8 13 f9 00 00       	call   805e329 <test_errstr>
 804ea16:	89 c3                	mov    %eax,%ebx
 804ea18:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 804ea1f:	00 
 804ea20:	8d 85 5f ff ff ff    	lea    -0xa1(%ebp),%eax
 804ea26:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ea2a:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 804ea31:	e8 eb af 00 00       	call   8059a21 <read>
 804ea36:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ea3b:	83 f8 09             	cmp    $0x9,%eax
 804ea3e:	0f 94 c0             	sete   %al
 804ea41:	0f b6 c0             	movzbl %al,%eax
 804ea44:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804ea48:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804ea4c:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804ea53:	00 
 804ea54:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804ea58:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804ea5f:	08 
 804ea60:	c7 44 24 0c 40 fb 05 	movl   $0x805fb40,0xc(%esp)
 804ea67:	08 
 804ea68:	c7 44 24 08 d7 01 00 	movl   $0x1d7,0x8(%esp)
 804ea6f:	00 
 804ea70:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ea77:	08 
 804ea78:	89 04 24             	mov    %eax,(%esp)
 804ea7b:	e8 10 fb 00 00       	call   805e590 <_test_assert>

        syscall_fail(write(BAD_FD, buf, FD_BUFSIZE), EBADF);
 804ea80:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804ea87:	e8 9d f8 00 00       	call   805e329 <test_errstr>
 804ea8c:	89 c3                	mov    %eax,%ebx
 804ea8e:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804ea95:	00 00 00 
 804ea98:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 804ea9f:	00 
 804eaa0:	8d 85 5f ff ff ff    	lea    -0xa1(%ebp),%eax
 804eaa6:	89 44 24 04          	mov    %eax,0x4(%esp)
 804eaaa:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804eab1:	e8 bc af 00 00       	call   8059a72 <write>
 804eab6:	83 f8 ff             	cmp    $0xffffffff,%eax
 804eab9:	0f 94 c0             	sete   %al
 804eabc:	0f b6 c0             	movzbl %al,%eax
 804eabf:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804eac6:	00 
 804eac7:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804eacb:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804ead2:	08 
 804ead3:	c7 44 24 0c 60 fb 05 	movl   $0x805fb60,0xc(%esp)
 804eada:	08 
 804eadb:	c7 44 24 08 d9 01 00 	movl   $0x1d9,0x8(%esp)
 804eae2:	00 
 804eae3:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804eaea:	08 
 804eaeb:	89 04 24             	mov    %eax,(%esp)
 804eaee:	e8 9d fa 00 00       	call   805e590 <_test_assert>
 804eaf3:	85 c0                	test   %eax,%eax
 804eaf5:	0f 84 8b 00 00 00    	je     804eb86 <vfstest_fd+0x4de>
 804eafb:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804eb01:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804eb06:	89 04 24             	mov    %eax,(%esp)
 804eb09:	e8 1b f8 00 00       	call   805e329 <test_errstr>
 804eb0e:	89 c6                	mov    %eax,%esi
 804eb10:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804eb17:	e8 0d f8 00 00       	call   805e329 <test_errstr>
 804eb1c:	89 c3                	mov    %eax,%ebx
 804eb1e:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 804eb25:	00 
 804eb26:	8d 85 5f ff ff ff    	lea    -0xa1(%ebp),%eax
 804eb2c:	89 44 24 04          	mov    %eax,0x4(%esp)
 804eb30:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804eb37:	e8 36 af 00 00       	call   8059a72 <write>
 804eb3c:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804eb41:	83 f8 09             	cmp    $0x9,%eax
 804eb44:	0f 94 c0             	sete   %al
 804eb47:	0f b6 c0             	movzbl %al,%eax
 804eb4a:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804eb4e:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804eb52:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804eb59:	00 
 804eb5a:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804eb5e:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804eb65:	08 
 804eb66:	c7 44 24 0c 88 fb 05 	movl   $0x805fb88,0xc(%esp)
 804eb6d:	08 
 804eb6e:	c7 44 24 08 d9 01 00 	movl   $0x1d9,0x8(%esp)
 804eb75:	00 
 804eb76:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804eb7d:	08 
 804eb7e:	89 04 24             	mov    %eax,(%esp)
 804eb81:	e8 0a fa 00 00       	call   805e590 <_test_assert>
        syscall_fail(write(HUGE_FD, buf, FD_BUFSIZE), EBADF);
 804eb86:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804eb8d:	e8 97 f7 00 00       	call   805e329 <test_errstr>
 804eb92:	89 c3                	mov    %eax,%ebx
 804eb94:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804eb9b:	00 00 00 
 804eb9e:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 804eba5:	00 
 804eba6:	8d 85 5f ff ff ff    	lea    -0xa1(%ebp),%eax
 804ebac:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ebb0:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
 804ebb7:	e8 b6 ae 00 00       	call   8059a72 <write>
 804ebbc:	83 f8 ff             	cmp    $0xffffffff,%eax
 804ebbf:	0f 94 c0             	sete   %al
 804ebc2:	0f b6 c0             	movzbl %al,%eax
 804ebc5:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804ebcc:	00 
 804ebcd:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804ebd1:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804ebd8:	08 
 804ebd9:	c7 44 24 0c a8 fb 05 	movl   $0x805fba8,0xc(%esp)
 804ebe0:	08 
 804ebe1:	c7 44 24 08 da 01 00 	movl   $0x1da,0x8(%esp)
 804ebe8:	00 
 804ebe9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ebf0:	08 
 804ebf1:	89 04 24             	mov    %eax,(%esp)
 804ebf4:	e8 97 f9 00 00       	call   805e590 <_test_assert>
 804ebf9:	85 c0                	test   %eax,%eax
 804ebfb:	0f 84 8b 00 00 00    	je     804ec8c <vfstest_fd+0x5e4>
 804ec01:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804ec07:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ec0c:	89 04 24             	mov    %eax,(%esp)
 804ec0f:	e8 15 f7 00 00       	call   805e329 <test_errstr>
 804ec14:	89 c6                	mov    %eax,%esi
 804ec16:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804ec1d:	e8 07 f7 00 00       	call   805e329 <test_errstr>
 804ec22:	89 c3                	mov    %eax,%ebx
 804ec24:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 804ec2b:	00 
 804ec2c:	8d 85 5f ff ff ff    	lea    -0xa1(%ebp),%eax
 804ec32:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ec36:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
 804ec3d:	e8 30 ae 00 00       	call   8059a72 <write>
 804ec42:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ec47:	83 f8 09             	cmp    $0x9,%eax
 804ec4a:	0f 94 c0             	sete   %al
 804ec4d:	0f b6 c0             	movzbl %al,%eax
 804ec50:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804ec54:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804ec58:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804ec5f:	00 
 804ec60:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804ec64:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804ec6b:	08 
 804ec6c:	c7 44 24 0c d4 fb 05 	movl   $0x805fbd4,0xc(%esp)
 804ec73:	08 
 804ec74:	c7 44 24 08 da 01 00 	movl   $0x1da,0x8(%esp)
 804ec7b:	00 
 804ec7c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ec83:	08 
 804ec84:	89 04 24             	mov    %eax,(%esp)
 804ec87:	e8 04 f9 00 00       	call   805e590 <_test_assert>
        syscall_fail(write(-1, buf, FD_BUFSIZE), EBADF);
 804ec8c:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804ec93:	e8 91 f6 00 00       	call   805e329 <test_errstr>
 804ec98:	89 c3                	mov    %eax,%ebx
 804ec9a:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804eca1:	00 00 00 
 804eca4:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 804ecab:	00 
 804ecac:	8d 85 5f ff ff ff    	lea    -0xa1(%ebp),%eax
 804ecb2:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ecb6:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 804ecbd:	e8 b0 ad 00 00       	call   8059a72 <write>
 804ecc2:	83 f8 ff             	cmp    $0xffffffff,%eax
 804ecc5:	0f 94 c0             	sete   %al
 804ecc8:	0f b6 c0             	movzbl %al,%eax
 804eccb:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804ecd2:	00 
 804ecd3:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804ecd7:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804ecde:	08 
 804ecdf:	c7 44 24 0c f8 fb 05 	movl   $0x805fbf8,0xc(%esp)
 804ece6:	08 
 804ece7:	c7 44 24 08 db 01 00 	movl   $0x1db,0x8(%esp)
 804ecee:	00 
 804ecef:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ecf6:	08 
 804ecf7:	89 04 24             	mov    %eax,(%esp)
 804ecfa:	e8 91 f8 00 00       	call   805e590 <_test_assert>
 804ecff:	85 c0                	test   %eax,%eax
 804ed01:	0f 84 8b 00 00 00    	je     804ed92 <vfstest_fd+0x6ea>
 804ed07:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804ed0d:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ed12:	89 04 24             	mov    %eax,(%esp)
 804ed15:	e8 0f f6 00 00       	call   805e329 <test_errstr>
 804ed1a:	89 c6                	mov    %eax,%esi
 804ed1c:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804ed23:	e8 01 f6 00 00       	call   805e329 <test_errstr>
 804ed28:	89 c3                	mov    %eax,%ebx
 804ed2a:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 804ed31:	00 
 804ed32:	8d 85 5f ff ff ff    	lea    -0xa1(%ebp),%eax
 804ed38:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ed3c:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 804ed43:	e8 2a ad 00 00       	call   8059a72 <write>
 804ed48:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ed4d:	83 f8 09             	cmp    $0x9,%eax
 804ed50:	0f 94 c0             	sete   %al
 804ed53:	0f b6 c0             	movzbl %al,%eax
 804ed56:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804ed5a:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804ed5e:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804ed65:	00 
 804ed66:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804ed6a:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804ed71:	08 
 804ed72:	c7 44 24 0c 20 fc 05 	movl   $0x805fc20,0xc(%esp)
 804ed79:	08 
 804ed7a:	c7 44 24 08 db 01 00 	movl   $0x1db,0x8(%esp)
 804ed81:	00 
 804ed82:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ed89:	08 
 804ed8a:	89 04 24             	mov    %eax,(%esp)
 804ed8d:	e8 fe f7 00 00       	call   805e590 <_test_assert>

        syscall_fail(close(BAD_FD), EBADF);
 804ed92:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804ed99:	e8 8b f5 00 00       	call   805e329 <test_errstr>
 804ed9e:	89 c3                	mov    %eax,%ebx
 804eda0:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804eda7:	00 00 00 
 804edaa:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804edb1:	e8 0d ad 00 00       	call   8059ac3 <close>
 804edb6:	83 f8 ff             	cmp    $0xffffffff,%eax
 804edb9:	0f 94 c0             	sete   %al
 804edbc:	0f b6 c0             	movzbl %al,%eax
 804edbf:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804edc6:	00 
 804edc7:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804edcb:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804edd2:	08 
 804edd3:	c7 44 24 0c 40 fc 05 	movl   $0x805fc40,0xc(%esp)
 804edda:	08 
 804eddb:	c7 44 24 08 dd 01 00 	movl   $0x1dd,0x8(%esp)
 804ede2:	00 
 804ede3:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804edea:	08 
 804edeb:	89 04 24             	mov    %eax,(%esp)
 804edee:	e8 9d f7 00 00       	call   805e590 <_test_assert>
 804edf3:	85 c0                	test   %eax,%eax
 804edf5:	74 79                	je     804ee70 <vfstest_fd+0x7c8>
 804edf7:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804edfd:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ee02:	89 04 24             	mov    %eax,(%esp)
 804ee05:	e8 1f f5 00 00       	call   805e329 <test_errstr>
 804ee0a:	89 c6                	mov    %eax,%esi
 804ee0c:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804ee13:	e8 11 f5 00 00       	call   805e329 <test_errstr>
 804ee18:	89 c3                	mov    %eax,%ebx
 804ee1a:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804ee21:	e8 9d ac 00 00       	call   8059ac3 <close>
 804ee26:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ee2b:	83 f8 09             	cmp    $0x9,%eax
 804ee2e:	0f 94 c0             	sete   %al
 804ee31:	0f b6 c0             	movzbl %al,%eax
 804ee34:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804ee38:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804ee3c:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804ee43:	00 
 804ee44:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804ee48:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804ee4f:	08 
 804ee50:	c7 44 24 0c 5f fc 05 	movl   $0x805fc5f,0xc(%esp)
 804ee57:	08 
 804ee58:	c7 44 24 08 dd 01 00 	movl   $0x1dd,0x8(%esp)
 804ee5f:	00 
 804ee60:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ee67:	08 
 804ee68:	89 04 24             	mov    %eax,(%esp)
 804ee6b:	e8 20 f7 00 00       	call   805e590 <_test_assert>
        syscall_fail(close(HUGE_FD), EBADF);
 804ee70:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804ee77:	e8 ad f4 00 00       	call   805e329 <test_errstr>
 804ee7c:	89 c3                	mov    %eax,%ebx
 804ee7e:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804ee85:	00 00 00 
 804ee88:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
 804ee8f:	e8 2f ac 00 00       	call   8059ac3 <close>
 804ee94:	83 f8 ff             	cmp    $0xffffffff,%eax
 804ee97:	0f 94 c0             	sete   %al
 804ee9a:	0f b6 c0             	movzbl %al,%eax
 804ee9d:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804eea4:	00 
 804eea5:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804eea9:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804eeb0:	08 
 804eeb1:	c7 44 24 0c 78 fc 05 	movl   $0x805fc78,0xc(%esp)
 804eeb8:	08 
 804eeb9:	c7 44 24 08 de 01 00 	movl   $0x1de,0x8(%esp)
 804eec0:	00 
 804eec1:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804eec8:	08 
 804eec9:	89 04 24             	mov    %eax,(%esp)
 804eecc:	e8 bf f6 00 00       	call   805e590 <_test_assert>
 804eed1:	85 c0                	test   %eax,%eax
 804eed3:	74 79                	je     804ef4e <vfstest_fd+0x8a6>
 804eed5:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804eedb:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804eee0:	89 04 24             	mov    %eax,(%esp)
 804eee3:	e8 41 f4 00 00       	call   805e329 <test_errstr>
 804eee8:	89 c6                	mov    %eax,%esi
 804eeea:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804eef1:	e8 33 f4 00 00       	call   805e329 <test_errstr>
 804eef6:	89 c3                	mov    %eax,%ebx
 804eef8:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
 804eeff:	e8 bf ab 00 00       	call   8059ac3 <close>
 804ef04:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ef09:	83 f8 09             	cmp    $0x9,%eax
 804ef0c:	0f 94 c0             	sete   %al
 804ef0f:	0f b6 c0             	movzbl %al,%eax
 804ef12:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804ef16:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804ef1a:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804ef21:	00 
 804ef22:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804ef26:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804ef2d:	08 
 804ef2e:	c7 44 24 0c 99 fc 05 	movl   $0x805fc99,0xc(%esp)
 804ef35:	08 
 804ef36:	c7 44 24 08 de 01 00 	movl   $0x1de,0x8(%esp)
 804ef3d:	00 
 804ef3e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ef45:	08 
 804ef46:	89 04 24             	mov    %eax,(%esp)
 804ef49:	e8 42 f6 00 00       	call   805e590 <_test_assert>
        syscall_fail(close(-1), EBADF);
 804ef4e:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804ef55:	e8 cf f3 00 00       	call   805e329 <test_errstr>
 804ef5a:	89 c3                	mov    %eax,%ebx
 804ef5c:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804ef63:	00 00 00 
 804ef66:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 804ef6d:	e8 51 ab 00 00       	call   8059ac3 <close>
 804ef72:	83 f8 ff             	cmp    $0xffffffff,%eax
 804ef75:	0f 94 c0             	sete   %al
 804ef78:	0f b6 c0             	movzbl %al,%eax
 804ef7b:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804ef82:	00 
 804ef83:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804ef87:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804ef8e:	08 
 804ef8f:	c7 44 24 0c b4 fc 05 	movl   $0x805fcb4,0xc(%esp)
 804ef96:	08 
 804ef97:	c7 44 24 08 df 01 00 	movl   $0x1df,0x8(%esp)
 804ef9e:	00 
 804ef9f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804efa6:	08 
 804efa7:	89 04 24             	mov    %eax,(%esp)
 804efaa:	e8 e1 f5 00 00       	call   805e590 <_test_assert>
 804efaf:	85 c0                	test   %eax,%eax
 804efb1:	74 79                	je     804f02c <vfstest_fd+0x984>
 804efb3:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804efb9:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804efbe:	89 04 24             	mov    %eax,(%esp)
 804efc1:	e8 63 f3 00 00       	call   805e329 <test_errstr>
 804efc6:	89 c6                	mov    %eax,%esi
 804efc8:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804efcf:	e8 55 f3 00 00       	call   805e329 <test_errstr>
 804efd4:	89 c3                	mov    %eax,%ebx
 804efd6:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 804efdd:	e8 e1 aa 00 00       	call   8059ac3 <close>
 804efe2:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804efe7:	83 f8 09             	cmp    $0x9,%eax
 804efea:	0f 94 c0             	sete   %al
 804efed:	0f b6 c0             	movzbl %al,%eax
 804eff0:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804eff4:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804eff8:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804efff:	00 
 804f000:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f004:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804f00b:	08 
 804f00c:	c7 44 24 0c d3 fc 05 	movl   $0x805fcd3,0xc(%esp)
 804f013:	08 
 804f014:	c7 44 24 08 df 01 00 	movl   $0x1df,0x8(%esp)
 804f01b:	00 
 804f01c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f023:	08 
 804f024:	89 04 24             	mov    %eax,(%esp)
 804f027:	e8 64 f5 00 00       	call   805e590 <_test_assert>

        syscall_fail(lseek(BAD_FD, 0, SEEK_SET), EBADF);
 804f02c:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f033:	e8 f1 f2 00 00       	call   805e329 <test_errstr>
 804f038:	89 c3                	mov    %eax,%ebx
 804f03a:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804f041:	00 00 00 
 804f044:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804f04b:	00 
 804f04c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804f053:	00 
 804f054:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804f05b:	e8 70 a9 00 00       	call   80599d0 <lseek>
 804f060:	83 f8 ff             	cmp    $0xffffffff,%eax
 804f063:	0f 94 c0             	sete   %al
 804f066:	0f b6 c0             	movzbl %al,%eax
 804f069:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f070:	00 
 804f071:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f075:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804f07c:	08 
 804f07d:	c7 44 24 0c ec fc 05 	movl   $0x805fcec,0xc(%esp)
 804f084:	08 
 804f085:	c7 44 24 08 e1 01 00 	movl   $0x1e1,0x8(%esp)
 804f08c:	00 
 804f08d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f094:	08 
 804f095:	89 04 24             	mov    %eax,(%esp)
 804f098:	e8 f3 f4 00 00       	call   805e590 <_test_assert>
 804f09d:	85 c0                	test   %eax,%eax
 804f09f:	0f 84 89 00 00 00    	je     804f12e <vfstest_fd+0xa86>
 804f0a5:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804f0ab:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f0b0:	89 04 24             	mov    %eax,(%esp)
 804f0b3:	e8 71 f2 00 00       	call   805e329 <test_errstr>
 804f0b8:	89 c6                	mov    %eax,%esi
 804f0ba:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f0c1:	e8 63 f2 00 00       	call   805e329 <test_errstr>
 804f0c6:	89 c3                	mov    %eax,%ebx
 804f0c8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804f0cf:	00 
 804f0d0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804f0d7:	00 
 804f0d8:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804f0df:	e8 ec a8 00 00       	call   80599d0 <lseek>
 804f0e4:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f0e9:	83 f8 09             	cmp    $0x9,%eax
 804f0ec:	0f 94 c0             	sete   %al
 804f0ef:	0f b6 c0             	movzbl %al,%eax
 804f0f2:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804f0f6:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804f0fa:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f101:	00 
 804f102:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f106:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804f10d:	08 
 804f10e:	c7 44 24 0c 11 fd 05 	movl   $0x805fd11,0xc(%esp)
 804f115:	08 
 804f116:	c7 44 24 08 e1 01 00 	movl   $0x1e1,0x8(%esp)
 804f11d:	00 
 804f11e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f125:	08 
 804f126:	89 04 24             	mov    %eax,(%esp)
 804f129:	e8 62 f4 00 00       	call   805e590 <_test_assert>
        syscall_fail(lseek(HUGE_FD, 0, SEEK_SET), EBADF);
 804f12e:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f135:	e8 ef f1 00 00       	call   805e329 <test_errstr>
 804f13a:	89 c3                	mov    %eax,%ebx
 804f13c:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804f143:	00 00 00 
 804f146:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804f14d:	00 
 804f14e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804f155:	00 
 804f156:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
 804f15d:	e8 6e a8 00 00       	call   80599d0 <lseek>
 804f162:	83 f8 ff             	cmp    $0xffffffff,%eax
 804f165:	0f 94 c0             	sete   %al
 804f168:	0f b6 c0             	movzbl %al,%eax
 804f16b:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f172:	00 
 804f173:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f177:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804f17e:	08 
 804f17f:	c7 44 24 0c 30 fd 05 	movl   $0x805fd30,0xc(%esp)
 804f186:	08 
 804f187:	c7 44 24 08 e2 01 00 	movl   $0x1e2,0x8(%esp)
 804f18e:	00 
 804f18f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f196:	08 
 804f197:	89 04 24             	mov    %eax,(%esp)
 804f19a:	e8 f1 f3 00 00       	call   805e590 <_test_assert>
 804f19f:	85 c0                	test   %eax,%eax
 804f1a1:	0f 84 89 00 00 00    	je     804f230 <vfstest_fd+0xb88>
 804f1a7:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804f1ad:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f1b2:	89 04 24             	mov    %eax,(%esp)
 804f1b5:	e8 6f f1 00 00       	call   805e329 <test_errstr>
 804f1ba:	89 c6                	mov    %eax,%esi
 804f1bc:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f1c3:	e8 61 f1 00 00       	call   805e329 <test_errstr>
 804f1c8:	89 c3                	mov    %eax,%ebx
 804f1ca:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804f1d1:	00 
 804f1d2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804f1d9:	00 
 804f1da:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
 804f1e1:	e8 ea a7 00 00       	call   80599d0 <lseek>
 804f1e6:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f1eb:	83 f8 09             	cmp    $0x9,%eax
 804f1ee:	0f 94 c0             	sete   %al
 804f1f1:	0f b6 c0             	movzbl %al,%eax
 804f1f4:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804f1f8:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804f1fc:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f203:	00 
 804f204:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f208:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804f20f:	08 
 804f210:	c7 44 24 0c 58 fd 05 	movl   $0x805fd58,0xc(%esp)
 804f217:	08 
 804f218:	c7 44 24 08 e2 01 00 	movl   $0x1e2,0x8(%esp)
 804f21f:	00 
 804f220:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f227:	08 
 804f228:	89 04 24             	mov    %eax,(%esp)
 804f22b:	e8 60 f3 00 00       	call   805e590 <_test_assert>
        syscall_fail(lseek(-1, 0, SEEK_SET), EBADF);
 804f230:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f237:	e8 ed f0 00 00       	call   805e329 <test_errstr>
 804f23c:	89 c3                	mov    %eax,%ebx
 804f23e:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804f245:	00 00 00 
 804f248:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804f24f:	00 
 804f250:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804f257:	00 
 804f258:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 804f25f:	e8 6c a7 00 00       	call   80599d0 <lseek>
 804f264:	83 f8 ff             	cmp    $0xffffffff,%eax
 804f267:	0f 94 c0             	sete   %al
 804f26a:	0f b6 c0             	movzbl %al,%eax
 804f26d:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f274:	00 
 804f275:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f279:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804f280:	08 
 804f281:	c7 44 24 0c 78 fd 05 	movl   $0x805fd78,0xc(%esp)
 804f288:	08 
 804f289:	c7 44 24 08 e3 01 00 	movl   $0x1e3,0x8(%esp)
 804f290:	00 
 804f291:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f298:	08 
 804f299:	89 04 24             	mov    %eax,(%esp)
 804f29c:	e8 ef f2 00 00       	call   805e590 <_test_assert>
 804f2a1:	85 c0                	test   %eax,%eax
 804f2a3:	0f 84 89 00 00 00    	je     804f332 <vfstest_fd+0xc8a>
 804f2a9:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804f2af:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f2b4:	89 04 24             	mov    %eax,(%esp)
 804f2b7:	e8 6d f0 00 00       	call   805e329 <test_errstr>
 804f2bc:	89 c6                	mov    %eax,%esi
 804f2be:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f2c5:	e8 5f f0 00 00       	call   805e329 <test_errstr>
 804f2ca:	89 c3                	mov    %eax,%ebx
 804f2cc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804f2d3:	00 
 804f2d4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804f2db:	00 
 804f2dc:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 804f2e3:	e8 e8 a6 00 00       	call   80599d0 <lseek>
 804f2e8:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f2ed:	83 f8 09             	cmp    $0x9,%eax
 804f2f0:	0f 94 c0             	sete   %al
 804f2f3:	0f b6 c0             	movzbl %al,%eax
 804f2f6:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804f2fa:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804f2fe:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f305:	00 
 804f306:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f30a:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804f311:	08 
 804f312:	c7 44 24 0c 9d fd 05 	movl   $0x805fd9d,0xc(%esp)
 804f319:	08 
 804f31a:	c7 44 24 08 e3 01 00 	movl   $0x1e3,0x8(%esp)
 804f321:	00 
 804f322:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f329:	08 
 804f32a:	89 04 24             	mov    %eax,(%esp)
 804f32d:	e8 5e f2 00 00       	call   805e590 <_test_assert>

        syscall_fail(getdents(BAD_FD, &d, sizeof(d)), EBADF);
 804f332:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f339:	e8 eb ef 00 00       	call   805e329 <test_errstr>
 804f33e:	89 c3                	mov    %eax,%ebx
 804f340:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804f347:	00 00 00 
 804f34a:	c7 44 24 08 28 00 00 	movl   $0x28,0x8(%esp)
 804f351:	00 
 804f352:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
 804f358:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f35c:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804f363:	e8 02 ad 00 00       	call   805a06a <getdents>
 804f368:	83 f8 ff             	cmp    $0xffffffff,%eax
 804f36b:	0f 94 c0             	sete   %al
 804f36e:	0f b6 c0             	movzbl %al,%eax
 804f371:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f378:	00 
 804f379:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f37d:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804f384:	08 
 804f385:	c7 44 24 0c bc fd 05 	movl   $0x805fdbc,0xc(%esp)
 804f38c:	08 
 804f38d:	c7 44 24 08 e5 01 00 	movl   $0x1e5,0x8(%esp)
 804f394:	00 
 804f395:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f39c:	08 
 804f39d:	89 04 24             	mov    %eax,(%esp)
 804f3a0:	e8 eb f1 00 00       	call   805e590 <_test_assert>
 804f3a5:	85 c0                	test   %eax,%eax
 804f3a7:	0f 84 8b 00 00 00    	je     804f438 <vfstest_fd+0xd90>
 804f3ad:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804f3b3:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f3b8:	89 04 24             	mov    %eax,(%esp)
 804f3bb:	e8 69 ef 00 00       	call   805e329 <test_errstr>
 804f3c0:	89 c6                	mov    %eax,%esi
 804f3c2:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f3c9:	e8 5b ef 00 00       	call   805e329 <test_errstr>
 804f3ce:	89 c3                	mov    %eax,%ebx
 804f3d0:	c7 44 24 08 28 00 00 	movl   $0x28,0x8(%esp)
 804f3d7:	00 
 804f3d8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
 804f3de:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f3e2:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804f3e9:	e8 7c ac 00 00       	call   805a06a <getdents>
 804f3ee:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f3f3:	83 f8 09             	cmp    $0x9,%eax
 804f3f6:	0f 94 c0             	sete   %al
 804f3f9:	0f b6 c0             	movzbl %al,%eax
 804f3fc:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804f400:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804f404:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f40b:	00 
 804f40c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f410:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804f417:	08 
 804f418:	c7 44 24 0c f0 fd 05 	movl   $0x805fdf0,0xc(%esp)
 804f41f:	08 
 804f420:	c7 44 24 08 e5 01 00 	movl   $0x1e5,0x8(%esp)
 804f427:	00 
 804f428:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f42f:	08 
 804f430:	89 04 24             	mov    %eax,(%esp)
 804f433:	e8 58 f1 00 00       	call   805e590 <_test_assert>
        syscall_fail(getdents(HUGE_FD, &d, sizeof(d)), EBADF);
 804f438:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f43f:	e8 e5 ee 00 00       	call   805e329 <test_errstr>
 804f444:	89 c3                	mov    %eax,%ebx
 804f446:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804f44d:	00 00 00 
 804f450:	c7 44 24 08 28 00 00 	movl   $0x28,0x8(%esp)
 804f457:	00 
 804f458:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
 804f45e:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f462:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
 804f469:	e8 fc ab 00 00       	call   805a06a <getdents>
 804f46e:	83 f8 ff             	cmp    $0xffffffff,%eax
 804f471:	0f 94 c0             	sete   %al
 804f474:	0f b6 c0             	movzbl %al,%eax
 804f477:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f47e:	00 
 804f47f:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f483:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804f48a:	08 
 804f48b:	c7 44 24 0c 1c fe 05 	movl   $0x805fe1c,0xc(%esp)
 804f492:	08 
 804f493:	c7 44 24 08 e6 01 00 	movl   $0x1e6,0x8(%esp)
 804f49a:	00 
 804f49b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f4a2:	08 
 804f4a3:	89 04 24             	mov    %eax,(%esp)
 804f4a6:	e8 e5 f0 00 00       	call   805e590 <_test_assert>
 804f4ab:	85 c0                	test   %eax,%eax
 804f4ad:	0f 84 8b 00 00 00    	je     804f53e <vfstest_fd+0xe96>
 804f4b3:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804f4b9:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f4be:	89 04 24             	mov    %eax,(%esp)
 804f4c1:	e8 63 ee 00 00       	call   805e329 <test_errstr>
 804f4c6:	89 c6                	mov    %eax,%esi
 804f4c8:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f4cf:	e8 55 ee 00 00       	call   805e329 <test_errstr>
 804f4d4:	89 c3                	mov    %eax,%ebx
 804f4d6:	c7 44 24 08 28 00 00 	movl   $0x28,0x8(%esp)
 804f4dd:	00 
 804f4de:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
 804f4e4:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f4e8:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
 804f4ef:	e8 76 ab 00 00       	call   805a06a <getdents>
 804f4f4:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f4f9:	83 f8 09             	cmp    $0x9,%eax
 804f4fc:	0f 94 c0             	sete   %al
 804f4ff:	0f b6 c0             	movzbl %al,%eax
 804f502:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804f506:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804f50a:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f511:	00 
 804f512:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f516:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804f51d:	08 
 804f51e:	c7 44 24 0c 50 fe 05 	movl   $0x805fe50,0xc(%esp)
 804f525:	08 
 804f526:	c7 44 24 08 e6 01 00 	movl   $0x1e6,0x8(%esp)
 804f52d:	00 
 804f52e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f535:	08 
 804f536:	89 04 24             	mov    %eax,(%esp)
 804f539:	e8 52 f0 00 00       	call   805e590 <_test_assert>
        syscall_fail(getdents(-1, &d, sizeof(d)), EBADF);
 804f53e:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f545:	e8 df ed 00 00       	call   805e329 <test_errstr>
 804f54a:	89 c3                	mov    %eax,%ebx
 804f54c:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804f553:	00 00 00 
 804f556:	c7 44 24 08 28 00 00 	movl   $0x28,0x8(%esp)
 804f55d:	00 
 804f55e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
 804f564:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f568:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 804f56f:	e8 f6 aa 00 00       	call   805a06a <getdents>
 804f574:	83 f8 ff             	cmp    $0xffffffff,%eax
 804f577:	0f 94 c0             	sete   %al
 804f57a:	0f b6 c0             	movzbl %al,%eax
 804f57d:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f584:	00 
 804f585:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f589:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804f590:	08 
 804f591:	c7 44 24 0c 7c fe 05 	movl   $0x805fe7c,0xc(%esp)
 804f598:	08 
 804f599:	c7 44 24 08 e7 01 00 	movl   $0x1e7,0x8(%esp)
 804f5a0:	00 
 804f5a1:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f5a8:	08 
 804f5a9:	89 04 24             	mov    %eax,(%esp)
 804f5ac:	e8 df ef 00 00       	call   805e590 <_test_assert>
 804f5b1:	85 c0                	test   %eax,%eax
 804f5b3:	0f 84 8b 00 00 00    	je     804f644 <vfstest_fd+0xf9c>
 804f5b9:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804f5bf:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f5c4:	89 04 24             	mov    %eax,(%esp)
 804f5c7:	e8 5d ed 00 00       	call   805e329 <test_errstr>
 804f5cc:	89 c6                	mov    %eax,%esi
 804f5ce:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f5d5:	e8 4f ed 00 00       	call   805e329 <test_errstr>
 804f5da:	89 c3                	mov    %eax,%ebx
 804f5dc:	c7 44 24 08 28 00 00 	movl   $0x28,0x8(%esp)
 804f5e3:	00 
 804f5e4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
 804f5ea:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f5ee:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 804f5f5:	e8 70 aa 00 00       	call   805a06a <getdents>
 804f5fa:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f5ff:	83 f8 09             	cmp    $0x9,%eax
 804f602:	0f 94 c0             	sete   %al
 804f605:	0f b6 c0             	movzbl %al,%eax
 804f608:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804f60c:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804f610:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f617:	00 
 804f618:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f61c:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804f623:	08 
 804f624:	c7 44 24 0c b0 fe 05 	movl   $0x805feb0,0xc(%esp)
 804f62b:	08 
 804f62c:	c7 44 24 08 e7 01 00 	movl   $0x1e7,0x8(%esp)
 804f633:	00 
 804f634:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f63b:	08 
 804f63c:	89 04 24             	mov    %eax,(%esp)
 804f63f:	e8 4c ef 00 00       	call   805e590 <_test_assert>

        syscall_fail(dup(BAD_FD), EBADF);
 804f644:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f64b:	e8 d9 ec 00 00       	call   805e329 <test_errstr>
 804f650:	89 c3                	mov    %eax,%ebx
 804f652:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804f659:	00 00 00 
 804f65c:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804f663:	e8 9b a4 00 00       	call   8059b03 <dup>
 804f668:	83 f8 ff             	cmp    $0xffffffff,%eax
 804f66b:	0f 94 c0             	sete   %al
 804f66e:	0f b6 c0             	movzbl %al,%eax
 804f671:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f678:	00 
 804f679:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f67d:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804f684:	08 
 804f685:	c7 44 24 0c da fe 05 	movl   $0x805feda,0xc(%esp)
 804f68c:	08 
 804f68d:	c7 44 24 08 e9 01 00 	movl   $0x1e9,0x8(%esp)
 804f694:	00 
 804f695:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f69c:	08 
 804f69d:	89 04 24             	mov    %eax,(%esp)
 804f6a0:	e8 eb ee 00 00       	call   805e590 <_test_assert>
 804f6a5:	85 c0                	test   %eax,%eax
 804f6a7:	74 79                	je     804f722 <vfstest_fd+0x107a>
 804f6a9:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804f6af:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f6b4:	89 04 24             	mov    %eax,(%esp)
 804f6b7:	e8 6d ec 00 00       	call   805e329 <test_errstr>
 804f6bc:	89 c6                	mov    %eax,%esi
 804f6be:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f6c5:	e8 5f ec 00 00       	call   805e329 <test_errstr>
 804f6ca:	89 c3                	mov    %eax,%ebx
 804f6cc:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804f6d3:	e8 2b a4 00 00       	call   8059b03 <dup>
 804f6d8:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f6dd:	83 f8 09             	cmp    $0x9,%eax
 804f6e0:	0f 94 c0             	sete   %al
 804f6e3:	0f b6 c0             	movzbl %al,%eax
 804f6e6:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804f6ea:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804f6ee:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f6f5:	00 
 804f6f6:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f6fa:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804f701:	08 
 804f702:	c7 44 24 0c f7 fe 05 	movl   $0x805fef7,0xc(%esp)
 804f709:	08 
 804f70a:	c7 44 24 08 e9 01 00 	movl   $0x1e9,0x8(%esp)
 804f711:	00 
 804f712:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f719:	08 
 804f71a:	89 04 24             	mov    %eax,(%esp)
 804f71d:	e8 6e ee 00 00       	call   805e590 <_test_assert>
        syscall_fail(dup(HUGE_FD), EBADF);
 804f722:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f729:	e8 fb eb 00 00       	call   805e329 <test_errstr>
 804f72e:	89 c3                	mov    %eax,%ebx
 804f730:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804f737:	00 00 00 
 804f73a:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
 804f741:	e8 bd a3 00 00       	call   8059b03 <dup>
 804f746:	83 f8 ff             	cmp    $0xffffffff,%eax
 804f749:	0f 94 c0             	sete   %al
 804f74c:	0f b6 c0             	movzbl %al,%eax
 804f74f:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f756:	00 
 804f757:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f75b:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804f762:	08 
 804f763:	c7 44 24 0c 10 ff 05 	movl   $0x805ff10,0xc(%esp)
 804f76a:	08 
 804f76b:	c7 44 24 08 ea 01 00 	movl   $0x1ea,0x8(%esp)
 804f772:	00 
 804f773:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f77a:	08 
 804f77b:	89 04 24             	mov    %eax,(%esp)
 804f77e:	e8 0d ee 00 00       	call   805e590 <_test_assert>
 804f783:	85 c0                	test   %eax,%eax
 804f785:	74 79                	je     804f800 <vfstest_fd+0x1158>
 804f787:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804f78d:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f792:	89 04 24             	mov    %eax,(%esp)
 804f795:	e8 8f eb 00 00       	call   805e329 <test_errstr>
 804f79a:	89 c6                	mov    %eax,%esi
 804f79c:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f7a3:	e8 81 eb 00 00       	call   805e329 <test_errstr>
 804f7a8:	89 c3                	mov    %eax,%ebx
 804f7aa:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
 804f7b1:	e8 4d a3 00 00       	call   8059b03 <dup>
 804f7b6:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f7bb:	83 f8 09             	cmp    $0x9,%eax
 804f7be:	0f 94 c0             	sete   %al
 804f7c1:	0f b6 c0             	movzbl %al,%eax
 804f7c4:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804f7c8:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804f7cc:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f7d3:	00 
 804f7d4:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f7d8:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804f7df:	08 
 804f7e0:	c7 44 24 0c 2f ff 05 	movl   $0x805ff2f,0xc(%esp)
 804f7e7:	08 
 804f7e8:	c7 44 24 08 ea 01 00 	movl   $0x1ea,0x8(%esp)
 804f7ef:	00 
 804f7f0:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f7f7:	08 
 804f7f8:	89 04 24             	mov    %eax,(%esp)
 804f7fb:	e8 90 ed 00 00       	call   805e590 <_test_assert>
        syscall_fail(dup(-1), EBADF);
 804f800:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f807:	e8 1d eb 00 00       	call   805e329 <test_errstr>
 804f80c:	89 c3                	mov    %eax,%ebx
 804f80e:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804f815:	00 00 00 
 804f818:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 804f81f:	e8 df a2 00 00       	call   8059b03 <dup>
 804f824:	83 f8 ff             	cmp    $0xffffffff,%eax
 804f827:	0f 94 c0             	sete   %al
 804f82a:	0f b6 c0             	movzbl %al,%eax
 804f82d:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f834:	00 
 804f835:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f839:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804f840:	08 
 804f841:	c7 44 24 0c 47 ff 05 	movl   $0x805ff47,0xc(%esp)
 804f848:	08 
 804f849:	c7 44 24 08 eb 01 00 	movl   $0x1eb,0x8(%esp)
 804f850:	00 
 804f851:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f858:	08 
 804f859:	89 04 24             	mov    %eax,(%esp)
 804f85c:	e8 2f ed 00 00       	call   805e590 <_test_assert>
 804f861:	85 c0                	test   %eax,%eax
 804f863:	74 79                	je     804f8de <vfstest_fd+0x1236>
 804f865:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804f86b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f870:	89 04 24             	mov    %eax,(%esp)
 804f873:	e8 b1 ea 00 00       	call   805e329 <test_errstr>
 804f878:	89 c6                	mov    %eax,%esi
 804f87a:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f881:	e8 a3 ea 00 00       	call   805e329 <test_errstr>
 804f886:	89 c3                	mov    %eax,%ebx
 804f888:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 804f88f:	e8 6f a2 00 00       	call   8059b03 <dup>
 804f894:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f899:	83 f8 09             	cmp    $0x9,%eax
 804f89c:	0f 94 c0             	sete   %al
 804f89f:	0f b6 c0             	movzbl %al,%eax
 804f8a2:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804f8a6:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804f8aa:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f8b1:	00 
 804f8b2:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f8b6:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804f8bd:	08 
 804f8be:	c7 44 24 0c 64 ff 05 	movl   $0x805ff64,0xc(%esp)
 804f8c5:	08 
 804f8c6:	c7 44 24 08 eb 01 00 	movl   $0x1eb,0x8(%esp)
 804f8cd:	00 
 804f8ce:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f8d5:	08 
 804f8d6:	89 04 24             	mov    %eax,(%esp)
 804f8d9:	e8 b2 ec 00 00       	call   805e590 <_test_assert>

        syscall_fail(dup2(BAD_FD, 25), EBADF);
 804f8de:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f8e5:	e8 3f ea 00 00       	call   805e329 <test_errstr>
 804f8ea:	89 c3                	mov    %eax,%ebx
 804f8ec:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804f8f3:	00 00 00 
 804f8f6:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
 804f8fd:	00 
 804f8fe:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804f905:	e8 39 a2 00 00       	call   8059b43 <dup2>
 804f90a:	83 f8 ff             	cmp    $0xffffffff,%eax
 804f90d:	0f 94 c0             	sete   %al
 804f910:	0f b6 c0             	movzbl %al,%eax
 804f913:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f91a:	00 
 804f91b:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f91f:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804f926:	08 
 804f927:	c7 44 24 0c 7c ff 05 	movl   $0x805ff7c,0xc(%esp)
 804f92e:	08 
 804f92f:	c7 44 24 08 ed 01 00 	movl   $0x1ed,0x8(%esp)
 804f936:	00 
 804f937:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f93e:	08 
 804f93f:	89 04 24             	mov    %eax,(%esp)
 804f942:	e8 49 ec 00 00       	call   805e590 <_test_assert>
 804f947:	85 c0                	test   %eax,%eax
 804f949:	0f 84 81 00 00 00    	je     804f9d0 <vfstest_fd+0x1328>
 804f94f:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804f955:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f95a:	89 04 24             	mov    %eax,(%esp)
 804f95d:	e8 c7 e9 00 00       	call   805e329 <test_errstr>
 804f962:	89 c6                	mov    %eax,%esi
 804f964:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f96b:	e8 b9 e9 00 00       	call   805e329 <test_errstr>
 804f970:	89 c3                	mov    %eax,%ebx
 804f972:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
 804f979:	00 
 804f97a:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804f981:	e8 bd a1 00 00       	call   8059b43 <dup2>
 804f986:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804f98b:	83 f8 09             	cmp    $0x9,%eax
 804f98e:	0f 94 c0             	sete   %al
 804f991:	0f b6 c0             	movzbl %al,%eax
 804f994:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804f998:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804f99c:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804f9a3:	00 
 804f9a4:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804f9a8:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804f9af:	08 
 804f9b0:	c7 44 24 0c 9e ff 05 	movl   $0x805ff9e,0xc(%esp)
 804f9b7:	08 
 804f9b8:	c7 44 24 08 ed 01 00 	movl   $0x1ed,0x8(%esp)
 804f9bf:	00 
 804f9c0:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804f9c7:	08 
 804f9c8:	89 04 24             	mov    %eax,(%esp)
 804f9cb:	e8 c0 eb 00 00       	call   805e590 <_test_assert>
        syscall_fail(dup2(HUGE_FD, 25), EBADF);
 804f9d0:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804f9d7:	e8 4d e9 00 00       	call   805e329 <test_errstr>
 804f9dc:	89 c3                	mov    %eax,%ebx
 804f9de:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804f9e5:	00 00 00 
 804f9e8:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
 804f9ef:	00 
 804f9f0:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
 804f9f7:	e8 47 a1 00 00       	call   8059b43 <dup2>
 804f9fc:	83 f8 ff             	cmp    $0xffffffff,%eax
 804f9ff:	0f 94 c0             	sete   %al
 804fa02:	0f b6 c0             	movzbl %al,%eax
 804fa05:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804fa0c:	00 
 804fa0d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804fa11:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804fa18:	08 
 804fa19:	c7 44 24 0c bc ff 05 	movl   $0x805ffbc,0xc(%esp)
 804fa20:	08 
 804fa21:	c7 44 24 08 ee 01 00 	movl   $0x1ee,0x8(%esp)
 804fa28:	00 
 804fa29:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804fa30:	08 
 804fa31:	89 04 24             	mov    %eax,(%esp)
 804fa34:	e8 57 eb 00 00       	call   805e590 <_test_assert>
 804fa39:	85 c0                	test   %eax,%eax
 804fa3b:	0f 84 81 00 00 00    	je     804fac2 <vfstest_fd+0x141a>
 804fa41:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804fa47:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804fa4c:	89 04 24             	mov    %eax,(%esp)
 804fa4f:	e8 d5 e8 00 00       	call   805e329 <test_errstr>
 804fa54:	89 c6                	mov    %eax,%esi
 804fa56:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804fa5d:	e8 c7 e8 00 00       	call   805e329 <test_errstr>
 804fa62:	89 c3                	mov    %eax,%ebx
 804fa64:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
 804fa6b:	00 
 804fa6c:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
 804fa73:	e8 cb a0 00 00       	call   8059b43 <dup2>
 804fa78:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804fa7d:	83 f8 09             	cmp    $0x9,%eax
 804fa80:	0f 94 c0             	sete   %al
 804fa83:	0f b6 c0             	movzbl %al,%eax
 804fa86:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804fa8a:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804fa8e:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804fa95:	00 
 804fa96:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804fa9a:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804faa1:	08 
 804faa2:	c7 44 24 0c e0 ff 05 	movl   $0x805ffe0,0xc(%esp)
 804faa9:	08 
 804faaa:	c7 44 24 08 ee 01 00 	movl   $0x1ee,0x8(%esp)
 804fab1:	00 
 804fab2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804fab9:	08 
 804faba:	89 04 24             	mov    %eax,(%esp)
 804fabd:	e8 ce ea 00 00       	call   805e590 <_test_assert>
        syscall_fail(dup2(-1, 25), EBADF);
 804fac2:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804fac9:	e8 5b e8 00 00       	call   805e329 <test_errstr>
 804face:	89 c3                	mov    %eax,%ebx
 804fad0:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804fad7:	00 00 00 
 804fada:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
 804fae1:	00 
 804fae2:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 804fae9:	e8 55 a0 00 00       	call   8059b43 <dup2>
 804faee:	83 f8 ff             	cmp    $0xffffffff,%eax
 804faf1:	0f 94 c0             	sete   %al
 804faf4:	0f b6 c0             	movzbl %al,%eax
 804faf7:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804fafe:	00 
 804faff:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804fb03:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804fb0a:	08 
 804fb0b:	c7 44 24 0c 00 00 06 	movl   $0x8060000,0xc(%esp)
 804fb12:	08 
 804fb13:	c7 44 24 08 ef 01 00 	movl   $0x1ef,0x8(%esp)
 804fb1a:	00 
 804fb1b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804fb22:	08 
 804fb23:	89 04 24             	mov    %eax,(%esp)
 804fb26:	e8 65 ea 00 00       	call   805e590 <_test_assert>
 804fb2b:	85 c0                	test   %eax,%eax
 804fb2d:	0f 84 81 00 00 00    	je     804fbb4 <vfstest_fd+0x150c>
 804fb33:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804fb39:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804fb3e:	89 04 24             	mov    %eax,(%esp)
 804fb41:	e8 e3 e7 00 00       	call   805e329 <test_errstr>
 804fb46:	89 c6                	mov    %eax,%esi
 804fb48:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804fb4f:	e8 d5 e7 00 00       	call   805e329 <test_errstr>
 804fb54:	89 c3                	mov    %eax,%ebx
 804fb56:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
 804fb5d:	00 
 804fb5e:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 804fb65:	e8 d9 9f 00 00       	call   8059b43 <dup2>
 804fb6a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804fb6f:	83 f8 09             	cmp    $0x9,%eax
 804fb72:	0f 94 c0             	sete   %al
 804fb75:	0f b6 c0             	movzbl %al,%eax
 804fb78:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804fb7c:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804fb80:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804fb87:	00 
 804fb88:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804fb8c:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804fb93:	08 
 804fb94:	c7 44 24 0c 22 00 06 	movl   $0x8060022,0xc(%esp)
 804fb9b:	08 
 804fb9c:	c7 44 24 08 ef 01 00 	movl   $0x1ef,0x8(%esp)
 804fba3:	00 
 804fba4:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804fbab:	08 
 804fbac:	89 04 24             	mov    %eax,(%esp)
 804fbaf:	e8 dc e9 00 00       	call   805e590 <_test_assert>

        /* dup2 has some extra cases since it takes a second fd */
        syscall_fail(dup2(0, HUGE_FD), EBADF);
 804fbb4:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804fbbb:	e8 69 e7 00 00       	call   805e329 <test_errstr>
 804fbc0:	89 c3                	mov    %eax,%ebx
 804fbc2:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804fbc9:	00 00 00 
 804fbcc:	c7 44 24 04 0f 27 00 	movl   $0x270f,0x4(%esp)
 804fbd3:	00 
 804fbd4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 804fbdb:	e8 63 9f 00 00       	call   8059b43 <dup2>
 804fbe0:	83 f8 ff             	cmp    $0xffffffff,%eax
 804fbe3:	0f 94 c0             	sete   %al
 804fbe6:	0f b6 c0             	movzbl %al,%eax
 804fbe9:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804fbf0:	00 
 804fbf1:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804fbf5:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804fbfc:	08 
 804fbfd:	c7 44 24 0c 40 00 06 	movl   $0x8060040,0xc(%esp)
 804fc04:	08 
 804fc05:	c7 44 24 08 f2 01 00 	movl   $0x1f2,0x8(%esp)
 804fc0c:	00 
 804fc0d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804fc14:	08 
 804fc15:	89 04 24             	mov    %eax,(%esp)
 804fc18:	e8 73 e9 00 00       	call   805e590 <_test_assert>
 804fc1d:	85 c0                	test   %eax,%eax
 804fc1f:	0f 84 81 00 00 00    	je     804fca6 <vfstest_fd+0x15fe>
 804fc25:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804fc2b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804fc30:	89 04 24             	mov    %eax,(%esp)
 804fc33:	e8 f1 e6 00 00       	call   805e329 <test_errstr>
 804fc38:	89 c6                	mov    %eax,%esi
 804fc3a:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804fc41:	e8 e3 e6 00 00       	call   805e329 <test_errstr>
 804fc46:	89 c3                	mov    %eax,%ebx
 804fc48:	c7 44 24 04 0f 27 00 	movl   $0x270f,0x4(%esp)
 804fc4f:	00 
 804fc50:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 804fc57:	e8 e7 9e 00 00       	call   8059b43 <dup2>
 804fc5c:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804fc61:	83 f8 09             	cmp    $0x9,%eax
 804fc64:	0f 94 c0             	sete   %al
 804fc67:	0f b6 c0             	movzbl %al,%eax
 804fc6a:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804fc6e:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804fc72:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804fc79:	00 
 804fc7a:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804fc7e:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804fc85:	08 
 804fc86:	c7 44 24 0c 63 00 06 	movl   $0x8060063,0xc(%esp)
 804fc8d:	08 
 804fc8e:	c7 44 24 08 f2 01 00 	movl   $0x1f2,0x8(%esp)
 804fc95:	00 
 804fc96:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804fc9d:	08 
 804fc9e:	89 04 24             	mov    %eax,(%esp)
 804fca1:	e8 ea e8 00 00       	call   805e590 <_test_assert>
        syscall_fail(dup2(0, -1), EBADF);
 804fca6:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804fcad:	e8 77 e6 00 00       	call   805e329 <test_errstr>
 804fcb2:	89 c3                	mov    %eax,%ebx
 804fcb4:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804fcbb:	00 00 00 
 804fcbe:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 804fcc5:	ff 
 804fcc6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 804fccd:	e8 71 9e 00 00       	call   8059b43 <dup2>
 804fcd2:	83 f8 ff             	cmp    $0xffffffff,%eax
 804fcd5:	0f 94 c0             	sete   %al
 804fcd8:	0f b6 c0             	movzbl %al,%eax
 804fcdb:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804fce2:	00 
 804fce3:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804fce7:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804fcee:	08 
 804fcef:	c7 44 24 0c 80 00 06 	movl   $0x8060080,0xc(%esp)
 804fcf6:	08 
 804fcf7:	c7 44 24 08 f3 01 00 	movl   $0x1f3,0x8(%esp)
 804fcfe:	00 
 804fcff:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804fd06:	08 
 804fd07:	89 04 24             	mov    %eax,(%esp)
 804fd0a:	e8 81 e8 00 00       	call   805e590 <_test_assert>
 804fd0f:	85 c0                	test   %eax,%eax
 804fd11:	0f 84 81 00 00 00    	je     804fd98 <vfstest_fd+0x16f0>
 804fd17:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804fd1d:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804fd22:	89 04 24             	mov    %eax,(%esp)
 804fd25:	e8 ff e5 00 00       	call   805e329 <test_errstr>
 804fd2a:	89 c6                	mov    %eax,%esi
 804fd2c:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804fd33:	e8 f1 e5 00 00       	call   805e329 <test_errstr>
 804fd38:	89 c3                	mov    %eax,%ebx
 804fd3a:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 804fd41:	ff 
 804fd42:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 804fd49:	e8 f5 9d 00 00       	call   8059b43 <dup2>
 804fd4e:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804fd53:	83 f8 09             	cmp    $0x9,%eax
 804fd56:	0f 94 c0             	sete   %al
 804fd59:	0f b6 c0             	movzbl %al,%eax
 804fd5c:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804fd60:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804fd64:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804fd6b:	00 
 804fd6c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804fd70:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804fd77:	08 
 804fd78:	c7 44 24 0c a1 00 06 	movl   $0x80600a1,0xc(%esp)
 804fd7f:	08 
 804fd80:	c7 44 24 08 f3 01 00 	movl   $0x1f3,0x8(%esp)
 804fd87:	00 
 804fd88:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804fd8f:	08 
 804fd90:	89 04 24             	mov    %eax,(%esp)
 804fd93:	e8 f8 e7 00 00       	call   805e590 <_test_assert>

        /* if the fds are equal, but the first is invalid or out of the
         * allowed range */
        syscall_fail(dup2(BAD_FD, BAD_FD), EBADF);
 804fd98:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804fd9f:	e8 85 e5 00 00       	call   805e329 <test_errstr>
 804fda4:	89 c3                	mov    %eax,%ebx
 804fda6:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804fdad:	00 00 00 
 804fdb0:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
 804fdb7:	00 
 804fdb8:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804fdbf:	e8 7f 9d 00 00       	call   8059b43 <dup2>
 804fdc4:	83 f8 ff             	cmp    $0xffffffff,%eax
 804fdc7:	0f 94 c0             	sete   %al
 804fdca:	0f b6 c0             	movzbl %al,%eax
 804fdcd:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804fdd4:	00 
 804fdd5:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804fdd9:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804fde0:	08 
 804fde1:	c7 44 24 0c bc 00 06 	movl   $0x80600bc,0xc(%esp)
 804fde8:	08 
 804fde9:	c7 44 24 08 f7 01 00 	movl   $0x1f7,0x8(%esp)
 804fdf0:	00 
 804fdf1:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804fdf8:	08 
 804fdf9:	89 04 24             	mov    %eax,(%esp)
 804fdfc:	e8 8f e7 00 00       	call   805e590 <_test_assert>
 804fe01:	85 c0                	test   %eax,%eax
 804fe03:	0f 84 81 00 00 00    	je     804fe8a <vfstest_fd+0x17e2>
 804fe09:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804fe0f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804fe14:	89 04 24             	mov    %eax,(%esp)
 804fe17:	e8 0d e5 00 00       	call   805e329 <test_errstr>
 804fe1c:	89 c6                	mov    %eax,%esi
 804fe1e:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804fe25:	e8 ff e4 00 00       	call   805e329 <test_errstr>
 804fe2a:	89 c3                	mov    %eax,%ebx
 804fe2c:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
 804fe33:	00 
 804fe34:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 804fe3b:	e8 03 9d 00 00       	call   8059b43 <dup2>
 804fe40:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804fe45:	83 f8 09             	cmp    $0x9,%eax
 804fe48:	0f 94 c0             	sete   %al
 804fe4b:	0f b6 c0             	movzbl %al,%eax
 804fe4e:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804fe52:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804fe56:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804fe5d:	00 
 804fe5e:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804fe62:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804fe69:	08 
 804fe6a:	c7 44 24 0c de 00 06 	movl   $0x80600de,0xc(%esp)
 804fe71:	08 
 804fe72:	c7 44 24 08 f7 01 00 	movl   $0x1f7,0x8(%esp)
 804fe79:	00 
 804fe7a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804fe81:	08 
 804fe82:	89 04 24             	mov    %eax,(%esp)
 804fe85:	e8 06 e7 00 00       	call   805e590 <_test_assert>
        syscall_fail(dup2(HUGE_FD, HUGE_FD), EBADF);
 804fe8a:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804fe91:	e8 93 e4 00 00       	call   805e329 <test_errstr>
 804fe96:	89 c3                	mov    %eax,%ebx
 804fe98:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804fe9f:	00 00 00 
 804fea2:	c7 44 24 04 0f 27 00 	movl   $0x270f,0x4(%esp)
 804fea9:	00 
 804feaa:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
 804feb1:	e8 8d 9c 00 00       	call   8059b43 <dup2>
 804feb6:	83 f8 ff             	cmp    $0xffffffff,%eax
 804feb9:	0f 94 c0             	sete   %al
 804febc:	0f b6 c0             	movzbl %al,%eax
 804febf:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804fec6:	00 
 804fec7:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804fecb:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804fed2:	08 
 804fed3:	c7 44 24 0c fc 00 06 	movl   $0x80600fc,0xc(%esp)
 804feda:	08 
 804fedb:	c7 44 24 08 f8 01 00 	movl   $0x1f8,0x8(%esp)
 804fee2:	00 
 804fee3:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804feea:	08 
 804feeb:	89 04 24             	mov    %eax,(%esp)
 804feee:	e8 9d e6 00 00       	call   805e590 <_test_assert>
 804fef3:	85 c0                	test   %eax,%eax
 804fef5:	0f 84 81 00 00 00    	je     804ff7c <vfstest_fd+0x18d4>
 804fefb:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804ff01:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ff06:	89 04 24             	mov    %eax,(%esp)
 804ff09:	e8 1b e4 00 00       	call   805e329 <test_errstr>
 804ff0e:	89 c6                	mov    %eax,%esi
 804ff10:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804ff17:	e8 0d e4 00 00       	call   805e329 <test_errstr>
 804ff1c:	89 c3                	mov    %eax,%ebx
 804ff1e:	c7 44 24 04 0f 27 00 	movl   $0x270f,0x4(%esp)
 804ff25:	00 
 804ff26:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
 804ff2d:	e8 11 9c 00 00       	call   8059b43 <dup2>
 804ff32:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804ff37:	83 f8 09             	cmp    $0x9,%eax
 804ff3a:	0f 94 c0             	sete   %al
 804ff3d:	0f b6 c0             	movzbl %al,%eax
 804ff40:	89 7c 24 20          	mov    %edi,0x20(%esp)
 804ff44:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 804ff48:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804ff4f:	00 
 804ff50:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804ff54:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 804ff5b:	08 
 804ff5c:	c7 44 24 0c 24 01 06 	movl   $0x8060124,0xc(%esp)
 804ff63:	08 
 804ff64:	c7 44 24 08 f8 01 00 	movl   $0x1f8,0x8(%esp)
 804ff6b:	00 
 804ff6c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ff73:	08 
 804ff74:	89 04 24             	mov    %eax,(%esp)
 804ff77:	e8 14 e6 00 00       	call   805e590 <_test_assert>
        syscall_fail(dup2(-1, -1), EBADF);
 804ff7c:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 804ff83:	e8 a1 e3 00 00       	call   805e329 <test_errstr>
 804ff88:	89 c3                	mov    %eax,%ebx
 804ff8a:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 804ff91:	00 00 00 
 804ff94:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 804ff9b:	ff 
 804ff9c:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 804ffa3:	e8 9b 9b 00 00       	call   8059b43 <dup2>
 804ffa8:	83 f8 ff             	cmp    $0xffffffff,%eax
 804ffab:	0f 94 c0             	sete   %al
 804ffae:	0f b6 c0             	movzbl %al,%eax
 804ffb1:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 804ffb8:	00 
 804ffb9:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 804ffbd:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 804ffc4:	08 
 804ffc5:	c7 44 24 0c 44 01 06 	movl   $0x8060144,0xc(%esp)
 804ffcc:	08 
 804ffcd:	c7 44 24 08 f9 01 00 	movl   $0x1f9,0x8(%esp)
 804ffd4:	00 
 804ffd5:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 804ffdc:	08 
 804ffdd:	89 04 24             	mov    %eax,(%esp)
 804ffe0:	e8 ab e5 00 00       	call   805e590 <_test_assert>
 804ffe5:	85 c0                	test   %eax,%eax
 804ffe7:	0f 84 81 00 00 00    	je     805006e <vfstest_fd+0x19c6>
 804ffed:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 804fff3:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 804fff8:	89 04 24             	mov    %eax,(%esp)
 804fffb:	e8 29 e3 00 00       	call   805e329 <test_errstr>
 8050000:	89 c6                	mov    %eax,%esi
 8050002:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 8050009:	e8 1b e3 00 00       	call   805e329 <test_errstr>
 805000e:	89 c3                	mov    %eax,%ebx
 8050010:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 8050017:	ff 
 8050018:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 805001f:	e8 1f 9b 00 00       	call   8059b43 <dup2>
 8050024:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050029:	83 f8 09             	cmp    $0x9,%eax
 805002c:	0f 94 c0             	sete   %al
 805002f:	0f b6 c0             	movzbl %al,%eax
 8050032:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8050036:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 805003a:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 8050041:	00 
 8050042:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8050046:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 805004d:	08 
 805004e:	c7 44 24 0c 66 01 06 	movl   $0x8060166,0xc(%esp)
 8050055:	08 
 8050056:	c7 44 24 08 f9 01 00 	movl   $0x1f9,0x8(%esp)
 805005d:	00 
 805005e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050065:	08 
 8050066:	89 04 24             	mov    %eax,(%esp)
 8050069:	e8 22 e5 00 00       	call   805e590 <_test_assert>

        /* dup works properly in normal usage */
        create_file("file01");
 805006e:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8050074:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050079:	89 04 24             	mov    %eax,(%esp)
 805007c:	e8 a8 e2 00 00       	call   805e329 <test_errstr>
 8050081:	89 c3                	mov    %eax,%ebx
 8050083:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 805008a:	00 
 805008b:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 8050092:	00 
 8050093:	c7 04 24 81 01 06 08 	movl   $0x8060181,(%esp)
 805009a:	e8 cd 98 00 00       	call   805996c <open>
 805009f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 80500a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80500a5:	f7 d0                	not    %eax
 80500a7:	c1 e8 1f             	shr    $0x1f,%eax
 80500aa:	0f b6 c0             	movzbl %al,%eax
 80500ad:	89 74 24 18          	mov    %esi,0x18(%esp)
 80500b1:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80500b5:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80500bc:	08 
 80500bd:	c7 44 24 0c 88 01 06 	movl   $0x8060188,0xc(%esp)
 80500c4:	08 
 80500c5:	c7 44 24 08 fc 01 00 	movl   $0x1fc,0x8(%esp)
 80500cc:	00 
 80500cd:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80500d4:	08 
 80500d5:	89 04 24             	mov    %eax,(%esp)
 80500d8:	e8 b3 e4 00 00       	call   805e590 <_test_assert>
 80500dd:	85 c0                	test   %eax,%eax
 80500df:	74 58                	je     8050139 <vfstest_fd+0x1a91>
 80500e1:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80500e7:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80500ec:	89 04 24             	mov    %eax,(%esp)
 80500ef:	e8 35 e2 00 00       	call   805e329 <test_errstr>
 80500f4:	89 c3                	mov    %eax,%ebx
 80500f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80500f9:	89 04 24             	mov    %eax,(%esp)
 80500fc:	e8 c2 99 00 00       	call   8059ac3 <close>
 8050101:	f7 d0                	not    %eax
 8050103:	c1 e8 1f             	shr    $0x1f,%eax
 8050106:	0f b6 c0             	movzbl %al,%eax
 8050109:	89 74 24 18          	mov    %esi,0x18(%esp)
 805010d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8050111:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8050118:	08 
 8050119:	c7 44 24 0c 78 ec 05 	movl   $0x805ec78,0xc(%esp)
 8050120:	08 
 8050121:	c7 44 24 08 fc 01 00 	movl   $0x1fc,0x8(%esp)
 8050128:	00 
 8050129:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050130:	08 
 8050131:	89 04 24             	mov    %eax,(%esp)
 8050134:	e8 57 e4 00 00       	call   805e590 <_test_assert>
        syscall_success(fd1 = open("file01", O_RDWR, 0));
 8050139:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805013f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050144:	89 04 24             	mov    %eax,(%esp)
 8050147:	e8 dd e1 00 00       	call   805e329 <test_errstr>
 805014c:	89 c3                	mov    %eax,%ebx
 805014e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8050155:	00 
 8050156:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 805015d:	00 
 805015e:	c7 04 24 81 01 06 08 	movl   $0x8060181,(%esp)
 8050165:	e8 02 98 00 00       	call   805996c <open>
 805016a:	89 45 e0             	mov    %eax,-0x20(%ebp)
 805016d:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8050170:	f7 d0                	not    %eax
 8050172:	c1 e8 1f             	shr    $0x1f,%eax
 8050175:	0f b6 c0             	movzbl %al,%eax
 8050178:	89 74 24 18          	mov    %esi,0x18(%esp)
 805017c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8050180:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8050187:	08 
 8050188:	c7 44 24 0c b8 01 06 	movl   $0x80601b8,0xc(%esp)
 805018f:	08 
 8050190:	c7 44 24 08 fd 01 00 	movl   $0x1fd,0x8(%esp)
 8050197:	00 
 8050198:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805019f:	08 
 80501a0:	89 04 24             	mov    %eax,(%esp)
 80501a3:	e8 e8 e3 00 00       	call   805e590 <_test_assert>
        syscall_success(fd2 = dup(fd1));
 80501a8:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80501ae:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80501b3:	89 04 24             	mov    %eax,(%esp)
 80501b6:	e8 6e e1 00 00       	call   805e329 <test_errstr>
 80501bb:	89 c3                	mov    %eax,%ebx
 80501bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
 80501c0:	89 04 24             	mov    %eax,(%esp)
 80501c3:	e8 3b 99 00 00       	call   8059b03 <dup>
 80501c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
 80501cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
 80501ce:	f7 d0                	not    %eax
 80501d0:	c1 e8 1f             	shr    $0x1f,%eax
 80501d3:	0f b6 c0             	movzbl %al,%eax
 80501d6:	89 74 24 18          	mov    %esi,0x18(%esp)
 80501da:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80501de:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80501e5:	08 
 80501e6:	c7 44 24 0c da 01 06 	movl   $0x80601da,0xc(%esp)
 80501ed:	08 
 80501ee:	c7 44 24 08 fe 01 00 	movl   $0x1fe,0x8(%esp)
 80501f5:	00 
 80501f6:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80501fd:	08 
 80501fe:	89 04 24             	mov    %eax,(%esp)
 8050201:	e8 8a e3 00 00       	call   805e590 <_test_assert>
        test_assert(fd1 < fd2, "dup(%d) returned %d", fd1, fd2);
 8050206:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8050209:	3b 45 dc             	cmp    -0x24(%ebp),%eax
 805020c:	0f 9c c0             	setl   %al
 805020f:	0f b6 c0             	movzbl %al,%eax
 8050212:	8b 55 dc             	mov    -0x24(%ebp),%edx
 8050215:	89 54 24 18          	mov    %edx,0x18(%esp)
 8050219:	8b 55 e0             	mov    -0x20(%ebp),%edx
 805021c:	89 54 24 14          	mov    %edx,0x14(%esp)
 8050220:	c7 44 24 10 f0 01 06 	movl   $0x80601f0,0x10(%esp)
 8050227:	08 
 8050228:	c7 44 24 0c 04 02 06 	movl   $0x8060204,0xc(%esp)
 805022f:	08 
 8050230:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 8050237:	00 
 8050238:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805023f:	08 
 8050240:	89 04 24             	mov    %eax,(%esp)
 8050243:	e8 48 e3 00 00       	call   805e590 <_test_assert>
        syscall_success(write(fd2, "hello", 5));
 8050248:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805024e:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050253:	89 04 24             	mov    %eax,(%esp)
 8050256:	e8 ce e0 00 00       	call   805e329 <test_errstr>
 805025b:	89 c3                	mov    %eax,%ebx
 805025d:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 8050264:	00 
 8050265:	c7 44 24 04 0e 02 06 	movl   $0x806020e,0x4(%esp)
 805026c:	08 
 805026d:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8050270:	89 04 24             	mov    %eax,(%esp)
 8050273:	e8 fa 97 00 00       	call   8059a72 <write>
 8050278:	f7 d0                	not    %eax
 805027a:	c1 e8 1f             	shr    $0x1f,%eax
 805027d:	0f b6 c0             	movzbl %al,%eax
 8050280:	89 74 24 18          	mov    %esi,0x18(%esp)
 8050284:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8050288:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805028f:	08 
 8050290:	c7 44 24 0c 14 02 06 	movl   $0x8060214,0xc(%esp)
 8050297:	08 
 8050298:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
 805029f:	00 
 80502a0:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80502a7:	08 
 80502a8:	89 04 24             	mov    %eax,(%esp)
 80502ab:	e8 e0 e2 00 00       	call   805e590 <_test_assert>
        test_fpos(fd1, 5); test_fpos(fd2, 5);
 80502b0:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
 80502b7:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80502bd:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80502c2:	89 04 24             	mov    %eax,(%esp)
 80502c5:	e8 5f e0 00 00       	call   805e329 <test_errstr>
 80502ca:	89 c3                	mov    %eax,%ebx
 80502cc:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 80502d3:	00 
 80502d4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80502db:	00 
 80502dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
 80502df:	89 04 24             	mov    %eax,(%esp)
 80502e2:	e8 e9 96 00 00       	call   80599d0 <lseek>
 80502e7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 80502ea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 80502ed:	f7 d0                	not    %eax
 80502ef:	c1 e8 1f             	shr    $0x1f,%eax
 80502f2:	0f b6 c0             	movzbl %al,%eax
 80502f5:	89 74 24 18          	mov    %esi,0x18(%esp)
 80502f9:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80502fd:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8050304:	08 
 8050305:	c7 44 24 0c 32 02 06 	movl   $0x8060232,0xc(%esp)
 805030c:	08 
 805030d:	c7 44 24 08 01 02 00 	movl   $0x201,0x8(%esp)
 8050314:	00 
 8050315:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805031c:	08 
 805031d:	89 04 24             	mov    %eax,(%esp)
 8050320:	e8 6b e2 00 00       	call   805e590 <_test_assert>
 8050325:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 8050328:	3b 45 d8             	cmp    -0x28(%ebp),%eax
 805032b:	0f 94 c0             	sete   %al
 805032e:	0f b6 c0             	movzbl %al,%eax
 8050331:	8b 55 d8             	mov    -0x28(%ebp),%edx
 8050334:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8050338:	8b 55 d4             	mov    -0x2c(%ebp),%edx
 805033b:	89 54 24 18          	mov    %edx,0x18(%esp)
 805033f:	8b 55 e0             	mov    -0x20(%ebp),%edx
 8050342:	89 54 24 14          	mov    %edx,0x14(%esp)
 8050346:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 805034d:	08 
 805034e:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8050355:	08 
 8050356:	c7 44 24 08 01 02 00 	movl   $0x201,0x8(%esp)
 805035d:	00 
 805035e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050365:	08 
 8050366:	89 04 24             	mov    %eax,(%esp)
 8050369:	e8 22 e2 00 00       	call   805e590 <_test_assert>
 805036e:	c7 45 d0 05 00 00 00 	movl   $0x5,-0x30(%ebp)
 8050375:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805037b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050380:	89 04 24             	mov    %eax,(%esp)
 8050383:	e8 a1 df 00 00       	call   805e329 <test_errstr>
 8050388:	89 c3                	mov    %eax,%ebx
 805038a:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8050391:	00 
 8050392:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8050399:	00 
 805039a:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805039d:	89 04 24             	mov    %eax,(%esp)
 80503a0:	e8 2b 96 00 00       	call   80599d0 <lseek>
 80503a5:	89 45 cc             	mov    %eax,-0x34(%ebp)
 80503a8:	8b 45 cc             	mov    -0x34(%ebp),%eax
 80503ab:	f7 d0                	not    %eax
 80503ad:	c1 e8 1f             	shr    $0x1f,%eax
 80503b0:	0f b6 c0             	movzbl %al,%eax
 80503b3:	89 74 24 18          	mov    %esi,0x18(%esp)
 80503b7:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80503bb:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80503c2:	08 
 80503c3:	c7 44 24 0c 7b 02 06 	movl   $0x806027b,0xc(%esp)
 80503ca:	08 
 80503cb:	c7 44 24 08 01 02 00 	movl   $0x201,0x8(%esp)
 80503d2:	00 
 80503d3:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80503da:	08 
 80503db:	89 04 24             	mov    %eax,(%esp)
 80503de:	e8 ad e1 00 00       	call   805e590 <_test_assert>
 80503e3:	8b 45 cc             	mov    -0x34(%ebp),%eax
 80503e6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
 80503e9:	0f 94 c0             	sete   %al
 80503ec:	0f b6 c0             	movzbl %al,%eax
 80503ef:	8b 55 d0             	mov    -0x30(%ebp),%edx
 80503f2:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 80503f6:	8b 55 cc             	mov    -0x34(%ebp),%edx
 80503f9:	89 54 24 18          	mov    %edx,0x18(%esp)
 80503fd:	8b 55 dc             	mov    -0x24(%ebp),%edx
 8050400:	89 54 24 14          	mov    %edx,0x14(%esp)
 8050404:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 805040b:	08 
 805040c:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8050413:	08 
 8050414:	c7 44 24 08 01 02 00 	movl   $0x201,0x8(%esp)
 805041b:	00 
 805041c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050423:	08 
 8050424:	89 04 24             	mov    %eax,(%esp)
 8050427:	e8 64 e1 00 00       	call   805e590 <_test_assert>
        syscall_success(lseek(fd2, 0, SEEK_SET));
 805042c:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8050432:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050437:	89 04 24             	mov    %eax,(%esp)
 805043a:	e8 ea de 00 00       	call   805e329 <test_errstr>
 805043f:	89 c3                	mov    %eax,%ebx
 8050441:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8050448:	00 
 8050449:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8050450:	00 
 8050451:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8050454:	89 04 24             	mov    %eax,(%esp)
 8050457:	e8 74 95 00 00       	call   80599d0 <lseek>
 805045c:	f7 d0                	not    %eax
 805045e:	c1 e8 1f             	shr    $0x1f,%eax
 8050461:	0f b6 c0             	movzbl %al,%eax
 8050464:	89 74 24 18          	mov    %esi,0x18(%esp)
 8050468:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805046c:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8050473:	08 
 8050474:	c7 44 24 0c 99 02 06 	movl   $0x8060299,0xc(%esp)
 805047b:	08 
 805047c:	c7 44 24 08 02 02 00 	movl   $0x202,0x8(%esp)
 8050483:	00 
 8050484:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805048b:	08 
 805048c:	89 04 24             	mov    %eax,(%esp)
 805048f:	e8 fc e0 00 00       	call   805e590 <_test_assert>
        test_fpos(fd1, 0); test_fpos(fd2, 0);
 8050494:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
 805049b:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80504a1:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80504a6:	89 04 24             	mov    %eax,(%esp)
 80504a9:	e8 7b de 00 00       	call   805e329 <test_errstr>
 80504ae:	89 c3                	mov    %eax,%ebx
 80504b0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 80504b7:	00 
 80504b8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80504bf:	00 
 80504c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
 80504c3:	89 04 24             	mov    %eax,(%esp)
 80504c6:	e8 05 95 00 00       	call   80599d0 <lseek>
 80504cb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 80504ce:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 80504d1:	f7 d0                	not    %eax
 80504d3:	c1 e8 1f             	shr    $0x1f,%eax
 80504d6:	0f b6 c0             	movzbl %al,%eax
 80504d9:	89 74 24 18          	mov    %esi,0x18(%esp)
 80504dd:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80504e1:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80504e8:	08 
 80504e9:	c7 44 24 0c 32 02 06 	movl   $0x8060232,0xc(%esp)
 80504f0:	08 
 80504f1:	c7 44 24 08 03 02 00 	movl   $0x203,0x8(%esp)
 80504f8:	00 
 80504f9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050500:	08 
 8050501:	89 04 24             	mov    %eax,(%esp)
 8050504:	e8 87 e0 00 00       	call   805e590 <_test_assert>
 8050509:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805050c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
 805050f:	0f 94 c0             	sete   %al
 8050512:	0f b6 c0             	movzbl %al,%eax
 8050515:	8b 55 c8             	mov    -0x38(%ebp),%edx
 8050518:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 805051c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
 805051f:	89 54 24 18          	mov    %edx,0x18(%esp)
 8050523:	8b 55 e0             	mov    -0x20(%ebp),%edx
 8050526:	89 54 24 14          	mov    %edx,0x14(%esp)
 805052a:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 8050531:	08 
 8050532:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8050539:	08 
 805053a:	c7 44 24 08 03 02 00 	movl   $0x203,0x8(%esp)
 8050541:	00 
 8050542:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050549:	08 
 805054a:	89 04 24             	mov    %eax,(%esp)
 805054d:	e8 3e e0 00 00       	call   805e590 <_test_assert>
 8050552:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
 8050559:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805055f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050564:	89 04 24             	mov    %eax,(%esp)
 8050567:	e8 bd dd 00 00       	call   805e329 <test_errstr>
 805056c:	89 c3                	mov    %eax,%ebx
 805056e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8050575:	00 
 8050576:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 805057d:	00 
 805057e:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8050581:	89 04 24             	mov    %eax,(%esp)
 8050584:	e8 47 94 00 00       	call   80599d0 <lseek>
 8050589:	89 45 bc             	mov    %eax,-0x44(%ebp)
 805058c:	8b 45 bc             	mov    -0x44(%ebp),%eax
 805058f:	f7 d0                	not    %eax
 8050591:	c1 e8 1f             	shr    $0x1f,%eax
 8050594:	0f b6 c0             	movzbl %al,%eax
 8050597:	89 74 24 18          	mov    %esi,0x18(%esp)
 805059b:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805059f:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80505a6:	08 
 80505a7:	c7 44 24 0c 7b 02 06 	movl   $0x806027b,0xc(%esp)
 80505ae:	08 
 80505af:	c7 44 24 08 03 02 00 	movl   $0x203,0x8(%esp)
 80505b6:	00 
 80505b7:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80505be:	08 
 80505bf:	89 04 24             	mov    %eax,(%esp)
 80505c2:	e8 c9 df 00 00       	call   805e590 <_test_assert>
 80505c7:	8b 45 bc             	mov    -0x44(%ebp),%eax
 80505ca:	3b 45 c0             	cmp    -0x40(%ebp),%eax
 80505cd:	0f 94 c0             	sete   %al
 80505d0:	0f b6 c0             	movzbl %al,%eax
 80505d3:	8b 55 c0             	mov    -0x40(%ebp),%edx
 80505d6:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 80505da:	8b 55 bc             	mov    -0x44(%ebp),%edx
 80505dd:	89 54 24 18          	mov    %edx,0x18(%esp)
 80505e1:	8b 55 dc             	mov    -0x24(%ebp),%edx
 80505e4:	89 54 24 14          	mov    %edx,0x14(%esp)
 80505e8:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 80505ef:	08 
 80505f0:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 80505f7:	08 
 80505f8:	c7 44 24 08 03 02 00 	movl   $0x203,0x8(%esp)
 80505ff:	00 
 8050600:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050607:	08 
 8050608:	89 04 24             	mov    %eax,(%esp)
 805060b:	e8 80 df 00 00       	call   805e590 <_test_assert>
        read_fd(fd1, 5, "hello");
 8050610:	c7 04 24 0e 02 06 08 	movl   $0x806020e,(%esp)
 8050617:	e8 4e 9e 00 00       	call   805a46a <strlen>
 805061c:	89 c3                	mov    %eax,%ebx
 805061e:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 8050625:	00 
 8050626:	8d 85 f4 fe ff ff    	lea    -0x10c(%ebp),%eax
 805062c:	89 44 24 04          	mov    %eax,0x4(%esp)
 8050630:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8050633:	89 04 24             	mov    %eax,(%esp)
 8050636:	e8 e6 93 00 00       	call   8059a21 <read>
 805063b:	39 c3                	cmp    %eax,%ebx
 805063d:	0f 94 c0             	sete   %al
 8050640:	0f b6 c0             	movzbl %al,%eax
 8050643:	c7 44 24 10 b4 02 06 	movl   $0x80602b4,0x10(%esp)
 805064a:	08 
 805064b:	c7 44 24 0c d8 02 06 	movl   $0x80602d8,0xc(%esp)
 8050652:	08 
 8050653:	c7 44 24 08 04 02 00 	movl   $0x204,0x8(%esp)
 805065a:	00 
 805065b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050662:	08 
 8050663:	89 04 24             	mov    %eax,(%esp)
 8050666:	e8 25 df 00 00       	call   805e590 <_test_assert>
 805066b:	c7 04 24 0e 02 06 08 	movl   $0x806020e,(%esp)
 8050672:	e8 f3 9d 00 00       	call   805a46a <strlen>
 8050677:	89 44 24 08          	mov    %eax,0x8(%esp)
 805067b:	c7 44 24 04 0e 02 06 	movl   $0x806020e,0x4(%esp)
 8050682:	08 
 8050683:	8d 85 f4 fe ff ff    	lea    -0x10c(%ebp),%eax
 8050689:	89 04 24             	mov    %eax,(%esp)
 805068c:	e8 6c 9b 00 00       	call   805a1fd <memcmp>
 8050691:	85 c0                	test   %eax,%eax
 8050693:	0f 94 c0             	sete   %al
 8050696:	0f b6 c0             	movzbl %al,%eax
 8050699:	c7 44 24 10 08 03 06 	movl   $0x8060308,0x10(%esp)
 80506a0:	08 
 80506a1:	c7 44 24 0c 20 03 06 	movl   $0x8060320,0xc(%esp)
 80506a8:	08 
 80506a9:	c7 44 24 08 04 02 00 	movl   $0x204,0x8(%esp)
 80506b0:	00 
 80506b1:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80506b8:	08 
 80506b9:	89 04 24             	mov    %eax,(%esp)
 80506bc:	e8 cf de 00 00       	call   805e590 <_test_assert>
        test_fpos(fd1, 5); test_fpos(fd2, 5);
 80506c1:	c7 45 b8 05 00 00 00 	movl   $0x5,-0x48(%ebp)
 80506c8:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80506ce:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80506d3:	89 04 24             	mov    %eax,(%esp)
 80506d6:	e8 4e dc 00 00       	call   805e329 <test_errstr>
 80506db:	89 c3                	mov    %eax,%ebx
 80506dd:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 80506e4:	00 
 80506e5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80506ec:	00 
 80506ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
 80506f0:	89 04 24             	mov    %eax,(%esp)
 80506f3:	e8 d8 92 00 00       	call   80599d0 <lseek>
 80506f8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 80506fb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
 80506fe:	f7 d0                	not    %eax
 8050700:	c1 e8 1f             	shr    $0x1f,%eax
 8050703:	0f b6 c0             	movzbl %al,%eax
 8050706:	89 74 24 18          	mov    %esi,0x18(%esp)
 805070a:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805070e:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8050715:	08 
 8050716:	c7 44 24 0c 32 02 06 	movl   $0x8060232,0xc(%esp)
 805071d:	08 
 805071e:	c7 44 24 08 05 02 00 	movl   $0x205,0x8(%esp)
 8050725:	00 
 8050726:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805072d:	08 
 805072e:	89 04 24             	mov    %eax,(%esp)
 8050731:	e8 5a de 00 00       	call   805e590 <_test_assert>
 8050736:	8b 45 b4             	mov    -0x4c(%ebp),%eax
 8050739:	3b 45 b8             	cmp    -0x48(%ebp),%eax
 805073c:	0f 94 c0             	sete   %al
 805073f:	0f b6 c0             	movzbl %al,%eax
 8050742:	8b 55 b8             	mov    -0x48(%ebp),%edx
 8050745:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8050749:	8b 55 b4             	mov    -0x4c(%ebp),%edx
 805074c:	89 54 24 18          	mov    %edx,0x18(%esp)
 8050750:	8b 55 e0             	mov    -0x20(%ebp),%edx
 8050753:	89 54 24 14          	mov    %edx,0x14(%esp)
 8050757:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 805075e:	08 
 805075f:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8050766:	08 
 8050767:	c7 44 24 08 05 02 00 	movl   $0x205,0x8(%esp)
 805076e:	00 
 805076f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050776:	08 
 8050777:	89 04 24             	mov    %eax,(%esp)
 805077a:	e8 11 de 00 00       	call   805e590 <_test_assert>
 805077f:	c7 45 b0 05 00 00 00 	movl   $0x5,-0x50(%ebp)
 8050786:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805078c:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050791:	89 04 24             	mov    %eax,(%esp)
 8050794:	e8 90 db 00 00       	call   805e329 <test_errstr>
 8050799:	89 c3                	mov    %eax,%ebx
 805079b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 80507a2:	00 
 80507a3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80507aa:	00 
 80507ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
 80507ae:	89 04 24             	mov    %eax,(%esp)
 80507b1:	e8 1a 92 00 00       	call   80599d0 <lseek>
 80507b6:	89 45 ac             	mov    %eax,-0x54(%ebp)
 80507b9:	8b 45 ac             	mov    -0x54(%ebp),%eax
 80507bc:	f7 d0                	not    %eax
 80507be:	c1 e8 1f             	shr    $0x1f,%eax
 80507c1:	0f b6 c0             	movzbl %al,%eax
 80507c4:	89 74 24 18          	mov    %esi,0x18(%esp)
 80507c8:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80507cc:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80507d3:	08 
 80507d4:	c7 44 24 0c 7b 02 06 	movl   $0x806027b,0xc(%esp)
 80507db:	08 
 80507dc:	c7 44 24 08 05 02 00 	movl   $0x205,0x8(%esp)
 80507e3:	00 
 80507e4:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80507eb:	08 
 80507ec:	89 04 24             	mov    %eax,(%esp)
 80507ef:	e8 9c dd 00 00       	call   805e590 <_test_assert>
 80507f4:	8b 45 ac             	mov    -0x54(%ebp),%eax
 80507f7:	3b 45 b0             	cmp    -0x50(%ebp),%eax
 80507fa:	0f 94 c0             	sete   %al
 80507fd:	0f b6 c0             	movzbl %al,%eax
 8050800:	8b 55 b0             	mov    -0x50(%ebp),%edx
 8050803:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8050807:	8b 55 ac             	mov    -0x54(%ebp),%edx
 805080a:	89 54 24 18          	mov    %edx,0x18(%esp)
 805080e:	8b 55 dc             	mov    -0x24(%ebp),%edx
 8050811:	89 54 24 14          	mov    %edx,0x14(%esp)
 8050815:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 805081c:	08 
 805081d:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8050824:	08 
 8050825:	c7 44 24 08 05 02 00 	movl   $0x205,0x8(%esp)
 805082c:	00 
 805082d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050834:	08 
 8050835:	89 04 24             	mov    %eax,(%esp)
 8050838:	e8 53 dd 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd2));
 805083d:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8050843:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050848:	89 04 24             	mov    %eax,(%esp)
 805084b:	e8 d9 da 00 00       	call   805e329 <test_errstr>
 8050850:	89 c3                	mov    %eax,%ebx
 8050852:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8050855:	89 04 24             	mov    %eax,(%esp)
 8050858:	e8 66 92 00 00       	call   8059ac3 <close>
 805085d:	f7 d0                	not    %eax
 805085f:	c1 e8 1f             	shr    $0x1f,%eax
 8050862:	0f b6 c0             	movzbl %al,%eax
 8050865:	89 74 24 18          	mov    %esi,0x18(%esp)
 8050869:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805086d:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8050874:	08 
 8050875:	c7 44 24 0c 4d 03 06 	movl   $0x806034d,0xc(%esp)
 805087c:	08 
 805087d:	c7 44 24 08 06 02 00 	movl   $0x206,0x8(%esp)
 8050884:	00 
 8050885:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805088c:	08 
 805088d:	89 04 24             	mov    %eax,(%esp)
 8050890:	e8 fb dc 00 00       	call   805e590 <_test_assert>

        /* dup2 works properly in normal usage */
        syscall_success(fd2 = dup2(fd1, 25));
 8050895:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805089b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80508a0:	89 04 24             	mov    %eax,(%esp)
 80508a3:	e8 81 da 00 00       	call   805e329 <test_errstr>
 80508a8:	89 c3                	mov    %eax,%ebx
 80508aa:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
 80508b1:	00 
 80508b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
 80508b5:	89 04 24             	mov    %eax,(%esp)
 80508b8:	e8 86 92 00 00       	call   8059b43 <dup2>
 80508bd:	89 45 dc             	mov    %eax,-0x24(%ebp)
 80508c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
 80508c3:	f7 d0                	not    %eax
 80508c5:	c1 e8 1f             	shr    $0x1f,%eax
 80508c8:	0f b6 c0             	movzbl %al,%eax
 80508cb:	89 74 24 18          	mov    %esi,0x18(%esp)
 80508cf:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80508d3:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80508da:	08 
 80508db:	c7 44 24 0c 5f 03 06 	movl   $0x806035f,0xc(%esp)
 80508e2:	08 
 80508e3:	c7 44 24 08 09 02 00 	movl   $0x209,0x8(%esp)
 80508ea:	00 
 80508eb:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80508f2:	08 
 80508f3:	89 04 24             	mov    %eax,(%esp)
 80508f6:	e8 95 dc 00 00       	call   805e590 <_test_assert>
        test_assert(25 == fd2, "dup2(%d, 25) returned %d", fd1, fd2);
 80508fb:	83 7d dc 19          	cmpl   $0x19,-0x24(%ebp)
 80508ff:	0f 94 c0             	sete   %al
 8050902:	0f b6 c0             	movzbl %al,%eax
 8050905:	8b 55 dc             	mov    -0x24(%ebp),%edx
 8050908:	89 54 24 18          	mov    %edx,0x18(%esp)
 805090c:	8b 55 e0             	mov    -0x20(%ebp),%edx
 805090f:	89 54 24 14          	mov    %edx,0x14(%esp)
 8050913:	c7 44 24 10 7a 03 06 	movl   $0x806037a,0x10(%esp)
 805091a:	08 
 805091b:	c7 44 24 0c 93 03 06 	movl   $0x8060393,0xc(%esp)
 8050922:	08 
 8050923:	c7 44 24 08 0a 02 00 	movl   $0x20a,0x8(%esp)
 805092a:	00 
 805092b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050932:	08 
 8050933:	89 04 24             	mov    %eax,(%esp)
 8050936:	e8 55 dc 00 00       	call   805e590 <_test_assert>
        test_fpos(fd1, 5); test_fpos(fd2, 5);
 805093b:	c7 45 a8 05 00 00 00 	movl   $0x5,-0x58(%ebp)
 8050942:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8050948:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805094d:	89 04 24             	mov    %eax,(%esp)
 8050950:	e8 d4 d9 00 00       	call   805e329 <test_errstr>
 8050955:	89 c3                	mov    %eax,%ebx
 8050957:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 805095e:	00 
 805095f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8050966:	00 
 8050967:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805096a:	89 04 24             	mov    %eax,(%esp)
 805096d:	e8 5e 90 00 00       	call   80599d0 <lseek>
 8050972:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 8050975:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 8050978:	f7 d0                	not    %eax
 805097a:	c1 e8 1f             	shr    $0x1f,%eax
 805097d:	0f b6 c0             	movzbl %al,%eax
 8050980:	89 74 24 18          	mov    %esi,0x18(%esp)
 8050984:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8050988:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805098f:	08 
 8050990:	c7 44 24 0c 32 02 06 	movl   $0x8060232,0xc(%esp)
 8050997:	08 
 8050998:	c7 44 24 08 0b 02 00 	movl   $0x20b,0x8(%esp)
 805099f:	00 
 80509a0:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80509a7:	08 
 80509a8:	89 04 24             	mov    %eax,(%esp)
 80509ab:	e8 e0 db 00 00       	call   805e590 <_test_assert>
 80509b0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 80509b3:	3b 45 a8             	cmp    -0x58(%ebp),%eax
 80509b6:	0f 94 c0             	sete   %al
 80509b9:	0f b6 c0             	movzbl %al,%eax
 80509bc:	8b 55 a8             	mov    -0x58(%ebp),%edx
 80509bf:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 80509c3:	8b 55 a4             	mov    -0x5c(%ebp),%edx
 80509c6:	89 54 24 18          	mov    %edx,0x18(%esp)
 80509ca:	8b 55 e0             	mov    -0x20(%ebp),%edx
 80509cd:	89 54 24 14          	mov    %edx,0x14(%esp)
 80509d1:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 80509d8:	08 
 80509d9:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 80509e0:	08 
 80509e1:	c7 44 24 08 0b 02 00 	movl   $0x20b,0x8(%esp)
 80509e8:	00 
 80509e9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80509f0:	08 
 80509f1:	89 04 24             	mov    %eax,(%esp)
 80509f4:	e8 97 db 00 00       	call   805e590 <_test_assert>
 80509f9:	c7 45 a0 05 00 00 00 	movl   $0x5,-0x60(%ebp)
 8050a00:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8050a06:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050a0b:	89 04 24             	mov    %eax,(%esp)
 8050a0e:	e8 16 d9 00 00       	call   805e329 <test_errstr>
 8050a13:	89 c3                	mov    %eax,%ebx
 8050a15:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8050a1c:	00 
 8050a1d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8050a24:	00 
 8050a25:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8050a28:	89 04 24             	mov    %eax,(%esp)
 8050a2b:	e8 a0 8f 00 00       	call   80599d0 <lseek>
 8050a30:	89 45 9c             	mov    %eax,-0x64(%ebp)
 8050a33:	8b 45 9c             	mov    -0x64(%ebp),%eax
 8050a36:	f7 d0                	not    %eax
 8050a38:	c1 e8 1f             	shr    $0x1f,%eax
 8050a3b:	0f b6 c0             	movzbl %al,%eax
 8050a3e:	89 74 24 18          	mov    %esi,0x18(%esp)
 8050a42:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8050a46:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8050a4d:	08 
 8050a4e:	c7 44 24 0c 7b 02 06 	movl   $0x806027b,0xc(%esp)
 8050a55:	08 
 8050a56:	c7 44 24 08 0b 02 00 	movl   $0x20b,0x8(%esp)
 8050a5d:	00 
 8050a5e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050a65:	08 
 8050a66:	89 04 24             	mov    %eax,(%esp)
 8050a69:	e8 22 db 00 00       	call   805e590 <_test_assert>
 8050a6e:	8b 45 9c             	mov    -0x64(%ebp),%eax
 8050a71:	3b 45 a0             	cmp    -0x60(%ebp),%eax
 8050a74:	0f 94 c0             	sete   %al
 8050a77:	0f b6 c0             	movzbl %al,%eax
 8050a7a:	8b 55 a0             	mov    -0x60(%ebp),%edx
 8050a7d:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8050a81:	8b 55 9c             	mov    -0x64(%ebp),%edx
 8050a84:	89 54 24 18          	mov    %edx,0x18(%esp)
 8050a88:	8b 55 dc             	mov    -0x24(%ebp),%edx
 8050a8b:	89 54 24 14          	mov    %edx,0x14(%esp)
 8050a8f:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 8050a96:	08 
 8050a97:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8050a9e:	08 
 8050a9f:	c7 44 24 08 0b 02 00 	movl   $0x20b,0x8(%esp)
 8050aa6:	00 
 8050aa7:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050aae:	08 
 8050aaf:	89 04 24             	mov    %eax,(%esp)
 8050ab2:	e8 d9 da 00 00       	call   805e590 <_test_assert>
        syscall_success(lseek(fd2, 0, SEEK_SET));
 8050ab7:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8050abd:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050ac2:	89 04 24             	mov    %eax,(%esp)
 8050ac5:	e8 5f d8 00 00       	call   805e329 <test_errstr>
 8050aca:	89 c3                	mov    %eax,%ebx
 8050acc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8050ad3:	00 
 8050ad4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8050adb:	00 
 8050adc:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8050adf:	89 04 24             	mov    %eax,(%esp)
 8050ae2:	e8 e9 8e 00 00       	call   80599d0 <lseek>
 8050ae7:	f7 d0                	not    %eax
 8050ae9:	c1 e8 1f             	shr    $0x1f,%eax
 8050aec:	0f b6 c0             	movzbl %al,%eax
 8050aef:	89 74 24 18          	mov    %esi,0x18(%esp)
 8050af3:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8050af7:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8050afe:	08 
 8050aff:	c7 44 24 0c 99 02 06 	movl   $0x8060299,0xc(%esp)
 8050b06:	08 
 8050b07:	c7 44 24 08 0c 02 00 	movl   $0x20c,0x8(%esp)
 8050b0e:	00 
 8050b0f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050b16:	08 
 8050b17:	89 04 24             	mov    %eax,(%esp)
 8050b1a:	e8 71 da 00 00       	call   805e590 <_test_assert>
        test_fpos(fd1, 0); test_fpos(fd2, 0);
 8050b1f:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
 8050b26:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8050b2c:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050b31:	89 04 24             	mov    %eax,(%esp)
 8050b34:	e8 f0 d7 00 00       	call   805e329 <test_errstr>
 8050b39:	89 c3                	mov    %eax,%ebx
 8050b3b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8050b42:	00 
 8050b43:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8050b4a:	00 
 8050b4b:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8050b4e:	89 04 24             	mov    %eax,(%esp)
 8050b51:	e8 7a 8e 00 00       	call   80599d0 <lseek>
 8050b56:	89 45 94             	mov    %eax,-0x6c(%ebp)
 8050b59:	8b 45 94             	mov    -0x6c(%ebp),%eax
 8050b5c:	f7 d0                	not    %eax
 8050b5e:	c1 e8 1f             	shr    $0x1f,%eax
 8050b61:	0f b6 c0             	movzbl %al,%eax
 8050b64:	89 74 24 18          	mov    %esi,0x18(%esp)
 8050b68:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8050b6c:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8050b73:	08 
 8050b74:	c7 44 24 0c 32 02 06 	movl   $0x8060232,0xc(%esp)
 8050b7b:	08 
 8050b7c:	c7 44 24 08 0d 02 00 	movl   $0x20d,0x8(%esp)
 8050b83:	00 
 8050b84:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050b8b:	08 
 8050b8c:	89 04 24             	mov    %eax,(%esp)
 8050b8f:	e8 fc d9 00 00       	call   805e590 <_test_assert>
 8050b94:	8b 45 94             	mov    -0x6c(%ebp),%eax
 8050b97:	3b 45 98             	cmp    -0x68(%ebp),%eax
 8050b9a:	0f 94 c0             	sete   %al
 8050b9d:	0f b6 c0             	movzbl %al,%eax
 8050ba0:	8b 55 98             	mov    -0x68(%ebp),%edx
 8050ba3:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8050ba7:	8b 55 94             	mov    -0x6c(%ebp),%edx
 8050baa:	89 54 24 18          	mov    %edx,0x18(%esp)
 8050bae:	8b 55 e0             	mov    -0x20(%ebp),%edx
 8050bb1:	89 54 24 14          	mov    %edx,0x14(%esp)
 8050bb5:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 8050bbc:	08 
 8050bbd:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8050bc4:	08 
 8050bc5:	c7 44 24 08 0d 02 00 	movl   $0x20d,0x8(%esp)
 8050bcc:	00 
 8050bcd:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050bd4:	08 
 8050bd5:	89 04 24             	mov    %eax,(%esp)
 8050bd8:	e8 b3 d9 00 00       	call   805e590 <_test_assert>
 8050bdd:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
 8050be4:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8050bea:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050bef:	89 04 24             	mov    %eax,(%esp)
 8050bf2:	e8 32 d7 00 00       	call   805e329 <test_errstr>
 8050bf7:	89 c3                	mov    %eax,%ebx
 8050bf9:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8050c00:	00 
 8050c01:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8050c08:	00 
 8050c09:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8050c0c:	89 04 24             	mov    %eax,(%esp)
 8050c0f:	e8 bc 8d 00 00       	call   80599d0 <lseek>
 8050c14:	89 45 8c             	mov    %eax,-0x74(%ebp)
 8050c17:	8b 45 8c             	mov    -0x74(%ebp),%eax
 8050c1a:	f7 d0                	not    %eax
 8050c1c:	c1 e8 1f             	shr    $0x1f,%eax
 8050c1f:	0f b6 c0             	movzbl %al,%eax
 8050c22:	89 74 24 18          	mov    %esi,0x18(%esp)
 8050c26:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8050c2a:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8050c31:	08 
 8050c32:	c7 44 24 0c 7b 02 06 	movl   $0x806027b,0xc(%esp)
 8050c39:	08 
 8050c3a:	c7 44 24 08 0d 02 00 	movl   $0x20d,0x8(%esp)
 8050c41:	00 
 8050c42:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050c49:	08 
 8050c4a:	89 04 24             	mov    %eax,(%esp)
 8050c4d:	e8 3e d9 00 00       	call   805e590 <_test_assert>
 8050c52:	8b 45 8c             	mov    -0x74(%ebp),%eax
 8050c55:	3b 45 90             	cmp    -0x70(%ebp),%eax
 8050c58:	0f 94 c0             	sete   %al
 8050c5b:	0f b6 c0             	movzbl %al,%eax
 8050c5e:	8b 55 90             	mov    -0x70(%ebp),%edx
 8050c61:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8050c65:	8b 55 8c             	mov    -0x74(%ebp),%edx
 8050c68:	89 54 24 18          	mov    %edx,0x18(%esp)
 8050c6c:	8b 55 dc             	mov    -0x24(%ebp),%edx
 8050c6f:	89 54 24 14          	mov    %edx,0x14(%esp)
 8050c73:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 8050c7a:	08 
 8050c7b:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8050c82:	08 
 8050c83:	c7 44 24 08 0d 02 00 	movl   $0x20d,0x8(%esp)
 8050c8a:	00 
 8050c8b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050c92:	08 
 8050c93:	89 04 24             	mov    %eax,(%esp)
 8050c96:	e8 f5 d8 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd2));
 8050c9b:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8050ca1:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050ca6:	89 04 24             	mov    %eax,(%esp)
 8050ca9:	e8 7b d6 00 00       	call   805e329 <test_errstr>
 8050cae:	89 c3                	mov    %eax,%ebx
 8050cb0:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8050cb3:	89 04 24             	mov    %eax,(%esp)
 8050cb6:	e8 08 8e 00 00       	call   8059ac3 <close>
 8050cbb:	f7 d0                	not    %eax
 8050cbd:	c1 e8 1f             	shr    $0x1f,%eax
 8050cc0:	0f b6 c0             	movzbl %al,%eax
 8050cc3:	89 74 24 18          	mov    %esi,0x18(%esp)
 8050cc7:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8050ccb:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8050cd2:	08 
 8050cd3:	c7 44 24 0c 4d 03 06 	movl   $0x806034d,0xc(%esp)
 8050cda:	08 
 8050cdb:	c7 44 24 08 0e 02 00 	movl   $0x20e,0x8(%esp)
 8050ce2:	00 
 8050ce3:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050cea:	08 
 8050ceb:	89 04 24             	mov    %eax,(%esp)
 8050cee:	e8 9d d8 00 00       	call   805e590 <_test_assert>

        /* dup2-ing a file to itself works */
        syscall_success(fd2 = dup2(fd1, fd1));
 8050cf3:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8050cf9:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050cfe:	89 04 24             	mov    %eax,(%esp)
 8050d01:	e8 23 d6 00 00       	call   805e329 <test_errstr>
 8050d06:	89 c3                	mov    %eax,%ebx
 8050d08:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8050d0b:	89 44 24 04          	mov    %eax,0x4(%esp)
 8050d0f:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8050d12:	89 04 24             	mov    %eax,(%esp)
 8050d15:	e8 29 8e 00 00       	call   8059b43 <dup2>
 8050d1a:	89 45 dc             	mov    %eax,-0x24(%ebp)
 8050d1d:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8050d20:	f7 d0                	not    %eax
 8050d22:	c1 e8 1f             	shr    $0x1f,%eax
 8050d25:	0f b6 c0             	movzbl %al,%eax
 8050d28:	89 74 24 18          	mov    %esi,0x18(%esp)
 8050d2c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8050d30:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8050d37:	08 
 8050d38:	c7 44 24 0c 9d 03 06 	movl   $0x806039d,0xc(%esp)
 8050d3f:	08 
 8050d40:	c7 44 24 08 11 02 00 	movl   $0x211,0x8(%esp)
 8050d47:	00 
 8050d48:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050d4f:	08 
 8050d50:	89 04 24             	mov    %eax,(%esp)
 8050d53:	e8 38 d8 00 00       	call   805e590 <_test_assert>
        test_assert(fd1 == fd2, "dup2(%d, %d) returned %d", fd1, fd1, fd2);
 8050d58:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8050d5b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
 8050d5e:	0f 94 c0             	sete   %al
 8050d61:	0f b6 c0             	movzbl %al,%eax
 8050d64:	8b 55 dc             	mov    -0x24(%ebp),%edx
 8050d67:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8050d6b:	8b 55 e0             	mov    -0x20(%ebp),%edx
 8050d6e:	89 54 24 18          	mov    %edx,0x18(%esp)
 8050d72:	8b 55 e0             	mov    -0x20(%ebp),%edx
 8050d75:	89 54 24 14          	mov    %edx,0x14(%esp)
 8050d79:	c7 44 24 10 b9 03 06 	movl   $0x80603b9,0x10(%esp)
 8050d80:	08 
 8050d81:	c7 44 24 0c d2 03 06 	movl   $0x80603d2,0xc(%esp)
 8050d88:	08 
 8050d89:	c7 44 24 08 12 02 00 	movl   $0x212,0x8(%esp)
 8050d90:	00 
 8050d91:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050d98:	08 
 8050d99:	89 04 24             	mov    %eax,(%esp)
 8050d9c:	e8 ef d7 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd2));
 8050da1:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8050da7:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050dac:	89 04 24             	mov    %eax,(%esp)
 8050daf:	e8 75 d5 00 00       	call   805e329 <test_errstr>
 8050db4:	89 c3                	mov    %eax,%ebx
 8050db6:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8050db9:	89 04 24             	mov    %eax,(%esp)
 8050dbc:	e8 02 8d 00 00       	call   8059ac3 <close>
 8050dc1:	f7 d0                	not    %eax
 8050dc3:	c1 e8 1f             	shr    $0x1f,%eax
 8050dc6:	0f b6 c0             	movzbl %al,%eax
 8050dc9:	89 74 24 18          	mov    %esi,0x18(%esp)
 8050dcd:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8050dd1:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8050dd8:	08 
 8050dd9:	c7 44 24 0c 4d 03 06 	movl   $0x806034d,0xc(%esp)
 8050de0:	08 
 8050de1:	c7 44 24 08 13 02 00 	movl   $0x213,0x8(%esp)
 8050de8:	00 
 8050de9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050df0:	08 
 8050df1:	89 04 24             	mov    %eax,(%esp)
 8050df4:	e8 97 d7 00 00       	call   805e590 <_test_assert>

        /* dup2 closes previous file */
        int fd3;
        create_file("file02");
 8050df9:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8050dff:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050e04:	89 04 24             	mov    %eax,(%esp)
 8050e07:	e8 1d d5 00 00       	call   805e329 <test_errstr>
 8050e0c:	89 c3                	mov    %eax,%ebx
 8050e0e:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 8050e15:	00 
 8050e16:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 8050e1d:	00 
 8050e1e:	c7 04 24 dd 03 06 08 	movl   $0x80603dd,(%esp)
 8050e25:	e8 42 8b 00 00       	call   805996c <open>
 8050e2a:	89 45 88             	mov    %eax,-0x78(%ebp)
 8050e2d:	8b 45 88             	mov    -0x78(%ebp),%eax
 8050e30:	f7 d0                	not    %eax
 8050e32:	c1 e8 1f             	shr    $0x1f,%eax
 8050e35:	0f b6 c0             	movzbl %al,%eax
 8050e38:	89 74 24 18          	mov    %esi,0x18(%esp)
 8050e3c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8050e40:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8050e47:	08 
 8050e48:	c7 44 24 0c e4 03 06 	movl   $0x80603e4,0xc(%esp)
 8050e4f:	08 
 8050e50:	c7 44 24 08 17 02 00 	movl   $0x217,0x8(%esp)
 8050e57:	00 
 8050e58:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050e5f:	08 
 8050e60:	89 04 24             	mov    %eax,(%esp)
 8050e63:	e8 28 d7 00 00       	call   805e590 <_test_assert>
 8050e68:	85 c0                	test   %eax,%eax
 8050e6a:	74 58                	je     8050ec4 <vfstest_fd+0x281c>
 8050e6c:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8050e72:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050e77:	89 04 24             	mov    %eax,(%esp)
 8050e7a:	e8 aa d4 00 00       	call   805e329 <test_errstr>
 8050e7f:	89 c3                	mov    %eax,%ebx
 8050e81:	8b 45 88             	mov    -0x78(%ebp),%eax
 8050e84:	89 04 24             	mov    %eax,(%esp)
 8050e87:	e8 37 8c 00 00       	call   8059ac3 <close>
 8050e8c:	f7 d0                	not    %eax
 8050e8e:	c1 e8 1f             	shr    $0x1f,%eax
 8050e91:	0f b6 c0             	movzbl %al,%eax
 8050e94:	89 74 24 18          	mov    %esi,0x18(%esp)
 8050e98:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8050e9c:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8050ea3:	08 
 8050ea4:	c7 44 24 0c 78 ec 05 	movl   $0x805ec78,0xc(%esp)
 8050eab:	08 
 8050eac:	c7 44 24 08 17 02 00 	movl   $0x217,0x8(%esp)
 8050eb3:	00 
 8050eb4:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050ebb:	08 
 8050ebc:	89 04 24             	mov    %eax,(%esp)
 8050ebf:	e8 cc d6 00 00       	call   805e590 <_test_assert>
        syscall_success(fd3 = open("file02", O_RDWR, 0));
 8050ec4:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8050eca:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050ecf:	89 04 24             	mov    %eax,(%esp)
 8050ed2:	e8 52 d4 00 00       	call   805e329 <test_errstr>
 8050ed7:	89 c3                	mov    %eax,%ebx
 8050ed9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8050ee0:	00 
 8050ee1:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 8050ee8:	00 
 8050ee9:	c7 04 24 dd 03 06 08 	movl   $0x80603dd,(%esp)
 8050ef0:	e8 77 8a 00 00       	call   805996c <open>
 8050ef5:	89 45 84             	mov    %eax,-0x7c(%ebp)
 8050ef8:	8b 45 84             	mov    -0x7c(%ebp),%eax
 8050efb:	f7 d0                	not    %eax
 8050efd:	c1 e8 1f             	shr    $0x1f,%eax
 8050f00:	0f b6 c0             	movzbl %al,%eax
 8050f03:	89 74 24 18          	mov    %esi,0x18(%esp)
 8050f07:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8050f0b:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8050f12:	08 
 8050f13:	c7 44 24 0c 14 04 06 	movl   $0x8060414,0xc(%esp)
 8050f1a:	08 
 8050f1b:	c7 44 24 08 18 02 00 	movl   $0x218,0x8(%esp)
 8050f22:	00 
 8050f23:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050f2a:	08 
 8050f2b:	89 04 24             	mov    %eax,(%esp)
 8050f2e:	e8 5d d6 00 00       	call   805e590 <_test_assert>
        syscall_success(fd2 = dup2(fd1, fd3));
 8050f33:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8050f39:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050f3e:	89 04 24             	mov    %eax,(%esp)
 8050f41:	e8 e3 d3 00 00       	call   805e329 <test_errstr>
 8050f46:	89 c3                	mov    %eax,%ebx
 8050f48:	8b 45 84             	mov    -0x7c(%ebp),%eax
 8050f4b:	89 44 24 04          	mov    %eax,0x4(%esp)
 8050f4f:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8050f52:	89 04 24             	mov    %eax,(%esp)
 8050f55:	e8 e9 8b 00 00       	call   8059b43 <dup2>
 8050f5a:	89 45 dc             	mov    %eax,-0x24(%ebp)
 8050f5d:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8050f60:	f7 d0                	not    %eax
 8050f62:	c1 e8 1f             	shr    $0x1f,%eax
 8050f65:	0f b6 c0             	movzbl %al,%eax
 8050f68:	89 74 24 18          	mov    %esi,0x18(%esp)
 8050f6c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8050f70:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8050f77:	08 
 8050f78:	c7 44 24 0c 36 04 06 	movl   $0x8060436,0xc(%esp)
 8050f7f:	08 
 8050f80:	c7 44 24 08 19 02 00 	movl   $0x219,0x8(%esp)
 8050f87:	00 
 8050f88:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050f8f:	08 
 8050f90:	89 04 24             	mov    %eax,(%esp)
 8050f93:	e8 f8 d5 00 00       	call   805e590 <_test_assert>
        test_assert(fd2 == fd3, "dup2(%d, %d) returned %d", fd1, fd3, fd2);
 8050f98:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8050f9b:	3b 45 84             	cmp    -0x7c(%ebp),%eax
 8050f9e:	0f 94 c0             	sete   %al
 8050fa1:	0f b6 c0             	movzbl %al,%eax
 8050fa4:	8b 55 dc             	mov    -0x24(%ebp),%edx
 8050fa7:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8050fab:	8b 55 84             	mov    -0x7c(%ebp),%edx
 8050fae:	89 54 24 18          	mov    %edx,0x18(%esp)
 8050fb2:	8b 55 e0             	mov    -0x20(%ebp),%edx
 8050fb5:	89 54 24 14          	mov    %edx,0x14(%esp)
 8050fb9:	c7 44 24 10 b9 03 06 	movl   $0x80603b9,0x10(%esp)
 8050fc0:	08 
 8050fc1:	c7 44 24 0c 52 04 06 	movl   $0x8060452,0xc(%esp)
 8050fc8:	08 
 8050fc9:	c7 44 24 08 1a 02 00 	movl   $0x21a,0x8(%esp)
 8050fd0:	00 
 8050fd1:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8050fd8:	08 
 8050fd9:	89 04 24             	mov    %eax,(%esp)
 8050fdc:	e8 af d5 00 00       	call   805e590 <_test_assert>
        test_fpos(fd1, 0); test_fpos(fd2, 0);
 8050fe1:	c7 45 80 00 00 00 00 	movl   $0x0,-0x80(%ebp)
 8050fe8:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8050fee:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8050ff3:	89 04 24             	mov    %eax,(%esp)
 8050ff6:	e8 2e d3 00 00       	call   805e329 <test_errstr>
 8050ffb:	89 c3                	mov    %eax,%ebx
 8050ffd:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8051004:	00 
 8051005:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 805100c:	00 
 805100d:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8051010:	89 04 24             	mov    %eax,(%esp)
 8051013:	e8 b8 89 00 00       	call   80599d0 <lseek>
 8051018:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
 805101e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
 8051024:	f7 d0                	not    %eax
 8051026:	c1 e8 1f             	shr    $0x1f,%eax
 8051029:	0f b6 c0             	movzbl %al,%eax
 805102c:	89 74 24 18          	mov    %esi,0x18(%esp)
 8051030:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8051034:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805103b:	08 
 805103c:	c7 44 24 0c 32 02 06 	movl   $0x8060232,0xc(%esp)
 8051043:	08 
 8051044:	c7 44 24 08 1b 02 00 	movl   $0x21b,0x8(%esp)
 805104b:	00 
 805104c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051053:	08 
 8051054:	89 04 24             	mov    %eax,(%esp)
 8051057:	e8 34 d5 00 00       	call   805e590 <_test_assert>
 805105c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
 8051062:	3b 45 80             	cmp    -0x80(%ebp),%eax
 8051065:	0f 94 c0             	sete   %al
 8051068:	0f b6 c0             	movzbl %al,%eax
 805106b:	8b 55 80             	mov    -0x80(%ebp),%edx
 805106e:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8051072:	8b 95 7c ff ff ff    	mov    -0x84(%ebp),%edx
 8051078:	89 54 24 18          	mov    %edx,0x18(%esp)
 805107c:	8b 55 e0             	mov    -0x20(%ebp),%edx
 805107f:	89 54 24 14          	mov    %edx,0x14(%esp)
 8051083:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 805108a:	08 
 805108b:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8051092:	08 
 8051093:	c7 44 24 08 1b 02 00 	movl   $0x21b,0x8(%esp)
 805109a:	00 
 805109b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80510a2:	08 
 80510a3:	89 04 24             	mov    %eax,(%esp)
 80510a6:	e8 e5 d4 00 00       	call   805e590 <_test_assert>
 80510ab:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
 80510b2:	00 00 00 
 80510b5:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80510bb:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80510c0:	89 04 24             	mov    %eax,(%esp)
 80510c3:	e8 61 d2 00 00       	call   805e329 <test_errstr>
 80510c8:	89 c3                	mov    %eax,%ebx
 80510ca:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 80510d1:	00 
 80510d2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80510d9:	00 
 80510da:	8b 45 dc             	mov    -0x24(%ebp),%eax
 80510dd:	89 04 24             	mov    %eax,(%esp)
 80510e0:	e8 eb 88 00 00       	call   80599d0 <lseek>
 80510e5:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
 80510eb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
 80510f1:	f7 d0                	not    %eax
 80510f3:	c1 e8 1f             	shr    $0x1f,%eax
 80510f6:	0f b6 c0             	movzbl %al,%eax
 80510f9:	89 74 24 18          	mov    %esi,0x18(%esp)
 80510fd:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8051101:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8051108:	08 
 8051109:	c7 44 24 0c 7b 02 06 	movl   $0x806027b,0xc(%esp)
 8051110:	08 
 8051111:	c7 44 24 08 1b 02 00 	movl   $0x21b,0x8(%esp)
 8051118:	00 
 8051119:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051120:	08 
 8051121:	89 04 24             	mov    %eax,(%esp)
 8051124:	e8 67 d4 00 00       	call   805e590 <_test_assert>
 8051129:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
 805112f:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
 8051135:	0f 94 c0             	sete   %al
 8051138:	0f b6 c0             	movzbl %al,%eax
 805113b:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
 8051141:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8051145:	8b 95 74 ff ff ff    	mov    -0x8c(%ebp),%edx
 805114b:	89 54 24 18          	mov    %edx,0x18(%esp)
 805114f:	8b 55 dc             	mov    -0x24(%ebp),%edx
 8051152:	89 54 24 14          	mov    %edx,0x14(%esp)
 8051156:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 805115d:	08 
 805115e:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8051165:	08 
 8051166:	c7 44 24 08 1b 02 00 	movl   $0x21b,0x8(%esp)
 805116d:	00 
 805116e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051175:	08 
 8051176:	89 04 24             	mov    %eax,(%esp)
 8051179:	e8 12 d4 00 00       	call   805e590 <_test_assert>
        syscall_success(lseek(fd2, 5, SEEK_SET));
 805117e:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8051184:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8051189:	89 04 24             	mov    %eax,(%esp)
 805118c:	e8 98 d1 00 00       	call   805e329 <test_errstr>
 8051191:	89 c3                	mov    %eax,%ebx
 8051193:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 805119a:	00 
 805119b:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
 80511a2:	00 
 80511a3:	8b 45 dc             	mov    -0x24(%ebp),%eax
 80511a6:	89 04 24             	mov    %eax,(%esp)
 80511a9:	e8 22 88 00 00       	call   80599d0 <lseek>
 80511ae:	f7 d0                	not    %eax
 80511b0:	c1 e8 1f             	shr    $0x1f,%eax
 80511b3:	0f b6 c0             	movzbl %al,%eax
 80511b6:	89 74 24 18          	mov    %esi,0x18(%esp)
 80511ba:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80511be:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80511c5:	08 
 80511c6:	c7 44 24 0c 5d 04 06 	movl   $0x806045d,0xc(%esp)
 80511cd:	08 
 80511ce:	c7 44 24 08 1c 02 00 	movl   $0x21c,0x8(%esp)
 80511d5:	00 
 80511d6:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80511dd:	08 
 80511de:	89 04 24             	mov    %eax,(%esp)
 80511e1:	e8 aa d3 00 00       	call   805e590 <_test_assert>
        test_fpos(fd1, 5); test_fpos(fd2, 5);
 80511e6:	c7 85 70 ff ff ff 05 	movl   $0x5,-0x90(%ebp)
 80511ed:	00 00 00 
 80511f0:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80511f6:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80511fb:	89 04 24             	mov    %eax,(%esp)
 80511fe:	e8 26 d1 00 00       	call   805e329 <test_errstr>
 8051203:	89 c3                	mov    %eax,%ebx
 8051205:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 805120c:	00 
 805120d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8051214:	00 
 8051215:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8051218:	89 04 24             	mov    %eax,(%esp)
 805121b:	e8 b0 87 00 00       	call   80599d0 <lseek>
 8051220:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
 8051226:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
 805122c:	f7 d0                	not    %eax
 805122e:	c1 e8 1f             	shr    $0x1f,%eax
 8051231:	0f b6 c0             	movzbl %al,%eax
 8051234:	89 74 24 18          	mov    %esi,0x18(%esp)
 8051238:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805123c:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8051243:	08 
 8051244:	c7 44 24 0c 32 02 06 	movl   $0x8060232,0xc(%esp)
 805124b:	08 
 805124c:	c7 44 24 08 1d 02 00 	movl   $0x21d,0x8(%esp)
 8051253:	00 
 8051254:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805125b:	08 
 805125c:	89 04 24             	mov    %eax,(%esp)
 805125f:	e8 2c d3 00 00       	call   805e590 <_test_assert>
 8051264:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
 805126a:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
 8051270:	0f 94 c0             	sete   %al
 8051273:	0f b6 c0             	movzbl %al,%eax
 8051276:	8b 95 70 ff ff ff    	mov    -0x90(%ebp),%edx
 805127c:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8051280:	8b 95 6c ff ff ff    	mov    -0x94(%ebp),%edx
 8051286:	89 54 24 18          	mov    %edx,0x18(%esp)
 805128a:	8b 55 e0             	mov    -0x20(%ebp),%edx
 805128d:	89 54 24 14          	mov    %edx,0x14(%esp)
 8051291:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 8051298:	08 
 8051299:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 80512a0:	08 
 80512a1:	c7 44 24 08 1d 02 00 	movl   $0x21d,0x8(%esp)
 80512a8:	00 
 80512a9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80512b0:	08 
 80512b1:	89 04 24             	mov    %eax,(%esp)
 80512b4:	e8 d7 d2 00 00       	call   805e590 <_test_assert>
 80512b9:	c7 85 68 ff ff ff 05 	movl   $0x5,-0x98(%ebp)
 80512c0:	00 00 00 
 80512c3:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80512c9:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80512ce:	89 04 24             	mov    %eax,(%esp)
 80512d1:	e8 53 d0 00 00       	call   805e329 <test_errstr>
 80512d6:	89 c3                	mov    %eax,%ebx
 80512d8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 80512df:	00 
 80512e0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80512e7:	00 
 80512e8:	8b 45 dc             	mov    -0x24(%ebp),%eax
 80512eb:	89 04 24             	mov    %eax,(%esp)
 80512ee:	e8 dd 86 00 00       	call   80599d0 <lseek>
 80512f3:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
 80512f9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
 80512ff:	f7 d0                	not    %eax
 8051301:	c1 e8 1f             	shr    $0x1f,%eax
 8051304:	0f b6 c0             	movzbl %al,%eax
 8051307:	89 74 24 18          	mov    %esi,0x18(%esp)
 805130b:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805130f:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8051316:	08 
 8051317:	c7 44 24 0c 7b 02 06 	movl   $0x806027b,0xc(%esp)
 805131e:	08 
 805131f:	c7 44 24 08 1d 02 00 	movl   $0x21d,0x8(%esp)
 8051326:	00 
 8051327:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805132e:	08 
 805132f:	89 04 24             	mov    %eax,(%esp)
 8051332:	e8 59 d2 00 00       	call   805e590 <_test_assert>
 8051337:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
 805133d:	3b 85 68 ff ff ff    	cmp    -0x98(%ebp),%eax
 8051343:	0f 94 c0             	sete   %al
 8051346:	0f b6 c0             	movzbl %al,%eax
 8051349:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
 805134f:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8051353:	8b 95 64 ff ff ff    	mov    -0x9c(%ebp),%edx
 8051359:	89 54 24 18          	mov    %edx,0x18(%esp)
 805135d:	8b 55 dc             	mov    -0x24(%ebp),%edx
 8051360:	89 54 24 14          	mov    %edx,0x14(%esp)
 8051364:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 805136b:	08 
 805136c:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8051373:	08 
 8051374:	c7 44 24 08 1d 02 00 	movl   $0x21d,0x8(%esp)
 805137b:	00 
 805137c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051383:	08 
 8051384:	89 04 24             	mov    %eax,(%esp)
 8051387:	e8 04 d2 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd2));
 805138c:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8051392:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8051397:	89 04 24             	mov    %eax,(%esp)
 805139a:	e8 8a cf 00 00       	call   805e329 <test_errstr>
 805139f:	89 c3                	mov    %eax,%ebx
 80513a1:	8b 45 dc             	mov    -0x24(%ebp),%eax
 80513a4:	89 04 24             	mov    %eax,(%esp)
 80513a7:	e8 17 87 00 00       	call   8059ac3 <close>
 80513ac:	f7 d0                	not    %eax
 80513ae:	c1 e8 1f             	shr    $0x1f,%eax
 80513b1:	0f b6 c0             	movzbl %al,%eax
 80513b4:	89 74 24 18          	mov    %esi,0x18(%esp)
 80513b8:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80513bc:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80513c3:	08 
 80513c4:	c7 44 24 0c 4d 03 06 	movl   $0x806034d,0xc(%esp)
 80513cb:	08 
 80513cc:	c7 44 24 08 1e 02 00 	movl   $0x21e,0x8(%esp)
 80513d3:	00 
 80513d4:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80513db:	08 
 80513dc:	89 04 24             	mov    %eax,(%esp)
 80513df:	e8 ac d1 00 00       	call   805e590 <_test_assert>

        syscall_success(chdir(".."));
 80513e4:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80513ea:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80513ef:	89 04 24             	mov    %eax,(%esp)
 80513f2:	e8 32 cf 00 00       	call   805e329 <test_errstr>
 80513f7:	89 c3                	mov    %eax,%ebx
 80513f9:	c7 04 24 26 e6 05 08 	movl   $0x805e626,(%esp)
 8051400:	e8 6f 89 00 00       	call   8059d74 <chdir>
 8051405:	f7 d0                	not    %eax
 8051407:	c1 e8 1f             	shr    $0x1f,%eax
 805140a:	0f b6 c0             	movzbl %al,%eax
 805140d:	89 74 24 18          	mov    %esi,0x18(%esp)
 8051411:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8051415:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805141c:	08 
 805141d:	c7 44 24 0c ac ed 05 	movl   $0x805edac,0xc(%esp)
 8051424:	08 
 8051425:	c7 44 24 08 20 02 00 	movl   $0x220,0x8(%esp)
 805142c:	00 
 805142d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051434:	08 
 8051435:	89 04 24             	mov    %eax,(%esp)
 8051438:	e8 53 d1 00 00       	call   805e590 <_test_assert>
        test_fini("vfstest_fd");
 805143d:	c7 04 24 75 04 06 08 	movl   $0x8060475,(%esp)
 8051444:	e8 32 ce 00 00       	call   805e27b <test_fini>
}
 8051449:	90                   	nop
 805144a:	81 c4 3c 01 00 00    	add    $0x13c,%esp
 8051450:	5b                   	pop    %ebx
 8051451:	5e                   	pop    %esi
 8051452:	5f                   	pop    %edi
 8051453:	5d                   	pop    %ebp
 8051454:	c3                   	ret    

08051455 <vfstest_memdev>:

static void 
vfstest_memdev(void)
{
 8051455:	55                   	push   %ebp
 8051456:	89 e5                	mov    %esp,%ebp
 8051458:	56                   	push   %esi
 8051459:	53                   	push   %ebx
 805145a:	81 ec 30 10 00 00    	sub    $0x1030,%esp
        int res, fd;
        char def = 'a';
 8051460:	c6 45 f7 61          	movb   $0x61,-0x9(%ebp)
        char buf[4096];

        res = 1;
 8051464:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

        memset(buf, def, sizeof(buf));
 805146b:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
 805146f:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
 8051476:	00 
 8051477:	89 44 24 04          	mov    %eax,0x4(%esp)
 805147b:	8d 85 ec ef ff ff    	lea    -0x1014(%ebp),%eax
 8051481:	89 04 24             	mov    %eax,(%esp)
 8051484:	e8 22 8f 00 00       	call   805a3ab <memset>

        syscall_success(fd = open("/dev/null", O_RDWR, 0));
 8051489:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805148f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8051494:	89 04 24             	mov    %eax,(%esp)
 8051497:	e8 8d ce 00 00       	call   805e329 <test_errstr>
 805149c:	89 c3                	mov    %eax,%ebx
 805149e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80514a5:	00 
 80514a6:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 80514ad:	00 
 80514ae:	c7 04 24 80 04 06 08 	movl   $0x8060480,(%esp)
 80514b5:	e8 b2 84 00 00       	call   805996c <open>
 80514ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
 80514bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
 80514c0:	f7 d0                	not    %eax
 80514c2:	c1 e8 1f             	shr    $0x1f,%eax
 80514c5:	0f b6 c0             	movzbl %al,%eax
 80514c8:	89 74 24 18          	mov    %esi,0x18(%esp)
 80514cc:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80514d0:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80514d7:	08 
 80514d8:	c7 44 24 0c 8c 04 06 	movl   $0x806048c,0xc(%esp)
 80514df:	08 
 80514e0:	c7 44 24 08 2f 02 00 	movl   $0x22f,0x8(%esp)
 80514e7:	00 
 80514e8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80514ef:	08 
 80514f0:	89 04 24             	mov    %eax,(%esp)
 80514f3:	e8 98 d0 00 00       	call   805e590 <_test_assert>
        syscall_success(res = write(fd, buf, sizeof(buf)));
 80514f8:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80514fe:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8051503:	89 04 24             	mov    %eax,(%esp)
 8051506:	e8 1e ce 00 00       	call   805e329 <test_errstr>
 805150b:	89 c3                	mov    %eax,%ebx
 805150d:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
 8051514:	00 
 8051515:	8d 85 ec ef ff ff    	lea    -0x1014(%ebp),%eax
 805151b:	89 44 24 04          	mov    %eax,0x4(%esp)
 805151f:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8051522:	89 04 24             	mov    %eax,(%esp)
 8051525:	e8 48 85 00 00       	call   8059a72 <write>
 805152a:	89 45 f0             	mov    %eax,-0x10(%ebp)
 805152d:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8051530:	f7 d0                	not    %eax
 8051532:	c1 e8 1f             	shr    $0x1f,%eax
 8051535:	0f b6 c0             	movzbl %al,%eax
 8051538:	89 74 24 18          	mov    %esi,0x18(%esp)
 805153c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8051540:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8051547:	08 
 8051548:	c7 44 24 0c b0 04 06 	movl   $0x80604b0,0xc(%esp)
 805154f:	08 
 8051550:	c7 44 24 08 30 02 00 	movl   $0x230,0x8(%esp)
 8051557:	00 
 8051558:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805155f:	08 
 8051560:	89 04 24             	mov    %eax,(%esp)
 8051563:	e8 28 d0 00 00       	call   805e590 <_test_assert>
        test_assert(sizeof(buf) == res, 
 8051568:	81 7d f0 00 10 00 00 	cmpl   $0x1000,-0x10(%ebp)
 805156f:	0f 94 c0             	sete   %al
 8051572:	0f b6 c0             	movzbl %al,%eax
 8051575:	8b 55 f0             	mov    -0x10(%ebp),%edx
 8051578:	89 54 24 18          	mov    %edx,0x18(%esp)
 805157c:	c7 44 24 14 00 10 00 	movl   $0x1000,0x14(%esp)
 8051583:	00 
 8051584:	c7 44 24 10 dc 04 06 	movl   $0x80604dc,0x10(%esp)
 805158b:	08 
 805158c:	c7 44 24 0c 04 05 06 	movl   $0x8060504,0xc(%esp)
 8051593:	08 
 8051594:	c7 44 24 08 32 02 00 	movl   $0x232,0x8(%esp)
 805159b:	00 
 805159c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80515a3:	08 
 80515a4:	89 04 24             	mov    %eax,(%esp)
 80515a7:	e8 e4 cf 00 00       	call   805e590 <_test_assert>
            "write of %d bytes /dev/null returned %d", sizeof(buf), res);
        syscall_success(res = read(fd, buf, sizeof(buf)));
 80515ac:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80515b2:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80515b7:	89 04 24             	mov    %eax,(%esp)
 80515ba:	e8 6a cd 00 00       	call   805e329 <test_errstr>
 80515bf:	89 c3                	mov    %eax,%ebx
 80515c1:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
 80515c8:	00 
 80515c9:	8d 85 ec ef ff ff    	lea    -0x1014(%ebp),%eax
 80515cf:	89 44 24 04          	mov    %eax,0x4(%esp)
 80515d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
 80515d6:	89 04 24             	mov    %eax,(%esp)
 80515d9:	e8 43 84 00 00       	call   8059a21 <read>
 80515de:	89 45 f0             	mov    %eax,-0x10(%ebp)
 80515e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
 80515e4:	f7 d0                	not    %eax
 80515e6:	c1 e8 1f             	shr    $0x1f,%eax
 80515e9:	0f b6 c0             	movzbl %al,%eax
 80515ec:	89 74 24 18          	mov    %esi,0x18(%esp)
 80515f0:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80515f4:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80515fb:	08 
 80515fc:	c7 44 24 0c 18 05 06 	movl   $0x8060518,0xc(%esp)
 8051603:	08 
 8051604:	c7 44 24 08 33 02 00 	movl   $0x233,0x8(%esp)
 805160b:	00 
 805160c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051613:	08 
 8051614:	89 04 24             	mov    %eax,(%esp)
 8051617:	e8 74 cf 00 00       	call   805e590 <_test_assert>
        test_assert(0 == res, 
 805161c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
 8051620:	0f 94 c0             	sete   %al
 8051623:	0f b6 c0             	movzbl %al,%eax
 8051626:	8b 55 f0             	mov    -0x10(%ebp),%edx
 8051629:	89 54 24 18          	mov    %edx,0x18(%esp)
 805162d:	c7 44 24 14 00 10 00 	movl   $0x1000,0x14(%esp)
 8051634:	00 
 8051635:	c7 44 24 10 40 05 06 	movl   $0x8060540,0x10(%esp)
 805163c:	08 
 805163d:	c7 44 24 0c 67 05 06 	movl   $0x8060567,0xc(%esp)
 8051644:	08 
 8051645:	c7 44 24 08 35 02 00 	movl   $0x235,0x8(%esp)
 805164c:	00 
 805164d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051654:	08 
 8051655:	89 04 24             	mov    %eax,(%esp)
 8051658:	e8 33 cf 00 00       	call   805e590 <_test_assert>
            "read of %d bytes /dev/null returned %d", sizeof(buf), res);
        test_assert(buf[sizeof(buf)/2] == def, 
 805165d:	0f b6 85 ec f7 ff ff 	movzbl -0x814(%ebp),%eax
 8051664:	3a 45 f7             	cmp    -0x9(%ebp),%al
 8051667:	0f 94 c0             	sete   %al
 805166a:	0f b6 c0             	movzbl %al,%eax
 805166d:	c7 44 24 10 70 05 06 	movl   $0x8060570,0x10(%esp)
 8051674:	08 
 8051675:	c7 44 24 0c 93 05 06 	movl   $0x8060593,0xc(%esp)
 805167c:	08 
 805167d:	c7 44 24 08 37 02 00 	movl   $0x237,0x8(%esp)
 8051684:	00 
 8051685:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805168c:	08 
 805168d:	89 04 24             	mov    %eax,(%esp)
 8051690:	e8 fb ce 00 00       	call   805e590 <_test_assert>
            "read from /dev/null changed buffer");
        syscall_success(close(fd));
 8051695:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805169b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80516a0:	89 04 24             	mov    %eax,(%esp)
 80516a3:	e8 81 cc 00 00       	call   805e329 <test_errstr>
 80516a8:	89 c3                	mov    %eax,%ebx
 80516aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
 80516ad:	89 04 24             	mov    %eax,(%esp)
 80516b0:	e8 0e 84 00 00       	call   8059ac3 <close>
 80516b5:	f7 d0                	not    %eax
 80516b7:	c1 e8 1f             	shr    $0x1f,%eax
 80516ba:	0f b6 c0             	movzbl %al,%eax
 80516bd:	89 74 24 18          	mov    %esi,0x18(%esp)
 80516c1:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80516c5:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80516cc:	08 
 80516cd:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 80516d4:	08 
 80516d5:	c7 44 24 08 38 02 00 	movl   $0x238,0x8(%esp)
 80516dc:	00 
 80516dd:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80516e4:	08 
 80516e5:	89 04 24             	mov    %eax,(%esp)
 80516e8:	e8 a3 ce 00 00       	call   805e590 <_test_assert>

        memset(buf, def, sizeof(buf));
 80516ed:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
 80516f1:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
 80516f8:	00 
 80516f9:	89 44 24 04          	mov    %eax,0x4(%esp)
 80516fd:	8d 85 ec ef ff ff    	lea    -0x1014(%ebp),%eax
 8051703:	89 04 24             	mov    %eax,(%esp)
 8051706:	e8 a0 8c 00 00       	call   805a3ab <memset>

        syscall_success(fd = open("/dev/zero", O_RDWR, 0));
 805170b:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8051711:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8051716:	89 04 24             	mov    %eax,(%esp)
 8051719:	e8 0b cc 00 00       	call   805e329 <test_errstr>
 805171e:	89 c3                	mov    %eax,%ebx
 8051720:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8051727:	00 
 8051728:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 805172f:	00 
 8051730:	c7 04 24 ad 05 06 08 	movl   $0x80605ad,(%esp)
 8051737:	e8 30 82 00 00       	call   805996c <open>
 805173c:	89 45 ec             	mov    %eax,-0x14(%ebp)
 805173f:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8051742:	f7 d0                	not    %eax
 8051744:	c1 e8 1f             	shr    $0x1f,%eax
 8051747:	0f b6 c0             	movzbl %al,%eax
 805174a:	89 74 24 18          	mov    %esi,0x18(%esp)
 805174e:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8051752:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8051759:	08 
 805175a:	c7 44 24 0c b8 05 06 	movl   $0x80605b8,0xc(%esp)
 8051761:	08 
 8051762:	c7 44 24 08 3c 02 00 	movl   $0x23c,0x8(%esp)
 8051769:	00 
 805176a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051771:	08 
 8051772:	89 04 24             	mov    %eax,(%esp)
 8051775:	e8 16 ce 00 00       	call   805e590 <_test_assert>
        syscall_success(res = write(fd, buf, sizeof(buf)));
 805177a:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8051780:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8051785:	89 04 24             	mov    %eax,(%esp)
 8051788:	e8 9c cb 00 00       	call   805e329 <test_errstr>
 805178d:	89 c3                	mov    %eax,%ebx
 805178f:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
 8051796:	00 
 8051797:	8d 85 ec ef ff ff    	lea    -0x1014(%ebp),%eax
 805179d:	89 44 24 04          	mov    %eax,0x4(%esp)
 80517a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
 80517a4:	89 04 24             	mov    %eax,(%esp)
 80517a7:	e8 c6 82 00 00       	call   8059a72 <write>
 80517ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
 80517af:	8b 45 f0             	mov    -0x10(%ebp),%eax
 80517b2:	f7 d0                	not    %eax
 80517b4:	c1 e8 1f             	shr    $0x1f,%eax
 80517b7:	0f b6 c0             	movzbl %al,%eax
 80517ba:	89 74 24 18          	mov    %esi,0x18(%esp)
 80517be:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80517c2:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80517c9:	08 
 80517ca:	c7 44 24 0c b0 04 06 	movl   $0x80604b0,0xc(%esp)
 80517d1:	08 
 80517d2:	c7 44 24 08 3d 02 00 	movl   $0x23d,0x8(%esp)
 80517d9:	00 
 80517da:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80517e1:	08 
 80517e2:	89 04 24             	mov    %eax,(%esp)
 80517e5:	e8 a6 cd 00 00       	call   805e590 <_test_assert>
        test_assert(sizeof(buf) == res, 
 80517ea:	81 7d f0 00 10 00 00 	cmpl   $0x1000,-0x10(%ebp)
 80517f1:	0f 94 c0             	sete   %al
 80517f4:	0f b6 c0             	movzbl %al,%eax
 80517f7:	8b 55 f0             	mov    -0x10(%ebp),%edx
 80517fa:	89 54 24 18          	mov    %edx,0x18(%esp)
 80517fe:	c7 44 24 14 00 10 00 	movl   $0x1000,0x14(%esp)
 8051805:	00 
 8051806:	c7 44 24 10 dc 05 06 	movl   $0x80605dc,0x10(%esp)
 805180d:	08 
 805180e:	c7 44 24 0c 04 05 06 	movl   $0x8060504,0xc(%esp)
 8051815:	08 
 8051816:	c7 44 24 08 3f 02 00 	movl   $0x23f,0x8(%esp)
 805181d:	00 
 805181e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051825:	08 
 8051826:	89 04 24             	mov    %eax,(%esp)
 8051829:	e8 62 cd 00 00       	call   805e590 <_test_assert>
            "write of %d bytes /dev/zero returned %d", sizeof(buf), res);
        syscall_success(res = read(fd, buf, sizeof(buf)));
 805182e:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8051834:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8051839:	89 04 24             	mov    %eax,(%esp)
 805183c:	e8 e8 ca 00 00       	call   805e329 <test_errstr>
 8051841:	89 c3                	mov    %eax,%ebx
 8051843:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
 805184a:	00 
 805184b:	8d 85 ec ef ff ff    	lea    -0x1014(%ebp),%eax
 8051851:	89 44 24 04          	mov    %eax,0x4(%esp)
 8051855:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8051858:	89 04 24             	mov    %eax,(%esp)
 805185b:	e8 c1 81 00 00       	call   8059a21 <read>
 8051860:	89 45 f0             	mov    %eax,-0x10(%ebp)
 8051863:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8051866:	f7 d0                	not    %eax
 8051868:	c1 e8 1f             	shr    $0x1f,%eax
 805186b:	0f b6 c0             	movzbl %al,%eax
 805186e:	89 74 24 18          	mov    %esi,0x18(%esp)
 8051872:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8051876:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805187d:	08 
 805187e:	c7 44 24 0c 18 05 06 	movl   $0x8060518,0xc(%esp)
 8051885:	08 
 8051886:	c7 44 24 08 40 02 00 	movl   $0x240,0x8(%esp)
 805188d:	00 
 805188e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051895:	08 
 8051896:	89 04 24             	mov    %eax,(%esp)
 8051899:	e8 f2 cc 00 00       	call   805e590 <_test_assert>
        test_assert(sizeof(buf) == res, 
 805189e:	81 7d f0 00 10 00 00 	cmpl   $0x1000,-0x10(%ebp)
 80518a5:	0f 94 c0             	sete   %al
 80518a8:	0f b6 c0             	movzbl %al,%eax
 80518ab:	8b 55 f0             	mov    -0x10(%ebp),%edx
 80518ae:	89 54 24 18          	mov    %edx,0x18(%esp)
 80518b2:	c7 44 24 14 00 10 00 	movl   $0x1000,0x14(%esp)
 80518b9:	00 
 80518ba:	c7 44 24 10 04 06 06 	movl   $0x8060604,0x10(%esp)
 80518c1:	08 
 80518c2:	c7 44 24 0c 04 05 06 	movl   $0x8060504,0xc(%esp)
 80518c9:	08 
 80518ca:	c7 44 24 08 42 02 00 	movl   $0x242,0x8(%esp)
 80518d1:	00 
 80518d2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80518d9:	08 
 80518da:	89 04 24             	mov    %eax,(%esp)
 80518dd:	e8 ae cc 00 00       	call   805e590 <_test_assert>
            "read of %d bytes /dev/zero returned %d", sizeof(buf), res);
        test_assert(buf[sizeof(buf)/2] == 0, 
 80518e2:	0f b6 85 ec f7 ff ff 	movzbl -0x814(%ebp),%eax
 80518e9:	84 c0                	test   %al,%al
 80518eb:	0f 94 c0             	sete   %al
 80518ee:	0f b6 c0             	movzbl %al,%eax
 80518f1:	c7 44 24 10 2c 06 06 	movl   $0x806062c,0x10(%esp)
 80518f8:	08 
 80518f9:	c7 44 24 0c 54 06 06 	movl   $0x8060654,0xc(%esp)
 8051900:	08 
 8051901:	c7 44 24 08 44 02 00 	movl   $0x244,0x8(%esp)
 8051908:	00 
 8051909:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051910:	08 
 8051911:	89 04 24             	mov    %eax,(%esp)
 8051914:	e8 77 cc 00 00       	call   805e590 <_test_assert>
            "read from /dev/zero doesn't zero buffer");
        syscall_success(close(fd));
 8051919:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805191f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8051924:	89 04 24             	mov    %eax,(%esp)
 8051927:	e8 fd c9 00 00       	call   805e329 <test_errstr>
 805192c:	89 c3                	mov    %eax,%ebx
 805192e:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8051931:	89 04 24             	mov    %eax,(%esp)
 8051934:	e8 8a 81 00 00       	call   8059ac3 <close>
 8051939:	f7 d0                	not    %eax
 805193b:	c1 e8 1f             	shr    $0x1f,%eax
 805193e:	0f b6 c0             	movzbl %al,%eax
 8051941:	89 74 24 18          	mov    %esi,0x18(%esp)
 8051945:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8051949:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8051950:	08 
 8051951:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 8051958:	08 
 8051959:	c7 44 24 08 45 02 00 	movl   $0x245,0x8(%esp)
 8051960:	00 
 8051961:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051968:	08 
 8051969:	89 04 24             	mov    %eax,(%esp)
 805196c:	e8 1f cc 00 00       	call   805e590 <_test_assert>
        test_fini("vfstest_memdev");
 8051971:	c7 04 24 6c 06 06 08 	movl   $0x806066c,(%esp)
 8051978:	e8 fe c8 00 00       	call   805e27b <test_fini>
}
 805197d:	90                   	nop
 805197e:	81 c4 30 10 00 00    	add    $0x1030,%esp
 8051984:	5b                   	pop    %ebx
 8051985:	5e                   	pop    %esi
 8051986:	5d                   	pop    %ebp
 8051987:	c3                   	ret    

08051988 <vfstest_write>:

static void
vfstest_write(void)
{
 8051988:	55                   	push   %ebp
 8051989:	89 e5                	mov    %esp,%ebp
 805198b:	56                   	push   %esi
 805198c:	53                   	push   %ebx
 805198d:	81 ec 10 01 00 00    	sub    $0x110,%esp
#define CHUNK_SIZE 25
#define NUM_CHUNKS  4
        int fd, i, res;
        struct stat s;
        const char *str = "hello world";
 8051993:	c7 45 f0 7b 06 06 08 	movl   $0x806067b,-0x10(%ebp)

        char chunk[CHUNK_SIZE];
        memcpy(chunk, str, strlen(str));
 805199a:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805199d:	89 04 24             	mov    %eax,(%esp)
 80519a0:	e8 c5 8a 00 00       	call   805a46a <strlen>
 80519a5:	89 44 24 08          	mov    %eax,0x8(%esp)
 80519a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
 80519ac:	89 44 24 04          	mov    %eax,0x4(%esp)
 80519b0:	8d 45 8f             	lea    -0x71(%ebp),%eax
 80519b3:	89 04 24             	mov    %eax,(%esp)
 80519b6:	e8 95 88 00 00       	call   805a250 <memcpy>
        memset(chunk + strlen(str), 0, 25 - strlen(str));
 80519bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
 80519be:	89 04 24             	mov    %eax,(%esp)
 80519c1:	e8 a4 8a 00 00       	call   805a46a <strlen>
 80519c6:	ba 19 00 00 00       	mov    $0x19,%edx
 80519cb:	29 c2                	sub    %eax,%edx
 80519cd:	89 d3                	mov    %edx,%ebx
 80519cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
 80519d2:	89 04 24             	mov    %eax,(%esp)
 80519d5:	e8 90 8a 00 00       	call   805a46a <strlen>
 80519da:	8d 55 8f             	lea    -0x71(%ebp),%edx
 80519dd:	01 d0                	add    %edx,%eax
 80519df:	89 5c 24 08          	mov    %ebx,0x8(%esp)
 80519e3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80519ea:	00 
 80519eb:	89 04 24             	mov    %eax,(%esp)
 80519ee:	e8 b8 89 00 00       	call   805a3ab <memset>

        syscall_success(mkdir("write", 0));
 80519f3:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80519f9:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80519fe:	89 04 24             	mov    %eax,(%esp)
 8051a01:	e8 23 c9 00 00       	call   805e329 <test_errstr>
 8051a06:	89 c3                	mov    %eax,%ebx
 8051a08:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8051a0f:	00 
 8051a10:	c7 04 24 87 06 06 08 	movl   $0x8060687,(%esp)
 8051a17:	e8 72 81 00 00       	call   8059b8e <mkdir>
 8051a1c:	f7 d0                	not    %eax
 8051a1e:	c1 e8 1f             	shr    $0x1f,%eax
 8051a21:	0f b6 c0             	movzbl %al,%eax
 8051a24:	89 74 24 18          	mov    %esi,0x18(%esp)
 8051a28:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8051a2c:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8051a33:	08 
 8051a34:	c7 44 24 0c 8d 06 06 	movl   $0x806068d,0xc(%esp)
 8051a3b:	08 
 8051a3c:	c7 44 24 08 56 02 00 	movl   $0x256,0x8(%esp)
 8051a43:	00 
 8051a44:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051a4b:	08 
 8051a4c:	89 04 24             	mov    %eax,(%esp)
 8051a4f:	e8 3c cb 00 00       	call   805e590 <_test_assert>
        syscall_success(chdir("write"));
 8051a54:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8051a5a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8051a5f:	89 04 24             	mov    %eax,(%esp)
 8051a62:	e8 c2 c8 00 00       	call   805e329 <test_errstr>
 8051a67:	89 c3                	mov    %eax,%ebx
 8051a69:	c7 04 24 87 06 06 08 	movl   $0x8060687,(%esp)
 8051a70:	e8 ff 82 00 00       	call   8059d74 <chdir>
 8051a75:	f7 d0                	not    %eax
 8051a77:	c1 e8 1f             	shr    $0x1f,%eax
 8051a7a:	0f b6 c0             	movzbl %al,%eax
 8051a7d:	89 74 24 18          	mov    %esi,0x18(%esp)
 8051a81:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8051a85:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8051a8c:	08 
 8051a8d:	c7 44 24 0c a6 06 06 	movl   $0x80606a6,0xc(%esp)
 8051a94:	08 
 8051a95:	c7 44 24 08 57 02 00 	movl   $0x257,0x8(%esp)
 8051a9c:	00 
 8051a9d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051aa4:	08 
 8051aa5:	89 04 24             	mov    %eax,(%esp)
 8051aa8:	e8 e3 ca 00 00       	call   805e590 <_test_assert>

        create_file("file");
 8051aad:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8051ab3:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8051ab8:	89 04 24             	mov    %eax,(%esp)
 8051abb:	e8 69 c8 00 00       	call   805e329 <test_errstr>
 8051ac0:	89 c3                	mov    %eax,%ebx
 8051ac2:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 8051ac9:	00 
 8051aca:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 8051ad1:	00 
 8051ad2:	c7 04 24 44 ec 05 08 	movl   $0x805ec44,(%esp)
 8051ad9:	e8 8e 7e 00 00       	call   805996c <open>
 8051ade:	89 45 ec             	mov    %eax,-0x14(%ebp)
 8051ae1:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8051ae4:	f7 d0                	not    %eax
 8051ae6:	c1 e8 1f             	shr    $0x1f,%eax
 8051ae9:	0f b6 c0             	movzbl %al,%eax
 8051aec:	89 74 24 18          	mov    %esi,0x18(%esp)
 8051af0:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8051af4:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8051afb:	08 
 8051afc:	c7 44 24 0c 4c ec 05 	movl   $0x805ec4c,0xc(%esp)
 8051b03:	08 
 8051b04:	c7 44 24 08 59 02 00 	movl   $0x259,0x8(%esp)
 8051b0b:	00 
 8051b0c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051b13:	08 
 8051b14:	89 04 24             	mov    %eax,(%esp)
 8051b17:	e8 74 ca 00 00       	call   805e590 <_test_assert>
 8051b1c:	85 c0                	test   %eax,%eax
 8051b1e:	74 58                	je     8051b78 <vfstest_write+0x1f0>
 8051b20:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8051b26:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8051b2b:	89 04 24             	mov    %eax,(%esp)
 8051b2e:	e8 f6 c7 00 00       	call   805e329 <test_errstr>
 8051b33:	89 c3                	mov    %eax,%ebx
 8051b35:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8051b38:	89 04 24             	mov    %eax,(%esp)
 8051b3b:	e8 83 7f 00 00       	call   8059ac3 <close>
 8051b40:	f7 d0                	not    %eax
 8051b42:	c1 e8 1f             	shr    $0x1f,%eax
 8051b45:	0f b6 c0             	movzbl %al,%eax
 8051b48:	89 74 24 18          	mov    %esi,0x18(%esp)
 8051b4c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8051b50:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8051b57:	08 
 8051b58:	c7 44 24 0c 78 ec 05 	movl   $0x805ec78,0xc(%esp)
 8051b5f:	08 
 8051b60:	c7 44 24 08 59 02 00 	movl   $0x259,0x8(%esp)
 8051b67:	00 
 8051b68:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051b6f:	08 
 8051b70:	89 04 24             	mov    %eax,(%esp)
 8051b73:	e8 18 ca 00 00       	call   805e590 <_test_assert>
        syscall_success(fd = open("file", O_RDWR, 0));
 8051b78:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8051b7e:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8051b83:	89 04 24             	mov    %eax,(%esp)
 8051b86:	e8 9e c7 00 00       	call   805e329 <test_errstr>
 8051b8b:	89 c3                	mov    %eax,%ebx
 8051b8d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8051b94:	00 
 8051b95:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 8051b9c:	00 
 8051b9d:	c7 04 24 44 ec 05 08 	movl   $0x805ec44,(%esp)
 8051ba4:	e8 c3 7d 00 00       	call   805996c <open>
 8051ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
 8051bac:	8b 45 e8             	mov    -0x18(%ebp),%eax
 8051baf:	f7 d0                	not    %eax
 8051bb1:	c1 e8 1f             	shr    $0x1f,%eax
 8051bb4:	0f b6 c0             	movzbl %al,%eax
 8051bb7:	89 74 24 18          	mov    %esi,0x18(%esp)
 8051bbb:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8051bbf:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8051bc6:	08 
 8051bc7:	c7 44 24 0c b8 ec 05 	movl   $0x805ecb8,0xc(%esp)
 8051bce:	08 
 8051bcf:	c7 44 24 08 5a 02 00 	movl   $0x25a,0x8(%esp)
 8051bd6:	00 
 8051bd7:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051bde:	08 
 8051bdf:	89 04 24             	mov    %eax,(%esp)
 8051be2:	e8 a9 c9 00 00       	call   805e590 <_test_assert>
        for (i = 0; i < NUM_CHUNKS * CHUNK_SIZE; i += CHUNK_SIZE) {
 8051be7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 8051bee:	e9 33 01 00 00       	jmp    8051d26 <vfstest_write+0x39e>
            syscall_success(lseek(fd, i, SEEK_SET));
 8051bf3:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8051bf9:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8051bfe:	89 04 24             	mov    %eax,(%esp)
 8051c01:	e8 23 c7 00 00       	call   805e329 <test_errstr>
 8051c06:	89 c3                	mov    %eax,%ebx
 8051c08:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8051c0f:	00 
 8051c10:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8051c13:	89 44 24 04          	mov    %eax,0x4(%esp)
 8051c17:	8b 45 e8             	mov    -0x18(%ebp),%eax
 8051c1a:	89 04 24             	mov    %eax,(%esp)
 8051c1d:	e8 ae 7d 00 00       	call   80599d0 <lseek>
 8051c22:	f7 d0                	not    %eax
 8051c24:	c1 e8 1f             	shr    $0x1f,%eax
 8051c27:	0f b6 c0             	movzbl %al,%eax
 8051c2a:	89 74 24 18          	mov    %esi,0x18(%esp)
 8051c2e:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8051c32:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8051c39:	08 
 8051c3a:	c7 44 24 0c bc 06 06 	movl   $0x80606bc,0xc(%esp)
 8051c41:	08 
 8051c42:	c7 44 24 08 5c 02 00 	movl   $0x25c,0x8(%esp)
 8051c49:	00 
 8051c4a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051c51:	08 
 8051c52:	89 04 24             	mov    %eax,(%esp)
 8051c55:	e8 36 c9 00 00       	call   805e590 <_test_assert>
            syscall_success(res = write(fd, str, strlen(str)));
 8051c5a:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8051c60:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8051c65:	89 04 24             	mov    %eax,(%esp)
 8051c68:	e8 bc c6 00 00       	call   805e329 <test_errstr>
 8051c6d:	89 c3                	mov    %eax,%ebx
 8051c6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8051c72:	89 04 24             	mov    %eax,(%esp)
 8051c75:	e8 f0 87 00 00       	call   805a46a <strlen>
 8051c7a:	89 44 24 08          	mov    %eax,0x8(%esp)
 8051c7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8051c81:	89 44 24 04          	mov    %eax,0x4(%esp)
 8051c85:	8b 45 e8             	mov    -0x18(%ebp),%eax
 8051c88:	89 04 24             	mov    %eax,(%esp)
 8051c8b:	e8 e2 7d 00 00       	call   8059a72 <write>
 8051c90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 8051c93:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8051c96:	f7 d0                	not    %eax
 8051c98:	c1 e8 1f             	shr    $0x1f,%eax
 8051c9b:	0f b6 c0             	movzbl %al,%eax
 8051c9e:	89 74 24 18          	mov    %esi,0x18(%esp)
 8051ca2:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8051ca6:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8051cad:	08 
 8051cae:	c7 44 24 0c d4 06 06 	movl   $0x80606d4,0xc(%esp)
 8051cb5:	08 
 8051cb6:	c7 44 24 08 5d 02 00 	movl   $0x25d,0x8(%esp)
 8051cbd:	00 
 8051cbe:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051cc5:	08 
 8051cc6:	89 04 24             	mov    %eax,(%esp)
 8051cc9:	e8 c2 c8 00 00       	call   805e590 <_test_assert>
            test_assert((int)strlen(str) == res, 
 8051cce:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8051cd1:	89 04 24             	mov    %eax,(%esp)
 8051cd4:	e8 91 87 00 00       	call   805a46a <strlen>
 8051cd9:	89 c3                	mov    %eax,%ebx
 8051cdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8051cde:	89 04 24             	mov    %eax,(%esp)
 8051ce1:	e8 84 87 00 00       	call   805a46a <strlen>
 8051ce6:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
 8051ce9:	0f 94 c0             	sete   %al
 8051cec:	0f b6 c0             	movzbl %al,%eax
 8051cef:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 8051cf2:	89 54 24 18          	mov    %edx,0x18(%esp)
 8051cf6:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8051cfa:	c7 44 24 10 fd 06 06 	movl   $0x80606fd,0x10(%esp)
 8051d01:	08 
 8051d02:	c7 44 24 0c 1b 07 06 	movl   $0x806071b,0xc(%esp)
 8051d09:	08 
 8051d0a:	c7 44 24 08 5f 02 00 	movl   $0x25f,0x8(%esp)
 8051d11:	00 
 8051d12:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051d19:	08 
 8051d1a:	89 04 24             	mov    %eax,(%esp)
 8051d1d:	e8 6e c8 00 00       	call   805e590 <_test_assert>
        syscall_success(mkdir("write", 0));
        syscall_success(chdir("write"));

        create_file("file");
        syscall_success(fd = open("file", O_RDWR, 0));
        for (i = 0; i < NUM_CHUNKS * CHUNK_SIZE; i += CHUNK_SIZE) {
 8051d22:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
 8051d26:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
 8051d2a:	0f 8e c3 fe ff ff    	jle    8051bf3 <vfstest_write+0x26b>
            syscall_success(lseek(fd, i, SEEK_SET));
            syscall_success(res = write(fd, str, strlen(str)));
            test_assert((int)strlen(str) == res, 
                "write of %d bytes returned %d", strlen(str), res);
        }
        syscall_success(lseek(fd, 0, SEEK_SET));
 8051d30:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8051d36:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8051d3b:	89 04 24             	mov    %eax,(%esp)
 8051d3e:	e8 e6 c5 00 00       	call   805e329 <test_errstr>
 8051d43:	89 c3                	mov    %eax,%ebx
 8051d45:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8051d4c:	00 
 8051d4d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8051d54:	00 
 8051d55:	8b 45 e8             	mov    -0x18(%ebp),%eax
 8051d58:	89 04 24             	mov    %eax,(%esp)
 8051d5b:	e8 70 7c 00 00       	call   80599d0 <lseek>
 8051d60:	f7 d0                	not    %eax
 8051d62:	c1 e8 1f             	shr    $0x1f,%eax
 8051d65:	0f b6 c0             	movzbl %al,%eax
 8051d68:	89 74 24 18          	mov    %esi,0x18(%esp)
 8051d6c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8051d70:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8051d77:	08 
 8051d78:	c7 44 24 0c 33 07 06 	movl   $0x8060733,0xc(%esp)
 8051d7f:	08 
 8051d80:	c7 44 24 08 61 02 00 	movl   $0x261,0x8(%esp)
 8051d87:	00 
 8051d88:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051d8f:	08 
 8051d90:	89 04 24             	mov    %eax,(%esp)
 8051d93:	e8 f8 c7 00 00       	call   805e590 <_test_assert>
        for (i = 0; i < NUM_CHUNKS - 1; ++i) {
 8051d98:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 8051d9f:	e9 9e 00 00 00       	jmp    8051e42 <vfstest_write+0x4ba>
            char __buf[64];
            test_assert(CHUNK_SIZE == read(fd, __buf, CHUNK_SIZE), 
 8051da4:	c7 44 24 08 19 00 00 	movl   $0x19,0x8(%esp)
 8051dab:	00 
 8051dac:	8d 85 0f ff ff ff    	lea    -0xf1(%ebp),%eax
 8051db2:	89 44 24 04          	mov    %eax,0x4(%esp)
 8051db6:	8b 45 e8             	mov    -0x18(%ebp),%eax
 8051db9:	89 04 24             	mov    %eax,(%esp)
 8051dbc:	e8 60 7c 00 00       	call   8059a21 <read>
 8051dc1:	83 f8 19             	cmp    $0x19,%eax
 8051dc4:	0f 94 c0             	sete   %al
 8051dc7:	0f b6 c0             	movzbl %al,%eax
 8051dca:	c7 44 24 10 b4 02 06 	movl   $0x80602b4,0x10(%esp)
 8051dd1:	08 
 8051dd2:	c7 44 24 0c 4c 07 06 	movl   $0x806074c,0xc(%esp)
 8051dd9:	08 
 8051dda:	c7 44 24 08 65 02 00 	movl   $0x265,0x8(%esp)
 8051de1:	00 
 8051de2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051de9:	08 
 8051dea:	89 04 24             	mov    %eax,(%esp)
 8051ded:	e8 9e c7 00 00       	call   805e590 <_test_assert>
                "\nread unexpected number of bytes"); 
            test_assert(0 == memcmp(__buf, chunk, CHUNK_SIZE), 
 8051df2:	c7 44 24 08 19 00 00 	movl   $0x19,0x8(%esp)
 8051df9:	00 
 8051dfa:	8d 45 8f             	lea    -0x71(%ebp),%eax
 8051dfd:	89 44 24 04          	mov    %eax,0x4(%esp)
 8051e01:	8d 85 0f ff ff ff    	lea    -0xf1(%ebp),%eax
 8051e07:	89 04 24             	mov    %eax,(%esp)
 8051e0a:	e8 ee 83 00 00       	call   805a1fd <memcmp>
 8051e0f:	85 c0                	test   %eax,%eax
 8051e11:	0f 94 c0             	sete   %al
 8051e14:	0f b6 c0             	movzbl %al,%eax
 8051e17:	c7 44 24 10 08 03 06 	movl   $0x8060308,0x10(%esp)
 8051e1e:	08 
 8051e1f:	c7 44 24 0c 78 07 06 	movl   $0x8060778,0xc(%esp)
 8051e26:	08 
 8051e27:	c7 44 24 08 67 02 00 	movl   $0x267,0x8(%esp)
 8051e2e:	00 
 8051e2f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051e36:	08 
 8051e37:	89 04 24             	mov    %eax,(%esp)
 8051e3a:	e8 51 c7 00 00       	call   805e590 <_test_assert>
            syscall_success(res = write(fd, str, strlen(str)));
            test_assert((int)strlen(str) == res, 
                "write of %d bytes returned %d", strlen(str), res);
        }
        syscall_success(lseek(fd, 0, SEEK_SET));
        for (i = 0; i < NUM_CHUNKS - 1; ++i) {
 8051e3f:	ff 45 f4             	incl   -0xc(%ebp)
 8051e42:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
 8051e46:	0f 8e 58 ff ff ff    	jle    8051da4 <vfstest_write+0x41c>
                "\nread unexpected number of bytes"); 
            test_assert(0 == memcmp(__buf, chunk, CHUNK_SIZE), 
                "\nread data incorrect"); 
        }
        char __buf[64];
        test_assert((int)strlen(str) == read(fd, __buf, strlen(str)), 
 8051e4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8051e4f:	89 04 24             	mov    %eax,(%esp)
 8051e52:	e8 13 86 00 00       	call   805a46a <strlen>
 8051e57:	89 c3                	mov    %eax,%ebx
 8051e59:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8051e5c:	89 04 24             	mov    %eax,(%esp)
 8051e5f:	e8 06 86 00 00       	call   805a46a <strlen>
 8051e64:	89 44 24 08          	mov    %eax,0x8(%esp)
 8051e68:	8d 85 4f ff ff ff    	lea    -0xb1(%ebp),%eax
 8051e6e:	89 44 24 04          	mov    %eax,0x4(%esp)
 8051e72:	8b 45 e8             	mov    -0x18(%ebp),%eax
 8051e75:	89 04 24             	mov    %eax,(%esp)
 8051e78:	e8 a4 7b 00 00       	call   8059a21 <read>
 8051e7d:	39 c3                	cmp    %eax,%ebx
 8051e7f:	0f 94 c0             	sete   %al
 8051e82:	0f b6 c0             	movzbl %al,%eax
 8051e85:	c7 44 24 10 b4 02 06 	movl   $0x80602b4,0x10(%esp)
 8051e8c:	08 
 8051e8d:	c7 44 24 0c a0 07 06 	movl   $0x80607a0,0xc(%esp)
 8051e94:	08 
 8051e95:	c7 44 24 08 6b 02 00 	movl   $0x26b,0x8(%esp)
 8051e9c:	00 
 8051e9d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051ea4:	08 
 8051ea5:	89 04 24             	mov    %eax,(%esp)
 8051ea8:	e8 e3 c6 00 00       	call   805e590 <_test_assert>
            "\nread unexpected number of bytes"); 
        test_assert(0 == memcmp(__buf, chunk, strlen(str)), 
 8051ead:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8051eb0:	89 04 24             	mov    %eax,(%esp)
 8051eb3:	e8 b2 85 00 00       	call   805a46a <strlen>
 8051eb8:	89 44 24 08          	mov    %eax,0x8(%esp)
 8051ebc:	8d 45 8f             	lea    -0x71(%ebp),%eax
 8051ebf:	89 44 24 04          	mov    %eax,0x4(%esp)
 8051ec3:	8d 85 4f ff ff ff    	lea    -0xb1(%ebp),%eax
 8051ec9:	89 04 24             	mov    %eax,(%esp)
 8051ecc:	e8 2c 83 00 00       	call   805a1fd <memcmp>
 8051ed1:	85 c0                	test   %eax,%eax
 8051ed3:	0f 94 c0             	sete   %al
 8051ed6:	0f b6 c0             	movzbl %al,%eax
 8051ed9:	c7 44 24 10 08 03 06 	movl   $0x8060308,0x10(%esp)
 8051ee0:	08 
 8051ee1:	c7 44 24 0c d4 07 06 	movl   $0x80607d4,0xc(%esp)
 8051ee8:	08 
 8051ee9:	c7 44 24 08 6d 02 00 	movl   $0x26d,0x8(%esp)
 8051ef0:	00 
 8051ef1:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051ef8:	08 
 8051ef9:	89 04 24             	mov    %eax,(%esp)
 8051efc:	e8 8f c6 00 00       	call   805e590 <_test_assert>
            "\nread data incorrect"); 

        const char *new_str = "testing";
 8051f01:	c7 45 e0 fb 07 06 08 	movl   $0x80607fb,-0x20(%ebp)
        const int loc = 37;
 8051f08:	c7 45 dc 25 00 00 00 	movl   $0x25,-0x24(%ebp)
        // writing to middle of file
        // make sure file size doesn't change and the write is done at the correct location
        syscall_success(lseek(fd, loc, SEEK_SET));
 8051f0f:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8051f15:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8051f1a:	89 04 24             	mov    %eax,(%esp)
 8051f1d:	e8 07 c4 00 00       	call   805e329 <test_errstr>
 8051f22:	89 c3                	mov    %eax,%ebx
 8051f24:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8051f2b:	00 
 8051f2c:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8051f2f:	89 44 24 04          	mov    %eax,0x4(%esp)
 8051f33:	8b 45 e8             	mov    -0x18(%ebp),%eax
 8051f36:	89 04 24             	mov    %eax,(%esp)
 8051f39:	e8 92 7a 00 00       	call   80599d0 <lseek>
 8051f3e:	f7 d0                	not    %eax
 8051f40:	c1 e8 1f             	shr    $0x1f,%eax
 8051f43:	0f b6 c0             	movzbl %al,%eax
 8051f46:	89 74 24 18          	mov    %esi,0x18(%esp)
 8051f4a:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8051f4e:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8051f55:	08 
 8051f56:	c7 44 24 0c 03 08 06 	movl   $0x8060803,0xc(%esp)
 8051f5d:	08 
 8051f5e:	c7 44 24 08 73 02 00 	movl   $0x273,0x8(%esp)
 8051f65:	00 
 8051f66:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051f6d:	08 
 8051f6e:	89 04 24             	mov    %eax,(%esp)
 8051f71:	e8 1a c6 00 00       	call   805e590 <_test_assert>
        syscall_success(res = write(fd, new_str, strlen(new_str)));
 8051f76:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8051f7c:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8051f81:	89 04 24             	mov    %eax,(%esp)
 8051f84:	e8 a0 c3 00 00       	call   805e329 <test_errstr>
 8051f89:	89 c3                	mov    %eax,%ebx
 8051f8b:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8051f8e:	89 04 24             	mov    %eax,(%esp)
 8051f91:	e8 d4 84 00 00       	call   805a46a <strlen>
 8051f96:	89 44 24 08          	mov    %eax,0x8(%esp)
 8051f9a:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8051f9d:	89 44 24 04          	mov    %eax,0x4(%esp)
 8051fa1:	8b 45 e8             	mov    -0x18(%ebp),%eax
 8051fa4:	89 04 24             	mov    %eax,(%esp)
 8051fa7:	e8 c6 7a 00 00       	call   8059a72 <write>
 8051fac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 8051faf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8051fb2:	f7 d0                	not    %eax
 8051fb4:	c1 e8 1f             	shr    $0x1f,%eax
 8051fb7:	0f b6 c0             	movzbl %al,%eax
 8051fba:	89 74 24 18          	mov    %esi,0x18(%esp)
 8051fbe:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8051fc2:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8051fc9:	08 
 8051fca:	c7 44 24 0c 1c 08 06 	movl   $0x806081c,0xc(%esp)
 8051fd1:	08 
 8051fd2:	c7 44 24 08 74 02 00 	movl   $0x274,0x8(%esp)
 8051fd9:	00 
 8051fda:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8051fe1:	08 
 8051fe2:	89 04 24             	mov    %eax,(%esp)
 8051fe5:	e8 a6 c5 00 00       	call   805e590 <_test_assert>
        test_assert((int)strlen(new_str) == res, 
 8051fea:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8051fed:	89 04 24             	mov    %eax,(%esp)
 8051ff0:	e8 75 84 00 00       	call   805a46a <strlen>
 8051ff5:	89 c3                	mov    %eax,%ebx
 8051ff7:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8051ffa:	89 04 24             	mov    %eax,(%esp)
 8051ffd:	e8 68 84 00 00       	call   805a46a <strlen>
 8052002:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
 8052005:	0f 94 c0             	sete   %al
 8052008:	0f b6 c0             	movzbl %al,%eax
 805200b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 805200e:	89 54 24 18          	mov    %edx,0x18(%esp)
 8052012:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052016:	c7 44 24 10 fd 06 06 	movl   $0x80606fd,0x10(%esp)
 805201d:	08 
 805201e:	c7 44 24 0c 4d 08 06 	movl   $0x806084d,0xc(%esp)
 8052025:	08 
 8052026:	c7 44 24 08 76 02 00 	movl   $0x276,0x8(%esp)
 805202d:	00 
 805202e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052035:	08 
 8052036:	89 04 24             	mov    %eax,(%esp)
 8052039:	e8 52 c5 00 00       	call   805e590 <_test_assert>
            "write of %d bytes returned %d", strlen(new_str), res);
        syscall_success(lseek(fd, loc, SEEK_SET));
 805203e:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8052044:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052049:	89 04 24             	mov    %eax,(%esp)
 805204c:	e8 d8 c2 00 00       	call   805e329 <test_errstr>
 8052051:	89 c3                	mov    %eax,%ebx
 8052053:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 805205a:	00 
 805205b:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805205e:	89 44 24 04          	mov    %eax,0x4(%esp)
 8052062:	8b 45 e8             	mov    -0x18(%ebp),%eax
 8052065:	89 04 24             	mov    %eax,(%esp)
 8052068:	e8 63 79 00 00       	call   80599d0 <lseek>
 805206d:	f7 d0                	not    %eax
 805206f:	c1 e8 1f             	shr    $0x1f,%eax
 8052072:	0f b6 c0             	movzbl %al,%eax
 8052075:	89 74 24 18          	mov    %esi,0x18(%esp)
 8052079:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805207d:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8052084:	08 
 8052085:	c7 44 24 0c 03 08 06 	movl   $0x8060803,0xc(%esp)
 805208c:	08 
 805208d:	c7 44 24 08 77 02 00 	movl   $0x277,0x8(%esp)
 8052094:	00 
 8052095:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805209c:	08 
 805209d:	89 04 24             	mov    %eax,(%esp)
 80520a0:	e8 eb c4 00 00       	call   805e590 <_test_assert>
        read_fd(fd, strlen(new_str), new_str);
 80520a5:	8b 45 e0             	mov    -0x20(%ebp),%eax
 80520a8:	89 04 24             	mov    %eax,(%esp)
 80520ab:	e8 ba 83 00 00       	call   805a46a <strlen>
 80520b0:	89 c3                	mov    %eax,%ebx
 80520b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
 80520b5:	89 04 24             	mov    %eax,(%esp)
 80520b8:	e8 ad 83 00 00       	call   805a46a <strlen>
 80520bd:	89 44 24 08          	mov    %eax,0x8(%esp)
 80520c1:	8d 85 0f ff ff ff    	lea    -0xf1(%ebp),%eax
 80520c7:	89 44 24 04          	mov    %eax,0x4(%esp)
 80520cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
 80520ce:	89 04 24             	mov    %eax,(%esp)
 80520d1:	e8 4b 79 00 00       	call   8059a21 <read>
 80520d6:	39 c3                	cmp    %eax,%ebx
 80520d8:	0f 94 c0             	sete   %al
 80520db:	0f b6 c0             	movzbl %al,%eax
 80520de:	c7 44 24 10 b4 02 06 	movl   $0x80602b4,0x10(%esp)
 80520e5:	08 
 80520e6:	c7 44 24 0c 6c 08 06 	movl   $0x806086c,0xc(%esp)
 80520ed:	08 
 80520ee:	c7 44 24 08 78 02 00 	movl   $0x278,0x8(%esp)
 80520f5:	00 
 80520f6:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80520fd:	08 
 80520fe:	89 04 24             	mov    %eax,(%esp)
 8052101:	e8 8a c4 00 00       	call   805e590 <_test_assert>
 8052106:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8052109:	89 04 24             	mov    %eax,(%esp)
 805210c:	e8 59 83 00 00       	call   805a46a <strlen>
 8052111:	89 44 24 08          	mov    %eax,0x8(%esp)
 8052115:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8052118:	89 44 24 04          	mov    %eax,0x4(%esp)
 805211c:	8d 85 0f ff ff ff    	lea    -0xf1(%ebp),%eax
 8052122:	89 04 24             	mov    %eax,(%esp)
 8052125:	e8 d3 80 00 00       	call   805a1fd <memcmp>
 805212a:	85 c0                	test   %eax,%eax
 805212c:	0f 94 c0             	sete   %al
 805212f:	0f b6 c0             	movzbl %al,%eax
 8052132:	c7 44 24 10 08 03 06 	movl   $0x8060308,0x10(%esp)
 8052139:	08 
 805213a:	c7 44 24 0c ac 08 06 	movl   $0x80608ac,0xc(%esp)
 8052141:	08 
 8052142:	c7 44 24 08 78 02 00 	movl   $0x278,0x8(%esp)
 8052149:	00 
 805214a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052151:	08 
 8052152:	89 04 24             	mov    %eax,(%esp)
 8052155:	e8 36 c4 00 00       	call   805e590 <_test_assert>
        test_assert(lseek(fd, 0, SEEK_END) == (NUM_CHUNKS-1) * CHUNK_SIZE + (int)strlen(str),
 805215a:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
 8052161:	00 
 8052162:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8052169:	00 
 805216a:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805216d:	89 04 24             	mov    %eax,(%esp)
 8052170:	e8 5b 78 00 00       	call   80599d0 <lseek>
 8052175:	89 c3                	mov    %eax,%ebx
 8052177:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805217a:	89 04 24             	mov    %eax,(%esp)
 805217d:	e8 e8 82 00 00       	call   805a46a <strlen>
 8052182:	83 c0 4b             	add    $0x4b,%eax
 8052185:	39 c3                	cmp    %eax,%ebx
 8052187:	0f 94 c0             	sete   %al
 805218a:	0f b6 c0             	movzbl %al,%eax
 805218d:	c7 44 24 10 d9 08 06 	movl   $0x80608d9,0x10(%esp)
 8052194:	08 
 8052195:	c7 44 24 0c f4 08 06 	movl   $0x80608f4,0xc(%esp)
 805219c:	08 
 805219d:	c7 44 24 08 7a 02 00 	movl   $0x27a,0x8(%esp)
 80521a4:	00 
 80521a5:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80521ac:	08 
 80521ad:	89 04 24             	mov    %eax,(%esp)
 80521b0:	e8 db c3 00 00       	call   805e590 <_test_assert>
            "file is not the right size");

        syscall_success(close(fd));
 80521b5:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80521bb:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80521c0:	89 04 24             	mov    %eax,(%esp)
 80521c3:	e8 61 c1 00 00       	call   805e329 <test_errstr>
 80521c8:	89 c3                	mov    %eax,%ebx
 80521ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
 80521cd:	89 04 24             	mov    %eax,(%esp)
 80521d0:	e8 ee 78 00 00       	call   8059ac3 <close>
 80521d5:	f7 d0                	not    %eax
 80521d7:	c1 e8 1f             	shr    $0x1f,%eax
 80521da:	0f b6 c0             	movzbl %al,%eax
 80521dd:	89 74 24 18          	mov    %esi,0x18(%esp)
 80521e1:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80521e5:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80521ec:	08 
 80521ed:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 80521f4:	08 
 80521f5:	c7 44 24 08 7c 02 00 	movl   $0x27c,0x8(%esp)
 80521fc:	00 
 80521fd:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052204:	08 
 8052205:	89 04 24             	mov    %eax,(%esp)
 8052208:	e8 83 c3 00 00       	call   805e590 <_test_assert>
        syscall_success(unlink("file"));
 805220d:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8052213:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052218:	89 04 24             	mov    %eax,(%esp)
 805221b:	e8 09 c1 00 00       	call   805e329 <test_errstr>
 8052220:	89 c3                	mov    %eax,%ebx
 8052222:	c7 04 24 44 ec 05 08 	movl   $0x805ec44,(%esp)
 8052229:	e8 16 7a 00 00       	call   8059c44 <unlink>
 805222e:	f7 d0                	not    %eax
 8052230:	c1 e8 1f             	shr    $0x1f,%eax
 8052233:	0f b6 c0             	movzbl %al,%eax
 8052236:	89 74 24 18          	mov    %esi,0x18(%esp)
 805223a:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805223e:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8052245:	08 
 8052246:	c7 44 24 0c 3d 09 06 	movl   $0x806093d,0xc(%esp)
 805224d:	08 
 805224e:	c7 44 24 08 7d 02 00 	movl   $0x27d,0x8(%esp)
 8052255:	00 
 8052256:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805225d:	08 
 805225e:	89 04 24             	mov    %eax,(%esp)
 8052261:	e8 2a c3 00 00       	call   805e590 <_test_assert>

        syscall_success(chdir(".."));
 8052266:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805226c:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052271:	89 04 24             	mov    %eax,(%esp)
 8052274:	e8 b0 c0 00 00       	call   805e329 <test_errstr>
 8052279:	89 c3                	mov    %eax,%ebx
 805227b:	c7 04 24 26 e6 05 08 	movl   $0x805e626,(%esp)
 8052282:	e8 ed 7a 00 00       	call   8059d74 <chdir>
 8052287:	f7 d0                	not    %eax
 8052289:	c1 e8 1f             	shr    $0x1f,%eax
 805228c:	0f b6 c0             	movzbl %al,%eax
 805228f:	89 74 24 18          	mov    %esi,0x18(%esp)
 8052293:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052297:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805229e:	08 
 805229f:	c7 44 24 0c ac ed 05 	movl   $0x805edac,0xc(%esp)
 80522a6:	08 
 80522a7:	c7 44 24 08 7f 02 00 	movl   $0x27f,0x8(%esp)
 80522ae:	00 
 80522af:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80522b6:	08 
 80522b7:	89 04 24             	mov    %eax,(%esp)
 80522ba:	e8 d1 c2 00 00       	call   805e590 <_test_assert>
        syscall_success(rmdir("write"));
 80522bf:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80522c5:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80522ca:	89 04 24             	mov    %eax,(%esp)
 80522cd:	e8 57 c0 00 00       	call   805e329 <test_errstr>
 80522d2:	89 c3                	mov    %eax,%ebx
 80522d4:	c7 04 24 87 06 06 08 	movl   $0x8060687,(%esp)
 80522db:	e8 0c 79 00 00       	call   8059bec <rmdir>
 80522e0:	f7 d0                	not    %eax
 80522e2:	c1 e8 1f             	shr    $0x1f,%eax
 80522e5:	0f b6 c0             	movzbl %al,%eax
 80522e8:	89 74 24 18          	mov    %esi,0x18(%esp)
 80522ec:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80522f0:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80522f7:	08 
 80522f8:	c7 44 24 0c 53 09 06 	movl   $0x8060953,0xc(%esp)
 80522ff:	08 
 8052300:	c7 44 24 08 80 02 00 	movl   $0x280,0x8(%esp)
 8052307:	00 
 8052308:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805230f:	08 
 8052310:	89 04 24             	mov    %eax,(%esp)
 8052313:	e8 78 c2 00 00       	call   805e590 <_test_assert>
        test_fini("vfstest_write");
 8052318:	c7 04 24 69 09 06 08 	movl   $0x8060969,(%esp)
 805231f:	e8 57 bf 00 00       	call   805e27b <test_fini>
}
 8052324:	90                   	nop
 8052325:	81 c4 10 01 00 00    	add    $0x110,%esp
 805232b:	5b                   	pop    %ebx
 805232c:	5e                   	pop    %esi
 805232d:	5d                   	pop    %ebp
 805232e:	c3                   	ret    

0805232f <vfstest_infinite>:

/* These operations should run for a long time and halt when the file
 * descriptor overflows. */
static void
vfstest_infinite(void)
{
 805232f:	55                   	push   %ebp
 8052330:	89 e5                	mov    %esp,%ebp
 8052332:	56                   	push   %esi
 8052333:	53                   	push   %ebx
 8052334:	81 ec 30 10 00 00    	sub    $0x1030,%esp
        int res, fd;
        char buf[4096];

        res = 1;
 805233a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        syscall_success(fd = open("/dev/null", O_WRONLY, 0));
 8052341:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8052347:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805234c:	89 04 24             	mov    %eax,(%esp)
 805234f:	e8 d5 bf 00 00       	call   805e329 <test_errstr>
 8052354:	89 c3                	mov    %eax,%ebx
 8052356:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 805235d:	00 
 805235e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 8052365:	00 
 8052366:	c7 04 24 80 04 06 08 	movl   $0x8060480,(%esp)
 805236d:	e8 fa 75 00 00       	call   805996c <open>
 8052372:	89 45 f0             	mov    %eax,-0x10(%ebp)
 8052375:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8052378:	f7 d0                	not    %eax
 805237a:	c1 e8 1f             	shr    $0x1f,%eax
 805237d:	0f b6 c0             	movzbl %al,%eax
 8052380:	89 74 24 18          	mov    %esi,0x18(%esp)
 8052384:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052388:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805238f:	08 
 8052390:	c7 44 24 0c 78 09 06 	movl   $0x8060978,0xc(%esp)
 8052397:	08 
 8052398:	c7 44 24 08 8d 02 00 	movl   $0x28d,0x8(%esp)
 805239f:	00 
 80523a0:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80523a7:	08 
 80523a8:	89 04 24             	mov    %eax,(%esp)
 80523ab:	e8 e0 c1 00 00       	call   805e590 <_test_assert>
        while (0 < res) {
 80523b0:	eb 70                	jmp    8052422 <vfstest_infinite+0xf3>
                syscall_success(res = write(fd, buf, sizeof(buf)));
 80523b2:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80523b8:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80523bd:	89 04 24             	mov    %eax,(%esp)
 80523c0:	e8 64 bf 00 00       	call   805e329 <test_errstr>
 80523c5:	89 c3                	mov    %eax,%ebx
 80523c7:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
 80523ce:	00 
 80523cf:	8d 85 f0 ef ff ff    	lea    -0x1010(%ebp),%eax
 80523d5:	89 44 24 04          	mov    %eax,0x4(%esp)
 80523d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
 80523dc:	89 04 24             	mov    %eax,(%esp)
 80523df:	e8 8e 76 00 00       	call   8059a72 <write>
 80523e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
 80523e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80523ea:	f7 d0                	not    %eax
 80523ec:	c1 e8 1f             	shr    $0x1f,%eax
 80523ef:	0f b6 c0             	movzbl %al,%eax
 80523f2:	89 74 24 18          	mov    %esi,0x18(%esp)
 80523f6:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80523fa:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8052401:	08 
 8052402:	c7 44 24 0c b0 04 06 	movl   $0x80604b0,0xc(%esp)
 8052409:	08 
 805240a:	c7 44 24 08 8f 02 00 	movl   $0x28f,0x8(%esp)
 8052411:	00 
 8052412:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052419:	08 
 805241a:	89 04 24             	mov    %eax,(%esp)
 805241d:	e8 6e c1 00 00       	call   805e590 <_test_assert>
        int res, fd;
        char buf[4096];

        res = 1;
        syscall_success(fd = open("/dev/null", O_WRONLY, 0));
        while (0 < res) {
 8052422:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 8052426:	7f 8a                	jg     80523b2 <vfstest_infinite+0x83>
                syscall_success(res = write(fd, buf, sizeof(buf)));
        }
        syscall_success(close(fd));
 8052428:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805242e:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052433:	89 04 24             	mov    %eax,(%esp)
 8052436:	e8 ee be 00 00       	call   805e329 <test_errstr>
 805243b:	89 c3                	mov    %eax,%ebx
 805243d:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8052440:	89 04 24             	mov    %eax,(%esp)
 8052443:	e8 7b 76 00 00       	call   8059ac3 <close>
 8052448:	f7 d0                	not    %eax
 805244a:	c1 e8 1f             	shr    $0x1f,%eax
 805244d:	0f b6 c0             	movzbl %al,%eax
 8052450:	89 74 24 18          	mov    %esi,0x18(%esp)
 8052454:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052458:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805245f:	08 
 8052460:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 8052467:	08 
 8052468:	c7 44 24 08 91 02 00 	movl   $0x291,0x8(%esp)
 805246f:	00 
 8052470:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052477:	08 
 8052478:	89 04 24             	mov    %eax,(%esp)
 805247b:	e8 10 c1 00 00       	call   805e590 <_test_assert>

        res = 1;
 8052480:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        syscall_success(fd = open("/dev/zero", O_RDONLY, 0));
 8052487:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805248d:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052492:	89 04 24             	mov    %eax,(%esp)
 8052495:	e8 8f be 00 00       	call   805e329 <test_errstr>
 805249a:	89 c3                	mov    %eax,%ebx
 805249c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80524a3:	00 
 80524a4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80524ab:	00 
 80524ac:	c7 04 24 ad 05 06 08 	movl   $0x80605ad,(%esp)
 80524b3:	e8 b4 74 00 00       	call   805996c <open>
 80524b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
 80524bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
 80524be:	f7 d0                	not    %eax
 80524c0:	c1 e8 1f             	shr    $0x1f,%eax
 80524c3:	0f b6 c0             	movzbl %al,%eax
 80524c6:	89 74 24 18          	mov    %esi,0x18(%esp)
 80524ca:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80524ce:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80524d5:	08 
 80524d6:	c7 44 24 0c 9c 09 06 	movl   $0x806099c,0xc(%esp)
 80524dd:	08 
 80524de:	c7 44 24 08 94 02 00 	movl   $0x294,0x8(%esp)
 80524e5:	00 
 80524e6:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80524ed:	08 
 80524ee:	89 04 24             	mov    %eax,(%esp)
 80524f1:	e8 9a c0 00 00       	call   805e590 <_test_assert>
        while (0 < res) {
 80524f6:	eb 70                	jmp    8052568 <vfstest_infinite+0x239>
                syscall_success(res = read(fd, buf, sizeof(buf)));
 80524f8:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80524fe:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052503:	89 04 24             	mov    %eax,(%esp)
 8052506:	e8 1e be 00 00       	call   805e329 <test_errstr>
 805250b:	89 c3                	mov    %eax,%ebx
 805250d:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
 8052514:	00 
 8052515:	8d 85 f0 ef ff ff    	lea    -0x1010(%ebp),%eax
 805251b:	89 44 24 04          	mov    %eax,0x4(%esp)
 805251f:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8052522:	89 04 24             	mov    %eax,(%esp)
 8052525:	e8 f7 74 00 00       	call   8059a21 <read>
 805252a:	89 45 f4             	mov    %eax,-0xc(%ebp)
 805252d:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8052530:	f7 d0                	not    %eax
 8052532:	c1 e8 1f             	shr    $0x1f,%eax
 8052535:	0f b6 c0             	movzbl %al,%eax
 8052538:	89 74 24 18          	mov    %esi,0x18(%esp)
 805253c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052540:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8052547:	08 
 8052548:	c7 44 24 0c 18 05 06 	movl   $0x8060518,0xc(%esp)
 805254f:	08 
 8052550:	c7 44 24 08 96 02 00 	movl   $0x296,0x8(%esp)
 8052557:	00 
 8052558:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805255f:	08 
 8052560:	89 04 24             	mov    %eax,(%esp)
 8052563:	e8 28 c0 00 00       	call   805e590 <_test_assert>
        }
        syscall_success(close(fd));

        res = 1;
        syscall_success(fd = open("/dev/zero", O_RDONLY, 0));
        while (0 < res) {
 8052568:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 805256c:	7f 8a                	jg     80524f8 <vfstest_infinite+0x1c9>
                syscall_success(res = read(fd, buf, sizeof(buf)));
        }
        syscall_success(close(fd));
 805256e:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8052574:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052579:	89 04 24             	mov    %eax,(%esp)
 805257c:	e8 a8 bd 00 00       	call   805e329 <test_errstr>
 8052581:	89 c3                	mov    %eax,%ebx
 8052583:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8052586:	89 04 24             	mov    %eax,(%esp)
 8052589:	e8 35 75 00 00       	call   8059ac3 <close>
 805258e:	f7 d0                	not    %eax
 8052590:	c1 e8 1f             	shr    $0x1f,%eax
 8052593:	0f b6 c0             	movzbl %al,%eax
 8052596:	89 74 24 18          	mov    %esi,0x18(%esp)
 805259a:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805259e:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80525a5:	08 
 80525a6:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 80525ad:	08 
 80525ae:	c7 44 24 08 98 02 00 	movl   $0x298,0x8(%esp)
 80525b5:	00 
 80525b6:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80525bd:	08 
 80525be:	89 04 24             	mov    %eax,(%esp)
 80525c1:	e8 ca bf 00 00       	call   805e590 <_test_assert>
}
 80525c6:	90                   	nop
 80525c7:	81 c4 30 10 00 00    	add    $0x1030,%esp
 80525cd:	5b                   	pop    %ebx
 80525ce:	5e                   	pop    %esi
 80525cf:	5d                   	pop    %ebp
 80525d0:	c3                   	ret    

080525d1 <vfstest_open>:
 *      - Cannot open a directory for writing
 *      - File descriptors are correctly released when a proc exits
 */
static void
vfstest_open(void)
{
 80525d1:	55                   	push   %ebp
 80525d2:	89 e5                	mov    %esp,%ebp
 80525d4:	57                   	push   %edi
 80525d5:	56                   	push   %esi
 80525d6:	53                   	push   %ebx
 80525d7:	81 ec 8c 00 00 00    	sub    $0x8c,%esp

        char buf[OPEN_BUFSIZE];
        int fd, fd2;
        struct stat s;

        syscall_success(mkdir("open", 0777));
 80525dd:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80525e3:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80525e8:	89 04 24             	mov    %eax,(%esp)
 80525eb:	e8 39 bd 00 00       	call   805e329 <test_errstr>
 80525f0:	89 c3                	mov    %eax,%ebx
 80525f2:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 80525f9:	00 
 80525fa:	c7 04 24 c0 09 06 08 	movl   $0x80609c0,(%esp)
 8052601:	e8 88 75 00 00       	call   8059b8e <mkdir>
 8052606:	f7 d0                	not    %eax
 8052608:	c1 e8 1f             	shr    $0x1f,%eax
 805260b:	0f b6 c0             	movzbl %al,%eax
 805260e:	89 74 24 18          	mov    %esi,0x18(%esp)
 8052612:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052616:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805261d:	08 
 805261e:	c7 44 24 0c c5 09 06 	movl   $0x80609c5,0xc(%esp)
 8052625:	08 
 8052626:	c7 44 24 08 b1 02 00 	movl   $0x2b1,0x8(%esp)
 805262d:	00 
 805262e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052635:	08 
 8052636:	89 04 24             	mov    %eax,(%esp)
 8052639:	e8 52 bf 00 00       	call   805e590 <_test_assert>
        syscall_success(chdir("open"));
 805263e:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8052644:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052649:	89 04 24             	mov    %eax,(%esp)
 805264c:	e8 d8 bc 00 00       	call   805e329 <test_errstr>
 8052651:	89 c3                	mov    %eax,%ebx
 8052653:	c7 04 24 c0 09 06 08 	movl   $0x80609c0,(%esp)
 805265a:	e8 15 77 00 00       	call   8059d74 <chdir>
 805265f:	f7 d0                	not    %eax
 8052661:	c1 e8 1f             	shr    $0x1f,%eax
 8052664:	0f b6 c0             	movzbl %al,%eax
 8052667:	89 74 24 18          	mov    %esi,0x18(%esp)
 805266b:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805266f:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8052676:	08 
 8052677:	c7 44 24 0c e0 09 06 	movl   $0x80609e0,0xc(%esp)
 805267e:	08 
 805267f:	c7 44 24 08 b2 02 00 	movl   $0x2b2,0x8(%esp)
 8052686:	00 
 8052687:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805268e:	08 
 805268f:	89 04 24             	mov    %eax,(%esp)
 8052692:	e8 f9 be 00 00       	call   805e590 <_test_assert>

        /* No invalid combinations of O_RDONLY, O_WRONLY, and O_RDWR.  Since
         * O_RDONLY is stupidly defined as 0, the only invalid possible
         * combination is O_WRONLY|O_RDWR. */
        syscall_fail(open("file01", O_WRONLY | O_RDWR | O_CREAT, 0), EINVAL);
 8052697:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 805269e:	e8 86 bc 00 00       	call   805e329 <test_errstr>
 80526a3:	89 c3                	mov    %eax,%ebx
 80526a5:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 80526ac:	00 00 00 
 80526af:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80526b6:	00 
 80526b7:	c7 44 24 04 03 01 00 	movl   $0x103,0x4(%esp)
 80526be:	00 
 80526bf:	c7 04 24 81 01 06 08 	movl   $0x8060181,(%esp)
 80526c6:	e8 a1 72 00 00       	call   805996c <open>
 80526cb:	83 f8 ff             	cmp    $0xffffffff,%eax
 80526ce:	0f 94 c0             	sete   %al
 80526d1:	0f b6 c0             	movzbl %al,%eax
 80526d4:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 80526db:	00 
 80526dc:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80526e0:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 80526e7:	08 
 80526e8:	c7 44 24 0c f8 09 06 	movl   $0x80609f8,0xc(%esp)
 80526ef:	08 
 80526f0:	c7 44 24 08 b7 02 00 	movl   $0x2b7,0x8(%esp)
 80526f7:	00 
 80526f8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80526ff:	08 
 8052700:	89 04 24             	mov    %eax,(%esp)
 8052703:	e8 88 be 00 00       	call   805e590 <_test_assert>
 8052708:	85 c0                	test   %eax,%eax
 805270a:	0f 84 89 00 00 00    	je     8052799 <vfstest_open+0x1c8>
 8052710:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8052716:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805271b:	89 04 24             	mov    %eax,(%esp)
 805271e:	e8 06 bc 00 00       	call   805e329 <test_errstr>
 8052723:	89 c6                	mov    %eax,%esi
 8052725:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 805272c:	e8 f8 bb 00 00       	call   805e329 <test_errstr>
 8052731:	89 c3                	mov    %eax,%ebx
 8052733:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 805273a:	00 
 805273b:	c7 44 24 04 03 01 00 	movl   $0x103,0x4(%esp)
 8052742:	00 
 8052743:	c7 04 24 81 01 06 08 	movl   $0x8060181,(%esp)
 805274a:	e8 1d 72 00 00       	call   805996c <open>
 805274f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052754:	83 f8 16             	cmp    $0x16,%eax
 8052757:	0f 94 c0             	sete   %al
 805275a:	0f b6 c0             	movzbl %al,%eax
 805275d:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8052761:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8052765:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 805276c:	00 
 805276d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052771:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8052778:	08 
 8052779:	c7 44 24 0c 30 0a 06 	movl   $0x8060a30,0xc(%esp)
 8052780:	08 
 8052781:	c7 44 24 08 b7 02 00 	movl   $0x2b7,0x8(%esp)
 8052788:	00 
 8052789:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052790:	08 
 8052791:	89 04 24             	mov    %eax,(%esp)
 8052794:	e8 f7 bd 00 00       	call   805e590 <_test_assert>
        syscall_fail(open("file01", O_RDONLY | O_RDWR | O_WRONLY | O_CREAT, 0), EINVAL);
 8052799:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 80527a0:	e8 84 bb 00 00       	call   805e329 <test_errstr>
 80527a5:	89 c3                	mov    %eax,%ebx
 80527a7:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 80527ae:	00 00 00 
 80527b1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80527b8:	00 
 80527b9:	c7 44 24 04 03 01 00 	movl   $0x103,0x4(%esp)
 80527c0:	00 
 80527c1:	c7 04 24 81 01 06 08 	movl   $0x8060181,(%esp)
 80527c8:	e8 9f 71 00 00       	call   805996c <open>
 80527cd:	83 f8 ff             	cmp    $0xffffffff,%eax
 80527d0:	0f 94 c0             	sete   %al
 80527d3:	0f b6 c0             	movzbl %al,%eax
 80527d6:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 80527dd:	00 
 80527de:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80527e2:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 80527e9:	08 
 80527ea:	c7 44 24 0c 60 0a 06 	movl   $0x8060a60,0xc(%esp)
 80527f1:	08 
 80527f2:	c7 44 24 08 b8 02 00 	movl   $0x2b8,0x8(%esp)
 80527f9:	00 
 80527fa:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052801:	08 
 8052802:	89 04 24             	mov    %eax,(%esp)
 8052805:	e8 86 bd 00 00       	call   805e590 <_test_assert>
 805280a:	85 c0                	test   %eax,%eax
 805280c:	0f 84 89 00 00 00    	je     805289b <vfstest_open+0x2ca>
 8052812:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8052818:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805281d:	89 04 24             	mov    %eax,(%esp)
 8052820:	e8 04 bb 00 00       	call   805e329 <test_errstr>
 8052825:	89 c6                	mov    %eax,%esi
 8052827:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 805282e:	e8 f6 ba 00 00       	call   805e329 <test_errstr>
 8052833:	89 c3                	mov    %eax,%ebx
 8052835:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 805283c:	00 
 805283d:	c7 44 24 04 03 01 00 	movl   $0x103,0x4(%esp)
 8052844:	00 
 8052845:	c7 04 24 81 01 06 08 	movl   $0x8060181,(%esp)
 805284c:	e8 1b 71 00 00       	call   805996c <open>
 8052851:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052856:	83 f8 16             	cmp    $0x16,%eax
 8052859:	0f 94 c0             	sete   %al
 805285c:	0f b6 c0             	movzbl %al,%eax
 805285f:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8052863:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8052867:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 805286e:	00 
 805286f:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052873:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 805287a:	08 
 805287b:	c7 44 24 0c 9c 0a 06 	movl   $0x8060a9c,0xc(%esp)
 8052882:	08 
 8052883:	c7 44 24 08 b8 02 00 	movl   $0x2b8,0x8(%esp)
 805288a:	00 
 805288b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052892:	08 
 8052893:	89 04 24             	mov    %eax,(%esp)
 8052896:	e8 f5 bc 00 00       	call   805e590 <_test_assert>

        /* Cannot open nonexistent file without O_CREAT */
        syscall_fail(open("file02", O_WRONLY, 0), ENOENT);
 805289b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 80528a2:	e8 82 ba 00 00       	call   805e329 <test_errstr>
 80528a7:	89 c3                	mov    %eax,%ebx
 80528a9:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 80528b0:	00 00 00 
 80528b3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80528ba:	00 
 80528bb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 80528c2:	00 
 80528c3:	c7 04 24 dd 03 06 08 	movl   $0x80603dd,(%esp)
 80528ca:	e8 9d 70 00 00       	call   805996c <open>
 80528cf:	83 f8 ff             	cmp    $0xffffffff,%eax
 80528d2:	0f 94 c0             	sete   %al
 80528d5:	0f b6 c0             	movzbl %al,%eax
 80528d8:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 80528df:	00 
 80528e0:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80528e4:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 80528eb:	08 
 80528ec:	c7 44 24 0c d0 0a 06 	movl   $0x8060ad0,0xc(%esp)
 80528f3:	08 
 80528f4:	c7 44 24 08 bb 02 00 	movl   $0x2bb,0x8(%esp)
 80528fb:	00 
 80528fc:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052903:	08 
 8052904:	89 04 24             	mov    %eax,(%esp)
 8052907:	e8 84 bc 00 00       	call   805e590 <_test_assert>
 805290c:	85 c0                	test   %eax,%eax
 805290e:	0f 84 89 00 00 00    	je     805299d <vfstest_open+0x3cc>
 8052914:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 805291a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805291f:	89 04 24             	mov    %eax,(%esp)
 8052922:	e8 02 ba 00 00       	call   805e329 <test_errstr>
 8052927:	89 c6                	mov    %eax,%esi
 8052929:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 8052930:	e8 f4 b9 00 00       	call   805e329 <test_errstr>
 8052935:	89 c3                	mov    %eax,%ebx
 8052937:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 805293e:	00 
 805293f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 8052946:	00 
 8052947:	c7 04 24 dd 03 06 08 	movl   $0x80603dd,(%esp)
 805294e:	e8 19 70 00 00       	call   805996c <open>
 8052953:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052958:	83 f8 02             	cmp    $0x2,%eax
 805295b:	0f 94 c0             	sete   %al
 805295e:	0f b6 c0             	movzbl %al,%eax
 8052961:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8052965:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8052969:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 8052970:	00 
 8052971:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052975:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 805297c:	08 
 805297d:	c7 44 24 0c fc 0a 06 	movl   $0x8060afc,0xc(%esp)
 8052984:	08 
 8052985:	c7 44 24 08 bb 02 00 	movl   $0x2bb,0x8(%esp)
 805298c:	00 
 805298d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052994:	08 
 8052995:	89 04 24             	mov    %eax,(%esp)
 8052998:	e8 f3 bb 00 00       	call   805e590 <_test_assert>
        syscall_success(fd = open("file02", O_RDONLY | O_CREAT, 0));
 805299d:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80529a3:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80529a8:	89 04 24             	mov    %eax,(%esp)
 80529ab:	e8 79 b9 00 00       	call   805e329 <test_errstr>
 80529b0:	89 c3                	mov    %eax,%ebx
 80529b2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80529b9:	00 
 80529ba:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 80529c1:	00 
 80529c2:	c7 04 24 dd 03 06 08 	movl   $0x80603dd,(%esp)
 80529c9:	e8 9e 6f 00 00       	call   805996c <open>
 80529ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 80529d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80529d4:	f7 d0                	not    %eax
 80529d6:	c1 e8 1f             	shr    $0x1f,%eax
 80529d9:	0f b6 c0             	movzbl %al,%eax
 80529dc:	89 74 24 18          	mov    %esi,0x18(%esp)
 80529e0:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80529e4:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80529eb:	08 
 80529ec:	c7 44 24 0c 20 0b 06 	movl   $0x8060b20,0xc(%esp)
 80529f3:	08 
 80529f4:	c7 44 24 08 bc 02 00 	movl   $0x2bc,0x8(%esp)
 80529fb:	00 
 80529fc:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052a03:	08 
 8052a04:	89 04 24             	mov    %eax,(%esp)
 8052a07:	e8 84 bb 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 8052a0c:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8052a12:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052a17:	89 04 24             	mov    %eax,(%esp)
 8052a1a:	e8 0a b9 00 00       	call   805e329 <test_errstr>
 8052a1f:	89 c3                	mov    %eax,%ebx
 8052a21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8052a24:	89 04 24             	mov    %eax,(%esp)
 8052a27:	e8 97 70 00 00       	call   8059ac3 <close>
 8052a2c:	f7 d0                	not    %eax
 8052a2e:	c1 e8 1f             	shr    $0x1f,%eax
 8052a31:	0f b6 c0             	movzbl %al,%eax
 8052a34:	89 74 24 18          	mov    %esi,0x18(%esp)
 8052a38:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052a3c:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8052a43:	08 
 8052a44:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 8052a4b:	08 
 8052a4c:	c7 44 24 08 bd 02 00 	movl   $0x2bd,0x8(%esp)
 8052a53:	00 
 8052a54:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052a5b:	08 
 8052a5c:	89 04 24             	mov    %eax,(%esp)
 8052a5f:	e8 2c bb 00 00       	call   805e590 <_test_assert>
        syscall_success(unlink("file02"));
 8052a64:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8052a6a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052a6f:	89 04 24             	mov    %eax,(%esp)
 8052a72:	e8 b2 b8 00 00       	call   805e329 <test_errstr>
 8052a77:	89 c3                	mov    %eax,%ebx
 8052a79:	c7 04 24 dd 03 06 08 	movl   $0x80603dd,(%esp)
 8052a80:	e8 bf 71 00 00       	call   8059c44 <unlink>
 8052a85:	f7 d0                	not    %eax
 8052a87:	c1 e8 1f             	shr    $0x1f,%eax
 8052a8a:	0f b6 c0             	movzbl %al,%eax
 8052a8d:	89 74 24 18          	mov    %esi,0x18(%esp)
 8052a91:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052a95:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8052a9c:	08 
 8052a9d:	c7 44 24 0c 49 0b 06 	movl   $0x8060b49,0xc(%esp)
 8052aa4:	08 
 8052aa5:	c7 44 24 08 be 02 00 	movl   $0x2be,0x8(%esp)
 8052aac:	00 
 8052aad:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052ab4:	08 
 8052ab5:	89 04 24             	mov    %eax,(%esp)
 8052ab8:	e8 d3 ba 00 00       	call   805e590 <_test_assert>
        syscall_fail(stat("file02", &s), ENOENT);
 8052abd:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 8052ac4:	e8 60 b8 00 00       	call   805e329 <test_errstr>
 8052ac9:	89 c3                	mov    %eax,%ebx
 8052acb:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8052ad2:	00 00 00 
 8052ad5:	8d 45 98             	lea    -0x68(%ebp),%eax
 8052ad8:	89 44 24 04          	mov    %eax,0x4(%esp)
 8052adc:	c7 04 24 dd 03 06 08 	movl   $0x80603dd,(%esp)
 8052ae3:	e8 d3 75 00 00       	call   805a0bb <stat>
 8052ae8:	83 f8 ff             	cmp    $0xffffffff,%eax
 8052aeb:	0f 94 c0             	sete   %al
 8052aee:	0f b6 c0             	movzbl %al,%eax
 8052af1:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 8052af8:	00 
 8052af9:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052afd:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8052b04:	08 
 8052b05:	c7 44 24 0c 64 0b 06 	movl   $0x8060b64,0xc(%esp)
 8052b0c:	08 
 8052b0d:	c7 44 24 08 bf 02 00 	movl   $0x2bf,0x8(%esp)
 8052b14:	00 
 8052b15:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052b1c:	08 
 8052b1d:	89 04 24             	mov    %eax,(%esp)
 8052b20:	e8 6b ba 00 00       	call   805e590 <_test_assert>
 8052b25:	85 c0                	test   %eax,%eax
 8052b27:	0f 84 80 00 00 00    	je     8052bad <vfstest_open+0x5dc>
 8052b2d:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8052b33:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052b38:	89 04 24             	mov    %eax,(%esp)
 8052b3b:	e8 e9 b7 00 00       	call   805e329 <test_errstr>
 8052b40:	89 c6                	mov    %eax,%esi
 8052b42:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 8052b49:	e8 db b7 00 00       	call   805e329 <test_errstr>
 8052b4e:	89 c3                	mov    %eax,%ebx
 8052b50:	8d 45 98             	lea    -0x68(%ebp),%eax
 8052b53:	89 44 24 04          	mov    %eax,0x4(%esp)
 8052b57:	c7 04 24 dd 03 06 08 	movl   $0x80603dd,(%esp)
 8052b5e:	e8 58 75 00 00       	call   805a0bb <stat>
 8052b63:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052b68:	83 f8 02             	cmp    $0x2,%eax
 8052b6b:	0f 94 c0             	sete   %al
 8052b6e:	0f b6 c0             	movzbl %al,%eax
 8052b71:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8052b75:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8052b79:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 8052b80:	00 
 8052b81:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052b85:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8052b8c:	08 
 8052b8d:	c7 44 24 0c 8c 0b 06 	movl   $0x8060b8c,0xc(%esp)
 8052b94:	08 
 8052b95:	c7 44 24 08 bf 02 00 	movl   $0x2bf,0x8(%esp)
 8052b9c:	00 
 8052b9d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052ba4:	08 
 8052ba5:	89 04 24             	mov    %eax,(%esp)
 8052ba8:	e8 e3 b9 00 00       	call   805e590 <_test_assert>

        /* Cannot create invalid files */
        create_file("tmpfile");
 8052bad:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8052bb3:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052bb8:	89 04 24             	mov    %eax,(%esp)
 8052bbb:	e8 69 b7 00 00       	call   805e329 <test_errstr>
 8052bc0:	89 c3                	mov    %eax,%ebx
 8052bc2:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 8052bc9:	00 
 8052bca:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 8052bd1:	00 
 8052bd2:	c7 04 24 ad 0b 06 08 	movl   $0x8060bad,(%esp)
 8052bd9:	e8 8e 6d 00 00       	call   805996c <open>
 8052bde:	89 45 e0             	mov    %eax,-0x20(%ebp)
 8052be1:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8052be4:	f7 d0                	not    %eax
 8052be6:	c1 e8 1f             	shr    $0x1f,%eax
 8052be9:	0f b6 c0             	movzbl %al,%eax
 8052bec:	89 74 24 18          	mov    %esi,0x18(%esp)
 8052bf0:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052bf4:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8052bfb:	08 
 8052bfc:	c7 44 24 0c b8 0b 06 	movl   $0x8060bb8,0xc(%esp)
 8052c03:	08 
 8052c04:	c7 44 24 08 c2 02 00 	movl   $0x2c2,0x8(%esp)
 8052c0b:	00 
 8052c0c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052c13:	08 
 8052c14:	89 04 24             	mov    %eax,(%esp)
 8052c17:	e8 74 b9 00 00       	call   805e590 <_test_assert>
 8052c1c:	85 c0                	test   %eax,%eax
 8052c1e:	74 58                	je     8052c78 <vfstest_open+0x6a7>
 8052c20:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8052c26:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052c2b:	89 04 24             	mov    %eax,(%esp)
 8052c2e:	e8 f6 b6 00 00       	call   805e329 <test_errstr>
 8052c33:	89 c3                	mov    %eax,%ebx
 8052c35:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8052c38:	89 04 24             	mov    %eax,(%esp)
 8052c3b:	e8 83 6e 00 00       	call   8059ac3 <close>
 8052c40:	f7 d0                	not    %eax
 8052c42:	c1 e8 1f             	shr    $0x1f,%eax
 8052c45:	0f b6 c0             	movzbl %al,%eax
 8052c48:	89 74 24 18          	mov    %esi,0x18(%esp)
 8052c4c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052c50:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8052c57:	08 
 8052c58:	c7 44 24 0c 78 ec 05 	movl   $0x805ec78,0xc(%esp)
 8052c5f:	08 
 8052c60:	c7 44 24 08 c2 02 00 	movl   $0x2c2,0x8(%esp)
 8052c67:	00 
 8052c68:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052c6f:	08 
 8052c70:	89 04 24             	mov    %eax,(%esp)
 8052c73:	e8 18 b9 00 00       	call   805e590 <_test_assert>
        syscall_fail(open("tmpfile/test", O_RDONLY | O_CREAT, 0), ENOTDIR);
 8052c78:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 8052c7f:	e8 a5 b6 00 00       	call   805e329 <test_errstr>
 8052c84:	89 c3                	mov    %eax,%ebx
 8052c86:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8052c8d:	00 00 00 
 8052c90:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8052c97:	00 
 8052c98:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 8052c9f:	00 
 8052ca0:	c7 04 24 e7 0b 06 08 	movl   $0x8060be7,(%esp)
 8052ca7:	e8 c0 6c 00 00       	call   805996c <open>
 8052cac:	83 f8 ff             	cmp    $0xffffffff,%eax
 8052caf:	0f 94 c0             	sete   %al
 8052cb2:	0f b6 c0             	movzbl %al,%eax
 8052cb5:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 8052cbc:	00 
 8052cbd:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052cc1:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8052cc8:	08 
 8052cc9:	c7 44 24 0c f4 0b 06 	movl   $0x8060bf4,0xc(%esp)
 8052cd0:	08 
 8052cd1:	c7 44 24 08 c3 02 00 	movl   $0x2c3,0x8(%esp)
 8052cd8:	00 
 8052cd9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052ce0:	08 
 8052ce1:	89 04 24             	mov    %eax,(%esp)
 8052ce4:	e8 a7 b8 00 00       	call   805e590 <_test_assert>
 8052ce9:	85 c0                	test   %eax,%eax
 8052ceb:	0f 84 89 00 00 00    	je     8052d7a <vfstest_open+0x7a9>
 8052cf1:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8052cf7:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052cfc:	89 04 24             	mov    %eax,(%esp)
 8052cff:	e8 25 b6 00 00       	call   805e329 <test_errstr>
 8052d04:	89 c6                	mov    %eax,%esi
 8052d06:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 8052d0d:	e8 17 b6 00 00       	call   805e329 <test_errstr>
 8052d12:	89 c3                	mov    %eax,%ebx
 8052d14:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8052d1b:	00 
 8052d1c:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 8052d23:	00 
 8052d24:	c7 04 24 e7 0b 06 08 	movl   $0x8060be7,(%esp)
 8052d2b:	e8 3c 6c 00 00       	call   805996c <open>
 8052d30:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052d35:	83 f8 14             	cmp    $0x14,%eax
 8052d38:	0f 94 c0             	sete   %al
 8052d3b:	0f b6 c0             	movzbl %al,%eax
 8052d3e:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8052d42:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8052d46:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 8052d4d:	00 
 8052d4e:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052d52:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8052d59:	08 
 8052d5a:	c7 44 24 0c 2c 0c 06 	movl   $0x8060c2c,0xc(%esp)
 8052d61:	08 
 8052d62:	c7 44 24 08 c3 02 00 	movl   $0x2c3,0x8(%esp)
 8052d69:	00 
 8052d6a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052d71:	08 
 8052d72:	89 04 24             	mov    %eax,(%esp)
 8052d75:	e8 16 b8 00 00       	call   805e590 <_test_assert>
        syscall_fail(open("noent/test", O_RDONLY | O_CREAT, 0), ENOENT);
 8052d7a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 8052d81:	e8 a3 b5 00 00       	call   805e329 <test_errstr>
 8052d86:	89 c3                	mov    %eax,%ebx
 8052d88:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8052d8f:	00 00 00 
 8052d92:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8052d99:	00 
 8052d9a:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 8052da1:	00 
 8052da2:	c7 04 24 5e 0c 06 08 	movl   $0x8060c5e,(%esp)
 8052da9:	e8 be 6b 00 00       	call   805996c <open>
 8052dae:	83 f8 ff             	cmp    $0xffffffff,%eax
 8052db1:	0f 94 c0             	sete   %al
 8052db4:	0f b6 c0             	movzbl %al,%eax
 8052db7:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 8052dbe:	00 
 8052dbf:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052dc3:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8052dca:	08 
 8052dcb:	c7 44 24 0c 6c 0c 06 	movl   $0x8060c6c,0xc(%esp)
 8052dd2:	08 
 8052dd3:	c7 44 24 08 c4 02 00 	movl   $0x2c4,0x8(%esp)
 8052dda:	00 
 8052ddb:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052de2:	08 
 8052de3:	89 04 24             	mov    %eax,(%esp)
 8052de6:	e8 a5 b7 00 00       	call   805e590 <_test_assert>
 8052deb:	85 c0                	test   %eax,%eax
 8052ded:	0f 84 89 00 00 00    	je     8052e7c <vfstest_open+0x8ab>
 8052df3:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8052df9:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052dfe:	89 04 24             	mov    %eax,(%esp)
 8052e01:	e8 23 b5 00 00       	call   805e329 <test_errstr>
 8052e06:	89 c6                	mov    %eax,%esi
 8052e08:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 8052e0f:	e8 15 b5 00 00       	call   805e329 <test_errstr>
 8052e14:	89 c3                	mov    %eax,%ebx
 8052e16:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8052e1d:	00 
 8052e1e:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 8052e25:	00 
 8052e26:	c7 04 24 5e 0c 06 08 	movl   $0x8060c5e,(%esp)
 8052e2d:	e8 3a 6b 00 00       	call   805996c <open>
 8052e32:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052e37:	83 f8 02             	cmp    $0x2,%eax
 8052e3a:	0f 94 c0             	sete   %al
 8052e3d:	0f b6 c0             	movzbl %al,%eax
 8052e40:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8052e44:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8052e48:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 8052e4f:	00 
 8052e50:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052e54:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8052e5b:	08 
 8052e5c:	c7 44 24 0c a4 0c 06 	movl   $0x8060ca4,0xc(%esp)
 8052e63:	08 
 8052e64:	c7 44 24 08 c4 02 00 	movl   $0x2c4,0x8(%esp)
 8052e6b:	00 
 8052e6c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052e73:	08 
 8052e74:	89 04 24             	mov    %eax,(%esp)
 8052e77:	e8 14 b7 00 00       	call   805e590 <_test_assert>
        syscall_fail(open(LONGNAME, O_RDONLY | O_CREAT, 0), ENAMETOOLONG);
 8052e7c:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
 8052e83:	e8 a1 b4 00 00       	call   805e329 <test_errstr>
 8052e88:	89 c3                	mov    %eax,%ebx
 8052e8a:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8052e91:	00 00 00 
 8052e94:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8052e9b:	00 
 8052e9c:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 8052ea3:	00 
 8052ea4:	c7 04 24 c0 ee 05 08 	movl   $0x805eec0,(%esp)
 8052eab:	e8 bc 6a 00 00       	call   805996c <open>
 8052eb0:	83 f8 ff             	cmp    $0xffffffff,%eax
 8052eb3:	0f 94 c0             	sete   %al
 8052eb6:	0f b6 c0             	movzbl %al,%eax
 8052eb9:	c7 44 24 18 24 00 00 	movl   $0x24,0x18(%esp)
 8052ec0:	00 
 8052ec1:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052ec5:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8052ecc:	08 
 8052ecd:	c7 44 24 0c d4 0c 06 	movl   $0x8060cd4,0xc(%esp)
 8052ed4:	08 
 8052ed5:	c7 44 24 08 c5 02 00 	movl   $0x2c5,0x8(%esp)
 8052edc:	00 
 8052edd:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052ee4:	08 
 8052ee5:	89 04 24             	mov    %eax,(%esp)
 8052ee8:	e8 a3 b6 00 00       	call   805e590 <_test_assert>
 8052eed:	85 c0                	test   %eax,%eax
 8052eef:	0f 84 89 00 00 00    	je     8052f7e <vfstest_open+0x9ad>
 8052ef5:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8052efb:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052f00:	89 04 24             	mov    %eax,(%esp)
 8052f03:	e8 21 b4 00 00       	call   805e329 <test_errstr>
 8052f08:	89 c6                	mov    %eax,%esi
 8052f0a:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
 8052f11:	e8 13 b4 00 00       	call   805e329 <test_errstr>
 8052f16:	89 c3                	mov    %eax,%ebx
 8052f18:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8052f1f:	00 
 8052f20:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 8052f27:	00 
 8052f28:	c7 04 24 c0 ee 05 08 	movl   $0x805eec0,(%esp)
 8052f2f:	e8 38 6a 00 00       	call   805996c <open>
 8052f34:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052f39:	83 f8 24             	cmp    $0x24,%eax
 8052f3c:	0f 94 c0             	sete   %al
 8052f3f:	0f b6 c0             	movzbl %al,%eax
 8052f42:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8052f46:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8052f4a:	c7 44 24 18 24 00 00 	movl   $0x24,0x18(%esp)
 8052f51:	00 
 8052f52:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052f56:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8052f5d:	08 
 8052f5e:	c7 44 24 0c 24 0d 06 	movl   $0x8060d24,0xc(%esp)
 8052f65:	08 
 8052f66:	c7 44 24 08 c5 02 00 	movl   $0x2c5,0x8(%esp)
 8052f6d:	00 
 8052f6e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052f75:	08 
 8052f76:	89 04 24             	mov    %eax,(%esp)
 8052f79:	e8 12 b6 00 00       	call   805e590 <_test_assert>

        /* Cannot write to readonly file */
        syscall_success(fd = open("file03", O_RDONLY | O_CREAT, 0));
 8052f7e:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8052f84:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8052f89:	89 04 24             	mov    %eax,(%esp)
 8052f8c:	e8 98 b3 00 00       	call   805e329 <test_errstr>
 8052f91:	89 c3                	mov    %eax,%ebx
 8052f93:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8052f9a:	00 
 8052f9b:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 8052fa2:	00 
 8052fa3:	c7 04 24 6c 0d 06 08 	movl   $0x8060d6c,(%esp)
 8052faa:	e8 bd 69 00 00       	call   805996c <open>
 8052faf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 8052fb2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8052fb5:	f7 d0                	not    %eax
 8052fb7:	c1 e8 1f             	shr    $0x1f,%eax
 8052fba:	0f b6 c0             	movzbl %al,%eax
 8052fbd:	89 74 24 18          	mov    %esi,0x18(%esp)
 8052fc1:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8052fc5:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8052fcc:	08 
 8052fcd:	c7 44 24 0c 74 0d 06 	movl   $0x8060d74,0xc(%esp)
 8052fd4:	08 
 8052fd5:	c7 44 24 08 c8 02 00 	movl   $0x2c8,0x8(%esp)
 8052fdc:	00 
 8052fdd:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8052fe4:	08 
 8052fe5:	89 04 24             	mov    %eax,(%esp)
 8052fe8:	e8 a3 b5 00 00       	call   805e590 <_test_assert>
        syscall_fail(write(fd, "hello", 5), EBADF);
 8052fed:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 8052ff4:	e8 30 b3 00 00       	call   805e329 <test_errstr>
 8052ff9:	89 c3                	mov    %eax,%ebx
 8052ffb:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8053002:	00 00 00 
 8053005:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 805300c:	00 
 805300d:	c7 44 24 04 0e 02 06 	movl   $0x806020e,0x4(%esp)
 8053014:	08 
 8053015:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8053018:	89 04 24             	mov    %eax,(%esp)
 805301b:	e8 52 6a 00 00       	call   8059a72 <write>
 8053020:	83 f8 ff             	cmp    $0xffffffff,%eax
 8053023:	0f 94 c0             	sete   %al
 8053026:	0f b6 c0             	movzbl %al,%eax
 8053029:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 8053030:	00 
 8053031:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053035:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 805303c:	08 
 805303d:	c7 44 24 0c a0 0d 06 	movl   $0x8060da0,0xc(%esp)
 8053044:	08 
 8053045:	c7 44 24 08 c9 02 00 	movl   $0x2c9,0x8(%esp)
 805304c:	00 
 805304d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053054:	08 
 8053055:	89 04 24             	mov    %eax,(%esp)
 8053058:	e8 33 b5 00 00       	call   805e590 <_test_assert>
 805305d:	85 c0                	test   %eax,%eax
 805305f:	0f 84 88 00 00 00    	je     80530ed <vfstest_open+0xb1c>
 8053065:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 805306b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053070:	89 04 24             	mov    %eax,(%esp)
 8053073:	e8 b1 b2 00 00       	call   805e329 <test_errstr>
 8053078:	89 c6                	mov    %eax,%esi
 805307a:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 8053081:	e8 a3 b2 00 00       	call   805e329 <test_errstr>
 8053086:	89 c3                	mov    %eax,%ebx
 8053088:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 805308f:	00 
 8053090:	c7 44 24 04 0e 02 06 	movl   $0x806020e,0x4(%esp)
 8053097:	08 
 8053098:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805309b:	89 04 24             	mov    %eax,(%esp)
 805309e:	e8 cf 69 00 00       	call   8059a72 <write>
 80530a3:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80530a8:	83 f8 09             	cmp    $0x9,%eax
 80530ab:	0f 94 c0             	sete   %al
 80530ae:	0f b6 c0             	movzbl %al,%eax
 80530b1:	89 7c 24 20          	mov    %edi,0x20(%esp)
 80530b5:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 80530b9:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 80530c0:	00 
 80530c1:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80530c5:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 80530cc:	08 
 80530cd:	c7 44 24 0c cc 0d 06 	movl   $0x8060dcc,0xc(%esp)
 80530d4:	08 
 80530d5:	c7 44 24 08 c9 02 00 	movl   $0x2c9,0x8(%esp)
 80530dc:	00 
 80530dd:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80530e4:	08 
 80530e5:	89 04 24             	mov    %eax,(%esp)
 80530e8:	e8 a3 b4 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 80530ed:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80530f3:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80530f8:	89 04 24             	mov    %eax,(%esp)
 80530fb:	e8 29 b2 00 00       	call   805e329 <test_errstr>
 8053100:	89 c3                	mov    %eax,%ebx
 8053102:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8053105:	89 04 24             	mov    %eax,(%esp)
 8053108:	e8 b6 69 00 00       	call   8059ac3 <close>
 805310d:	f7 d0                	not    %eax
 805310f:	c1 e8 1f             	shr    $0x1f,%eax
 8053112:	0f b6 c0             	movzbl %al,%eax
 8053115:	89 74 24 18          	mov    %esi,0x18(%esp)
 8053119:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805311d:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8053124:	08 
 8053125:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 805312c:	08 
 805312d:	c7 44 24 08 ca 02 00 	movl   $0x2ca,0x8(%esp)
 8053134:	00 
 8053135:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805313c:	08 
 805313d:	89 04 24             	mov    %eax,(%esp)
 8053140:	e8 4b b4 00 00       	call   805e590 <_test_assert>

        /* Cannot read from writeonly file.  Note that we do not unlink() it
         * from above, so we do not need O_CREAT set. */
        syscall_success(fd = open("file03", O_WRONLY, 0));
 8053145:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805314b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053150:	89 04 24             	mov    %eax,(%esp)
 8053153:	e8 d1 b1 00 00       	call   805e329 <test_errstr>
 8053158:	89 c3                	mov    %eax,%ebx
 805315a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8053161:	00 
 8053162:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 8053169:	00 
 805316a:	c7 04 24 6c 0d 06 08 	movl   $0x8060d6c,(%esp)
 8053171:	e8 f6 67 00 00       	call   805996c <open>
 8053176:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 8053179:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805317c:	f7 d0                	not    %eax
 805317e:	c1 e8 1f             	shr    $0x1f,%eax
 8053181:	0f b6 c0             	movzbl %al,%eax
 8053184:	89 74 24 18          	mov    %esi,0x18(%esp)
 8053188:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805318c:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8053193:	08 
 8053194:	c7 44 24 0c f0 0d 06 	movl   $0x8060df0,0xc(%esp)
 805319b:	08 
 805319c:	c7 44 24 08 ce 02 00 	movl   $0x2ce,0x8(%esp)
 80531a3:	00 
 80531a4:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80531ab:	08 
 80531ac:	89 04 24             	mov    %eax,(%esp)
 80531af:	e8 dc b3 00 00       	call   805e590 <_test_assert>
        syscall_fail(read(fd, buf, OPEN_BUFSIZE), EBADF);
 80531b4:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 80531bb:	e8 69 b1 00 00       	call   805e329 <test_errstr>
 80531c0:	89 c3                	mov    %eax,%ebx
 80531c2:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 80531c9:	00 00 00 
 80531cc:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 80531d3:	00 
 80531d4:	8d 45 cf             	lea    -0x31(%ebp),%eax
 80531d7:	89 44 24 04          	mov    %eax,0x4(%esp)
 80531db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80531de:	89 04 24             	mov    %eax,(%esp)
 80531e1:	e8 3b 68 00 00       	call   8059a21 <read>
 80531e6:	83 f8 ff             	cmp    $0xffffffff,%eax
 80531e9:	0f 94 c0             	sete   %al
 80531ec:	0f b6 c0             	movzbl %al,%eax
 80531ef:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 80531f6:	00 
 80531f7:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80531fb:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8053202:	08 
 8053203:	c7 44 24 0c 14 0e 06 	movl   $0x8060e14,0xc(%esp)
 805320a:	08 
 805320b:	c7 44 24 08 cf 02 00 	movl   $0x2cf,0x8(%esp)
 8053212:	00 
 8053213:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805321a:	08 
 805321b:	89 04 24             	mov    %eax,(%esp)
 805321e:	e8 6d b3 00 00       	call   805e590 <_test_assert>
 8053223:	85 c0                	test   %eax,%eax
 8053225:	0f 84 87 00 00 00    	je     80532b2 <vfstest_open+0xce1>
 805322b:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8053231:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053236:	89 04 24             	mov    %eax,(%esp)
 8053239:	e8 eb b0 00 00       	call   805e329 <test_errstr>
 805323e:	89 c6                	mov    %eax,%esi
 8053240:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 8053247:	e8 dd b0 00 00       	call   805e329 <test_errstr>
 805324c:	89 c3                	mov    %eax,%ebx
 805324e:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 8053255:	00 
 8053256:	8d 45 cf             	lea    -0x31(%ebp),%eax
 8053259:	89 44 24 04          	mov    %eax,0x4(%esp)
 805325d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8053260:	89 04 24             	mov    %eax,(%esp)
 8053263:	e8 b9 67 00 00       	call   8059a21 <read>
 8053268:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805326d:	83 f8 09             	cmp    $0x9,%eax
 8053270:	0f 94 c0             	sete   %al
 8053273:	0f b6 c0             	movzbl %al,%eax
 8053276:	89 7c 24 20          	mov    %edi,0x20(%esp)
 805327a:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 805327e:	c7 44 24 18 09 00 00 	movl   $0x9,0x18(%esp)
 8053285:	00 
 8053286:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805328a:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8053291:	08 
 8053292:	c7 44 24 0c 3c 0e 06 	movl   $0x8060e3c,0xc(%esp)
 8053299:	08 
 805329a:	c7 44 24 08 cf 02 00 	movl   $0x2cf,0x8(%esp)
 80532a1:	00 
 80532a2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80532a9:	08 
 80532aa:	89 04 24             	mov    %eax,(%esp)
 80532ad:	e8 de b2 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 80532b2:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80532b8:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80532bd:	89 04 24             	mov    %eax,(%esp)
 80532c0:	e8 64 b0 00 00       	call   805e329 <test_errstr>
 80532c5:	89 c3                	mov    %eax,%ebx
 80532c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80532ca:	89 04 24             	mov    %eax,(%esp)
 80532cd:	e8 f1 67 00 00       	call   8059ac3 <close>
 80532d2:	f7 d0                	not    %eax
 80532d4:	c1 e8 1f             	shr    $0x1f,%eax
 80532d7:	0f b6 c0             	movzbl %al,%eax
 80532da:	89 74 24 18          	mov    %esi,0x18(%esp)
 80532de:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80532e2:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80532e9:	08 
 80532ea:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 80532f1:	08 
 80532f2:	c7 44 24 08 d0 02 00 	movl   $0x2d0,0x8(%esp)
 80532f9:	00 
 80532fa:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053301:	08 
 8053302:	89 04 24             	mov    %eax,(%esp)
 8053305:	e8 86 b2 00 00       	call   805e590 <_test_assert>
        syscall_success(unlink("file03"));
 805330a:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8053310:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053315:	89 04 24             	mov    %eax,(%esp)
 8053318:	e8 0c b0 00 00       	call   805e329 <test_errstr>
 805331d:	89 c3                	mov    %eax,%ebx
 805331f:	c7 04 24 6c 0d 06 08 	movl   $0x8060d6c,(%esp)
 8053326:	e8 19 69 00 00       	call   8059c44 <unlink>
 805332b:	f7 d0                	not    %eax
 805332d:	c1 e8 1f             	shr    $0x1f,%eax
 8053330:	0f b6 c0             	movzbl %al,%eax
 8053333:	89 74 24 18          	mov    %esi,0x18(%esp)
 8053337:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805333b:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8053342:	08 
 8053343:	c7 44 24 0c 5b 0e 06 	movl   $0x8060e5b,0xc(%esp)
 805334a:	08 
 805334b:	c7 44 24 08 d1 02 00 	movl   $0x2d1,0x8(%esp)
 8053352:	00 
 8053353:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805335a:	08 
 805335b:	89 04 24             	mov    %eax,(%esp)
 805335e:	e8 2d b2 00 00       	call   805e590 <_test_assert>
        syscall_fail(stat("file03", &s), ENOENT);
 8053363:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 805336a:	e8 ba af 00 00       	call   805e329 <test_errstr>
 805336f:	89 c3                	mov    %eax,%ebx
 8053371:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8053378:	00 00 00 
 805337b:	8d 45 98             	lea    -0x68(%ebp),%eax
 805337e:	89 44 24 04          	mov    %eax,0x4(%esp)
 8053382:	c7 04 24 6c 0d 06 08 	movl   $0x8060d6c,(%esp)
 8053389:	e8 2d 6d 00 00       	call   805a0bb <stat>
 805338e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8053391:	0f 94 c0             	sete   %al
 8053394:	0f b6 c0             	movzbl %al,%eax
 8053397:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 805339e:	00 
 805339f:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80533a3:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 80533aa:	08 
 80533ab:	c7 44 24 0c 74 0e 06 	movl   $0x8060e74,0xc(%esp)
 80533b2:	08 
 80533b3:	c7 44 24 08 d2 02 00 	movl   $0x2d2,0x8(%esp)
 80533ba:	00 
 80533bb:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80533c2:	08 
 80533c3:	89 04 24             	mov    %eax,(%esp)
 80533c6:	e8 c5 b1 00 00       	call   805e590 <_test_assert>
 80533cb:	85 c0                	test   %eax,%eax
 80533cd:	0f 84 80 00 00 00    	je     8053453 <vfstest_open+0xe82>
 80533d3:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 80533d9:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80533de:	89 04 24             	mov    %eax,(%esp)
 80533e1:	e8 43 af 00 00       	call   805e329 <test_errstr>
 80533e6:	89 c6                	mov    %eax,%esi
 80533e8:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 80533ef:	e8 35 af 00 00       	call   805e329 <test_errstr>
 80533f4:	89 c3                	mov    %eax,%ebx
 80533f6:	8d 45 98             	lea    -0x68(%ebp),%eax
 80533f9:	89 44 24 04          	mov    %eax,0x4(%esp)
 80533fd:	c7 04 24 6c 0d 06 08 	movl   $0x8060d6c,(%esp)
 8053404:	e8 b2 6c 00 00       	call   805a0bb <stat>
 8053409:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805340e:	83 f8 02             	cmp    $0x2,%eax
 8053411:	0f 94 c0             	sete   %al
 8053414:	0f b6 c0             	movzbl %al,%eax
 8053417:	89 7c 24 20          	mov    %edi,0x20(%esp)
 805341b:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 805341f:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 8053426:	00 
 8053427:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805342b:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8053432:	08 
 8053433:	c7 44 24 0c 9c 0e 06 	movl   $0x8060e9c,0xc(%esp)
 805343a:	08 
 805343b:	c7 44 24 08 d2 02 00 	movl   $0x2d2,0x8(%esp)
 8053442:	00 
 8053443:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805344a:	08 
 805344b:	89 04 24             	mov    %eax,(%esp)
 805344e:	e8 3d b1 00 00       	call   805e590 <_test_assert>

        /* Lowest file descriptor is always selected. */
        syscall_success(fd = open("file04", O_RDONLY | O_CREAT, 0));
 8053453:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8053459:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805345e:	89 04 24             	mov    %eax,(%esp)
 8053461:	e8 c3 ae 00 00       	call   805e329 <test_errstr>
 8053466:	89 c3                	mov    %eax,%ebx
 8053468:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 805346f:	00 
 8053470:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 8053477:	00 
 8053478:	c7 04 24 bd 0e 06 08 	movl   $0x8060ebd,(%esp)
 805347f:	e8 e8 64 00 00       	call   805996c <open>
 8053484:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 8053487:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805348a:	f7 d0                	not    %eax
 805348c:	c1 e8 1f             	shr    $0x1f,%eax
 805348f:	0f b6 c0             	movzbl %al,%eax
 8053492:	89 74 24 18          	mov    %esi,0x18(%esp)
 8053496:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805349a:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80534a1:	08 
 80534a2:	c7 44 24 0c c4 0e 06 	movl   $0x8060ec4,0xc(%esp)
 80534a9:	08 
 80534aa:	c7 44 24 08 d5 02 00 	movl   $0x2d5,0x8(%esp)
 80534b1:	00 
 80534b2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80534b9:	08 
 80534ba:	89 04 24             	mov    %eax,(%esp)
 80534bd:	e8 ce b0 00 00       	call   805e590 <_test_assert>
        syscall_success(fd2 = open("file04", O_RDONLY, 0));
 80534c2:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80534c8:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80534cd:	89 04 24             	mov    %eax,(%esp)
 80534d0:	e8 54 ae 00 00       	call   805e329 <test_errstr>
 80534d5:	89 c3                	mov    %eax,%ebx
 80534d7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80534de:	00 
 80534df:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80534e6:	00 
 80534e7:	c7 04 24 bd 0e 06 08 	movl   $0x8060ebd,(%esp)
 80534ee:	e8 79 64 00 00       	call   805996c <open>
 80534f3:	89 45 dc             	mov    %eax,-0x24(%ebp)
 80534f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
 80534f9:	f7 d0                	not    %eax
 80534fb:	c1 e8 1f             	shr    $0x1f,%eax
 80534fe:	0f b6 c0             	movzbl %al,%eax
 8053501:	89 74 24 18          	mov    %esi,0x18(%esp)
 8053505:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053509:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8053510:	08 
 8053511:	c7 44 24 0c f0 0e 06 	movl   $0x8060ef0,0xc(%esp)
 8053518:	08 
 8053519:	c7 44 24 08 d6 02 00 	movl   $0x2d6,0x8(%esp)
 8053520:	00 
 8053521:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053528:	08 
 8053529:	89 04 24             	mov    %eax,(%esp)
 805352c:	e8 5f b0 00 00       	call   805e590 <_test_assert>
        test_assert(fd2 > fd, "open() did not return lowest fd");
 8053531:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8053534:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
 8053537:	0f 9f c0             	setg   %al
 805353a:	0f b6 c0             	movzbl %al,%eax
 805353d:	c7 44 24 10 14 0f 06 	movl   $0x8060f14,0x10(%esp)
 8053544:	08 
 8053545:	c7 44 24 0c 34 0f 06 	movl   $0x8060f34,0xc(%esp)
 805354c:	08 
 805354d:	c7 44 24 08 d7 02 00 	movl   $0x2d7,0x8(%esp)
 8053554:	00 
 8053555:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805355c:	08 
 805355d:	89 04 24             	mov    %eax,(%esp)
 8053560:	e8 2b b0 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 8053565:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805356b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053570:	89 04 24             	mov    %eax,(%esp)
 8053573:	e8 b1 ad 00 00       	call   805e329 <test_errstr>
 8053578:	89 c3                	mov    %eax,%ebx
 805357a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805357d:	89 04 24             	mov    %eax,(%esp)
 8053580:	e8 3e 65 00 00       	call   8059ac3 <close>
 8053585:	f7 d0                	not    %eax
 8053587:	c1 e8 1f             	shr    $0x1f,%eax
 805358a:	0f b6 c0             	movzbl %al,%eax
 805358d:	89 74 24 18          	mov    %esi,0x18(%esp)
 8053591:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053595:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805359c:	08 
 805359d:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 80535a4:	08 
 80535a5:	c7 44 24 08 d8 02 00 	movl   $0x2d8,0x8(%esp)
 80535ac:	00 
 80535ad:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80535b4:	08 
 80535b5:	89 04 24             	mov    %eax,(%esp)
 80535b8:	e8 d3 af 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd2));
 80535bd:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80535c3:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80535c8:	89 04 24             	mov    %eax,(%esp)
 80535cb:	e8 59 ad 00 00       	call   805e329 <test_errstr>
 80535d0:	89 c3                	mov    %eax,%ebx
 80535d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
 80535d5:	89 04 24             	mov    %eax,(%esp)
 80535d8:	e8 e6 64 00 00       	call   8059ac3 <close>
 80535dd:	f7 d0                	not    %eax
 80535df:	c1 e8 1f             	shr    $0x1f,%eax
 80535e2:	0f b6 c0             	movzbl %al,%eax
 80535e5:	89 74 24 18          	mov    %esi,0x18(%esp)
 80535e9:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80535ed:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80535f4:	08 
 80535f5:	c7 44 24 0c 4d 03 06 	movl   $0x806034d,0xc(%esp)
 80535fc:	08 
 80535fd:	c7 44 24 08 d9 02 00 	movl   $0x2d9,0x8(%esp)
 8053604:	00 
 8053605:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805360c:	08 
 805360d:	89 04 24             	mov    %eax,(%esp)
 8053610:	e8 7b af 00 00       	call   805e590 <_test_assert>
        syscall_success(fd2 = open("file04", O_WRONLY, 0));
 8053615:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805361b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053620:	89 04 24             	mov    %eax,(%esp)
 8053623:	e8 01 ad 00 00       	call   805e329 <test_errstr>
 8053628:	89 c3                	mov    %eax,%ebx
 805362a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8053631:	00 
 8053632:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 8053639:	00 
 805363a:	c7 04 24 bd 0e 06 08 	movl   $0x8060ebd,(%esp)
 8053641:	e8 26 63 00 00       	call   805996c <open>
 8053646:	89 45 dc             	mov    %eax,-0x24(%ebp)
 8053649:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805364c:	f7 d0                	not    %eax
 805364e:	c1 e8 1f             	shr    $0x1f,%eax
 8053651:	0f b6 c0             	movzbl %al,%eax
 8053654:	89 74 24 18          	mov    %esi,0x18(%esp)
 8053658:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805365c:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8053663:	08 
 8053664:	c7 44 24 0c 40 0f 06 	movl   $0x8060f40,0xc(%esp)
 805366b:	08 
 805366c:	c7 44 24 08 da 02 00 	movl   $0x2da,0x8(%esp)
 8053673:	00 
 8053674:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805367b:	08 
 805367c:	89 04 24             	mov    %eax,(%esp)
 805367f:	e8 0c af 00 00       	call   805e590 <_test_assert>
        test_assert(fd2 == fd, "open() did not return correct fd");
 8053684:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8053687:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
 805368a:	0f 94 c0             	sete   %al
 805368d:	0f b6 c0             	movzbl %al,%eax
 8053690:	c7 44 24 10 64 0f 06 	movl   $0x8060f64,0x10(%esp)
 8053697:	08 
 8053698:	c7 44 24 0c 85 0f 06 	movl   $0x8060f85,0xc(%esp)
 805369f:	08 
 80536a0:	c7 44 24 08 db 02 00 	movl   $0x2db,0x8(%esp)
 80536a7:	00 
 80536a8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80536af:	08 
 80536b0:	89 04 24             	mov    %eax,(%esp)
 80536b3:	e8 d8 ae 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd2));
 80536b8:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80536be:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80536c3:	89 04 24             	mov    %eax,(%esp)
 80536c6:	e8 5e ac 00 00       	call   805e329 <test_errstr>
 80536cb:	89 c3                	mov    %eax,%ebx
 80536cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
 80536d0:	89 04 24             	mov    %eax,(%esp)
 80536d3:	e8 eb 63 00 00       	call   8059ac3 <close>
 80536d8:	f7 d0                	not    %eax
 80536da:	c1 e8 1f             	shr    $0x1f,%eax
 80536dd:	0f b6 c0             	movzbl %al,%eax
 80536e0:	89 74 24 18          	mov    %esi,0x18(%esp)
 80536e4:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80536e8:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80536ef:	08 
 80536f0:	c7 44 24 0c 4d 03 06 	movl   $0x806034d,0xc(%esp)
 80536f7:	08 
 80536f8:	c7 44 24 08 dc 02 00 	movl   $0x2dc,0x8(%esp)
 80536ff:	00 
 8053700:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053707:	08 
 8053708:	89 04 24             	mov    %eax,(%esp)
 805370b:	e8 80 ae 00 00       	call   805e590 <_test_assert>
        syscall_success(unlink("file04"));
 8053710:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8053716:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805371b:	89 04 24             	mov    %eax,(%esp)
 805371e:	e8 06 ac 00 00       	call   805e329 <test_errstr>
 8053723:	89 c3                	mov    %eax,%ebx
 8053725:	c7 04 24 bd 0e 06 08 	movl   $0x8060ebd,(%esp)
 805372c:	e8 13 65 00 00       	call   8059c44 <unlink>
 8053731:	f7 d0                	not    %eax
 8053733:	c1 e8 1f             	shr    $0x1f,%eax
 8053736:	0f b6 c0             	movzbl %al,%eax
 8053739:	89 74 24 18          	mov    %esi,0x18(%esp)
 805373d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053741:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8053748:	08 
 8053749:	c7 44 24 0c 8f 0f 06 	movl   $0x8060f8f,0xc(%esp)
 8053750:	08 
 8053751:	c7 44 24 08 dd 02 00 	movl   $0x2dd,0x8(%esp)
 8053758:	00 
 8053759:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053760:	08 
 8053761:	89 04 24             	mov    %eax,(%esp)
 8053764:	e8 27 ae 00 00       	call   805e590 <_test_assert>
        syscall_fail(stat("file04", &s), ENOENT);
 8053769:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 8053770:	e8 b4 ab 00 00       	call   805e329 <test_errstr>
 8053775:	89 c3                	mov    %eax,%ebx
 8053777:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 805377e:	00 00 00 
 8053781:	8d 45 98             	lea    -0x68(%ebp),%eax
 8053784:	89 44 24 04          	mov    %eax,0x4(%esp)
 8053788:	c7 04 24 bd 0e 06 08 	movl   $0x8060ebd,(%esp)
 805378f:	e8 27 69 00 00       	call   805a0bb <stat>
 8053794:	83 f8 ff             	cmp    $0xffffffff,%eax
 8053797:	0f 94 c0             	sete   %al
 805379a:	0f b6 c0             	movzbl %al,%eax
 805379d:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 80537a4:	00 
 80537a5:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80537a9:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 80537b0:	08 
 80537b1:	c7 44 24 0c a8 0f 06 	movl   $0x8060fa8,0xc(%esp)
 80537b8:	08 
 80537b9:	c7 44 24 08 de 02 00 	movl   $0x2de,0x8(%esp)
 80537c0:	00 
 80537c1:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80537c8:	08 
 80537c9:	89 04 24             	mov    %eax,(%esp)
 80537cc:	e8 bf ad 00 00       	call   805e590 <_test_assert>
 80537d1:	85 c0                	test   %eax,%eax
 80537d3:	0f 84 80 00 00 00    	je     8053859 <vfstest_open+0x1288>
 80537d9:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 80537df:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80537e4:	89 04 24             	mov    %eax,(%esp)
 80537e7:	e8 3d ab 00 00       	call   805e329 <test_errstr>
 80537ec:	89 c6                	mov    %eax,%esi
 80537ee:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 80537f5:	e8 2f ab 00 00       	call   805e329 <test_errstr>
 80537fa:	89 c3                	mov    %eax,%ebx
 80537fc:	8d 45 98             	lea    -0x68(%ebp),%eax
 80537ff:	89 44 24 04          	mov    %eax,0x4(%esp)
 8053803:	c7 04 24 bd 0e 06 08 	movl   $0x8060ebd,(%esp)
 805380a:	e8 ac 68 00 00       	call   805a0bb <stat>
 805380f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053814:	83 f8 02             	cmp    $0x2,%eax
 8053817:	0f 94 c0             	sete   %al
 805381a:	0f b6 c0             	movzbl %al,%eax
 805381d:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8053821:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8053825:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 805382c:	00 
 805382d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053831:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8053838:	08 
 8053839:	c7 44 24 0c d0 0f 06 	movl   $0x8060fd0,0xc(%esp)
 8053840:	08 
 8053841:	c7 44 24 08 de 02 00 	movl   $0x2de,0x8(%esp)
 8053848:	00 
 8053849:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053850:	08 
 8053851:	89 04 24             	mov    %eax,(%esp)
 8053854:	e8 37 ad 00 00       	call   805e590 <_test_assert>

        /* Cannot open a directory for writing */
        syscall_success(mkdir("file05", 0));
 8053859:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805385f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053864:	89 04 24             	mov    %eax,(%esp)
 8053867:	e8 bd aa 00 00       	call   805e329 <test_errstr>
 805386c:	89 c3                	mov    %eax,%ebx
 805386e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8053875:	00 
 8053876:	c7 04 24 f1 0f 06 08 	movl   $0x8060ff1,(%esp)
 805387d:	e8 0c 63 00 00       	call   8059b8e <mkdir>
 8053882:	f7 d0                	not    %eax
 8053884:	c1 e8 1f             	shr    $0x1f,%eax
 8053887:	0f b6 c0             	movzbl %al,%eax
 805388a:	89 74 24 18          	mov    %esi,0x18(%esp)
 805388e:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053892:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8053899:	08 
 805389a:	c7 44 24 0c f8 0f 06 	movl   $0x8060ff8,0xc(%esp)
 80538a1:	08 
 80538a2:	c7 44 24 08 e1 02 00 	movl   $0x2e1,0x8(%esp)
 80538a9:	00 
 80538aa:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80538b1:	08 
 80538b2:	89 04 24             	mov    %eax,(%esp)
 80538b5:	e8 d6 ac 00 00       	call   805e590 <_test_assert>
        syscall_fail(open("file05", O_WRONLY, 0), EISDIR);
 80538ba:	c7 04 24 15 00 00 00 	movl   $0x15,(%esp)
 80538c1:	e8 63 aa 00 00       	call   805e329 <test_errstr>
 80538c6:	89 c3                	mov    %eax,%ebx
 80538c8:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 80538cf:	00 00 00 
 80538d2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80538d9:	00 
 80538da:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 80538e1:	00 
 80538e2:	c7 04 24 f1 0f 06 08 	movl   $0x8060ff1,(%esp)
 80538e9:	e8 7e 60 00 00       	call   805996c <open>
 80538ee:	83 f8 ff             	cmp    $0xffffffff,%eax
 80538f1:	0f 94 c0             	sete   %al
 80538f4:	0f b6 c0             	movzbl %al,%eax
 80538f7:	c7 44 24 18 15 00 00 	movl   $0x15,0x18(%esp)
 80538fe:	00 
 80538ff:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053903:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 805390a:	08 
 805390b:	c7 44 24 0c 14 10 06 	movl   $0x8061014,0xc(%esp)
 8053912:	08 
 8053913:	c7 44 24 08 e2 02 00 	movl   $0x2e2,0x8(%esp)
 805391a:	00 
 805391b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053922:	08 
 8053923:	89 04 24             	mov    %eax,(%esp)
 8053926:	e8 65 ac 00 00       	call   805e590 <_test_assert>
 805392b:	85 c0                	test   %eax,%eax
 805392d:	0f 84 89 00 00 00    	je     80539bc <vfstest_open+0x13eb>
 8053933:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8053939:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805393e:	89 04 24             	mov    %eax,(%esp)
 8053941:	e8 e3 a9 00 00       	call   805e329 <test_errstr>
 8053946:	89 c6                	mov    %eax,%esi
 8053948:	c7 04 24 15 00 00 00 	movl   $0x15,(%esp)
 805394f:	e8 d5 a9 00 00       	call   805e329 <test_errstr>
 8053954:	89 c3                	mov    %eax,%ebx
 8053956:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 805395d:	00 
 805395e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 8053965:	00 
 8053966:	c7 04 24 f1 0f 06 08 	movl   $0x8060ff1,(%esp)
 805396d:	e8 fa 5f 00 00       	call   805996c <open>
 8053972:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053977:	83 f8 15             	cmp    $0x15,%eax
 805397a:	0f 94 c0             	sete   %al
 805397d:	0f b6 c0             	movzbl %al,%eax
 8053980:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8053984:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8053988:	c7 44 24 18 15 00 00 	movl   $0x15,0x18(%esp)
 805398f:	00 
 8053990:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053994:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 805399b:	08 
 805399c:	c7 44 24 0c 40 10 06 	movl   $0x8061040,0xc(%esp)
 80539a3:	08 
 80539a4:	c7 44 24 08 e2 02 00 	movl   $0x2e2,0x8(%esp)
 80539ab:	00 
 80539ac:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80539b3:	08 
 80539b4:	89 04 24             	mov    %eax,(%esp)
 80539b7:	e8 d4 ab 00 00       	call   805e590 <_test_assert>
        syscall_fail(open("file05", O_RDWR, 0), EISDIR);
 80539bc:	c7 04 24 15 00 00 00 	movl   $0x15,(%esp)
 80539c3:	e8 61 a9 00 00       	call   805e329 <test_errstr>
 80539c8:	89 c3                	mov    %eax,%ebx
 80539ca:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 80539d1:	00 00 00 
 80539d4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80539db:	00 
 80539dc:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 80539e3:	00 
 80539e4:	c7 04 24 f1 0f 06 08 	movl   $0x8060ff1,(%esp)
 80539eb:	e8 7c 5f 00 00       	call   805996c <open>
 80539f0:	83 f8 ff             	cmp    $0xffffffff,%eax
 80539f3:	0f 94 c0             	sete   %al
 80539f6:	0f b6 c0             	movzbl %al,%eax
 80539f9:	c7 44 24 18 15 00 00 	movl   $0x15,0x18(%esp)
 8053a00:	00 
 8053a01:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053a05:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8053a0c:	08 
 8053a0d:	c7 44 24 0c 64 10 06 	movl   $0x8061064,0xc(%esp)
 8053a14:	08 
 8053a15:	c7 44 24 08 e3 02 00 	movl   $0x2e3,0x8(%esp)
 8053a1c:	00 
 8053a1d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053a24:	08 
 8053a25:	89 04 24             	mov    %eax,(%esp)
 8053a28:	e8 63 ab 00 00       	call   805e590 <_test_assert>
 8053a2d:	85 c0                	test   %eax,%eax
 8053a2f:	0f 84 89 00 00 00    	je     8053abe <vfstest_open+0x14ed>
 8053a35:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8053a3b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053a40:	89 04 24             	mov    %eax,(%esp)
 8053a43:	e8 e1 a8 00 00       	call   805e329 <test_errstr>
 8053a48:	89 c6                	mov    %eax,%esi
 8053a4a:	c7 04 24 15 00 00 00 	movl   $0x15,(%esp)
 8053a51:	e8 d3 a8 00 00       	call   805e329 <test_errstr>
 8053a56:	89 c3                	mov    %eax,%ebx
 8053a58:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8053a5f:	00 
 8053a60:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 8053a67:	00 
 8053a68:	c7 04 24 f1 0f 06 08 	movl   $0x8060ff1,(%esp)
 8053a6f:	e8 f8 5e 00 00       	call   805996c <open>
 8053a74:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053a79:	83 f8 15             	cmp    $0x15,%eax
 8053a7c:	0f 94 c0             	sete   %al
 8053a7f:	0f b6 c0             	movzbl %al,%eax
 8053a82:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8053a86:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8053a8a:	c7 44 24 18 15 00 00 	movl   $0x15,0x18(%esp)
 8053a91:	00 
 8053a92:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053a96:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8053a9d:	08 
 8053a9e:	c7 44 24 0c 90 10 06 	movl   $0x8061090,0xc(%esp)
 8053aa5:	08 
 8053aa6:	c7 44 24 08 e3 02 00 	movl   $0x2e3,0x8(%esp)
 8053aad:	00 
 8053aae:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053ab5:	08 
 8053ab6:	89 04 24             	mov    %eax,(%esp)
 8053ab9:	e8 d2 aa 00 00       	call   805e590 <_test_assert>
        syscall_success(rmdir("file05"));
 8053abe:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8053ac4:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053ac9:	89 04 24             	mov    %eax,(%esp)
 8053acc:	e8 58 a8 00 00       	call   805e329 <test_errstr>
 8053ad1:	89 c3                	mov    %eax,%ebx
 8053ad3:	c7 04 24 f1 0f 06 08 	movl   $0x8060ff1,(%esp)
 8053ada:	e8 0d 61 00 00       	call   8059bec <rmdir>
 8053adf:	f7 d0                	not    %eax
 8053ae1:	c1 e8 1f             	shr    $0x1f,%eax
 8053ae4:	0f b6 c0             	movzbl %al,%eax
 8053ae7:	89 74 24 18          	mov    %esi,0x18(%esp)
 8053aeb:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053aef:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8053af6:	08 
 8053af7:	c7 44 24 0c b4 10 06 	movl   $0x80610b4,0xc(%esp)
 8053afe:	08 
 8053aff:	c7 44 24 08 e4 02 00 	movl   $0x2e4,0x8(%esp)
 8053b06:	00 
 8053b07:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053b0e:	08 
 8053b0f:	89 04 24             	mov    %eax,(%esp)
 8053b12:	e8 79 aa 00 00       	call   805e590 <_test_assert>

        /* Cannot unlink a directory */
        syscall_success(mkdir("file06", 0));
 8053b17:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8053b1d:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053b22:	89 04 24             	mov    %eax,(%esp)
 8053b25:	e8 ff a7 00 00       	call   805e329 <test_errstr>
 8053b2a:	89 c3                	mov    %eax,%ebx
 8053b2c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8053b33:	00 
 8053b34:	c7 04 24 cb 10 06 08 	movl   $0x80610cb,(%esp)
 8053b3b:	e8 4e 60 00 00       	call   8059b8e <mkdir>
 8053b40:	f7 d0                	not    %eax
 8053b42:	c1 e8 1f             	shr    $0x1f,%eax
 8053b45:	0f b6 c0             	movzbl %al,%eax
 8053b48:	89 74 24 18          	mov    %esi,0x18(%esp)
 8053b4c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053b50:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8053b57:	08 
 8053b58:	c7 44 24 0c d2 10 06 	movl   $0x80610d2,0xc(%esp)
 8053b5f:	08 
 8053b60:	c7 44 24 08 e7 02 00 	movl   $0x2e7,0x8(%esp)
 8053b67:	00 
 8053b68:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053b6f:	08 
 8053b70:	89 04 24             	mov    %eax,(%esp)
 8053b73:	e8 18 aa 00 00       	call   805e590 <_test_assert>
        syscall_fail(unlink("file06"), EPERM);
 8053b78:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 8053b7f:	e8 a5 a7 00 00       	call   805e329 <test_errstr>
 8053b84:	89 c3                	mov    %eax,%ebx
 8053b86:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8053b8d:	00 00 00 
 8053b90:	c7 04 24 cb 10 06 08 	movl   $0x80610cb,(%esp)
 8053b97:	e8 a8 60 00 00       	call   8059c44 <unlink>
 8053b9c:	83 f8 ff             	cmp    $0xffffffff,%eax
 8053b9f:	0f 94 c0             	sete   %al
 8053ba2:	0f b6 c0             	movzbl %al,%eax
 8053ba5:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 8053bac:	00 
 8053bad:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053bb1:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8053bb8:	08 
 8053bb9:	c7 44 24 0c ec 10 06 	movl   $0x80610ec,0xc(%esp)
 8053bc0:	08 
 8053bc1:	c7 44 24 08 e8 02 00 	movl   $0x2e8,0x8(%esp)
 8053bc8:	00 
 8053bc9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053bd0:	08 
 8053bd1:	89 04 24             	mov    %eax,(%esp)
 8053bd4:	e8 b7 a9 00 00       	call   805e590 <_test_assert>
 8053bd9:	85 c0                	test   %eax,%eax
 8053bdb:	74 79                	je     8053c56 <vfstest_open+0x1685>
 8053bdd:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8053be3:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053be8:	89 04 24             	mov    %eax,(%esp)
 8053beb:	e8 39 a7 00 00       	call   805e329 <test_errstr>
 8053bf0:	89 c6                	mov    %eax,%esi
 8053bf2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 8053bf9:	e8 2b a7 00 00       	call   805e329 <test_errstr>
 8053bfe:	89 c3                	mov    %eax,%ebx
 8053c00:	c7 04 24 cb 10 06 08 	movl   $0x80610cb,(%esp)
 8053c07:	e8 38 60 00 00       	call   8059c44 <unlink>
 8053c0c:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053c11:	83 f8 01             	cmp    $0x1,%eax
 8053c14:	0f 94 c0             	sete   %al
 8053c17:	0f b6 c0             	movzbl %al,%eax
 8053c1a:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8053c1e:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8053c22:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 8053c29:	00 
 8053c2a:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053c2e:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8053c35:	08 
 8053c36:	c7 44 24 0c 14 11 06 	movl   $0x8061114,0xc(%esp)
 8053c3d:	08 
 8053c3e:	c7 44 24 08 e8 02 00 	movl   $0x2e8,0x8(%esp)
 8053c45:	00 
 8053c46:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053c4d:	08 
 8053c4e:	89 04 24             	mov    %eax,(%esp)
 8053c51:	e8 3a a9 00 00       	call   805e590 <_test_assert>
        syscall_success(rmdir("file06"));
 8053c56:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8053c5c:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053c61:	89 04 24             	mov    %eax,(%esp)
 8053c64:	e8 c0 a6 00 00       	call   805e329 <test_errstr>
 8053c69:	89 c3                	mov    %eax,%ebx
 8053c6b:	c7 04 24 cb 10 06 08 	movl   $0x80610cb,(%esp)
 8053c72:	e8 75 5f 00 00       	call   8059bec <rmdir>
 8053c77:	f7 d0                	not    %eax
 8053c79:	c1 e8 1f             	shr    $0x1f,%eax
 8053c7c:	0f b6 c0             	movzbl %al,%eax
 8053c7f:	89 74 24 18          	mov    %esi,0x18(%esp)
 8053c83:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053c87:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8053c8e:	08 
 8053c8f:	c7 44 24 0c 33 11 06 	movl   $0x8061133,0xc(%esp)
 8053c96:	08 
 8053c97:	c7 44 24 08 e9 02 00 	movl   $0x2e9,0x8(%esp)
 8053c9e:	00 
 8053c9f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053ca6:	08 
 8053ca7:	89 04 24             	mov    %eax,(%esp)
 8053caa:	e8 e1 a8 00 00       	call   805e590 <_test_assert>

        /* Cannot unlink a non-existent file */
        syscall_fail(unlink("file07"), ENOENT);
 8053caf:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 8053cb6:	e8 6e a6 00 00       	call   805e329 <test_errstr>
 8053cbb:	89 c3                	mov    %eax,%ebx
 8053cbd:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8053cc4:	00 00 00 
 8053cc7:	c7 04 24 4a 11 06 08 	movl   $0x806114a,(%esp)
 8053cce:	e8 71 5f 00 00       	call   8059c44 <unlink>
 8053cd3:	83 f8 ff             	cmp    $0xffffffff,%eax
 8053cd6:	0f 94 c0             	sete   %al
 8053cd9:	0f b6 c0             	movzbl %al,%eax
 8053cdc:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 8053ce3:	00 
 8053ce4:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053ce8:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8053cef:	08 
 8053cf0:	c7 44 24 0c 54 11 06 	movl   $0x8061154,0xc(%esp)
 8053cf7:	08 
 8053cf8:	c7 44 24 08 ec 02 00 	movl   $0x2ec,0x8(%esp)
 8053cff:	00 
 8053d00:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053d07:	08 
 8053d08:	89 04 24             	mov    %eax,(%esp)
 8053d0b:	e8 80 a8 00 00       	call   805e590 <_test_assert>
 8053d10:	85 c0                	test   %eax,%eax
 8053d12:	74 79                	je     8053d8d <vfstest_open+0x17bc>
 8053d14:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8053d1a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053d1f:	89 04 24             	mov    %eax,(%esp)
 8053d22:	e8 02 a6 00 00       	call   805e329 <test_errstr>
 8053d27:	89 c6                	mov    %eax,%esi
 8053d29:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 8053d30:	e8 f4 a5 00 00       	call   805e329 <test_errstr>
 8053d35:	89 c3                	mov    %eax,%ebx
 8053d37:	c7 04 24 4a 11 06 08 	movl   $0x806114a,(%esp)
 8053d3e:	e8 01 5f 00 00       	call   8059c44 <unlink>
 8053d43:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053d48:	83 f8 02             	cmp    $0x2,%eax
 8053d4b:	0f 94 c0             	sete   %al
 8053d4e:	0f b6 c0             	movzbl %al,%eax
 8053d51:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8053d55:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8053d59:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 8053d60:	00 
 8053d61:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053d65:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8053d6c:	08 
 8053d6d:	c7 44 24 0c 7c 11 06 	movl   $0x806117c,0xc(%esp)
 8053d74:	08 
 8053d75:	c7 44 24 08 ec 02 00 	movl   $0x2ec,0x8(%esp)
 8053d7c:	00 
 8053d7d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053d84:	08 
 8053d85:	89 04 24             	mov    %eax,(%esp)
 8053d88:	e8 03 a8 00 00       	call   805e590 <_test_assert>

        /* Cannot open a file as a directory */
        create_file("file08");
 8053d8d:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8053d93:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053d98:	89 04 24             	mov    %eax,(%esp)
 8053d9b:	e8 89 a5 00 00       	call   805e329 <test_errstr>
 8053da0:	89 c3                	mov    %eax,%ebx
 8053da2:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 8053da9:	00 
 8053daa:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 8053db1:	00 
 8053db2:	c7 04 24 9b 11 06 08 	movl   $0x806119b,(%esp)
 8053db9:	e8 ae 5b 00 00       	call   805996c <open>
 8053dbe:	89 45 d8             	mov    %eax,-0x28(%ebp)
 8053dc1:	8b 45 d8             	mov    -0x28(%ebp),%eax
 8053dc4:	f7 d0                	not    %eax
 8053dc6:	c1 e8 1f             	shr    $0x1f,%eax
 8053dc9:	0f b6 c0             	movzbl %al,%eax
 8053dcc:	89 74 24 18          	mov    %esi,0x18(%esp)
 8053dd0:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053dd4:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8053ddb:	08 
 8053ddc:	c7 44 24 0c a4 11 06 	movl   $0x80611a4,0xc(%esp)
 8053de3:	08 
 8053de4:	c7 44 24 08 ef 02 00 	movl   $0x2ef,0x8(%esp)
 8053deb:	00 
 8053dec:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053df3:	08 
 8053df4:	89 04 24             	mov    %eax,(%esp)
 8053df7:	e8 94 a7 00 00       	call   805e590 <_test_assert>
 8053dfc:	85 c0                	test   %eax,%eax
 8053dfe:	74 58                	je     8053e58 <vfstest_open+0x1887>
 8053e00:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8053e06:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053e0b:	89 04 24             	mov    %eax,(%esp)
 8053e0e:	e8 16 a5 00 00       	call   805e329 <test_errstr>
 8053e13:	89 c3                	mov    %eax,%ebx
 8053e15:	8b 45 d8             	mov    -0x28(%ebp),%eax
 8053e18:	89 04 24             	mov    %eax,(%esp)
 8053e1b:	e8 a3 5c 00 00       	call   8059ac3 <close>
 8053e20:	f7 d0                	not    %eax
 8053e22:	c1 e8 1f             	shr    $0x1f,%eax
 8053e25:	0f b6 c0             	movzbl %al,%eax
 8053e28:	89 74 24 18          	mov    %esi,0x18(%esp)
 8053e2c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053e30:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8053e37:	08 
 8053e38:	c7 44 24 0c 78 ec 05 	movl   $0x805ec78,0xc(%esp)
 8053e3f:	08 
 8053e40:	c7 44 24 08 ef 02 00 	movl   $0x2ef,0x8(%esp)
 8053e47:	00 
 8053e48:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053e4f:	08 
 8053e50:	89 04 24             	mov    %eax,(%esp)
 8053e53:	e8 38 a7 00 00       	call   805e590 <_test_assert>
        syscall_fail(open("file08/", O_RDONLY, 0), ENOTDIR);
 8053e58:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 8053e5f:	e8 c5 a4 00 00       	call   805e329 <test_errstr>
 8053e64:	89 c3                	mov    %eax,%ebx
 8053e66:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8053e6d:	00 00 00 
 8053e70:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8053e77:	00 
 8053e78:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8053e7f:	00 
 8053e80:	c7 04 24 d2 11 06 08 	movl   $0x80611d2,(%esp)
 8053e87:	e8 e0 5a 00 00       	call   805996c <open>
 8053e8c:	83 f8 ff             	cmp    $0xffffffff,%eax
 8053e8f:	0f 94 c0             	sete   %al
 8053e92:	0f b6 c0             	movzbl %al,%eax
 8053e95:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 8053e9c:	00 
 8053e9d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053ea1:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8053ea8:	08 
 8053ea9:	c7 44 24 0c dc 11 06 	movl   $0x80611dc,0xc(%esp)
 8053eb0:	08 
 8053eb1:	c7 44 24 08 f0 02 00 	movl   $0x2f0,0x8(%esp)
 8053eb8:	00 
 8053eb9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053ec0:	08 
 8053ec1:	89 04 24             	mov    %eax,(%esp)
 8053ec4:	e8 c7 a6 00 00       	call   805e590 <_test_assert>
 8053ec9:	85 c0                	test   %eax,%eax
 8053ecb:	0f 84 89 00 00 00    	je     8053f5a <vfstest_open+0x1989>
 8053ed1:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8053ed7:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053edc:	89 04 24             	mov    %eax,(%esp)
 8053edf:	e8 45 a4 00 00       	call   805e329 <test_errstr>
 8053ee4:	89 c6                	mov    %eax,%esi
 8053ee6:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 8053eed:	e8 37 a4 00 00       	call   805e329 <test_errstr>
 8053ef2:	89 c3                	mov    %eax,%ebx
 8053ef4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8053efb:	00 
 8053efc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8053f03:	00 
 8053f04:	c7 04 24 d2 11 06 08 	movl   $0x80611d2,(%esp)
 8053f0b:	e8 5c 5a 00 00       	call   805996c <open>
 8053f10:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053f15:	83 f8 14             	cmp    $0x14,%eax
 8053f18:	0f 94 c0             	sete   %al
 8053f1b:	0f b6 c0             	movzbl %al,%eax
 8053f1e:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8053f22:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8053f26:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 8053f2d:	00 
 8053f2e:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053f32:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8053f39:	08 
 8053f3a:	c7 44 24 0c 08 12 06 	movl   $0x8061208,0xc(%esp)
 8053f41:	08 
 8053f42:	c7 44 24 08 f0 02 00 	movl   $0x2f0,0x8(%esp)
 8053f49:	00 
 8053f4a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053f51:	08 
 8053f52:	89 04 24             	mov    %eax,(%esp)
 8053f55:	e8 36 a6 00 00       	call   805e590 <_test_assert>
        syscall_success(mkdir("dirA", 0777));
 8053f5a:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8053f60:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053f65:	89 04 24             	mov    %eax,(%esp)
 8053f68:	e8 bc a3 00 00       	call   805e329 <test_errstr>
 8053f6d:	89 c3                	mov    %eax,%ebx
 8053f6f:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 8053f76:	00 
 8053f77:	c7 04 24 2d 12 06 08 	movl   $0x806122d,(%esp)
 8053f7e:	e8 0b 5c 00 00       	call   8059b8e <mkdir>
 8053f83:	f7 d0                	not    %eax
 8053f85:	c1 e8 1f             	shr    $0x1f,%eax
 8053f88:	0f b6 c0             	movzbl %al,%eax
 8053f8b:	89 74 24 18          	mov    %esi,0x18(%esp)
 8053f8f:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053f93:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8053f9a:	08 
 8053f9b:	c7 44 24 0c 32 12 06 	movl   $0x8061232,0xc(%esp)
 8053fa2:	08 
 8053fa3:	c7 44 24 08 f1 02 00 	movl   $0x2f1,0x8(%esp)
 8053faa:	00 
 8053fab:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8053fb2:	08 
 8053fb3:	89 04 24             	mov    %eax,(%esp)
 8053fb6:	e8 d5 a5 00 00       	call   805e590 <_test_assert>
        syscall_success(chdir("dirA"));
 8053fbb:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8053fc1:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8053fc6:	89 04 24             	mov    %eax,(%esp)
 8053fc9:	e8 5b a3 00 00       	call   805e329 <test_errstr>
 8053fce:	89 c3                	mov    %eax,%ebx
 8053fd0:	c7 04 24 2d 12 06 08 	movl   $0x806122d,(%esp)
 8053fd7:	e8 98 5d 00 00       	call   8059d74 <chdir>
 8053fdc:	f7 d0                	not    %eax
 8053fde:	c1 e8 1f             	shr    $0x1f,%eax
 8053fe1:	0f b6 c0             	movzbl %al,%eax
 8053fe4:	89 74 24 18          	mov    %esi,0x18(%esp)
 8053fe8:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8053fec:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8053ff3:	08 
 8053ff4:	c7 44 24 0c 4d 12 06 	movl   $0x806124d,0xc(%esp)
 8053ffb:	08 
 8053ffc:	c7 44 24 08 f2 02 00 	movl   $0x2f2,0x8(%esp)
 8054003:	00 
 8054004:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805400b:	08 
 805400c:	89 04 24             	mov    %eax,(%esp)
 805400f:	e8 7c a5 00 00       	call   805e590 <_test_assert>
        create_file("file09");
 8054014:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805401a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805401f:	89 04 24             	mov    %eax,(%esp)
 8054022:	e8 02 a3 00 00       	call   805e329 <test_errstr>
 8054027:	89 c3                	mov    %eax,%ebx
 8054029:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 8054030:	00 
 8054031:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 8054038:	00 
 8054039:	c7 04 24 62 12 06 08 	movl   $0x8061262,(%esp)
 8054040:	e8 27 59 00 00       	call   805996c <open>
 8054045:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 8054048:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805404b:	f7 d0                	not    %eax
 805404d:	c1 e8 1f             	shr    $0x1f,%eax
 8054050:	0f b6 c0             	movzbl %al,%eax
 8054053:	89 74 24 18          	mov    %esi,0x18(%esp)
 8054057:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805405b:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8054062:	08 
 8054063:	c7 44 24 0c 6c 12 06 	movl   $0x806126c,0xc(%esp)
 805406a:	08 
 805406b:	c7 44 24 08 f3 02 00 	movl   $0x2f3,0x8(%esp)
 8054072:	00 
 8054073:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805407a:	08 
 805407b:	89 04 24             	mov    %eax,(%esp)
 805407e:	e8 0d a5 00 00       	call   805e590 <_test_assert>
 8054083:	85 c0                	test   %eax,%eax
 8054085:	74 58                	je     80540df <vfstest_open+0x1b0e>
 8054087:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805408d:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8054092:	89 04 24             	mov    %eax,(%esp)
 8054095:	e8 8f a2 00 00       	call   805e329 <test_errstr>
 805409a:	89 c3                	mov    %eax,%ebx
 805409c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805409f:	89 04 24             	mov    %eax,(%esp)
 80540a2:	e8 1c 5a 00 00       	call   8059ac3 <close>
 80540a7:	f7 d0                	not    %eax
 80540a9:	c1 e8 1f             	shr    $0x1f,%eax
 80540ac:	0f b6 c0             	movzbl %al,%eax
 80540af:	89 74 24 18          	mov    %esi,0x18(%esp)
 80540b3:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80540b7:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80540be:	08 
 80540bf:	c7 44 24 0c 78 ec 05 	movl   $0x805ec78,0xc(%esp)
 80540c6:	08 
 80540c7:	c7 44 24 08 f3 02 00 	movl   $0x2f3,0x8(%esp)
 80540ce:	00 
 80540cf:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80540d6:	08 
 80540d7:	89 04 24             	mov    %eax,(%esp)
 80540da:	e8 b1 a4 00 00       	call   805e590 <_test_assert>
        syscall_success(chdir(".."));
 80540df:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80540e5:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80540ea:	89 04 24             	mov    %eax,(%esp)
 80540ed:	e8 37 a2 00 00       	call   805e329 <test_errstr>
 80540f2:	89 c3                	mov    %eax,%ebx
 80540f4:	c7 04 24 26 e6 05 08 	movl   $0x805e626,(%esp)
 80540fb:	e8 74 5c 00 00       	call   8059d74 <chdir>
 8054100:	f7 d0                	not    %eax
 8054102:	c1 e8 1f             	shr    $0x1f,%eax
 8054105:	0f b6 c0             	movzbl %al,%eax
 8054108:	89 74 24 18          	mov    %esi,0x18(%esp)
 805410c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8054110:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8054117:	08 
 8054118:	c7 44 24 0c ac ed 05 	movl   $0x805edac,0xc(%esp)
 805411f:	08 
 8054120:	c7 44 24 08 f4 02 00 	movl   $0x2f4,0x8(%esp)
 8054127:	00 
 8054128:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805412f:	08 
 8054130:	89 04 24             	mov    %eax,(%esp)
 8054133:	e8 58 a4 00 00       	call   805e590 <_test_assert>
        syscall_fail(open("dirA/file09/", O_RDONLY, 0), ENOTDIR);
 8054138:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 805413f:	e8 e5 a1 00 00       	call   805e329 <test_errstr>
 8054144:	89 c3                	mov    %eax,%ebx
 8054146:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 805414d:	00 00 00 
 8054150:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8054157:	00 
 8054158:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 805415f:	00 
 8054160:	c7 04 24 9a 12 06 08 	movl   $0x806129a,(%esp)
 8054167:	e8 00 58 00 00       	call   805996c <open>
 805416c:	83 f8 ff             	cmp    $0xffffffff,%eax
 805416f:	0f 94 c0             	sete   %al
 8054172:	0f b6 c0             	movzbl %al,%eax
 8054175:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 805417c:	00 
 805417d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8054181:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8054188:	08 
 8054189:	c7 44 24 0c a8 12 06 	movl   $0x80612a8,0xc(%esp)
 8054190:	08 
 8054191:	c7 44 24 08 f5 02 00 	movl   $0x2f5,0x8(%esp)
 8054198:	00 
 8054199:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80541a0:	08 
 80541a1:	89 04 24             	mov    %eax,(%esp)
 80541a4:	e8 e7 a3 00 00       	call   805e590 <_test_assert>
 80541a9:	85 c0                	test   %eax,%eax
 80541ab:	0f 84 89 00 00 00    	je     805423a <vfstest_open+0x1c69>
 80541b1:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 80541b7:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80541bc:	89 04 24             	mov    %eax,(%esp)
 80541bf:	e8 65 a1 00 00       	call   805e329 <test_errstr>
 80541c4:	89 c6                	mov    %eax,%esi
 80541c6:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 80541cd:	e8 57 a1 00 00       	call   805e329 <test_errstr>
 80541d2:	89 c3                	mov    %eax,%ebx
 80541d4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80541db:	00 
 80541dc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80541e3:	00 
 80541e4:	c7 04 24 9a 12 06 08 	movl   $0x806129a,(%esp)
 80541eb:	e8 7c 57 00 00       	call   805996c <open>
 80541f0:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80541f5:	83 f8 14             	cmp    $0x14,%eax
 80541f8:	0f 94 c0             	sete   %al
 80541fb:	0f b6 c0             	movzbl %al,%eax
 80541fe:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8054202:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8054206:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 805420d:	00 
 805420e:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8054212:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8054219:	08 
 805421a:	c7 44 24 0c d8 12 06 	movl   $0x80612d8,0xc(%esp)
 8054221:	08 
 8054222:	c7 44 24 08 f5 02 00 	movl   $0x2f5,0x8(%esp)
 8054229:	00 
 805422a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054231:	08 
 8054232:	89 04 24             	mov    %eax,(%esp)
 8054235:	e8 56 a3 00 00       	call   805e590 <_test_assert>

        /* Succeeds with trailing slash */
        syscall_success(mkdir("dirB", 0777));
 805423a:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8054240:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8054245:	89 04 24             	mov    %eax,(%esp)
 8054248:	e8 dc a0 00 00       	call   805e329 <test_errstr>
 805424d:	89 c3                	mov    %eax,%ebx
 805424f:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 8054256:	00 
 8054257:	c7 04 24 02 13 06 08 	movl   $0x8061302,(%esp)
 805425e:	e8 2b 59 00 00       	call   8059b8e <mkdir>
 8054263:	f7 d0                	not    %eax
 8054265:	c1 e8 1f             	shr    $0x1f,%eax
 8054268:	0f b6 c0             	movzbl %al,%eax
 805426b:	89 74 24 18          	mov    %esi,0x18(%esp)
 805426f:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8054273:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805427a:	08 
 805427b:	c7 44 24 0c 07 13 06 	movl   $0x8061307,0xc(%esp)
 8054282:	08 
 8054283:	c7 44 24 08 f8 02 00 	movl   $0x2f8,0x8(%esp)
 805428a:	00 
 805428b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054292:	08 
 8054293:	89 04 24             	mov    %eax,(%esp)
 8054296:	e8 f5 a2 00 00       	call   805e590 <_test_assert>
        syscall_success(mkdir("dirB/dirC", 0777));
 805429b:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80542a1:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80542a6:	89 04 24             	mov    %eax,(%esp)
 80542a9:	e8 7b a0 00 00       	call   805e329 <test_errstr>
 80542ae:	89 c3                	mov    %eax,%ebx
 80542b0:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 80542b7:	00 
 80542b8:	c7 04 24 22 13 06 08 	movl   $0x8061322,(%esp)
 80542bf:	e8 ca 58 00 00       	call   8059b8e <mkdir>
 80542c4:	f7 d0                	not    %eax
 80542c6:	c1 e8 1f             	shr    $0x1f,%eax
 80542c9:	0f b6 c0             	movzbl %al,%eax
 80542cc:	89 74 24 18          	mov    %esi,0x18(%esp)
 80542d0:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80542d4:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80542db:	08 
 80542dc:	c7 44 24 0c 2c 13 06 	movl   $0x806132c,0xc(%esp)
 80542e3:	08 
 80542e4:	c7 44 24 08 f9 02 00 	movl   $0x2f9,0x8(%esp)
 80542eb:	00 
 80542ec:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80542f3:	08 
 80542f4:	89 04 24             	mov    %eax,(%esp)
 80542f7:	e8 94 a2 00 00       	call   805e590 <_test_assert>
        syscall_success(fd = open("dirB/", O_RDONLY, 0));
 80542fc:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8054302:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8054307:	89 04 24             	mov    %eax,(%esp)
 805430a:	e8 1a a0 00 00       	call   805e329 <test_errstr>
 805430f:	89 c3                	mov    %eax,%ebx
 8054311:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8054318:	00 
 8054319:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8054320:	00 
 8054321:	c7 04 24 4c 13 06 08 	movl   $0x806134c,(%esp)
 8054328:	e8 3f 56 00 00       	call   805996c <open>
 805432d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 8054330:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054333:	f7 d0                	not    %eax
 8054335:	c1 e8 1f             	shr    $0x1f,%eax
 8054338:	0f b6 c0             	movzbl %al,%eax
 805433b:	89 74 24 18          	mov    %esi,0x18(%esp)
 805433f:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8054343:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805434a:	08 
 805434b:	c7 44 24 0c 54 13 06 	movl   $0x8061354,0xc(%esp)
 8054352:	08 
 8054353:	c7 44 24 08 fa 02 00 	movl   $0x2fa,0x8(%esp)
 805435a:	00 
 805435b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054362:	08 
 8054363:	89 04 24             	mov    %eax,(%esp)
 8054366:	e8 25 a2 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 805436b:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8054371:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8054376:	89 04 24             	mov    %eax,(%esp)
 8054379:	e8 ab 9f 00 00       	call   805e329 <test_errstr>
 805437e:	89 c3                	mov    %eax,%ebx
 8054380:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054383:	89 04 24             	mov    %eax,(%esp)
 8054386:	e8 38 57 00 00       	call   8059ac3 <close>
 805438b:	f7 d0                	not    %eax
 805438d:	c1 e8 1f             	shr    $0x1f,%eax
 8054390:	0f b6 c0             	movzbl %al,%eax
 8054393:	89 74 24 18          	mov    %esi,0x18(%esp)
 8054397:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805439b:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80543a2:	08 
 80543a3:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 80543aa:	08 
 80543ab:	c7 44 24 08 fb 02 00 	movl   $0x2fb,0x8(%esp)
 80543b2:	00 
 80543b3:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80543ba:	08 
 80543bb:	89 04 24             	mov    %eax,(%esp)
 80543be:	e8 cd a1 00 00       	call   805e590 <_test_assert>
        syscall_success(fd = open("dirB/dirC/", O_RDONLY, 0));
 80543c3:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80543c9:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80543ce:	89 04 24             	mov    %eax,(%esp)
 80543d1:	e8 53 9f 00 00       	call   805e329 <test_errstr>
 80543d6:	89 c3                	mov    %eax,%ebx
 80543d8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80543df:	00 
 80543e0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80543e7:	00 
 80543e8:	c7 04 24 74 13 06 08 	movl   $0x8061374,(%esp)
 80543ef:	e8 78 55 00 00       	call   805996c <open>
 80543f4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 80543f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80543fa:	f7 d0                	not    %eax
 80543fc:	c1 e8 1f             	shr    $0x1f,%eax
 80543ff:	0f b6 c0             	movzbl %al,%eax
 8054402:	89 74 24 18          	mov    %esi,0x18(%esp)
 8054406:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805440a:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8054411:	08 
 8054412:	c7 44 24 0c 80 13 06 	movl   $0x8061380,0xc(%esp)
 8054419:	08 
 805441a:	c7 44 24 08 fc 02 00 	movl   $0x2fc,0x8(%esp)
 8054421:	00 
 8054422:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054429:	08 
 805442a:	89 04 24             	mov    %eax,(%esp)
 805442d:	e8 5e a1 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 8054432:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8054438:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805443d:	89 04 24             	mov    %eax,(%esp)
 8054440:	e8 e4 9e 00 00       	call   805e329 <test_errstr>
 8054445:	89 c3                	mov    %eax,%ebx
 8054447:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805444a:	89 04 24             	mov    %eax,(%esp)
 805444d:	e8 71 56 00 00       	call   8059ac3 <close>
 8054452:	f7 d0                	not    %eax
 8054454:	c1 e8 1f             	shr    $0x1f,%eax
 8054457:	0f b6 c0             	movzbl %al,%eax
 805445a:	89 74 24 18          	mov    %esi,0x18(%esp)
 805445e:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8054462:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8054469:	08 
 805446a:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 8054471:	08 
 8054472:	c7 44 24 08 fd 02 00 	movl   $0x2fd,0x8(%esp)
 8054479:	00 
 805447a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054481:	08 
 8054482:	89 04 24             	mov    %eax,(%esp)
 8054485:	e8 06 a1 00 00       	call   805e590 <_test_assert>

        syscall_success(chdir(".."));
 805448a:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8054490:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8054495:	89 04 24             	mov    %eax,(%esp)
 8054498:	e8 8c 9e 00 00       	call   805e329 <test_errstr>
 805449d:	89 c3                	mov    %eax,%ebx
 805449f:	c7 04 24 26 e6 05 08 	movl   $0x805e626,(%esp)
 80544a6:	e8 c9 58 00 00       	call   8059d74 <chdir>
 80544ab:	f7 d0                	not    %eax
 80544ad:	c1 e8 1f             	shr    $0x1f,%eax
 80544b0:	0f b6 c0             	movzbl %al,%eax
 80544b3:	89 74 24 18          	mov    %esi,0x18(%esp)
 80544b7:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80544bb:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80544c2:	08 
 80544c3:	c7 44 24 0c ac ed 05 	movl   $0x805edac,0xc(%esp)
 80544ca:	08 
 80544cb:	c7 44 24 08 ff 02 00 	movl   $0x2ff,0x8(%esp)
 80544d2:	00 
 80544d3:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80544da:	08 
 80544db:	89 04 24             	mov    %eax,(%esp)
 80544de:	e8 ad a0 00 00       	call   805e590 <_test_assert>
        test_fini("vfstest_open");
 80544e3:	c7 04 24 a5 13 06 08 	movl   $0x80613a5,(%esp)
 80544ea:	e8 8c 9d 00 00       	call   805e27b <test_fini>
}
 80544ef:	90                   	nop
 80544f0:	81 c4 8c 00 00 00    	add    $0x8c,%esp
 80544f6:	5b                   	pop    %ebx
 80544f7:	5e                   	pop    %esi
 80544f8:	5f                   	pop    %edi
 80544f9:	5d                   	pop    %ebp
 80544fa:	c3                   	ret    

080544fb <vfstest_read>:

static void
vfstest_read(void)
{
 80544fb:	55                   	push   %ebp
 80544fc:	89 e5                	mov    %esp,%ebp
 80544fe:	57                   	push   %edi
 80544ff:	56                   	push   %esi
 8054500:	53                   	push   %ebx
 8054501:	81 ec 3c 02 00 00    	sub    $0x23c,%esp

        int fd, ret;
        char buf[READ_BUFSIZE];
        struct stat s;

        syscall_success(mkdir("read", 0777));
 8054507:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805450d:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8054512:	89 04 24             	mov    %eax,(%esp)
 8054515:	e8 0f 9e 00 00       	call   805e329 <test_errstr>
 805451a:	89 c3                	mov    %eax,%ebx
 805451c:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
 8054523:	00 
 8054524:	c7 04 24 b2 13 06 08 	movl   $0x80613b2,(%esp)
 805452b:	e8 5e 56 00 00       	call   8059b8e <mkdir>
 8054530:	f7 d0                	not    %eax
 8054532:	c1 e8 1f             	shr    $0x1f,%eax
 8054535:	0f b6 c0             	movzbl %al,%eax
 8054538:	89 74 24 18          	mov    %esi,0x18(%esp)
 805453c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8054540:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8054547:	08 
 8054548:	c7 44 24 0c b7 13 06 	movl   $0x80613b7,0xc(%esp)
 805454f:	08 
 8054550:	c7 44 24 08 0c 03 00 	movl   $0x30c,0x8(%esp)
 8054557:	00 
 8054558:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805455f:	08 
 8054560:	89 04 24             	mov    %eax,(%esp)
 8054563:	e8 28 a0 00 00       	call   805e590 <_test_assert>
        syscall_success(chdir("read"));
 8054568:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805456e:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8054573:	89 04 24             	mov    %eax,(%esp)
 8054576:	e8 ae 9d 00 00       	call   805e329 <test_errstr>
 805457b:	89 c3                	mov    %eax,%ebx
 805457d:	c7 04 24 b2 13 06 08 	movl   $0x80613b2,(%esp)
 8054584:	e8 eb 57 00 00       	call   8059d74 <chdir>
 8054589:	f7 d0                	not    %eax
 805458b:	c1 e8 1f             	shr    $0x1f,%eax
 805458e:	0f b6 c0             	movzbl %al,%eax
 8054591:	89 74 24 18          	mov    %esi,0x18(%esp)
 8054595:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8054599:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80545a0:	08 
 80545a1:	c7 44 24 0c d2 13 06 	movl   $0x80613d2,0xc(%esp)
 80545a8:	08 
 80545a9:	c7 44 24 08 0d 03 00 	movl   $0x30d,0x8(%esp)
 80545b0:	00 
 80545b1:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80545b8:	08 
 80545b9:	89 04 24             	mov    %eax,(%esp)
 80545bc:	e8 cf 9f 00 00       	call   805e590 <_test_assert>

        /* Can read and write to a file */
        syscall_success(fd = open("file01", O_RDWR | O_CREAT, 0));
 80545c1:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80545c7:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80545cc:	89 04 24             	mov    %eax,(%esp)
 80545cf:	e8 55 9d 00 00       	call   805e329 <test_errstr>
 80545d4:	89 c3                	mov    %eax,%ebx
 80545d6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80545dd:	00 
 80545de:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
 80545e5:	00 
 80545e6:	c7 04 24 81 01 06 08 	movl   $0x8060181,(%esp)
 80545ed:	e8 7a 53 00 00       	call   805996c <open>
 80545f2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 80545f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80545f8:	f7 d0                	not    %eax
 80545fa:	c1 e8 1f             	shr    $0x1f,%eax
 80545fd:	0f b6 c0             	movzbl %al,%eax
 8054600:	89 74 24 18          	mov    %esi,0x18(%esp)
 8054604:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8054608:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805460f:	08 
 8054610:	c7 44 24 0c e8 13 06 	movl   $0x80613e8,0xc(%esp)
 8054617:	08 
 8054618:	c7 44 24 08 10 03 00 	movl   $0x310,0x8(%esp)
 805461f:	00 
 8054620:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054627:	08 
 8054628:	89 04 24             	mov    %eax,(%esp)
 805462b:	e8 60 9f 00 00       	call   805e590 <_test_assert>
        syscall_success(ret = write(fd, "hello", 5));
 8054630:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8054636:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805463b:	89 04 24             	mov    %eax,(%esp)
 805463e:	e8 e6 9c 00 00       	call   805e329 <test_errstr>
 8054643:	89 c3                	mov    %eax,%ebx
 8054645:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 805464c:	00 
 805464d:	c7 44 24 04 0e 02 06 	movl   $0x806020e,0x4(%esp)
 8054654:	08 
 8054655:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054658:	89 04 24             	mov    %eax,(%esp)
 805465b:	e8 12 54 00 00       	call   8059a72 <write>
 8054660:	89 45 e0             	mov    %eax,-0x20(%ebp)
 8054663:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8054666:	f7 d0                	not    %eax
 8054668:	c1 e8 1f             	shr    $0x1f,%eax
 805466b:	0f b6 c0             	movzbl %al,%eax
 805466e:	89 74 24 18          	mov    %esi,0x18(%esp)
 8054672:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8054676:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805467d:	08 
 805467e:	c7 44 24 0c 14 14 06 	movl   $0x8061414,0xc(%esp)
 8054685:	08 
 8054686:	c7 44 24 08 11 03 00 	movl   $0x311,0x8(%esp)
 805468d:	00 
 805468e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054695:	08 
 8054696:	89 04 24             	mov    %eax,(%esp)
 8054699:	e8 f2 9e 00 00       	call   805e590 <_test_assert>
        test_assert(5 == ret, "write(%d, \"hello\", 5) returned %d", fd, ret);
 805469e:	83 7d e0 05          	cmpl   $0x5,-0x20(%ebp)
 80546a2:	0f 94 c0             	sete   %al
 80546a5:	0f b6 c0             	movzbl %al,%eax
 80546a8:	8b 55 e0             	mov    -0x20(%ebp),%edx
 80546ab:	89 54 24 18          	mov    %edx,0x18(%esp)
 80546af:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 80546b2:	89 54 24 14          	mov    %edx,0x14(%esp)
 80546b6:	c7 44 24 10 38 14 06 	movl   $0x8061438,0x10(%esp)
 80546bd:	08 
 80546be:	c7 44 24 0c 5a 14 06 	movl   $0x806145a,0xc(%esp)
 80546c5:	08 
 80546c6:	c7 44 24 08 12 03 00 	movl   $0x312,0x8(%esp)
 80546cd:	00 
 80546ce:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80546d5:	08 
 80546d6:	89 04 24             	mov    %eax,(%esp)
 80546d9:	e8 b2 9e 00 00       	call   805e590 <_test_assert>
        syscall_success(ret = lseek(fd, 0, SEEK_SET));
 80546de:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80546e4:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80546e9:	89 04 24             	mov    %eax,(%esp)
 80546ec:	e8 38 9c 00 00       	call   805e329 <test_errstr>
 80546f1:	89 c3                	mov    %eax,%ebx
 80546f3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80546fa:	00 
 80546fb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8054702:	00 
 8054703:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054706:	89 04 24             	mov    %eax,(%esp)
 8054709:	e8 c2 52 00 00       	call   80599d0 <lseek>
 805470e:	89 45 e0             	mov    %eax,-0x20(%ebp)
 8054711:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8054714:	f7 d0                	not    %eax
 8054716:	c1 e8 1f             	shr    $0x1f,%eax
 8054719:	0f b6 c0             	movzbl %al,%eax
 805471c:	89 74 24 18          	mov    %esi,0x18(%esp)
 8054720:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8054724:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805472b:	08 
 805472c:	c7 44 24 0c 63 14 06 	movl   $0x8061463,0xc(%esp)
 8054733:	08 
 8054734:	c7 44 24 08 13 03 00 	movl   $0x313,0x8(%esp)
 805473b:	00 
 805473c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054743:	08 
 8054744:	89 04 24             	mov    %eax,(%esp)
 8054747:	e8 44 9e 00 00       	call   805e590 <_test_assert>
        test_assert(0 == ret, "lseek(%d, 0, SEEK_SET) returned %d", fd, ret);
 805474c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
 8054750:	0f 94 c0             	sete   %al
 8054753:	0f b6 c0             	movzbl %al,%eax
 8054756:	8b 55 e0             	mov    -0x20(%ebp),%edx
 8054759:	89 54 24 18          	mov    %edx,0x18(%esp)
 805475d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 8054760:	89 54 24 14          	mov    %edx,0x14(%esp)
 8054764:	c7 44 24 10 80 14 06 	movl   $0x8061480,0x10(%esp)
 805476b:	08 
 805476c:	c7 44 24 0c a3 14 06 	movl   $0x80614a3,0xc(%esp)
 8054773:	08 
 8054774:	c7 44 24 08 14 03 00 	movl   $0x314,0x8(%esp)
 805477b:	00 
 805477c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054783:	08 
 8054784:	89 04 24             	mov    %eax,(%esp)
 8054787:	e8 04 9e 00 00       	call   805e590 <_test_assert>
        read_fd(fd, READ_BUFSIZE, "hello");
 805478c:	c7 04 24 0e 02 06 08 	movl   $0x806020e,(%esp)
 8054793:	e8 d2 5c 00 00       	call   805a46a <strlen>
 8054798:	89 c3                	mov    %eax,%ebx
 805479a:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
 80547a1:	00 
 80547a2:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 80547a8:	89 44 24 04          	mov    %eax,0x4(%esp)
 80547ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80547af:	89 04 24             	mov    %eax,(%esp)
 80547b2:	e8 6a 52 00 00       	call   8059a21 <read>
 80547b7:	39 c3                	cmp    %eax,%ebx
 80547b9:	0f 94 c0             	sete   %al
 80547bc:	0f b6 c0             	movzbl %al,%eax
 80547bf:	c7 44 24 10 b4 02 06 	movl   $0x80602b4,0x10(%esp)
 80547c6:	08 
 80547c7:	c7 44 24 0c ac 14 06 	movl   $0x80614ac,0xc(%esp)
 80547ce:	08 
 80547cf:	c7 44 24 08 15 03 00 	movl   $0x315,0x8(%esp)
 80547d6:	00 
 80547d7:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80547de:	08 
 80547df:	89 04 24             	mov    %eax,(%esp)
 80547e2:	e8 a9 9d 00 00       	call   805e590 <_test_assert>
 80547e7:	c7 04 24 0e 02 06 08 	movl   $0x806020e,(%esp)
 80547ee:	e8 77 5c 00 00       	call   805a46a <strlen>
 80547f3:	89 44 24 08          	mov    %eax,0x8(%esp)
 80547f7:	c7 44 24 04 0e 02 06 	movl   $0x806020e,0x4(%esp)
 80547fe:	08 
 80547ff:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 8054805:	89 04 24             	mov    %eax,(%esp)
 8054808:	e8 f0 59 00 00       	call   805a1fd <memcmp>
 805480d:	85 c0                	test   %eax,%eax
 805480f:	0f 94 c0             	sete   %al
 8054812:	0f b6 c0             	movzbl %al,%eax
 8054815:	c7 44 24 10 08 03 06 	movl   $0x8060308,0x10(%esp)
 805481c:	08 
 805481d:	c7 44 24 0c 20 03 06 	movl   $0x8060320,0xc(%esp)
 8054824:	08 
 8054825:	c7 44 24 08 15 03 00 	movl   $0x315,0x8(%esp)
 805482c:	00 
 805482d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054834:	08 
 8054835:	89 04 24             	mov    %eax,(%esp)
 8054838:	e8 53 9d 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 805483d:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8054843:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8054848:	89 04 24             	mov    %eax,(%esp)
 805484b:	e8 d9 9a 00 00       	call   805e329 <test_errstr>
 8054850:	89 c3                	mov    %eax,%ebx
 8054852:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054855:	89 04 24             	mov    %eax,(%esp)
 8054858:	e8 66 52 00 00       	call   8059ac3 <close>
 805485d:	f7 d0                	not    %eax
 805485f:	c1 e8 1f             	shr    $0x1f,%eax
 8054862:	0f b6 c0             	movzbl %al,%eax
 8054865:	89 74 24 18          	mov    %esi,0x18(%esp)
 8054869:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805486d:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8054874:	08 
 8054875:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 805487c:	08 
 805487d:	c7 44 24 08 16 03 00 	movl   $0x316,0x8(%esp)
 8054884:	00 
 8054885:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805488c:	08 
 805488d:	89 04 24             	mov    %eax,(%esp)
 8054890:	e8 fb 9c 00 00       	call   805e590 <_test_assert>

        /* cannot read from a directory */
        syscall_success(mkdir("dir01", 0));
 8054895:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805489b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80548a0:	89 04 24             	mov    %eax,(%esp)
 80548a3:	e8 81 9a 00 00       	call   805e329 <test_errstr>
 80548a8:	89 c3                	mov    %eax,%ebx
 80548aa:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80548b1:	00 
 80548b2:	c7 04 24 dd 14 06 08 	movl   $0x80614dd,(%esp)
 80548b9:	e8 d0 52 00 00       	call   8059b8e <mkdir>
 80548be:	f7 d0                	not    %eax
 80548c0:	c1 e8 1f             	shr    $0x1f,%eax
 80548c3:	0f b6 c0             	movzbl %al,%eax
 80548c6:	89 74 24 18          	mov    %esi,0x18(%esp)
 80548ca:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80548ce:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80548d5:	08 
 80548d6:	c7 44 24 0c e3 14 06 	movl   $0x80614e3,0xc(%esp)
 80548dd:	08 
 80548de:	c7 44 24 08 19 03 00 	movl   $0x319,0x8(%esp)
 80548e5:	00 
 80548e6:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80548ed:	08 
 80548ee:	89 04 24             	mov    %eax,(%esp)
 80548f1:	e8 9a 9c 00 00       	call   805e590 <_test_assert>
        syscall_success(fd = open("dir01", O_RDONLY, 0));
 80548f6:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80548fc:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8054901:	89 04 24             	mov    %eax,(%esp)
 8054904:	e8 20 9a 00 00       	call   805e329 <test_errstr>
 8054909:	89 c3                	mov    %eax,%ebx
 805490b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8054912:	00 
 8054913:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 805491a:	00 
 805491b:	c7 04 24 dd 14 06 08 	movl   $0x80614dd,(%esp)
 8054922:	e8 45 50 00 00       	call   805996c <open>
 8054927:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 805492a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805492d:	f7 d0                	not    %eax
 805492f:	c1 e8 1f             	shr    $0x1f,%eax
 8054932:	0f b6 c0             	movzbl %al,%eax
 8054935:	89 74 24 18          	mov    %esi,0x18(%esp)
 8054939:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805493d:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8054944:	08 
 8054945:	c7 44 24 0c fc 14 06 	movl   $0x80614fc,0xc(%esp)
 805494c:	08 
 805494d:	c7 44 24 08 1a 03 00 	movl   $0x31a,0x8(%esp)
 8054954:	00 
 8054955:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805495c:	08 
 805495d:	89 04 24             	mov    %eax,(%esp)
 8054960:	e8 2b 9c 00 00       	call   805e590 <_test_assert>
        syscall_fail(read(fd, buf, READ_BUFSIZE), EISDIR);
 8054965:	c7 04 24 15 00 00 00 	movl   $0x15,(%esp)
 805496c:	e8 b8 99 00 00       	call   805e329 <test_errstr>
 8054971:	89 c3                	mov    %eax,%ebx
 8054973:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 805497a:	00 00 00 
 805497d:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
 8054984:	00 
 8054985:	8d 85 64 fe ff ff    	lea    -0x19c(%ebp),%eax
 805498b:	89 44 24 04          	mov    %eax,0x4(%esp)
 805498f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054992:	89 04 24             	mov    %eax,(%esp)
 8054995:	e8 87 50 00 00       	call   8059a21 <read>
 805499a:	83 f8 ff             	cmp    $0xffffffff,%eax
 805499d:	0f 94 c0             	sete   %al
 80549a0:	0f b6 c0             	movzbl %al,%eax
 80549a3:	c7 44 24 18 15 00 00 	movl   $0x15,0x18(%esp)
 80549aa:	00 
 80549ab:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80549af:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 80549b6:	08 
 80549b7:	c7 44 24 0c 1c 15 06 	movl   $0x806151c,0xc(%esp)
 80549be:	08 
 80549bf:	c7 44 24 08 1b 03 00 	movl   $0x31b,0x8(%esp)
 80549c6:	00 
 80549c7:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80549ce:	08 
 80549cf:	89 04 24             	mov    %eax,(%esp)
 80549d2:	e8 b9 9b 00 00       	call   805e590 <_test_assert>
 80549d7:	85 c0                	test   %eax,%eax
 80549d9:	0f 84 8a 00 00 00    	je     8054a69 <vfstest_read+0x56e>
 80549df:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 80549e5:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80549ea:	89 04 24             	mov    %eax,(%esp)
 80549ed:	e8 37 99 00 00       	call   805e329 <test_errstr>
 80549f2:	89 c6                	mov    %eax,%esi
 80549f4:	c7 04 24 15 00 00 00 	movl   $0x15,(%esp)
 80549fb:	e8 29 99 00 00       	call   805e329 <test_errstr>
 8054a00:	89 c3                	mov    %eax,%ebx
 8054a02:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
 8054a09:	00 
 8054a0a:	8d 85 64 fe ff ff    	lea    -0x19c(%ebp),%eax
 8054a10:	89 44 24 04          	mov    %eax,0x4(%esp)
 8054a14:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054a17:	89 04 24             	mov    %eax,(%esp)
 8054a1a:	e8 02 50 00 00       	call   8059a21 <read>
 8054a1f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8054a24:	83 f8 15             	cmp    $0x15,%eax
 8054a27:	0f 94 c0             	sete   %al
 8054a2a:	0f b6 c0             	movzbl %al,%eax
 8054a2d:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8054a31:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8054a35:	c7 44 24 18 15 00 00 	movl   $0x15,0x18(%esp)
 8054a3c:	00 
 8054a3d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8054a41:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8054a48:	08 
 8054a49:	c7 44 24 0c 44 15 06 	movl   $0x8061544,0xc(%esp)
 8054a50:	08 
 8054a51:	c7 44 24 08 1b 03 00 	movl   $0x31b,0x8(%esp)
 8054a58:	00 
 8054a59:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054a60:	08 
 8054a61:	89 04 24             	mov    %eax,(%esp)
 8054a64:	e8 27 9b 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 8054a69:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8054a6f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8054a74:	89 04 24             	mov    %eax,(%esp)
 8054a77:	e8 ad 98 00 00       	call   805e329 <test_errstr>
 8054a7c:	89 c3                	mov    %eax,%ebx
 8054a7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054a81:	89 04 24             	mov    %eax,(%esp)
 8054a84:	e8 3a 50 00 00       	call   8059ac3 <close>
 8054a89:	f7 d0                	not    %eax
 8054a8b:	c1 e8 1f             	shr    $0x1f,%eax
 8054a8e:	0f b6 c0             	movzbl %al,%eax
 8054a91:	89 74 24 18          	mov    %esi,0x18(%esp)
 8054a95:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8054a99:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8054aa0:	08 
 8054aa1:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 8054aa8:	08 
 8054aa9:	c7 44 24 08 1c 03 00 	movl   $0x31c,0x8(%esp)
 8054ab0:	00 
 8054ab1:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054ab8:	08 
 8054ab9:	89 04 24             	mov    %eax,(%esp)
 8054abc:	e8 cf 9a 00 00       	call   805e590 <_test_assert>

        /* Can seek to beginning, middle, and end of file */
        syscall_success(fd = open("file02", O_RDWR | O_CREAT, 0));
 8054ac1:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8054ac7:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8054acc:	89 04 24             	mov    %eax,(%esp)
 8054acf:	e8 55 98 00 00       	call   805e329 <test_errstr>
 8054ad4:	89 c3                	mov    %eax,%ebx
 8054ad6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8054add:	00 
 8054ade:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
 8054ae5:	00 
 8054ae6:	c7 04 24 dd 03 06 08 	movl   $0x80603dd,(%esp)
 8054aed:	e8 7a 4e 00 00       	call   805996c <open>
 8054af2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 8054af5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054af8:	f7 d0                	not    %eax
 8054afa:	c1 e8 1f             	shr    $0x1f,%eax
 8054afd:	0f b6 c0             	movzbl %al,%eax
 8054b00:	89 74 24 18          	mov    %esi,0x18(%esp)
 8054b04:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8054b08:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8054b0f:	08 
 8054b10:	c7 44 24 0c 68 15 06 	movl   $0x8061568,0xc(%esp)
 8054b17:	08 
 8054b18:	c7 44 24 08 1f 03 00 	movl   $0x31f,0x8(%esp)
 8054b1f:	00 
 8054b20:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054b27:	08 
 8054b28:	89 04 24             	mov    %eax,(%esp)
 8054b2b:	e8 60 9a 00 00       	call   805e590 <_test_assert>
        syscall_success(write(fd, "hello", 5));
 8054b30:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8054b36:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8054b3b:	89 04 24             	mov    %eax,(%esp)
 8054b3e:	e8 e6 97 00 00       	call   805e329 <test_errstr>
 8054b43:	89 c3                	mov    %eax,%ebx
 8054b45:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 8054b4c:	00 
 8054b4d:	c7 44 24 04 0e 02 06 	movl   $0x806020e,0x4(%esp)
 8054b54:	08 
 8054b55:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054b58:	89 04 24             	mov    %eax,(%esp)
 8054b5b:	e8 12 4f 00 00       	call   8059a72 <write>
 8054b60:	f7 d0                	not    %eax
 8054b62:	c1 e8 1f             	shr    $0x1f,%eax
 8054b65:	0f b6 c0             	movzbl %al,%eax
 8054b68:	89 74 24 18          	mov    %esi,0x18(%esp)
 8054b6c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8054b70:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8054b77:	08 
 8054b78:	c7 44 24 0c 91 15 06 	movl   $0x8061591,0xc(%esp)
 8054b7f:	08 
 8054b80:	c7 44 24 08 20 03 00 	movl   $0x320,0x8(%esp)
 8054b87:	00 
 8054b88:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054b8f:	08 
 8054b90:	89 04 24             	mov    %eax,(%esp)
 8054b93:	e8 f8 99 00 00       	call   805e590 <_test_assert>
        do {                                                                            \
                int __r = (expr);                                                       \
                test_assert((res) == __r, # expr " returned %d, expected %d", __r, res);\
        } while (0);

        test_lseek(lseek(fd, 0, SEEK_CUR), 5);
 8054b98:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8054b9f:	00 
 8054ba0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8054ba7:	00 
 8054ba8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054bab:	89 04 24             	mov    %eax,(%esp)
 8054bae:	e8 1d 4e 00 00       	call   80599d0 <lseek>
 8054bb3:	89 45 dc             	mov    %eax,-0x24(%ebp)
 8054bb6:	83 7d dc 05          	cmpl   $0x5,-0x24(%ebp)
 8054bba:	0f 94 c0             	sete   %al
 8054bbd:	0f b6 c0             	movzbl %al,%eax
 8054bc0:	c7 44 24 18 05 00 00 	movl   $0x5,0x18(%esp)
 8054bc7:	00 
 8054bc8:	8b 55 dc             	mov    -0x24(%ebp),%edx
 8054bcb:	89 54 24 14          	mov    %edx,0x14(%esp)
 8054bcf:	c7 44 24 10 b0 15 06 	movl   $0x80615b0,0x10(%esp)
 8054bd6:	08 
 8054bd7:	c7 44 24 0c e0 15 06 	movl   $0x80615e0,0xc(%esp)
 8054bde:	08 
 8054bdf:	c7 44 24 08 28 03 00 	movl   $0x328,0x8(%esp)
 8054be6:	00 
 8054be7:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054bee:	08 
 8054bef:	89 04 24             	mov    %eax,(%esp)
 8054bf2:	e8 99 99 00 00       	call   805e590 <_test_assert>
        read_fd(fd, 10, "");
 8054bf7:	c7 04 24 3b f6 05 08 	movl   $0x805f63b,(%esp)
 8054bfe:	e8 67 58 00 00       	call   805a46a <strlen>
 8054c03:	89 c3                	mov    %eax,%ebx
 8054c05:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
 8054c0c:	00 
 8054c0d:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 8054c13:	89 44 24 04          	mov    %eax,0x4(%esp)
 8054c17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054c1a:	89 04 24             	mov    %eax,(%esp)
 8054c1d:	e8 ff 4d 00 00       	call   8059a21 <read>
 8054c22:	39 c3                	cmp    %eax,%ebx
 8054c24:	0f 94 c0             	sete   %al
 8054c27:	0f b6 c0             	movzbl %al,%eax
 8054c2a:	c7 44 24 10 b4 02 06 	movl   $0x80602b4,0x10(%esp)
 8054c31:	08 
 8054c32:	c7 44 24 0c ec 15 06 	movl   $0x80615ec,0xc(%esp)
 8054c39:	08 
 8054c3a:	c7 44 24 08 29 03 00 	movl   $0x329,0x8(%esp)
 8054c41:	00 
 8054c42:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054c49:	08 
 8054c4a:	89 04 24             	mov    %eax,(%esp)
 8054c4d:	e8 3e 99 00 00       	call   805e590 <_test_assert>
 8054c52:	c7 04 24 3b f6 05 08 	movl   $0x805f63b,(%esp)
 8054c59:	e8 0c 58 00 00       	call   805a46a <strlen>
 8054c5e:	89 44 24 08          	mov    %eax,0x8(%esp)
 8054c62:	c7 44 24 04 3b f6 05 	movl   $0x805f63b,0x4(%esp)
 8054c69:	08 
 8054c6a:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 8054c70:	89 04 24             	mov    %eax,(%esp)
 8054c73:	e8 85 55 00 00       	call   805a1fd <memcmp>
 8054c78:	85 c0                	test   %eax,%eax
 8054c7a:	0f 94 c0             	sete   %al
 8054c7d:	0f b6 c0             	movzbl %al,%eax
 8054c80:	c7 44 24 10 08 03 06 	movl   $0x8060308,0x10(%esp)
 8054c87:	08 
 8054c88:	c7 44 24 0c 18 16 06 	movl   $0x8061618,0xc(%esp)
 8054c8f:	08 
 8054c90:	c7 44 24 08 29 03 00 	movl   $0x329,0x8(%esp)
 8054c97:	00 
 8054c98:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054c9f:	08 
 8054ca0:	89 04 24             	mov    %eax,(%esp)
 8054ca3:	e8 e8 98 00 00       	call   805e590 <_test_assert>
        test_lseek(lseek(fd, -1, SEEK_CUR), 4);
 8054ca8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8054caf:	00 
 8054cb0:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 8054cb7:	ff 
 8054cb8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054cbb:	89 04 24             	mov    %eax,(%esp)
 8054cbe:	e8 0d 4d 00 00       	call   80599d0 <lseek>
 8054cc3:	89 45 d8             	mov    %eax,-0x28(%ebp)
 8054cc6:	83 7d d8 04          	cmpl   $0x4,-0x28(%ebp)
 8054cca:	0f 94 c0             	sete   %al
 8054ccd:	0f b6 c0             	movzbl %al,%eax
 8054cd0:	c7 44 24 18 04 00 00 	movl   $0x4,0x18(%esp)
 8054cd7:	00 
 8054cd8:	8b 55 d8             	mov    -0x28(%ebp),%edx
 8054cdb:	89 54 24 14          	mov    %edx,0x14(%esp)
 8054cdf:	c7 44 24 10 3c 16 06 	movl   $0x806163c,0x10(%esp)
 8054ce6:	08 
 8054ce7:	c7 44 24 0c 6d 16 06 	movl   $0x806166d,0xc(%esp)
 8054cee:	08 
 8054cef:	c7 44 24 08 2a 03 00 	movl   $0x32a,0x8(%esp)
 8054cf6:	00 
 8054cf7:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054cfe:	08 
 8054cff:	89 04 24             	mov    %eax,(%esp)
 8054d02:	e8 89 98 00 00       	call   805e590 <_test_assert>
        read_fd(fd, 10, "o");
 8054d07:	c7 04 24 78 16 06 08 	movl   $0x8061678,(%esp)
 8054d0e:	e8 57 57 00 00       	call   805a46a <strlen>
 8054d13:	89 c3                	mov    %eax,%ebx
 8054d15:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
 8054d1c:	00 
 8054d1d:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 8054d23:	89 44 24 04          	mov    %eax,0x4(%esp)
 8054d27:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054d2a:	89 04 24             	mov    %eax,(%esp)
 8054d2d:	e8 ef 4c 00 00       	call   8059a21 <read>
 8054d32:	39 c3                	cmp    %eax,%ebx
 8054d34:	0f 94 c0             	sete   %al
 8054d37:	0f b6 c0             	movzbl %al,%eax
 8054d3a:	c7 44 24 10 b4 02 06 	movl   $0x80602b4,0x10(%esp)
 8054d41:	08 
 8054d42:	c7 44 24 0c 7c 16 06 	movl   $0x806167c,0xc(%esp)
 8054d49:	08 
 8054d4a:	c7 44 24 08 2b 03 00 	movl   $0x32b,0x8(%esp)
 8054d51:	00 
 8054d52:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054d59:	08 
 8054d5a:	89 04 24             	mov    %eax,(%esp)
 8054d5d:	e8 2e 98 00 00       	call   805e590 <_test_assert>
 8054d62:	c7 04 24 78 16 06 08 	movl   $0x8061678,(%esp)
 8054d69:	e8 fc 56 00 00       	call   805a46a <strlen>
 8054d6e:	89 44 24 08          	mov    %eax,0x8(%esp)
 8054d72:	c7 44 24 04 78 16 06 	movl   $0x8061678,0x4(%esp)
 8054d79:	08 
 8054d7a:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 8054d80:	89 04 24             	mov    %eax,(%esp)
 8054d83:	e8 75 54 00 00       	call   805a1fd <memcmp>
 8054d88:	85 c0                	test   %eax,%eax
 8054d8a:	0f 94 c0             	sete   %al
 8054d8d:	0f b6 c0             	movzbl %al,%eax
 8054d90:	c7 44 24 10 08 03 06 	movl   $0x8060308,0x10(%esp)
 8054d97:	08 
 8054d98:	c7 44 24 0c a8 16 06 	movl   $0x80616a8,0xc(%esp)
 8054d9f:	08 
 8054da0:	c7 44 24 08 2b 03 00 	movl   $0x32b,0x8(%esp)
 8054da7:	00 
 8054da8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054daf:	08 
 8054db0:	89 04 24             	mov    %eax,(%esp)
 8054db3:	e8 d8 97 00 00       	call   805e590 <_test_assert>
        test_lseek(lseek(fd, 2, SEEK_CUR), 7);
 8054db8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8054dbf:	00 
 8054dc0:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 8054dc7:	00 
 8054dc8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054dcb:	89 04 24             	mov    %eax,(%esp)
 8054dce:	e8 fd 4b 00 00       	call   80599d0 <lseek>
 8054dd3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 8054dd6:	83 7d d4 07          	cmpl   $0x7,-0x2c(%ebp)
 8054dda:	0f 94 c0             	sete   %al
 8054ddd:	0f b6 c0             	movzbl %al,%eax
 8054de0:	c7 44 24 18 07 00 00 	movl   $0x7,0x18(%esp)
 8054de7:	00 
 8054de8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
 8054deb:	89 54 24 14          	mov    %edx,0x14(%esp)
 8054def:	c7 44 24 10 d0 16 06 	movl   $0x80616d0,0x10(%esp)
 8054df6:	08 
 8054df7:	c7 44 24 0c 00 17 06 	movl   $0x8061700,0xc(%esp)
 8054dfe:	08 
 8054dff:	c7 44 24 08 2c 03 00 	movl   $0x32c,0x8(%esp)
 8054e06:	00 
 8054e07:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054e0e:	08 
 8054e0f:	89 04 24             	mov    %eax,(%esp)
 8054e12:	e8 79 97 00 00       	call   805e590 <_test_assert>
        read_fd(fd, 10, "");
 8054e17:	c7 04 24 3b f6 05 08 	movl   $0x805f63b,(%esp)
 8054e1e:	e8 47 56 00 00       	call   805a46a <strlen>
 8054e23:	89 c3                	mov    %eax,%ebx
 8054e25:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
 8054e2c:	00 
 8054e2d:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 8054e33:	89 44 24 04          	mov    %eax,0x4(%esp)
 8054e37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054e3a:	89 04 24             	mov    %eax,(%esp)
 8054e3d:	e8 df 4b 00 00       	call   8059a21 <read>
 8054e42:	39 c3                	cmp    %eax,%ebx
 8054e44:	0f 94 c0             	sete   %al
 8054e47:	0f b6 c0             	movzbl %al,%eax
 8054e4a:	c7 44 24 10 b4 02 06 	movl   $0x80602b4,0x10(%esp)
 8054e51:	08 
 8054e52:	c7 44 24 0c ec 15 06 	movl   $0x80615ec,0xc(%esp)
 8054e59:	08 
 8054e5a:	c7 44 24 08 2d 03 00 	movl   $0x32d,0x8(%esp)
 8054e61:	00 
 8054e62:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054e69:	08 
 8054e6a:	89 04 24             	mov    %eax,(%esp)
 8054e6d:	e8 1e 97 00 00       	call   805e590 <_test_assert>
 8054e72:	c7 04 24 3b f6 05 08 	movl   $0x805f63b,(%esp)
 8054e79:	e8 ec 55 00 00       	call   805a46a <strlen>
 8054e7e:	89 44 24 08          	mov    %eax,0x8(%esp)
 8054e82:	c7 44 24 04 3b f6 05 	movl   $0x805f63b,0x4(%esp)
 8054e89:	08 
 8054e8a:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 8054e90:	89 04 24             	mov    %eax,(%esp)
 8054e93:	e8 65 53 00 00       	call   805a1fd <memcmp>
 8054e98:	85 c0                	test   %eax,%eax
 8054e9a:	0f 94 c0             	sete   %al
 8054e9d:	0f b6 c0             	movzbl %al,%eax
 8054ea0:	c7 44 24 10 08 03 06 	movl   $0x8060308,0x10(%esp)
 8054ea7:	08 
 8054ea8:	c7 44 24 0c 18 16 06 	movl   $0x8061618,0xc(%esp)
 8054eaf:	08 
 8054eb0:	c7 44 24 08 2d 03 00 	movl   $0x32d,0x8(%esp)
 8054eb7:	00 
 8054eb8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054ebf:	08 
 8054ec0:	89 04 24             	mov    %eax,(%esp)
 8054ec3:	e8 c8 96 00 00       	call   805e590 <_test_assert>
        syscall_fail(lseek(fd, -8, SEEK_CUR), EINVAL);
 8054ec8:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 8054ecf:	e8 55 94 00 00       	call   805e329 <test_errstr>
 8054ed4:	89 c3                	mov    %eax,%ebx
 8054ed6:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8054edd:	00 00 00 
 8054ee0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8054ee7:	00 
 8054ee8:	c7 44 24 04 f8 ff ff 	movl   $0xfffffff8,0x4(%esp)
 8054eef:	ff 
 8054ef0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054ef3:	89 04 24             	mov    %eax,(%esp)
 8054ef6:	e8 d5 4a 00 00       	call   80599d0 <lseek>
 8054efb:	83 f8 ff             	cmp    $0xffffffff,%eax
 8054efe:	0f 94 c0             	sete   %al
 8054f01:	0f b6 c0             	movzbl %al,%eax
 8054f04:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 8054f0b:	00 
 8054f0c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8054f10:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8054f17:	08 
 8054f18:	c7 44 24 0c 0c 17 06 	movl   $0x806170c,0xc(%esp)
 8054f1f:	08 
 8054f20:	c7 44 24 08 2e 03 00 	movl   $0x32e,0x8(%esp)
 8054f27:	00 
 8054f28:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054f2f:	08 
 8054f30:	89 04 24             	mov    %eax,(%esp)
 8054f33:	e8 58 96 00 00       	call   805e590 <_test_assert>
 8054f38:	85 c0                	test   %eax,%eax
 8054f3a:	0f 84 88 00 00 00    	je     8054fc8 <vfstest_read+0xacd>
 8054f40:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8054f46:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8054f4b:	89 04 24             	mov    %eax,(%esp)
 8054f4e:	e8 d6 93 00 00       	call   805e329 <test_errstr>
 8054f53:	89 c6                	mov    %eax,%esi
 8054f55:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 8054f5c:	e8 c8 93 00 00       	call   805e329 <test_errstr>
 8054f61:	89 c3                	mov    %eax,%ebx
 8054f63:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8054f6a:	00 
 8054f6b:	c7 44 24 04 f8 ff ff 	movl   $0xfffffff8,0x4(%esp)
 8054f72:	ff 
 8054f73:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054f76:	89 04 24             	mov    %eax,(%esp)
 8054f79:	e8 52 4a 00 00       	call   80599d0 <lseek>
 8054f7e:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8054f83:	83 f8 16             	cmp    $0x16,%eax
 8054f86:	0f 94 c0             	sete   %al
 8054f89:	0f b6 c0             	movzbl %al,%eax
 8054f8c:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8054f90:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8054f94:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 8054f9b:	00 
 8054f9c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8054fa0:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8054fa7:	08 
 8054fa8:	c7 44 24 0c 34 17 06 	movl   $0x8061734,0xc(%esp)
 8054faf:	08 
 8054fb0:	c7 44 24 08 2e 03 00 	movl   $0x32e,0x8(%esp)
 8054fb7:	00 
 8054fb8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8054fbf:	08 
 8054fc0:	89 04 24             	mov    %eax,(%esp)
 8054fc3:	e8 c8 95 00 00       	call   805e590 <_test_assert>

        test_lseek(lseek(fd, 0, SEEK_SET), 0);
 8054fc8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8054fcf:	00 
 8054fd0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8054fd7:	00 
 8054fd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8054fdb:	89 04 24             	mov    %eax,(%esp)
 8054fde:	e8 ed 49 00 00       	call   80599d0 <lseek>
 8054fe3:	89 45 d0             	mov    %eax,-0x30(%ebp)
 8054fe6:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
 8054fea:	0f 94 c0             	sete   %al
 8054fed:	0f b6 c0             	movzbl %al,%eax
 8054ff0:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
 8054ff7:	00 
 8054ff8:	8b 55 d0             	mov    -0x30(%ebp),%edx
 8054ffb:	89 54 24 14          	mov    %edx,0x14(%esp)
 8054fff:	c7 44 24 10 54 17 06 	movl   $0x8061754,0x10(%esp)
 8055006:	08 
 8055007:	c7 44 24 0c 84 17 06 	movl   $0x8061784,0xc(%esp)
 805500e:	08 
 805500f:	c7 44 24 08 30 03 00 	movl   $0x330,0x8(%esp)
 8055016:	00 
 8055017:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805501e:	08 
 805501f:	89 04 24             	mov    %eax,(%esp)
 8055022:	e8 69 95 00 00       	call   805e590 <_test_assert>
        read_fd(fd, 10, "hello");
 8055027:	c7 04 24 0e 02 06 08 	movl   $0x806020e,(%esp)
 805502e:	e8 37 54 00 00       	call   805a46a <strlen>
 8055033:	89 c3                	mov    %eax,%ebx
 8055035:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
 805503c:	00 
 805503d:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 8055043:	89 44 24 04          	mov    %eax,0x4(%esp)
 8055047:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805504a:	89 04 24             	mov    %eax,(%esp)
 805504d:	e8 cf 49 00 00       	call   8059a21 <read>
 8055052:	39 c3                	cmp    %eax,%ebx
 8055054:	0f 94 c0             	sete   %al
 8055057:	0f b6 c0             	movzbl %al,%eax
 805505a:	c7 44 24 10 b4 02 06 	movl   $0x80602b4,0x10(%esp)
 8055061:	08 
 8055062:	c7 44 24 0c 90 17 06 	movl   $0x8061790,0xc(%esp)
 8055069:	08 
 805506a:	c7 44 24 08 31 03 00 	movl   $0x331,0x8(%esp)
 8055071:	00 
 8055072:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055079:	08 
 805507a:	89 04 24             	mov    %eax,(%esp)
 805507d:	e8 0e 95 00 00       	call   805e590 <_test_assert>
 8055082:	c7 04 24 0e 02 06 08 	movl   $0x806020e,(%esp)
 8055089:	e8 dc 53 00 00       	call   805a46a <strlen>
 805508e:	89 44 24 08          	mov    %eax,0x8(%esp)
 8055092:	c7 44 24 04 0e 02 06 	movl   $0x806020e,0x4(%esp)
 8055099:	08 
 805509a:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 80550a0:	89 04 24             	mov    %eax,(%esp)
 80550a3:	e8 55 51 00 00       	call   805a1fd <memcmp>
 80550a8:	85 c0                	test   %eax,%eax
 80550aa:	0f 94 c0             	sete   %al
 80550ad:	0f b6 c0             	movzbl %al,%eax
 80550b0:	c7 44 24 10 08 03 06 	movl   $0x8060308,0x10(%esp)
 80550b7:	08 
 80550b8:	c7 44 24 0c 20 03 06 	movl   $0x8060320,0xc(%esp)
 80550bf:	08 
 80550c0:	c7 44 24 08 31 03 00 	movl   $0x331,0x8(%esp)
 80550c7:	00 
 80550c8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80550cf:	08 
 80550d0:	89 04 24             	mov    %eax,(%esp)
 80550d3:	e8 b8 94 00 00       	call   805e590 <_test_assert>
        test_lseek(lseek(fd, 3, SEEK_SET), 3);
 80550d8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80550df:	00 
 80550e0:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
 80550e7:	00 
 80550e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80550eb:	89 04 24             	mov    %eax,(%esp)
 80550ee:	e8 dd 48 00 00       	call   80599d0 <lseek>
 80550f3:	89 45 cc             	mov    %eax,-0x34(%ebp)
 80550f6:	83 7d cc 03          	cmpl   $0x3,-0x34(%ebp)
 80550fa:	0f 94 c0             	sete   %al
 80550fd:	0f b6 c0             	movzbl %al,%eax
 8055100:	c7 44 24 18 03 00 00 	movl   $0x3,0x18(%esp)
 8055107:	00 
 8055108:	8b 55 cc             	mov    -0x34(%ebp),%edx
 805510b:	89 54 24 14          	mov    %edx,0x14(%esp)
 805510f:	c7 44 24 10 c0 17 06 	movl   $0x80617c0,0x10(%esp)
 8055116:	08 
 8055117:	c7 44 24 0c f0 17 06 	movl   $0x80617f0,0xc(%esp)
 805511e:	08 
 805511f:	c7 44 24 08 32 03 00 	movl   $0x332,0x8(%esp)
 8055126:	00 
 8055127:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805512e:	08 
 805512f:	89 04 24             	mov    %eax,(%esp)
 8055132:	e8 59 94 00 00       	call   805e590 <_test_assert>
        read_fd(fd, 10, "lo");
 8055137:	c7 04 24 fb 17 06 08 	movl   $0x80617fb,(%esp)
 805513e:	e8 27 53 00 00       	call   805a46a <strlen>
 8055143:	89 c3                	mov    %eax,%ebx
 8055145:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
 805514c:	00 
 805514d:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 8055153:	89 44 24 04          	mov    %eax,0x4(%esp)
 8055157:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805515a:	89 04 24             	mov    %eax,(%esp)
 805515d:	e8 bf 48 00 00       	call   8059a21 <read>
 8055162:	39 c3                	cmp    %eax,%ebx
 8055164:	0f 94 c0             	sete   %al
 8055167:	0f b6 c0             	movzbl %al,%eax
 805516a:	c7 44 24 10 b4 02 06 	movl   $0x80602b4,0x10(%esp)
 8055171:	08 
 8055172:	c7 44 24 0c 00 18 06 	movl   $0x8061800,0xc(%esp)
 8055179:	08 
 805517a:	c7 44 24 08 33 03 00 	movl   $0x333,0x8(%esp)
 8055181:	00 
 8055182:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055189:	08 
 805518a:	89 04 24             	mov    %eax,(%esp)
 805518d:	e8 fe 93 00 00       	call   805e590 <_test_assert>
 8055192:	c7 04 24 fb 17 06 08 	movl   $0x80617fb,(%esp)
 8055199:	e8 cc 52 00 00       	call   805a46a <strlen>
 805519e:	89 44 24 08          	mov    %eax,0x8(%esp)
 80551a2:	c7 44 24 04 fb 17 06 	movl   $0x80617fb,0x4(%esp)
 80551a9:	08 
 80551aa:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 80551b0:	89 04 24             	mov    %eax,(%esp)
 80551b3:	e8 45 50 00 00       	call   805a1fd <memcmp>
 80551b8:	85 c0                	test   %eax,%eax
 80551ba:	0f 94 c0             	sete   %al
 80551bd:	0f b6 c0             	movzbl %al,%eax
 80551c0:	c7 44 24 10 08 03 06 	movl   $0x8060308,0x10(%esp)
 80551c7:	08 
 80551c8:	c7 44 24 0c 30 18 06 	movl   $0x8061830,0xc(%esp)
 80551cf:	08 
 80551d0:	c7 44 24 08 33 03 00 	movl   $0x333,0x8(%esp)
 80551d7:	00 
 80551d8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80551df:	08 
 80551e0:	89 04 24             	mov    %eax,(%esp)
 80551e3:	e8 a8 93 00 00       	call   805e590 <_test_assert>
        test_lseek(lseek(fd, 7, SEEK_SET), 7);
 80551e8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80551ef:	00 
 80551f0:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%esp)
 80551f7:	00 
 80551f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80551fb:	89 04 24             	mov    %eax,(%esp)
 80551fe:	e8 cd 47 00 00       	call   80599d0 <lseek>
 8055203:	89 45 c8             	mov    %eax,-0x38(%ebp)
 8055206:	83 7d c8 07          	cmpl   $0x7,-0x38(%ebp)
 805520a:	0f 94 c0             	sete   %al
 805520d:	0f b6 c0             	movzbl %al,%eax
 8055210:	c7 44 24 18 07 00 00 	movl   $0x7,0x18(%esp)
 8055217:	00 
 8055218:	8b 55 c8             	mov    -0x38(%ebp),%edx
 805521b:	89 54 24 14          	mov    %edx,0x14(%esp)
 805521f:	c7 44 24 10 58 18 06 	movl   $0x8061858,0x10(%esp)
 8055226:	08 
 8055227:	c7 44 24 0c 00 17 06 	movl   $0x8061700,0xc(%esp)
 805522e:	08 
 805522f:	c7 44 24 08 34 03 00 	movl   $0x334,0x8(%esp)
 8055236:	00 
 8055237:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805523e:	08 
 805523f:	89 04 24             	mov    %eax,(%esp)
 8055242:	e8 49 93 00 00       	call   805e590 <_test_assert>
        read_fd(fd, 10, "");
 8055247:	c7 04 24 3b f6 05 08 	movl   $0x805f63b,(%esp)
 805524e:	e8 17 52 00 00       	call   805a46a <strlen>
 8055253:	89 c3                	mov    %eax,%ebx
 8055255:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
 805525c:	00 
 805525d:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 8055263:	89 44 24 04          	mov    %eax,0x4(%esp)
 8055267:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805526a:	89 04 24             	mov    %eax,(%esp)
 805526d:	e8 af 47 00 00       	call   8059a21 <read>
 8055272:	39 c3                	cmp    %eax,%ebx
 8055274:	0f 94 c0             	sete   %al
 8055277:	0f b6 c0             	movzbl %al,%eax
 805527a:	c7 44 24 10 b4 02 06 	movl   $0x80602b4,0x10(%esp)
 8055281:	08 
 8055282:	c7 44 24 0c ec 15 06 	movl   $0x80615ec,0xc(%esp)
 8055289:	08 
 805528a:	c7 44 24 08 35 03 00 	movl   $0x335,0x8(%esp)
 8055291:	00 
 8055292:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055299:	08 
 805529a:	89 04 24             	mov    %eax,(%esp)
 805529d:	e8 ee 92 00 00       	call   805e590 <_test_assert>
 80552a2:	c7 04 24 3b f6 05 08 	movl   $0x805f63b,(%esp)
 80552a9:	e8 bc 51 00 00       	call   805a46a <strlen>
 80552ae:	89 44 24 08          	mov    %eax,0x8(%esp)
 80552b2:	c7 44 24 04 3b f6 05 	movl   $0x805f63b,0x4(%esp)
 80552b9:	08 
 80552ba:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 80552c0:	89 04 24             	mov    %eax,(%esp)
 80552c3:	e8 35 4f 00 00       	call   805a1fd <memcmp>
 80552c8:	85 c0                	test   %eax,%eax
 80552ca:	0f 94 c0             	sete   %al
 80552cd:	0f b6 c0             	movzbl %al,%eax
 80552d0:	c7 44 24 10 08 03 06 	movl   $0x8060308,0x10(%esp)
 80552d7:	08 
 80552d8:	c7 44 24 0c 18 16 06 	movl   $0x8061618,0xc(%esp)
 80552df:	08 
 80552e0:	c7 44 24 08 35 03 00 	movl   $0x335,0x8(%esp)
 80552e7:	00 
 80552e8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80552ef:	08 
 80552f0:	89 04 24             	mov    %eax,(%esp)
 80552f3:	e8 98 92 00 00       	call   805e590 <_test_assert>
        syscall_fail(lseek(fd, -1, SEEK_SET), EINVAL);
 80552f8:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 80552ff:	e8 25 90 00 00       	call   805e329 <test_errstr>
 8055304:	89 c3                	mov    %eax,%ebx
 8055306:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 805530d:	00 00 00 
 8055310:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8055317:	00 
 8055318:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 805531f:	ff 
 8055320:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8055323:	89 04 24             	mov    %eax,(%esp)
 8055326:	e8 a5 46 00 00       	call   80599d0 <lseek>
 805532b:	83 f8 ff             	cmp    $0xffffffff,%eax
 805532e:	0f 94 c0             	sete   %al
 8055331:	0f b6 c0             	movzbl %al,%eax
 8055334:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 805533b:	00 
 805533c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8055340:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8055347:	08 
 8055348:	c7 44 24 0c 88 18 06 	movl   $0x8061888,0xc(%esp)
 805534f:	08 
 8055350:	c7 44 24 08 36 03 00 	movl   $0x336,0x8(%esp)
 8055357:	00 
 8055358:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805535f:	08 
 8055360:	89 04 24             	mov    %eax,(%esp)
 8055363:	e8 28 92 00 00       	call   805e590 <_test_assert>
 8055368:	85 c0                	test   %eax,%eax
 805536a:	0f 84 88 00 00 00    	je     80553f8 <vfstest_read+0xefd>
 8055370:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8055376:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805537b:	89 04 24             	mov    %eax,(%esp)
 805537e:	e8 a6 8f 00 00       	call   805e329 <test_errstr>
 8055383:	89 c6                	mov    %eax,%esi
 8055385:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 805538c:	e8 98 8f 00 00       	call   805e329 <test_errstr>
 8055391:	89 c3                	mov    %eax,%ebx
 8055393:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 805539a:	00 
 805539b:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 80553a2:	ff 
 80553a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80553a6:	89 04 24             	mov    %eax,(%esp)
 80553a9:	e8 22 46 00 00       	call   80599d0 <lseek>
 80553ae:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80553b3:	83 f8 16             	cmp    $0x16,%eax
 80553b6:	0f 94 c0             	sete   %al
 80553b9:	0f b6 c0             	movzbl %al,%eax
 80553bc:	89 7c 24 20          	mov    %edi,0x20(%esp)
 80553c0:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 80553c4:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 80553cb:	00 
 80553cc:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80553d0:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 80553d7:	08 
 80553d8:	c7 44 24 0c b0 18 06 	movl   $0x80618b0,0xc(%esp)
 80553df:	08 
 80553e0:	c7 44 24 08 36 03 00 	movl   $0x336,0x8(%esp)
 80553e7:	00 
 80553e8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80553ef:	08 
 80553f0:	89 04 24             	mov    %eax,(%esp)
 80553f3:	e8 98 91 00 00       	call   805e590 <_test_assert>

        test_lseek(lseek(fd, 0, SEEK_END), 5);
 80553f8:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
 80553ff:	00 
 8055400:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8055407:	00 
 8055408:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805540b:	89 04 24             	mov    %eax,(%esp)
 805540e:	e8 bd 45 00 00       	call   80599d0 <lseek>
 8055413:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 8055416:	83 7d c4 05          	cmpl   $0x5,-0x3c(%ebp)
 805541a:	0f 94 c0             	sete   %al
 805541d:	0f b6 c0             	movzbl %al,%eax
 8055420:	c7 44 24 18 05 00 00 	movl   $0x5,0x18(%esp)
 8055427:	00 
 8055428:	8b 55 c4             	mov    -0x3c(%ebp),%edx
 805542b:	89 54 24 14          	mov    %edx,0x14(%esp)
 805542f:	c7 44 24 10 d0 18 06 	movl   $0x80618d0,0x10(%esp)
 8055436:	08 
 8055437:	c7 44 24 0c e0 15 06 	movl   $0x80615e0,0xc(%esp)
 805543e:	08 
 805543f:	c7 44 24 08 38 03 00 	movl   $0x338,0x8(%esp)
 8055446:	00 
 8055447:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805544e:	08 
 805544f:	89 04 24             	mov    %eax,(%esp)
 8055452:	e8 39 91 00 00       	call   805e590 <_test_assert>
        read_fd(fd, 10, "");
 8055457:	c7 04 24 3b f6 05 08 	movl   $0x805f63b,(%esp)
 805545e:	e8 07 50 00 00       	call   805a46a <strlen>
 8055463:	89 c3                	mov    %eax,%ebx
 8055465:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
 805546c:	00 
 805546d:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 8055473:	89 44 24 04          	mov    %eax,0x4(%esp)
 8055477:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805547a:	89 04 24             	mov    %eax,(%esp)
 805547d:	e8 9f 45 00 00       	call   8059a21 <read>
 8055482:	39 c3                	cmp    %eax,%ebx
 8055484:	0f 94 c0             	sete   %al
 8055487:	0f b6 c0             	movzbl %al,%eax
 805548a:	c7 44 24 10 b4 02 06 	movl   $0x80602b4,0x10(%esp)
 8055491:	08 
 8055492:	c7 44 24 0c ec 15 06 	movl   $0x80615ec,0xc(%esp)
 8055499:	08 
 805549a:	c7 44 24 08 39 03 00 	movl   $0x339,0x8(%esp)
 80554a1:	00 
 80554a2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80554a9:	08 
 80554aa:	89 04 24             	mov    %eax,(%esp)
 80554ad:	e8 de 90 00 00       	call   805e590 <_test_assert>
 80554b2:	c7 04 24 3b f6 05 08 	movl   $0x805f63b,(%esp)
 80554b9:	e8 ac 4f 00 00       	call   805a46a <strlen>
 80554be:	89 44 24 08          	mov    %eax,0x8(%esp)
 80554c2:	c7 44 24 04 3b f6 05 	movl   $0x805f63b,0x4(%esp)
 80554c9:	08 
 80554ca:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 80554d0:	89 04 24             	mov    %eax,(%esp)
 80554d3:	e8 25 4d 00 00       	call   805a1fd <memcmp>
 80554d8:	85 c0                	test   %eax,%eax
 80554da:	0f 94 c0             	sete   %al
 80554dd:	0f b6 c0             	movzbl %al,%eax
 80554e0:	c7 44 24 10 08 03 06 	movl   $0x8060308,0x10(%esp)
 80554e7:	08 
 80554e8:	c7 44 24 0c 18 16 06 	movl   $0x8061618,0xc(%esp)
 80554ef:	08 
 80554f0:	c7 44 24 08 39 03 00 	movl   $0x339,0x8(%esp)
 80554f7:	00 
 80554f8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80554ff:	08 
 8055500:	89 04 24             	mov    %eax,(%esp)
 8055503:	e8 88 90 00 00       	call   805e590 <_test_assert>
        test_lseek(lseek(fd, -2, SEEK_END), 3);
 8055508:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
 805550f:	00 
 8055510:	c7 44 24 04 fe ff ff 	movl   $0xfffffffe,0x4(%esp)
 8055517:	ff 
 8055518:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805551b:	89 04 24             	mov    %eax,(%esp)
 805551e:	e8 ad 44 00 00       	call   80599d0 <lseek>
 8055523:	89 45 c0             	mov    %eax,-0x40(%ebp)
 8055526:	83 7d c0 03          	cmpl   $0x3,-0x40(%ebp)
 805552a:	0f 94 c0             	sete   %al
 805552d:	0f b6 c0             	movzbl %al,%eax
 8055530:	c7 44 24 18 03 00 00 	movl   $0x3,0x18(%esp)
 8055537:	00 
 8055538:	8b 55 c0             	mov    -0x40(%ebp),%edx
 805553b:	89 54 24 14          	mov    %edx,0x14(%esp)
 805553f:	c7 44 24 10 00 19 06 	movl   $0x8061900,0x10(%esp)
 8055546:	08 
 8055547:	c7 44 24 0c f0 17 06 	movl   $0x80617f0,0xc(%esp)
 805554e:	08 
 805554f:	c7 44 24 08 3a 03 00 	movl   $0x33a,0x8(%esp)
 8055556:	00 
 8055557:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805555e:	08 
 805555f:	89 04 24             	mov    %eax,(%esp)
 8055562:	e8 29 90 00 00       	call   805e590 <_test_assert>
        read_fd(fd, 10, "lo");
 8055567:	c7 04 24 fb 17 06 08 	movl   $0x80617fb,(%esp)
 805556e:	e8 f7 4e 00 00       	call   805a46a <strlen>
 8055573:	89 c3                	mov    %eax,%ebx
 8055575:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
 805557c:	00 
 805557d:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 8055583:	89 44 24 04          	mov    %eax,0x4(%esp)
 8055587:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805558a:	89 04 24             	mov    %eax,(%esp)
 805558d:	e8 8f 44 00 00       	call   8059a21 <read>
 8055592:	39 c3                	cmp    %eax,%ebx
 8055594:	0f 94 c0             	sete   %al
 8055597:	0f b6 c0             	movzbl %al,%eax
 805559a:	c7 44 24 10 b4 02 06 	movl   $0x80602b4,0x10(%esp)
 80555a1:	08 
 80555a2:	c7 44 24 0c 00 18 06 	movl   $0x8061800,0xc(%esp)
 80555a9:	08 
 80555aa:	c7 44 24 08 3b 03 00 	movl   $0x33b,0x8(%esp)
 80555b1:	00 
 80555b2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80555b9:	08 
 80555ba:	89 04 24             	mov    %eax,(%esp)
 80555bd:	e8 ce 8f 00 00       	call   805e590 <_test_assert>
 80555c2:	c7 04 24 fb 17 06 08 	movl   $0x80617fb,(%esp)
 80555c9:	e8 9c 4e 00 00       	call   805a46a <strlen>
 80555ce:	89 44 24 08          	mov    %eax,0x8(%esp)
 80555d2:	c7 44 24 04 fb 17 06 	movl   $0x80617fb,0x4(%esp)
 80555d9:	08 
 80555da:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 80555e0:	89 04 24             	mov    %eax,(%esp)
 80555e3:	e8 15 4c 00 00       	call   805a1fd <memcmp>
 80555e8:	85 c0                	test   %eax,%eax
 80555ea:	0f 94 c0             	sete   %al
 80555ed:	0f b6 c0             	movzbl %al,%eax
 80555f0:	c7 44 24 10 08 03 06 	movl   $0x8060308,0x10(%esp)
 80555f7:	08 
 80555f8:	c7 44 24 0c 30 18 06 	movl   $0x8061830,0xc(%esp)
 80555ff:	08 
 8055600:	c7 44 24 08 3b 03 00 	movl   $0x33b,0x8(%esp)
 8055607:	00 
 8055608:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805560f:	08 
 8055610:	89 04 24             	mov    %eax,(%esp)
 8055613:	e8 78 8f 00 00       	call   805e590 <_test_assert>
        test_lseek(lseek(fd, 3, SEEK_END), 8);
 8055618:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
 805561f:	00 
 8055620:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
 8055627:	00 
 8055628:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805562b:	89 04 24             	mov    %eax,(%esp)
 805562e:	e8 9d 43 00 00       	call   80599d0 <lseek>
 8055633:	89 45 bc             	mov    %eax,-0x44(%ebp)
 8055636:	83 7d bc 08          	cmpl   $0x8,-0x44(%ebp)
 805563a:	0f 94 c0             	sete   %al
 805563d:	0f b6 c0             	movzbl %al,%eax
 8055640:	c7 44 24 18 08 00 00 	movl   $0x8,0x18(%esp)
 8055647:	00 
 8055648:	8b 55 bc             	mov    -0x44(%ebp),%edx
 805564b:	89 54 24 14          	mov    %edx,0x14(%esp)
 805564f:	c7 44 24 10 34 19 06 	movl   $0x8061934,0x10(%esp)
 8055656:	08 
 8055657:	c7 44 24 0c 64 19 06 	movl   $0x8061964,0xc(%esp)
 805565e:	08 
 805565f:	c7 44 24 08 3c 03 00 	movl   $0x33c,0x8(%esp)
 8055666:	00 
 8055667:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805566e:	08 
 805566f:	89 04 24             	mov    %eax,(%esp)
 8055672:	e8 19 8f 00 00       	call   805e590 <_test_assert>
        read_fd(fd, 10, "");
 8055677:	c7 04 24 3b f6 05 08 	movl   $0x805f63b,(%esp)
 805567e:	e8 e7 4d 00 00       	call   805a46a <strlen>
 8055683:	89 c3                	mov    %eax,%ebx
 8055685:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
 805568c:	00 
 805568d:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 8055693:	89 44 24 04          	mov    %eax,0x4(%esp)
 8055697:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805569a:	89 04 24             	mov    %eax,(%esp)
 805569d:	e8 7f 43 00 00       	call   8059a21 <read>
 80556a2:	39 c3                	cmp    %eax,%ebx
 80556a4:	0f 94 c0             	sete   %al
 80556a7:	0f b6 c0             	movzbl %al,%eax
 80556aa:	c7 44 24 10 b4 02 06 	movl   $0x80602b4,0x10(%esp)
 80556b1:	08 
 80556b2:	c7 44 24 0c ec 15 06 	movl   $0x80615ec,0xc(%esp)
 80556b9:	08 
 80556ba:	c7 44 24 08 3d 03 00 	movl   $0x33d,0x8(%esp)
 80556c1:	00 
 80556c2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80556c9:	08 
 80556ca:	89 04 24             	mov    %eax,(%esp)
 80556cd:	e8 be 8e 00 00       	call   805e590 <_test_assert>
 80556d2:	c7 04 24 3b f6 05 08 	movl   $0x805f63b,(%esp)
 80556d9:	e8 8c 4d 00 00       	call   805a46a <strlen>
 80556de:	89 44 24 08          	mov    %eax,0x8(%esp)
 80556e2:	c7 44 24 04 3b f6 05 	movl   $0x805f63b,0x4(%esp)
 80556e9:	08 
 80556ea:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 80556f0:	89 04 24             	mov    %eax,(%esp)
 80556f3:	e8 05 4b 00 00       	call   805a1fd <memcmp>
 80556f8:	85 c0                	test   %eax,%eax
 80556fa:	0f 94 c0             	sete   %al
 80556fd:	0f b6 c0             	movzbl %al,%eax
 8055700:	c7 44 24 10 08 03 06 	movl   $0x8060308,0x10(%esp)
 8055707:	08 
 8055708:	c7 44 24 0c 18 16 06 	movl   $0x8061618,0xc(%esp)
 805570f:	08 
 8055710:	c7 44 24 08 3d 03 00 	movl   $0x33d,0x8(%esp)
 8055717:	00 
 8055718:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805571f:	08 
 8055720:	89 04 24             	mov    %eax,(%esp)
 8055723:	e8 68 8e 00 00       	call   805e590 <_test_assert>
        syscall_fail(lseek(fd, -8, SEEK_END), EINVAL);
 8055728:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 805572f:	e8 f5 8b 00 00       	call   805e329 <test_errstr>
 8055734:	89 c3                	mov    %eax,%ebx
 8055736:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 805573d:	00 00 00 
 8055740:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
 8055747:	00 
 8055748:	c7 44 24 04 f8 ff ff 	movl   $0xfffffff8,0x4(%esp)
 805574f:	ff 
 8055750:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8055753:	89 04 24             	mov    %eax,(%esp)
 8055756:	e8 75 42 00 00       	call   80599d0 <lseek>
 805575b:	83 f8 ff             	cmp    $0xffffffff,%eax
 805575e:	0f 94 c0             	sete   %al
 8055761:	0f b6 c0             	movzbl %al,%eax
 8055764:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 805576b:	00 
 805576c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8055770:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8055777:	08 
 8055778:	c7 44 24 0c 70 19 06 	movl   $0x8061970,0xc(%esp)
 805577f:	08 
 8055780:	c7 44 24 08 3e 03 00 	movl   $0x33e,0x8(%esp)
 8055787:	00 
 8055788:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805578f:	08 
 8055790:	89 04 24             	mov    %eax,(%esp)
 8055793:	e8 f8 8d 00 00       	call   805e590 <_test_assert>
 8055798:	85 c0                	test   %eax,%eax
 805579a:	0f 84 88 00 00 00    	je     8055828 <vfstest_read+0x132d>
 80557a0:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 80557a6:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80557ab:	89 04 24             	mov    %eax,(%esp)
 80557ae:	e8 76 8b 00 00       	call   805e329 <test_errstr>
 80557b3:	89 c6                	mov    %eax,%esi
 80557b5:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 80557bc:	e8 68 8b 00 00       	call   805e329 <test_errstr>
 80557c1:	89 c3                	mov    %eax,%ebx
 80557c3:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
 80557ca:	00 
 80557cb:	c7 44 24 04 f8 ff ff 	movl   $0xfffffff8,0x4(%esp)
 80557d2:	ff 
 80557d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80557d6:	89 04 24             	mov    %eax,(%esp)
 80557d9:	e8 f2 41 00 00       	call   80599d0 <lseek>
 80557de:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80557e3:	83 f8 16             	cmp    $0x16,%eax
 80557e6:	0f 94 c0             	sete   %al
 80557e9:	0f b6 c0             	movzbl %al,%eax
 80557ec:	89 7c 24 20          	mov    %edi,0x20(%esp)
 80557f0:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 80557f4:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 80557fb:	00 
 80557fc:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8055800:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8055807:	08 
 8055808:	c7 44 24 0c 98 19 06 	movl   $0x8061998,0xc(%esp)
 805580f:	08 
 8055810:	c7 44 24 08 3e 03 00 	movl   $0x33e,0x8(%esp)
 8055817:	00 
 8055818:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805581f:	08 
 8055820:	89 04 24             	mov    %eax,(%esp)
 8055823:	e8 68 8d 00 00       	call   805e590 <_test_assert>

        syscall_fail(lseek(fd, 0, SEEK_SET + SEEK_CUR + SEEK_END), EINVAL);
 8055828:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 805582f:	e8 f5 8a 00 00       	call   805e329 <test_errstr>
 8055834:	89 c3                	mov    %eax,%ebx
 8055836:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 805583d:	00 00 00 
 8055840:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
 8055847:	00 
 8055848:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 805584f:	00 
 8055850:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8055853:	89 04 24             	mov    %eax,(%esp)
 8055856:	e8 75 41 00 00       	call   80599d0 <lseek>
 805585b:	83 f8 ff             	cmp    $0xffffffff,%eax
 805585e:	0f 94 c0             	sete   %al
 8055861:	0f b6 c0             	movzbl %al,%eax
 8055864:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 805586b:	00 
 805586c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8055870:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8055877:	08 
 8055878:	c7 44 24 0c b8 19 06 	movl   $0x80619b8,0xc(%esp)
 805587f:	08 
 8055880:	c7 44 24 08 40 03 00 	movl   $0x340,0x8(%esp)
 8055887:	00 
 8055888:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805588f:	08 
 8055890:	89 04 24             	mov    %eax,(%esp)
 8055893:	e8 f8 8c 00 00       	call   805e590 <_test_assert>
 8055898:	85 c0                	test   %eax,%eax
 805589a:	0f 84 88 00 00 00    	je     8055928 <vfstest_read+0x142d>
 80558a0:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 80558a6:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80558ab:	89 04 24             	mov    %eax,(%esp)
 80558ae:	e8 76 8a 00 00       	call   805e329 <test_errstr>
 80558b3:	89 c6                	mov    %eax,%esi
 80558b5:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 80558bc:	e8 68 8a 00 00       	call   805e329 <test_errstr>
 80558c1:	89 c3                	mov    %eax,%ebx
 80558c3:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
 80558ca:	00 
 80558cb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80558d2:	00 
 80558d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80558d6:	89 04 24             	mov    %eax,(%esp)
 80558d9:	e8 f2 40 00 00       	call   80599d0 <lseek>
 80558de:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80558e3:	83 f8 16             	cmp    $0x16,%eax
 80558e6:	0f 94 c0             	sete   %al
 80558e9:	0f b6 c0             	movzbl %al,%eax
 80558ec:	89 7c 24 20          	mov    %edi,0x20(%esp)
 80558f0:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 80558f4:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 80558fb:	00 
 80558fc:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8055900:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8055907:	08 
 8055908:	c7 44 24 0c e8 19 06 	movl   $0x80619e8,0xc(%esp)
 805590f:	08 
 8055910:	c7 44 24 08 40 03 00 	movl   $0x340,0x8(%esp)
 8055917:	00 
 8055918:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805591f:	08 
 8055920:	89 04 24             	mov    %eax,(%esp)
 8055923:	e8 68 8c 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 8055928:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805592e:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8055933:	89 04 24             	mov    %eax,(%esp)
 8055936:	e8 ee 89 00 00       	call   805e329 <test_errstr>
 805593b:	89 c3                	mov    %eax,%ebx
 805593d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8055940:	89 04 24             	mov    %eax,(%esp)
 8055943:	e8 7b 41 00 00       	call   8059ac3 <close>
 8055948:	f7 d0                	not    %eax
 805594a:	c1 e8 1f             	shr    $0x1f,%eax
 805594d:	0f b6 c0             	movzbl %al,%eax
 8055950:	89 74 24 18          	mov    %esi,0x18(%esp)
 8055954:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8055958:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805595f:	08 
 8055960:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 8055967:	08 
 8055968:	c7 44 24 08 41 03 00 	movl   $0x341,0x8(%esp)
 805596f:	00 
 8055970:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055977:	08 
 8055978:	89 04 24             	mov    %eax,(%esp)
 805597b:	e8 10 8c 00 00       	call   805e590 <_test_assert>

        /* O_APPEND works properly */
        create_file("file03");
 8055980:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8055986:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805598b:	89 04 24             	mov    %eax,(%esp)
 805598e:	e8 96 89 00 00       	call   805e329 <test_errstr>
 8055993:	89 c3                	mov    %eax,%ebx
 8055995:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 805599c:	00 
 805599d:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 80559a4:	00 
 80559a5:	c7 04 24 6c 0d 06 08 	movl   $0x8060d6c,(%esp)
 80559ac:	e8 bb 3f 00 00       	call   805996c <open>
 80559b1:	89 45 b8             	mov    %eax,-0x48(%ebp)
 80559b4:	8b 45 b8             	mov    -0x48(%ebp),%eax
 80559b7:	f7 d0                	not    %eax
 80559b9:	c1 e8 1f             	shr    $0x1f,%eax
 80559bc:	0f b6 c0             	movzbl %al,%eax
 80559bf:	89 74 24 18          	mov    %esi,0x18(%esp)
 80559c3:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80559c7:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80559ce:	08 
 80559cf:	c7 44 24 0c 10 1a 06 	movl   $0x8061a10,0xc(%esp)
 80559d6:	08 
 80559d7:	c7 44 24 08 44 03 00 	movl   $0x344,0x8(%esp)
 80559de:	00 
 80559df:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80559e6:	08 
 80559e7:	89 04 24             	mov    %eax,(%esp)
 80559ea:	e8 a1 8b 00 00       	call   805e590 <_test_assert>
 80559ef:	85 c0                	test   %eax,%eax
 80559f1:	74 58                	je     8055a4b <vfstest_read+0x1550>
 80559f3:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80559f9:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80559fe:	89 04 24             	mov    %eax,(%esp)
 8055a01:	e8 23 89 00 00       	call   805e329 <test_errstr>
 8055a06:	89 c3                	mov    %eax,%ebx
 8055a08:	8b 45 b8             	mov    -0x48(%ebp),%eax
 8055a0b:	89 04 24             	mov    %eax,(%esp)
 8055a0e:	e8 b0 40 00 00       	call   8059ac3 <close>
 8055a13:	f7 d0                	not    %eax
 8055a15:	c1 e8 1f             	shr    $0x1f,%eax
 8055a18:	0f b6 c0             	movzbl %al,%eax
 8055a1b:	89 74 24 18          	mov    %esi,0x18(%esp)
 8055a1f:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8055a23:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8055a2a:	08 
 8055a2b:	c7 44 24 0c 78 ec 05 	movl   $0x805ec78,0xc(%esp)
 8055a32:	08 
 8055a33:	c7 44 24 08 44 03 00 	movl   $0x344,0x8(%esp)
 8055a3a:	00 
 8055a3b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055a42:	08 
 8055a43:	89 04 24             	mov    %eax,(%esp)
 8055a46:	e8 45 8b 00 00       	call   805e590 <_test_assert>
        syscall_success(fd = open("file03", O_RDWR, 0));
 8055a4b:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8055a51:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8055a56:	89 04 24             	mov    %eax,(%esp)
 8055a59:	e8 cb 88 00 00       	call   805e329 <test_errstr>
 8055a5e:	89 c3                	mov    %eax,%ebx
 8055a60:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8055a67:	00 
 8055a68:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 8055a6f:	00 
 8055a70:	c7 04 24 6c 0d 06 08 	movl   $0x8060d6c,(%esp)
 8055a77:	e8 f0 3e 00 00       	call   805996c <open>
 8055a7c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 8055a7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8055a82:	f7 d0                	not    %eax
 8055a84:	c1 e8 1f             	shr    $0x1f,%eax
 8055a87:	0f b6 c0             	movzbl %al,%eax
 8055a8a:	89 74 24 18          	mov    %esi,0x18(%esp)
 8055a8e:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8055a92:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8055a99:	08 
 8055a9a:	c7 44 24 0c 40 1a 06 	movl   $0x8061a40,0xc(%esp)
 8055aa1:	08 
 8055aa2:	c7 44 24 08 45 03 00 	movl   $0x345,0x8(%esp)
 8055aa9:	00 
 8055aaa:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055ab1:	08 
 8055ab2:	89 04 24             	mov    %eax,(%esp)
 8055ab5:	e8 d6 8a 00 00       	call   805e590 <_test_assert>
        test_fpos(fd, 0);
 8055aba:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
 8055ac1:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8055ac7:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8055acc:	89 04 24             	mov    %eax,(%esp)
 8055acf:	e8 55 88 00 00       	call   805e329 <test_errstr>
 8055ad4:	89 c3                	mov    %eax,%ebx
 8055ad6:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8055add:	00 
 8055ade:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8055ae5:	00 
 8055ae6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8055ae9:	89 04 24             	mov    %eax,(%esp)
 8055aec:	e8 df 3e 00 00       	call   80599d0 <lseek>
 8055af1:	89 45 b0             	mov    %eax,-0x50(%ebp)
 8055af4:	8b 45 b0             	mov    -0x50(%ebp),%eax
 8055af7:	f7 d0                	not    %eax
 8055af9:	c1 e8 1f             	shr    $0x1f,%eax
 8055afc:	0f b6 c0             	movzbl %al,%eax
 8055aff:	89 74 24 18          	mov    %esi,0x18(%esp)
 8055b03:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8055b07:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8055b0e:	08 
 8055b0f:	c7 44 24 0c 61 1a 06 	movl   $0x8061a61,0xc(%esp)
 8055b16:	08 
 8055b17:	c7 44 24 08 46 03 00 	movl   $0x346,0x8(%esp)
 8055b1e:	00 
 8055b1f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055b26:	08 
 8055b27:	89 04 24             	mov    %eax,(%esp)
 8055b2a:	e8 61 8a 00 00       	call   805e590 <_test_assert>
 8055b2f:	8b 45 b0             	mov    -0x50(%ebp),%eax
 8055b32:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
 8055b35:	0f 94 c0             	sete   %al
 8055b38:	0f b6 c0             	movzbl %al,%eax
 8055b3b:	8b 55 b4             	mov    -0x4c(%ebp),%edx
 8055b3e:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8055b42:	8b 55 b0             	mov    -0x50(%ebp),%edx
 8055b45:	89 54 24 18          	mov    %edx,0x18(%esp)
 8055b49:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 8055b4c:	89 54 24 14          	mov    %edx,0x14(%esp)
 8055b50:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 8055b57:	08 
 8055b58:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8055b5f:	08 
 8055b60:	c7 44 24 08 46 03 00 	movl   $0x346,0x8(%esp)
 8055b67:	00 
 8055b68:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055b6f:	08 
 8055b70:	89 04 24             	mov    %eax,(%esp)
 8055b73:	e8 18 8a 00 00       	call   805e590 <_test_assert>
        syscall_success(write(fd, "hello", 5));
 8055b78:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8055b7e:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8055b83:	89 04 24             	mov    %eax,(%esp)
 8055b86:	e8 9e 87 00 00       	call   805e329 <test_errstr>
 8055b8b:	89 c3                	mov    %eax,%ebx
 8055b8d:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 8055b94:	00 
 8055b95:	c7 44 24 04 0e 02 06 	movl   $0x806020e,0x4(%esp)
 8055b9c:	08 
 8055b9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8055ba0:	89 04 24             	mov    %eax,(%esp)
 8055ba3:	e8 ca 3e 00 00       	call   8059a72 <write>
 8055ba8:	f7 d0                	not    %eax
 8055baa:	c1 e8 1f             	shr    $0x1f,%eax
 8055bad:	0f b6 c0             	movzbl %al,%eax
 8055bb0:	89 74 24 18          	mov    %esi,0x18(%esp)
 8055bb4:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8055bb8:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8055bbf:	08 
 8055bc0:	c7 44 24 0c 91 15 06 	movl   $0x8061591,0xc(%esp)
 8055bc7:	08 
 8055bc8:	c7 44 24 08 47 03 00 	movl   $0x347,0x8(%esp)
 8055bcf:	00 
 8055bd0:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055bd7:	08 
 8055bd8:	89 04 24             	mov    %eax,(%esp)
 8055bdb:	e8 b0 89 00 00       	call   805e590 <_test_assert>
        test_fpos(fd, 5);
 8055be0:	c7 45 ac 05 00 00 00 	movl   $0x5,-0x54(%ebp)
 8055be7:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8055bed:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8055bf2:	89 04 24             	mov    %eax,(%esp)
 8055bf5:	e8 2f 87 00 00       	call   805e329 <test_errstr>
 8055bfa:	89 c3                	mov    %eax,%ebx
 8055bfc:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8055c03:	00 
 8055c04:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8055c0b:	00 
 8055c0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8055c0f:	89 04 24             	mov    %eax,(%esp)
 8055c12:	e8 b9 3d 00 00       	call   80599d0 <lseek>
 8055c17:	89 45 a8             	mov    %eax,-0x58(%ebp)
 8055c1a:	8b 45 a8             	mov    -0x58(%ebp),%eax
 8055c1d:	f7 d0                	not    %eax
 8055c1f:	c1 e8 1f             	shr    $0x1f,%eax
 8055c22:	0f b6 c0             	movzbl %al,%eax
 8055c25:	89 74 24 18          	mov    %esi,0x18(%esp)
 8055c29:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8055c2d:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8055c34:	08 
 8055c35:	c7 44 24 0c 61 1a 06 	movl   $0x8061a61,0xc(%esp)
 8055c3c:	08 
 8055c3d:	c7 44 24 08 48 03 00 	movl   $0x348,0x8(%esp)
 8055c44:	00 
 8055c45:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055c4c:	08 
 8055c4d:	89 04 24             	mov    %eax,(%esp)
 8055c50:	e8 3b 89 00 00       	call   805e590 <_test_assert>
 8055c55:	8b 45 a8             	mov    -0x58(%ebp),%eax
 8055c58:	3b 45 ac             	cmp    -0x54(%ebp),%eax
 8055c5b:	0f 94 c0             	sete   %al
 8055c5e:	0f b6 c0             	movzbl %al,%eax
 8055c61:	8b 55 ac             	mov    -0x54(%ebp),%edx
 8055c64:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8055c68:	8b 55 a8             	mov    -0x58(%ebp),%edx
 8055c6b:	89 54 24 18          	mov    %edx,0x18(%esp)
 8055c6f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 8055c72:	89 54 24 14          	mov    %edx,0x14(%esp)
 8055c76:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 8055c7d:	08 
 8055c7e:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8055c85:	08 
 8055c86:	c7 44 24 08 48 03 00 	movl   $0x348,0x8(%esp)
 8055c8d:	00 
 8055c8e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055c95:	08 
 8055c96:	89 04 24             	mov    %eax,(%esp)
 8055c99:	e8 f2 88 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 8055c9e:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8055ca4:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8055ca9:	89 04 24             	mov    %eax,(%esp)
 8055cac:	e8 78 86 00 00       	call   805e329 <test_errstr>
 8055cb1:	89 c3                	mov    %eax,%ebx
 8055cb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8055cb6:	89 04 24             	mov    %eax,(%esp)
 8055cb9:	e8 05 3e 00 00       	call   8059ac3 <close>
 8055cbe:	f7 d0                	not    %eax
 8055cc0:	c1 e8 1f             	shr    $0x1f,%eax
 8055cc3:	0f b6 c0             	movzbl %al,%eax
 8055cc6:	89 74 24 18          	mov    %esi,0x18(%esp)
 8055cca:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8055cce:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8055cd5:	08 
 8055cd6:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 8055cdd:	08 
 8055cde:	c7 44 24 08 49 03 00 	movl   $0x349,0x8(%esp)
 8055ce5:	00 
 8055ce6:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055ced:	08 
 8055cee:	89 04 24             	mov    %eax,(%esp)
 8055cf1:	e8 9a 88 00 00       	call   805e590 <_test_assert>

        syscall_success(fd = open("file03", O_RDWR | O_APPEND, 0));
 8055cf6:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8055cfc:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8055d01:	89 04 24             	mov    %eax,(%esp)
 8055d04:	e8 20 86 00 00       	call   805e329 <test_errstr>
 8055d09:	89 c3                	mov    %eax,%ebx
 8055d0b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8055d12:	00 
 8055d13:	c7 44 24 04 02 04 00 	movl   $0x402,0x4(%esp)
 8055d1a:	00 
 8055d1b:	c7 04 24 6c 0d 06 08 	movl   $0x8060d6c,(%esp)
 8055d22:	e8 45 3c 00 00       	call   805996c <open>
 8055d27:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 8055d2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8055d2d:	f7 d0                	not    %eax
 8055d2f:	c1 e8 1f             	shr    $0x1f,%eax
 8055d32:	0f b6 c0             	movzbl %al,%eax
 8055d35:	89 74 24 18          	mov    %esi,0x18(%esp)
 8055d39:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8055d3d:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8055d44:	08 
 8055d45:	c7 44 24 0c 80 1a 06 	movl   $0x8061a80,0xc(%esp)
 8055d4c:	08 
 8055d4d:	c7 44 24 08 4b 03 00 	movl   $0x34b,0x8(%esp)
 8055d54:	00 
 8055d55:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055d5c:	08 
 8055d5d:	89 04 24             	mov    %eax,(%esp)
 8055d60:	e8 2b 88 00 00       	call   805e590 <_test_assert>
        test_fpos(fd, 0);
 8055d65:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
 8055d6c:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8055d72:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8055d77:	89 04 24             	mov    %eax,(%esp)
 8055d7a:	e8 aa 85 00 00       	call   805e329 <test_errstr>
 8055d7f:	89 c3                	mov    %eax,%ebx
 8055d81:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8055d88:	00 
 8055d89:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8055d90:	00 
 8055d91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8055d94:	89 04 24             	mov    %eax,(%esp)
 8055d97:	e8 34 3c 00 00       	call   80599d0 <lseek>
 8055d9c:	89 45 a0             	mov    %eax,-0x60(%ebp)
 8055d9f:	8b 45 a0             	mov    -0x60(%ebp),%eax
 8055da2:	f7 d0                	not    %eax
 8055da4:	c1 e8 1f             	shr    $0x1f,%eax
 8055da7:	0f b6 c0             	movzbl %al,%eax
 8055daa:	89 74 24 18          	mov    %esi,0x18(%esp)
 8055dae:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8055db2:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8055db9:	08 
 8055dba:	c7 44 24 0c 61 1a 06 	movl   $0x8061a61,0xc(%esp)
 8055dc1:	08 
 8055dc2:	c7 44 24 08 4c 03 00 	movl   $0x34c,0x8(%esp)
 8055dc9:	00 
 8055dca:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055dd1:	08 
 8055dd2:	89 04 24             	mov    %eax,(%esp)
 8055dd5:	e8 b6 87 00 00       	call   805e590 <_test_assert>
 8055dda:	8b 45 a0             	mov    -0x60(%ebp),%eax
 8055ddd:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
 8055de0:	0f 94 c0             	sete   %al
 8055de3:	0f b6 c0             	movzbl %al,%eax
 8055de6:	8b 55 a4             	mov    -0x5c(%ebp),%edx
 8055de9:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8055ded:	8b 55 a0             	mov    -0x60(%ebp),%edx
 8055df0:	89 54 24 18          	mov    %edx,0x18(%esp)
 8055df4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 8055df7:	89 54 24 14          	mov    %edx,0x14(%esp)
 8055dfb:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 8055e02:	08 
 8055e03:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8055e0a:	08 
 8055e0b:	c7 44 24 08 4c 03 00 	movl   $0x34c,0x8(%esp)
 8055e12:	00 
 8055e13:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055e1a:	08 
 8055e1b:	89 04 24             	mov    %eax,(%esp)
 8055e1e:	e8 6d 87 00 00       	call   805e590 <_test_assert>
        syscall_success(write(fd, "hello", 5));
 8055e23:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8055e29:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8055e2e:	89 04 24             	mov    %eax,(%esp)
 8055e31:	e8 f3 84 00 00       	call   805e329 <test_errstr>
 8055e36:	89 c3                	mov    %eax,%ebx
 8055e38:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 8055e3f:	00 
 8055e40:	c7 44 24 04 0e 02 06 	movl   $0x806020e,0x4(%esp)
 8055e47:	08 
 8055e48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8055e4b:	89 04 24             	mov    %eax,(%esp)
 8055e4e:	e8 1f 3c 00 00       	call   8059a72 <write>
 8055e53:	f7 d0                	not    %eax
 8055e55:	c1 e8 1f             	shr    $0x1f,%eax
 8055e58:	0f b6 c0             	movzbl %al,%eax
 8055e5b:	89 74 24 18          	mov    %esi,0x18(%esp)
 8055e5f:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8055e63:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8055e6a:	08 
 8055e6b:	c7 44 24 0c 91 15 06 	movl   $0x8061591,0xc(%esp)
 8055e72:	08 
 8055e73:	c7 44 24 08 4d 03 00 	movl   $0x34d,0x8(%esp)
 8055e7a:	00 
 8055e7b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055e82:	08 
 8055e83:	89 04 24             	mov    %eax,(%esp)
 8055e86:	e8 05 87 00 00       	call   805e590 <_test_assert>
        test_fpos(fd, 10);
 8055e8b:	c7 45 9c 0a 00 00 00 	movl   $0xa,-0x64(%ebp)
 8055e92:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8055e98:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8055e9d:	89 04 24             	mov    %eax,(%esp)
 8055ea0:	e8 84 84 00 00       	call   805e329 <test_errstr>
 8055ea5:	89 c3                	mov    %eax,%ebx
 8055ea7:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8055eae:	00 
 8055eaf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8055eb6:	00 
 8055eb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8055eba:	89 04 24             	mov    %eax,(%esp)
 8055ebd:	e8 0e 3b 00 00       	call   80599d0 <lseek>
 8055ec2:	89 45 98             	mov    %eax,-0x68(%ebp)
 8055ec5:	8b 45 98             	mov    -0x68(%ebp),%eax
 8055ec8:	f7 d0                	not    %eax
 8055eca:	c1 e8 1f             	shr    $0x1f,%eax
 8055ecd:	0f b6 c0             	movzbl %al,%eax
 8055ed0:	89 74 24 18          	mov    %esi,0x18(%esp)
 8055ed4:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8055ed8:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8055edf:	08 
 8055ee0:	c7 44 24 0c 61 1a 06 	movl   $0x8061a61,0xc(%esp)
 8055ee7:	08 
 8055ee8:	c7 44 24 08 4e 03 00 	movl   $0x34e,0x8(%esp)
 8055eef:	00 
 8055ef0:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055ef7:	08 
 8055ef8:	89 04 24             	mov    %eax,(%esp)
 8055efb:	e8 90 86 00 00       	call   805e590 <_test_assert>
 8055f00:	8b 45 98             	mov    -0x68(%ebp),%eax
 8055f03:	3b 45 9c             	cmp    -0x64(%ebp),%eax
 8055f06:	0f 94 c0             	sete   %al
 8055f09:	0f b6 c0             	movzbl %al,%eax
 8055f0c:	8b 55 9c             	mov    -0x64(%ebp),%edx
 8055f0f:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8055f13:	8b 55 98             	mov    -0x68(%ebp),%edx
 8055f16:	89 54 24 18          	mov    %edx,0x18(%esp)
 8055f1a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 8055f1d:	89 54 24 14          	mov    %edx,0x14(%esp)
 8055f21:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 8055f28:	08 
 8055f29:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8055f30:	08 
 8055f31:	c7 44 24 08 4e 03 00 	movl   $0x34e,0x8(%esp)
 8055f38:	00 
 8055f39:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055f40:	08 
 8055f41:	89 04 24             	mov    %eax,(%esp)
 8055f44:	e8 47 86 00 00       	call   805e590 <_test_assert>

        syscall_success(lseek(fd, 0, SEEK_SET));
 8055f49:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8055f4f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8055f54:	89 04 24             	mov    %eax,(%esp)
 8055f57:	e8 cd 83 00 00       	call   805e329 <test_errstr>
 8055f5c:	89 c3                	mov    %eax,%ebx
 8055f5e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8055f65:	00 
 8055f66:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8055f6d:	00 
 8055f6e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8055f71:	89 04 24             	mov    %eax,(%esp)
 8055f74:	e8 57 3a 00 00       	call   80599d0 <lseek>
 8055f79:	f7 d0                	not    %eax
 8055f7b:	c1 e8 1f             	shr    $0x1f,%eax
 8055f7e:	0f b6 c0             	movzbl %al,%eax
 8055f81:	89 74 24 18          	mov    %esi,0x18(%esp)
 8055f85:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8055f89:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8055f90:	08 
 8055f91:	c7 44 24 0c 33 07 06 	movl   $0x8060733,0xc(%esp)
 8055f98:	08 
 8055f99:	c7 44 24 08 50 03 00 	movl   $0x350,0x8(%esp)
 8055fa0:	00 
 8055fa1:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8055fa8:	08 
 8055fa9:	89 04 24             	mov    %eax,(%esp)
 8055fac:	e8 df 85 00 00       	call   805e590 <_test_assert>
        test_fpos(fd, 0);
 8055fb1:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
 8055fb8:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8055fbe:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8055fc3:	89 04 24             	mov    %eax,(%esp)
 8055fc6:	e8 5e 83 00 00       	call   805e329 <test_errstr>
 8055fcb:	89 c3                	mov    %eax,%ebx
 8055fcd:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8055fd4:	00 
 8055fd5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8055fdc:	00 
 8055fdd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8055fe0:	89 04 24             	mov    %eax,(%esp)
 8055fe3:	e8 e8 39 00 00       	call   80599d0 <lseek>
 8055fe8:	89 45 90             	mov    %eax,-0x70(%ebp)
 8055feb:	8b 45 90             	mov    -0x70(%ebp),%eax
 8055fee:	f7 d0                	not    %eax
 8055ff0:	c1 e8 1f             	shr    $0x1f,%eax
 8055ff3:	0f b6 c0             	movzbl %al,%eax
 8055ff6:	89 74 24 18          	mov    %esi,0x18(%esp)
 8055ffa:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8055ffe:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056005:	08 
 8056006:	c7 44 24 0c 61 1a 06 	movl   $0x8061a61,0xc(%esp)
 805600d:	08 
 805600e:	c7 44 24 08 51 03 00 	movl   $0x351,0x8(%esp)
 8056015:	00 
 8056016:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805601d:	08 
 805601e:	89 04 24             	mov    %eax,(%esp)
 8056021:	e8 6a 85 00 00       	call   805e590 <_test_assert>
 8056026:	8b 45 90             	mov    -0x70(%ebp),%eax
 8056029:	3b 45 94             	cmp    -0x6c(%ebp),%eax
 805602c:	0f 94 c0             	sete   %al
 805602f:	0f b6 c0             	movzbl %al,%eax
 8056032:	8b 55 94             	mov    -0x6c(%ebp),%edx
 8056035:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8056039:	8b 55 90             	mov    -0x70(%ebp),%edx
 805603c:	89 54 24 18          	mov    %edx,0x18(%esp)
 8056040:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 8056043:	89 54 24 14          	mov    %edx,0x14(%esp)
 8056047:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 805604e:	08 
 805604f:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8056056:	08 
 8056057:	c7 44 24 08 51 03 00 	movl   $0x351,0x8(%esp)
 805605e:	00 
 805605f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056066:	08 
 8056067:	89 04 24             	mov    %eax,(%esp)
 805606a:	e8 21 85 00 00       	call   805e590 <_test_assert>
        read_fd(fd, 10, "hellohello");
 805606f:	c7 04 24 a9 1a 06 08 	movl   $0x8061aa9,(%esp)
 8056076:	e8 ef 43 00 00       	call   805a46a <strlen>
 805607b:	89 c3                	mov    %eax,%ebx
 805607d:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
 8056084:	00 
 8056085:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 805608b:	89 44 24 04          	mov    %eax,0x4(%esp)
 805608f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8056092:	89 04 24             	mov    %eax,(%esp)
 8056095:	e8 87 39 00 00       	call   8059a21 <read>
 805609a:	39 c3                	cmp    %eax,%ebx
 805609c:	0f 94 c0             	sete   %al
 805609f:	0f b6 c0             	movzbl %al,%eax
 80560a2:	c7 44 24 10 b4 02 06 	movl   $0x80602b4,0x10(%esp)
 80560a9:	08 
 80560aa:	c7 44 24 0c b4 1a 06 	movl   $0x8061ab4,0xc(%esp)
 80560b1:	08 
 80560b2:	c7 44 24 08 52 03 00 	movl   $0x352,0x8(%esp)
 80560b9:	00 
 80560ba:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80560c1:	08 
 80560c2:	89 04 24             	mov    %eax,(%esp)
 80560c5:	e8 c6 84 00 00       	call   805e590 <_test_assert>
 80560ca:	c7 04 24 a9 1a 06 08 	movl   $0x8061aa9,(%esp)
 80560d1:	e8 94 43 00 00       	call   805a46a <strlen>
 80560d6:	89 44 24 08          	mov    %eax,0x8(%esp)
 80560da:	c7 44 24 04 a9 1a 06 	movl   $0x8061aa9,0x4(%esp)
 80560e1:	08 
 80560e2:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 80560e8:	89 04 24             	mov    %eax,(%esp)
 80560eb:	e8 0d 41 00 00       	call   805a1fd <memcmp>
 80560f0:	85 c0                	test   %eax,%eax
 80560f2:	0f 94 c0             	sete   %al
 80560f5:	0f b6 c0             	movzbl %al,%eax
 80560f8:	c7 44 24 10 08 03 06 	movl   $0x8060308,0x10(%esp)
 80560ff:	08 
 8056100:	c7 44 24 0c ec 1a 06 	movl   $0x8061aec,0xc(%esp)
 8056107:	08 
 8056108:	c7 44 24 08 52 03 00 	movl   $0x352,0x8(%esp)
 805610f:	00 
 8056110:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056117:	08 
 8056118:	89 04 24             	mov    %eax,(%esp)
 805611b:	e8 70 84 00 00       	call   805e590 <_test_assert>
        syscall_success(lseek(fd, 5, SEEK_SET));
 8056120:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8056126:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805612b:	89 04 24             	mov    %eax,(%esp)
 805612e:	e8 f6 81 00 00       	call   805e329 <test_errstr>
 8056133:	89 c3                	mov    %eax,%ebx
 8056135:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 805613c:	00 
 805613d:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
 8056144:	00 
 8056145:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8056148:	89 04 24             	mov    %eax,(%esp)
 805614b:	e8 80 38 00 00       	call   80599d0 <lseek>
 8056150:	f7 d0                	not    %eax
 8056152:	c1 e8 1f             	shr    $0x1f,%eax
 8056155:	0f b6 c0             	movzbl %al,%eax
 8056158:	89 74 24 18          	mov    %esi,0x18(%esp)
 805615c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8056160:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056167:	08 
 8056168:	c7 44 24 0c 23 1b 06 	movl   $0x8061b23,0xc(%esp)
 805616f:	08 
 8056170:	c7 44 24 08 53 03 00 	movl   $0x353,0x8(%esp)
 8056177:	00 
 8056178:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805617f:	08 
 8056180:	89 04 24             	mov    %eax,(%esp)
 8056183:	e8 08 84 00 00       	call   805e590 <_test_assert>
        test_fpos(fd, 5);
 8056188:	c7 45 8c 05 00 00 00 	movl   $0x5,-0x74(%ebp)
 805618f:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8056195:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805619a:	89 04 24             	mov    %eax,(%esp)
 805619d:	e8 87 81 00 00       	call   805e329 <test_errstr>
 80561a2:	89 c3                	mov    %eax,%ebx
 80561a4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 80561ab:	00 
 80561ac:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80561b3:	00 
 80561b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80561b7:	89 04 24             	mov    %eax,(%esp)
 80561ba:	e8 11 38 00 00       	call   80599d0 <lseek>
 80561bf:	89 45 88             	mov    %eax,-0x78(%ebp)
 80561c2:	8b 45 88             	mov    -0x78(%ebp),%eax
 80561c5:	f7 d0                	not    %eax
 80561c7:	c1 e8 1f             	shr    $0x1f,%eax
 80561ca:	0f b6 c0             	movzbl %al,%eax
 80561cd:	89 74 24 18          	mov    %esi,0x18(%esp)
 80561d1:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80561d5:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80561dc:	08 
 80561dd:	c7 44 24 0c 61 1a 06 	movl   $0x8061a61,0xc(%esp)
 80561e4:	08 
 80561e5:	c7 44 24 08 54 03 00 	movl   $0x354,0x8(%esp)
 80561ec:	00 
 80561ed:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80561f4:	08 
 80561f5:	89 04 24             	mov    %eax,(%esp)
 80561f8:	e8 93 83 00 00       	call   805e590 <_test_assert>
 80561fd:	8b 45 88             	mov    -0x78(%ebp),%eax
 8056200:	3b 45 8c             	cmp    -0x74(%ebp),%eax
 8056203:	0f 94 c0             	sete   %al
 8056206:	0f b6 c0             	movzbl %al,%eax
 8056209:	8b 55 8c             	mov    -0x74(%ebp),%edx
 805620c:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8056210:	8b 55 88             	mov    -0x78(%ebp),%edx
 8056213:	89 54 24 18          	mov    %edx,0x18(%esp)
 8056217:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 805621a:	89 54 24 14          	mov    %edx,0x14(%esp)
 805621e:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 8056225:	08 
 8056226:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 805622d:	08 
 805622e:	c7 44 24 08 54 03 00 	movl   $0x354,0x8(%esp)
 8056235:	00 
 8056236:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805623d:	08 
 805623e:	89 04 24             	mov    %eax,(%esp)
 8056241:	e8 4a 83 00 00       	call   805e590 <_test_assert>
        syscall_success(write(fd, "again", 5));
 8056246:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805624c:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056251:	89 04 24             	mov    %eax,(%esp)
 8056254:	e8 d0 80 00 00       	call   805e329 <test_errstr>
 8056259:	89 c3                	mov    %eax,%ebx
 805625b:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 8056262:	00 
 8056263:	c7 44 24 04 3a 1b 06 	movl   $0x8061b3a,0x4(%esp)
 805626a:	08 
 805626b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805626e:	89 04 24             	mov    %eax,(%esp)
 8056271:	e8 fc 37 00 00       	call   8059a72 <write>
 8056276:	f7 d0                	not    %eax
 8056278:	c1 e8 1f             	shr    $0x1f,%eax
 805627b:	0f b6 c0             	movzbl %al,%eax
 805627e:	89 74 24 18          	mov    %esi,0x18(%esp)
 8056282:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8056286:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805628d:	08 
 805628e:	c7 44 24 0c 40 1b 06 	movl   $0x8061b40,0xc(%esp)
 8056295:	08 
 8056296:	c7 44 24 08 55 03 00 	movl   $0x355,0x8(%esp)
 805629d:	00 
 805629e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80562a5:	08 
 80562a6:	89 04 24             	mov    %eax,(%esp)
 80562a9:	e8 e2 82 00 00       	call   805e590 <_test_assert>
        test_fpos(fd, 15);
 80562ae:	c7 45 84 0f 00 00 00 	movl   $0xf,-0x7c(%ebp)
 80562b5:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80562bb:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80562c0:	89 04 24             	mov    %eax,(%esp)
 80562c3:	e8 61 80 00 00       	call   805e329 <test_errstr>
 80562c8:	89 c3                	mov    %eax,%ebx
 80562ca:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 80562d1:	00 
 80562d2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80562d9:	00 
 80562da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80562dd:	89 04 24             	mov    %eax,(%esp)
 80562e0:	e8 eb 36 00 00       	call   80599d0 <lseek>
 80562e5:	89 45 80             	mov    %eax,-0x80(%ebp)
 80562e8:	8b 45 80             	mov    -0x80(%ebp),%eax
 80562eb:	f7 d0                	not    %eax
 80562ed:	c1 e8 1f             	shr    $0x1f,%eax
 80562f0:	0f b6 c0             	movzbl %al,%eax
 80562f3:	89 74 24 18          	mov    %esi,0x18(%esp)
 80562f7:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80562fb:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056302:	08 
 8056303:	c7 44 24 0c 61 1a 06 	movl   $0x8061a61,0xc(%esp)
 805630a:	08 
 805630b:	c7 44 24 08 56 03 00 	movl   $0x356,0x8(%esp)
 8056312:	00 
 8056313:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805631a:	08 
 805631b:	89 04 24             	mov    %eax,(%esp)
 805631e:	e8 6d 82 00 00       	call   805e590 <_test_assert>
 8056323:	8b 45 80             	mov    -0x80(%ebp),%eax
 8056326:	3b 45 84             	cmp    -0x7c(%ebp),%eax
 8056329:	0f 94 c0             	sete   %al
 805632c:	0f b6 c0             	movzbl %al,%eax
 805632f:	8b 55 84             	mov    -0x7c(%ebp),%edx
 8056332:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8056336:	8b 55 80             	mov    -0x80(%ebp),%edx
 8056339:	89 54 24 18          	mov    %edx,0x18(%esp)
 805633d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 8056340:	89 54 24 14          	mov    %edx,0x14(%esp)
 8056344:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 805634b:	08 
 805634c:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8056353:	08 
 8056354:	c7 44 24 08 56 03 00 	movl   $0x356,0x8(%esp)
 805635b:	00 
 805635c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056363:	08 
 8056364:	89 04 24             	mov    %eax,(%esp)
 8056367:	e8 24 82 00 00       	call   805e590 <_test_assert>
        syscall_success(lseek(fd, 0, SEEK_SET));
 805636c:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8056372:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056377:	89 04 24             	mov    %eax,(%esp)
 805637a:	e8 aa 7f 00 00       	call   805e329 <test_errstr>
 805637f:	89 c3                	mov    %eax,%ebx
 8056381:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8056388:	00 
 8056389:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8056390:	00 
 8056391:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8056394:	89 04 24             	mov    %eax,(%esp)
 8056397:	e8 34 36 00 00       	call   80599d0 <lseek>
 805639c:	f7 d0                	not    %eax
 805639e:	c1 e8 1f             	shr    $0x1f,%eax
 80563a1:	0f b6 c0             	movzbl %al,%eax
 80563a4:	89 74 24 18          	mov    %esi,0x18(%esp)
 80563a8:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80563ac:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80563b3:	08 
 80563b4:	c7 44 24 0c 33 07 06 	movl   $0x8060733,0xc(%esp)
 80563bb:	08 
 80563bc:	c7 44 24 08 57 03 00 	movl   $0x357,0x8(%esp)
 80563c3:	00 
 80563c4:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80563cb:	08 
 80563cc:	89 04 24             	mov    %eax,(%esp)
 80563cf:	e8 bc 81 00 00       	call   805e590 <_test_assert>
        test_fpos(fd, 0);
 80563d4:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
 80563db:	00 00 00 
 80563de:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80563e4:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80563e9:	89 04 24             	mov    %eax,(%esp)
 80563ec:	e8 38 7f 00 00       	call   805e329 <test_errstr>
 80563f1:	89 c3                	mov    %eax,%ebx
 80563f3:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 80563fa:	00 
 80563fb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8056402:	00 
 8056403:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8056406:	89 04 24             	mov    %eax,(%esp)
 8056409:	e8 c2 35 00 00       	call   80599d0 <lseek>
 805640e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
 8056414:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
 805641a:	f7 d0                	not    %eax
 805641c:	c1 e8 1f             	shr    $0x1f,%eax
 805641f:	0f b6 c0             	movzbl %al,%eax
 8056422:	89 74 24 18          	mov    %esi,0x18(%esp)
 8056426:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805642a:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056431:	08 
 8056432:	c7 44 24 0c 61 1a 06 	movl   $0x8061a61,0xc(%esp)
 8056439:	08 
 805643a:	c7 44 24 08 58 03 00 	movl   $0x358,0x8(%esp)
 8056441:	00 
 8056442:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056449:	08 
 805644a:	89 04 24             	mov    %eax,(%esp)
 805644d:	e8 3e 81 00 00       	call   805e590 <_test_assert>
 8056452:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
 8056458:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
 805645e:	0f 94 c0             	sete   %al
 8056461:	0f b6 c0             	movzbl %al,%eax
 8056464:	8b 95 7c ff ff ff    	mov    -0x84(%ebp),%edx
 805646a:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 805646e:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
 8056474:	89 54 24 18          	mov    %edx,0x18(%esp)
 8056478:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 805647b:	89 54 24 14          	mov    %edx,0x14(%esp)
 805647f:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 8056486:	08 
 8056487:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 805648e:	08 
 805648f:	c7 44 24 08 58 03 00 	movl   $0x358,0x8(%esp)
 8056496:	00 
 8056497:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805649e:	08 
 805649f:	89 04 24             	mov    %eax,(%esp)
 80564a2:	e8 e9 80 00 00       	call   805e590 <_test_assert>
        read_fd(fd, 15, "hellohelloagain");
 80564a7:	c7 04 24 5d 1b 06 08 	movl   $0x8061b5d,(%esp)
 80564ae:	e8 b7 3f 00 00       	call   805a46a <strlen>
 80564b3:	89 c3                	mov    %eax,%ebx
 80564b5:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
 80564bc:	00 
 80564bd:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 80564c3:	89 44 24 04          	mov    %eax,0x4(%esp)
 80564c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80564ca:	89 04 24             	mov    %eax,(%esp)
 80564cd:	e8 4f 35 00 00       	call   8059a21 <read>
 80564d2:	39 c3                	cmp    %eax,%ebx
 80564d4:	0f 94 c0             	sete   %al
 80564d7:	0f b6 c0             	movzbl %al,%eax
 80564da:	c7 44 24 10 b4 02 06 	movl   $0x80602b4,0x10(%esp)
 80564e1:	08 
 80564e2:	c7 44 24 0c 70 1b 06 	movl   $0x8061b70,0xc(%esp)
 80564e9:	08 
 80564ea:	c7 44 24 08 59 03 00 	movl   $0x359,0x8(%esp)
 80564f1:	00 
 80564f2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80564f9:	08 
 80564fa:	89 04 24             	mov    %eax,(%esp)
 80564fd:	e8 8e 80 00 00       	call   805e590 <_test_assert>
 8056502:	c7 04 24 5d 1b 06 08 	movl   $0x8061b5d,(%esp)
 8056509:	e8 5c 3f 00 00       	call   805a46a <strlen>
 805650e:	89 44 24 08          	mov    %eax,0x8(%esp)
 8056512:	c7 44 24 04 5d 1b 06 	movl   $0x8061b5d,0x4(%esp)
 8056519:	08 
 805651a:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
 8056520:	89 04 24             	mov    %eax,(%esp)
 8056523:	e8 d5 3c 00 00       	call   805a1fd <memcmp>
 8056528:	85 c0                	test   %eax,%eax
 805652a:	0f 94 c0             	sete   %al
 805652d:	0f b6 c0             	movzbl %al,%eax
 8056530:	c7 44 24 10 08 03 06 	movl   $0x8060308,0x10(%esp)
 8056537:	08 
 8056538:	c7 44 24 0c ac 1b 06 	movl   $0x8061bac,0xc(%esp)
 805653f:	08 
 8056540:	c7 44 24 08 59 03 00 	movl   $0x359,0x8(%esp)
 8056547:	00 
 8056548:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805654f:	08 
 8056550:	89 04 24             	mov    %eax,(%esp)
 8056553:	e8 38 80 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 8056558:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805655e:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056563:	89 04 24             	mov    %eax,(%esp)
 8056566:	e8 be 7d 00 00       	call   805e329 <test_errstr>
 805656b:	89 c3                	mov    %eax,%ebx
 805656d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8056570:	89 04 24             	mov    %eax,(%esp)
 8056573:	e8 4b 35 00 00       	call   8059ac3 <close>
 8056578:	f7 d0                	not    %eax
 805657a:	c1 e8 1f             	shr    $0x1f,%eax
 805657d:	0f b6 c0             	movzbl %al,%eax
 8056580:	89 74 24 18          	mov    %esi,0x18(%esp)
 8056584:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8056588:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805658f:	08 
 8056590:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 8056597:	08 
 8056598:	c7 44 24 08 5a 03 00 	movl   $0x35a,0x8(%esp)
 805659f:	00 
 80565a0:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80565a7:	08 
 80565a8:	89 04 24             	mov    %eax,(%esp)
 80565ab:	e8 e0 7f 00 00       	call   805e590 <_test_assert>

        /* seek and write beyond end of file */
        create_file("file04");
 80565b0:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80565b6:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80565bb:	89 04 24             	mov    %eax,(%esp)
 80565be:	e8 66 7d 00 00       	call   805e329 <test_errstr>
 80565c3:	89 c3                	mov    %eax,%ebx
 80565c5:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 80565cc:	00 
 80565cd:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 80565d4:	00 
 80565d5:	c7 04 24 bd 0e 06 08 	movl   $0x8060ebd,(%esp)
 80565dc:	e8 8b 33 00 00       	call   805996c <open>
 80565e1:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
 80565e7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
 80565ed:	f7 d0                	not    %eax
 80565ef:	c1 e8 1f             	shr    $0x1f,%eax
 80565f2:	0f b6 c0             	movzbl %al,%eax
 80565f5:	89 74 24 18          	mov    %esi,0x18(%esp)
 80565f9:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80565fd:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056604:	08 
 8056605:	c7 44 24 0c f0 1b 06 	movl   $0x8061bf0,0xc(%esp)
 805660c:	08 
 805660d:	c7 44 24 08 5d 03 00 	movl   $0x35d,0x8(%esp)
 8056614:	00 
 8056615:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805661c:	08 
 805661d:	89 04 24             	mov    %eax,(%esp)
 8056620:	e8 6b 7f 00 00       	call   805e590 <_test_assert>
 8056625:	85 c0                	test   %eax,%eax
 8056627:	74 5b                	je     8056684 <vfstest_read+0x2189>
 8056629:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805662f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056634:	89 04 24             	mov    %eax,(%esp)
 8056637:	e8 ed 7c 00 00       	call   805e329 <test_errstr>
 805663c:	89 c3                	mov    %eax,%ebx
 805663e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
 8056644:	89 04 24             	mov    %eax,(%esp)
 8056647:	e8 77 34 00 00       	call   8059ac3 <close>
 805664c:	f7 d0                	not    %eax
 805664e:	c1 e8 1f             	shr    $0x1f,%eax
 8056651:	0f b6 c0             	movzbl %al,%eax
 8056654:	89 74 24 18          	mov    %esi,0x18(%esp)
 8056658:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805665c:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056663:	08 
 8056664:	c7 44 24 0c 78 ec 05 	movl   $0x805ec78,0xc(%esp)
 805666b:	08 
 805666c:	c7 44 24 08 5d 03 00 	movl   $0x35d,0x8(%esp)
 8056673:	00 
 8056674:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805667b:	08 
 805667c:	89 04 24             	mov    %eax,(%esp)
 805667f:	e8 0c 7f 00 00       	call   805e590 <_test_assert>
        syscall_success(fd = open("file04", O_RDWR, 0));
 8056684:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805668a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805668f:	89 04 24             	mov    %eax,(%esp)
 8056692:	e8 92 7c 00 00       	call   805e329 <test_errstr>
 8056697:	89 c3                	mov    %eax,%ebx
 8056699:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80566a0:	00 
 80566a1:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 80566a8:	00 
 80566a9:	c7 04 24 bd 0e 06 08 	movl   $0x8060ebd,(%esp)
 80566b0:	e8 b7 32 00 00       	call   805996c <open>
 80566b5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 80566b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80566bb:	f7 d0                	not    %eax
 80566bd:	c1 e8 1f             	shr    $0x1f,%eax
 80566c0:	0f b6 c0             	movzbl %al,%eax
 80566c3:	89 74 24 18          	mov    %esi,0x18(%esp)
 80566c7:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80566cb:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80566d2:	08 
 80566d3:	c7 44 24 0c 20 1c 06 	movl   $0x8061c20,0xc(%esp)
 80566da:	08 
 80566db:	c7 44 24 08 5e 03 00 	movl   $0x35e,0x8(%esp)
 80566e2:	00 
 80566e3:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80566ea:	08 
 80566eb:	89 04 24             	mov    %eax,(%esp)
 80566ee:	e8 9d 7e 00 00       	call   805e590 <_test_assert>
        syscall_success(write(fd, "hello", 5));
 80566f3:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80566f9:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80566fe:	89 04 24             	mov    %eax,(%esp)
 8056701:	e8 23 7c 00 00       	call   805e329 <test_errstr>
 8056706:	89 c3                	mov    %eax,%ebx
 8056708:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 805670f:	00 
 8056710:	c7 44 24 04 0e 02 06 	movl   $0x806020e,0x4(%esp)
 8056717:	08 
 8056718:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805671b:	89 04 24             	mov    %eax,(%esp)
 805671e:	e8 4f 33 00 00       	call   8059a72 <write>
 8056723:	f7 d0                	not    %eax
 8056725:	c1 e8 1f             	shr    $0x1f,%eax
 8056728:	0f b6 c0             	movzbl %al,%eax
 805672b:	89 74 24 18          	mov    %esi,0x18(%esp)
 805672f:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8056733:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805673a:	08 
 805673b:	c7 44 24 0c 91 15 06 	movl   $0x8061591,0xc(%esp)
 8056742:	08 
 8056743:	c7 44 24 08 5f 03 00 	movl   $0x35f,0x8(%esp)
 805674a:	00 
 805674b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056752:	08 
 8056753:	89 04 24             	mov    %eax,(%esp)
 8056756:	e8 35 7e 00 00       	call   805e590 <_test_assert>
        test_fpos(fd, 5);
 805675b:	c7 85 70 ff ff ff 05 	movl   $0x5,-0x90(%ebp)
 8056762:	00 00 00 
 8056765:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805676b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056770:	89 04 24             	mov    %eax,(%esp)
 8056773:	e8 b1 7b 00 00       	call   805e329 <test_errstr>
 8056778:	89 c3                	mov    %eax,%ebx
 805677a:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8056781:	00 
 8056782:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8056789:	00 
 805678a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805678d:	89 04 24             	mov    %eax,(%esp)
 8056790:	e8 3b 32 00 00       	call   80599d0 <lseek>
 8056795:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
 805679b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
 80567a1:	f7 d0                	not    %eax
 80567a3:	c1 e8 1f             	shr    $0x1f,%eax
 80567a6:	0f b6 c0             	movzbl %al,%eax
 80567a9:	89 74 24 18          	mov    %esi,0x18(%esp)
 80567ad:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80567b1:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80567b8:	08 
 80567b9:	c7 44 24 0c 61 1a 06 	movl   $0x8061a61,0xc(%esp)
 80567c0:	08 
 80567c1:	c7 44 24 08 60 03 00 	movl   $0x360,0x8(%esp)
 80567c8:	00 
 80567c9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80567d0:	08 
 80567d1:	89 04 24             	mov    %eax,(%esp)
 80567d4:	e8 b7 7d 00 00       	call   805e590 <_test_assert>
 80567d9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
 80567df:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
 80567e5:	0f 94 c0             	sete   %al
 80567e8:	0f b6 c0             	movzbl %al,%eax
 80567eb:	8b 95 70 ff ff ff    	mov    -0x90(%ebp),%edx
 80567f1:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 80567f5:	8b 95 6c ff ff ff    	mov    -0x94(%ebp),%edx
 80567fb:	89 54 24 18          	mov    %edx,0x18(%esp)
 80567ff:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 8056802:	89 54 24 14          	mov    %edx,0x14(%esp)
 8056806:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 805680d:	08 
 805680e:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8056815:	08 
 8056816:	c7 44 24 08 60 03 00 	movl   $0x360,0x8(%esp)
 805681d:	00 
 805681e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056825:	08 
 8056826:	89 04 24             	mov    %eax,(%esp)
 8056829:	e8 62 7d 00 00       	call   805e590 <_test_assert>
        test_lseek(lseek(fd, 10, SEEK_SET), 10);
 805682e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8056835:	00 
 8056836:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
 805683d:	00 
 805683e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8056841:	89 04 24             	mov    %eax,(%esp)
 8056844:	e8 87 31 00 00       	call   80599d0 <lseek>
 8056849:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
 805684f:	83 bd 68 ff ff ff 0a 	cmpl   $0xa,-0x98(%ebp)
 8056856:	0f 94 c0             	sete   %al
 8056859:	0f b6 c0             	movzbl %al,%eax
 805685c:	c7 44 24 18 0a 00 00 	movl   $0xa,0x18(%esp)
 8056863:	00 
 8056864:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
 805686a:	89 54 24 14          	mov    %edx,0x14(%esp)
 805686e:	c7 44 24 10 44 1c 06 	movl   $0x8061c44,0x10(%esp)
 8056875:	08 
 8056876:	c7 44 24 0c 75 1c 06 	movl   $0x8061c75,0xc(%esp)
 805687d:	08 
 805687e:	c7 44 24 08 61 03 00 	movl   $0x361,0x8(%esp)
 8056885:	00 
 8056886:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805688d:	08 
 805688e:	89 04 24             	mov    %eax,(%esp)
 8056891:	e8 fa 7c 00 00       	call   805e590 <_test_assert>
        syscall_success(write(fd, "again", 5));
 8056896:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805689c:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80568a1:	89 04 24             	mov    %eax,(%esp)
 80568a4:	e8 80 7a 00 00       	call   805e329 <test_errstr>
 80568a9:	89 c3                	mov    %eax,%ebx
 80568ab:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 80568b2:	00 
 80568b3:	c7 44 24 04 3a 1b 06 	movl   $0x8061b3a,0x4(%esp)
 80568ba:	08 
 80568bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80568be:	89 04 24             	mov    %eax,(%esp)
 80568c1:	e8 ac 31 00 00       	call   8059a72 <write>
 80568c6:	f7 d0                	not    %eax
 80568c8:	c1 e8 1f             	shr    $0x1f,%eax
 80568cb:	0f b6 c0             	movzbl %al,%eax
 80568ce:	89 74 24 18          	mov    %esi,0x18(%esp)
 80568d2:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80568d6:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80568dd:	08 
 80568de:	c7 44 24 0c 40 1b 06 	movl   $0x8061b40,0xc(%esp)
 80568e5:	08 
 80568e6:	c7 44 24 08 62 03 00 	movl   $0x362,0x8(%esp)
 80568ed:	00 
 80568ee:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80568f5:	08 
 80568f6:	89 04 24             	mov    %eax,(%esp)
 80568f9:	e8 92 7c 00 00       	call   805e590 <_test_assert>
        syscall_success(stat("file04", &s));
 80568fe:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8056904:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056909:	89 04 24             	mov    %eax,(%esp)
 805690c:	e8 18 7a 00 00       	call   805e329 <test_errstr>
 8056911:	89 c3                	mov    %eax,%ebx
 8056913:	8d 85 30 fe ff ff    	lea    -0x1d0(%ebp),%eax
 8056919:	89 44 24 04          	mov    %eax,0x4(%esp)
 805691d:	c7 04 24 bd 0e 06 08 	movl   $0x8060ebd,(%esp)
 8056924:	e8 92 37 00 00       	call   805a0bb <stat>
 8056929:	f7 d0                	not    %eax
 805692b:	c1 e8 1f             	shr    $0x1f,%eax
 805692e:	0f b6 c0             	movzbl %al,%eax
 8056931:	89 74 24 18          	mov    %esi,0x18(%esp)
 8056935:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8056939:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056940:	08 
 8056941:	c7 44 24 0c 81 1c 06 	movl   $0x8061c81,0xc(%esp)
 8056948:	08 
 8056949:	c7 44 24 08 63 03 00 	movl   $0x363,0x8(%esp)
 8056950:	00 
 8056951:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056958:	08 
 8056959:	89 04 24             	mov    %eax,(%esp)
 805695c:	e8 2f 7c 00 00       	call   805e590 <_test_assert>
        test_assert(s.st_size == 15, "actual size: %d", s.st_size);
 8056961:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
 8056967:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
 805696d:	83 f8 0f             	cmp    $0xf,%eax
 8056970:	0f 94 c0             	sete   %al
 8056973:	0f b6 c0             	movzbl %al,%eax
 8056976:	89 54 24 14          	mov    %edx,0x14(%esp)
 805697a:	c7 44 24 10 9b 1c 06 	movl   $0x8061c9b,0x10(%esp)
 8056981:	08 
 8056982:	c7 44 24 0c ab 1c 06 	movl   $0x8061cab,0xc(%esp)
 8056989:	08 
 805698a:	c7 44 24 08 64 03 00 	movl   $0x364,0x8(%esp)
 8056991:	00 
 8056992:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056999:	08 
 805699a:	89 04 24             	mov    %eax,(%esp)
 805699d:	e8 ee 7b 00 00       	call   805e590 <_test_assert>
        test_lseek(lseek(fd, 0, SEEK_SET), 0);
 80569a2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80569a9:	00 
 80569aa:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80569b1:	00 
 80569b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80569b5:	89 04 24             	mov    %eax,(%esp)
 80569b8:	e8 13 30 00 00       	call   80599d0 <lseek>
 80569bd:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
 80569c3:	83 bd 64 ff ff ff 00 	cmpl   $0x0,-0x9c(%ebp)
 80569ca:	0f 94 c0             	sete   %al
 80569cd:	0f b6 c0             	movzbl %al,%eax
 80569d0:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
 80569d7:	00 
 80569d8:	8b 95 64 ff ff ff    	mov    -0x9c(%ebp),%edx
 80569de:	89 54 24 14          	mov    %edx,0x14(%esp)
 80569e2:	c7 44 24 10 54 17 06 	movl   $0x8061754,0x10(%esp)
 80569e9:	08 
 80569ea:	c7 44 24 0c 84 17 06 	movl   $0x8061784,0xc(%esp)
 80569f1:	08 
 80569f2:	c7 44 24 08 65 03 00 	movl   $0x365,0x8(%esp)
 80569f9:	00 
 80569fa:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056a01:	08 
 8056a02:	89 04 24             	mov    %eax,(%esp)
 8056a05:	e8 86 7b 00 00       	call   805e590 <_test_assert>
        test_assert(15 == read(fd, buf, READ_BUFSIZE), "unexpected number of bytes read");
 8056a0a:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
 8056a11:	00 
 8056a12:	8d 85 64 fe ff ff    	lea    -0x19c(%ebp),%eax
 8056a18:	89 44 24 04          	mov    %eax,0x4(%esp)
 8056a1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8056a1f:	89 04 24             	mov    %eax,(%esp)
 8056a22:	e8 fa 2f 00 00       	call   8059a21 <read>
 8056a27:	83 f8 0f             	cmp    $0xf,%eax
 8056a2a:	0f 94 c0             	sete   %al
 8056a2d:	0f b6 c0             	movzbl %al,%eax
 8056a30:	c7 44 24 10 bc 1c 06 	movl   $0x8061cbc,0x10(%esp)
 8056a37:	08 
 8056a38:	c7 44 24 0c dc 1c 06 	movl   $0x8061cdc,0xc(%esp)
 8056a3f:	08 
 8056a40:	c7 44 24 08 66 03 00 	movl   $0x366,0x8(%esp)
 8056a47:	00 
 8056a48:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056a4f:	08 
 8056a50:	89 04 24             	mov    %eax,(%esp)
 8056a53:	e8 38 7b 00 00       	call   805e590 <_test_assert>
        test_assert(0 == memcmp(buf, "hello\0\0\0\0\0again", 15), "unexpected data read");
 8056a58:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
 8056a5f:	00 
 8056a60:	c7 44 24 04 fe 1c 06 	movl   $0x8061cfe,0x4(%esp)
 8056a67:	08 
 8056a68:	8d 85 64 fe ff ff    	lea    -0x19c(%ebp),%eax
 8056a6e:	89 04 24             	mov    %eax,(%esp)
 8056a71:	e8 87 37 00 00       	call   805a1fd <memcmp>
 8056a76:	85 c0                	test   %eax,%eax
 8056a78:	0f 94 c0             	sete   %al
 8056a7b:	0f b6 c0             	movzbl %al,%eax
 8056a7e:	c7 44 24 10 0e 1d 06 	movl   $0x8061d0e,0x10(%esp)
 8056a85:	08 
 8056a86:	c7 44 24 0c 24 1d 06 	movl   $0x8061d24,0xc(%esp)
 8056a8d:	08 
 8056a8e:	c7 44 24 08 67 03 00 	movl   $0x367,0x8(%esp)
 8056a95:	00 
 8056a96:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056a9d:	08 
 8056a9e:	89 04 24             	mov    %eax,(%esp)
 8056aa1:	e8 ea 7a 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 8056aa6:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8056aac:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056ab1:	89 04 24             	mov    %eax,(%esp)
 8056ab4:	e8 70 78 00 00       	call   805e329 <test_errstr>
 8056ab9:	89 c3                	mov    %eax,%ebx
 8056abb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8056abe:	89 04 24             	mov    %eax,(%esp)
 8056ac1:	e8 fd 2f 00 00       	call   8059ac3 <close>
 8056ac6:	f7 d0                	not    %eax
 8056ac8:	c1 e8 1f             	shr    $0x1f,%eax
 8056acb:	0f b6 c0             	movzbl %al,%eax
 8056ace:	89 74 24 18          	mov    %esi,0x18(%esp)
 8056ad2:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8056ad6:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056add:	08 
 8056ade:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 8056ae5:	08 
 8056ae6:	c7 44 24 08 68 03 00 	movl   $0x368,0x8(%esp)
 8056aed:	00 
 8056aee:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056af5:	08 
 8056af6:	89 04 24             	mov    %eax,(%esp)
 8056af9:	e8 92 7a 00 00       	call   805e590 <_test_assert>

        syscall_success(chdir(".."));
 8056afe:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8056b04:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056b09:	89 04 24             	mov    %eax,(%esp)
 8056b0c:	e8 18 78 00 00       	call   805e329 <test_errstr>
 8056b11:	89 c3                	mov    %eax,%ebx
 8056b13:	c7 04 24 26 e6 05 08 	movl   $0x805e626,(%esp)
 8056b1a:	e8 55 32 00 00       	call   8059d74 <chdir>
 8056b1f:	f7 d0                	not    %eax
 8056b21:	c1 e8 1f             	shr    $0x1f,%eax
 8056b24:	0f b6 c0             	movzbl %al,%eax
 8056b27:	89 74 24 18          	mov    %esi,0x18(%esp)
 8056b2b:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8056b2f:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056b36:	08 
 8056b37:	c7 44 24 0c ac ed 05 	movl   $0x805edac,0xc(%esp)
 8056b3e:	08 
 8056b3f:	c7 44 24 08 6a 03 00 	movl   $0x36a,0x8(%esp)
 8056b46:	00 
 8056b47:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056b4e:	08 
 8056b4f:	89 04 24             	mov    %eax,(%esp)
 8056b52:	e8 39 7a 00 00       	call   805e590 <_test_assert>
        test_fini("vfstest_read");
 8056b57:	c7 04 24 51 1d 06 08 	movl   $0x8061d51,(%esp)
 8056b5e:	e8 18 77 00 00       	call   805e27b <test_fini>
}
 8056b63:	90                   	nop
 8056b64:	81 c4 3c 02 00 00    	add    $0x23c,%esp
 8056b6a:	5b                   	pop    %ebx
 8056b6b:	5e                   	pop    %esi
 8056b6c:	5f                   	pop    %edi
 8056b6d:	5d                   	pop    %ebp
 8056b6e:	c3                   	ret    

08056b6f <vfstest_getdents>:

static void
vfstest_getdents(void)
{
 8056b6f:	55                   	push   %ebp
 8056b70:	89 e5                	mov    %esp,%ebp
 8056b72:	57                   	push   %edi
 8056b73:	56                   	push   %esi
 8056b74:	53                   	push   %ebx
 8056b75:	81 ec fc 00 00 00    	sub    $0xfc,%esp
        int fd, ret;
        dirent_t dirents[4];

        syscall_success(mkdir("getdents", 0));
 8056b7b:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8056b81:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056b86:	89 04 24             	mov    %eax,(%esp)
 8056b89:	e8 9b 77 00 00       	call   805e329 <test_errstr>
 8056b8e:	89 c3                	mov    %eax,%ebx
 8056b90:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8056b97:	00 
 8056b98:	c7 04 24 5e 1d 06 08 	movl   $0x8061d5e,(%esp)
 8056b9f:	e8 ea 2f 00 00       	call   8059b8e <mkdir>
 8056ba4:	f7 d0                	not    %eax
 8056ba6:	c1 e8 1f             	shr    $0x1f,%eax
 8056ba9:	0f b6 c0             	movzbl %al,%eax
 8056bac:	89 74 24 18          	mov    %esi,0x18(%esp)
 8056bb0:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8056bb4:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056bbb:	08 
 8056bbc:	c7 44 24 0c 67 1d 06 	movl   $0x8061d67,0xc(%esp)
 8056bc3:	08 
 8056bc4:	c7 44 24 08 74 03 00 	movl   $0x374,0x8(%esp)
 8056bcb:	00 
 8056bcc:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056bd3:	08 
 8056bd4:	89 04 24             	mov    %eax,(%esp)
 8056bd7:	e8 b4 79 00 00       	call   805e590 <_test_assert>
        syscall_success(chdir("getdents"));
 8056bdc:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8056be2:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056be7:	89 04 24             	mov    %eax,(%esp)
 8056bea:	e8 3a 77 00 00       	call   805e329 <test_errstr>
 8056bef:	89 c3                	mov    %eax,%ebx
 8056bf1:	c7 04 24 5e 1d 06 08 	movl   $0x8061d5e,(%esp)
 8056bf8:	e8 77 31 00 00       	call   8059d74 <chdir>
 8056bfd:	f7 d0                	not    %eax
 8056bff:	c1 e8 1f             	shr    $0x1f,%eax
 8056c02:	0f b6 c0             	movzbl %al,%eax
 8056c05:	89 74 24 18          	mov    %esi,0x18(%esp)
 8056c09:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8056c0d:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056c14:	08 
 8056c15:	c7 44 24 0c 83 1d 06 	movl   $0x8061d83,0xc(%esp)
 8056c1c:	08 
 8056c1d:	c7 44 24 08 75 03 00 	movl   $0x375,0x8(%esp)
 8056c24:	00 
 8056c25:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056c2c:	08 
 8056c2d:	89 04 24             	mov    %eax,(%esp)
 8056c30:	e8 5b 79 00 00       	call   805e590 <_test_assert>

        /* getdents works */
        syscall_success(mkdir("dir01", 0));
 8056c35:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8056c3b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056c40:	89 04 24             	mov    %eax,(%esp)
 8056c43:	e8 e1 76 00 00       	call   805e329 <test_errstr>
 8056c48:	89 c3                	mov    %eax,%ebx
 8056c4a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8056c51:	00 
 8056c52:	c7 04 24 dd 14 06 08 	movl   $0x80614dd,(%esp)
 8056c59:	e8 30 2f 00 00       	call   8059b8e <mkdir>
 8056c5e:	f7 d0                	not    %eax
 8056c60:	c1 e8 1f             	shr    $0x1f,%eax
 8056c63:	0f b6 c0             	movzbl %al,%eax
 8056c66:	89 74 24 18          	mov    %esi,0x18(%esp)
 8056c6a:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8056c6e:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056c75:	08 
 8056c76:	c7 44 24 0c e3 14 06 	movl   $0x80614e3,0xc(%esp)
 8056c7d:	08 
 8056c7e:	c7 44 24 08 78 03 00 	movl   $0x378,0x8(%esp)
 8056c85:	00 
 8056c86:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056c8d:	08 
 8056c8e:	89 04 24             	mov    %eax,(%esp)
 8056c91:	e8 fa 78 00 00       	call   805e590 <_test_assert>
        syscall_success(mkdir("dir01/1", 0));
 8056c96:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8056c9c:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056ca1:	89 04 24             	mov    %eax,(%esp)
 8056ca4:	e8 80 76 00 00       	call   805e329 <test_errstr>
 8056ca9:	89 c3                	mov    %eax,%ebx
 8056cab:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8056cb2:	00 
 8056cb3:	c7 04 24 9c 1d 06 08 	movl   $0x8061d9c,(%esp)
 8056cba:	e8 cf 2e 00 00       	call   8059b8e <mkdir>
 8056cbf:	f7 d0                	not    %eax
 8056cc1:	c1 e8 1f             	shr    $0x1f,%eax
 8056cc4:	0f b6 c0             	movzbl %al,%eax
 8056cc7:	89 74 24 18          	mov    %esi,0x18(%esp)
 8056ccb:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8056ccf:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056cd6:	08 
 8056cd7:	c7 44 24 0c a4 1d 06 	movl   $0x8061da4,0xc(%esp)
 8056cde:	08 
 8056cdf:	c7 44 24 08 79 03 00 	movl   $0x379,0x8(%esp)
 8056ce6:	00 
 8056ce7:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056cee:	08 
 8056cef:	89 04 24             	mov    %eax,(%esp)
 8056cf2:	e8 99 78 00 00       	call   805e590 <_test_assert>
        create_file("dir01/2");
 8056cf7:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8056cfd:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056d02:	89 04 24             	mov    %eax,(%esp)
 8056d05:	e8 1f 76 00 00       	call   805e329 <test_errstr>
 8056d0a:	89 c3                	mov    %eax,%ebx
 8056d0c:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 8056d13:	00 
 8056d14:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 8056d1b:	00 
 8056d1c:	c7 04 24 bf 1d 06 08 	movl   $0x8061dbf,(%esp)
 8056d23:	e8 44 2c 00 00       	call   805996c <open>
 8056d28:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 8056d2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8056d2e:	f7 d0                	not    %eax
 8056d30:	c1 e8 1f             	shr    $0x1f,%eax
 8056d33:	0f b6 c0             	movzbl %al,%eax
 8056d36:	89 74 24 18          	mov    %esi,0x18(%esp)
 8056d3a:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8056d3e:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056d45:	08 
 8056d46:	c7 44 24 0c c8 1d 06 	movl   $0x8061dc8,0xc(%esp)
 8056d4d:	08 
 8056d4e:	c7 44 24 08 7a 03 00 	movl   $0x37a,0x8(%esp)
 8056d55:	00 
 8056d56:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056d5d:	08 
 8056d5e:	89 04 24             	mov    %eax,(%esp)
 8056d61:	e8 2a 78 00 00       	call   805e590 <_test_assert>
 8056d66:	85 c0                	test   %eax,%eax
 8056d68:	74 58                	je     8056dc2 <vfstest_getdents+0x253>
 8056d6a:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8056d70:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056d75:	89 04 24             	mov    %eax,(%esp)
 8056d78:	e8 ac 75 00 00       	call   805e329 <test_errstr>
 8056d7d:	89 c3                	mov    %eax,%ebx
 8056d7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8056d82:	89 04 24             	mov    %eax,(%esp)
 8056d85:	e8 39 2d 00 00       	call   8059ac3 <close>
 8056d8a:	f7 d0                	not    %eax
 8056d8c:	c1 e8 1f             	shr    $0x1f,%eax
 8056d8f:	0f b6 c0             	movzbl %al,%eax
 8056d92:	89 74 24 18          	mov    %esi,0x18(%esp)
 8056d96:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8056d9a:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056da1:	08 
 8056da2:	c7 44 24 0c 78 ec 05 	movl   $0x805ec78,0xc(%esp)
 8056da9:	08 
 8056daa:	c7 44 24 08 7a 03 00 	movl   $0x37a,0x8(%esp)
 8056db1:	00 
 8056db2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056db9:	08 
 8056dba:	89 04 24             	mov    %eax,(%esp)
 8056dbd:	e8 ce 77 00 00       	call   805e590 <_test_assert>

        syscall_success(fd = open("dir01", O_RDONLY, 0));
 8056dc2:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8056dc8:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056dcd:	89 04 24             	mov    %eax,(%esp)
 8056dd0:	e8 54 75 00 00       	call   805e329 <test_errstr>
 8056dd5:	89 c3                	mov    %eax,%ebx
 8056dd7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8056dde:	00 
 8056ddf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8056de6:	00 
 8056de7:	c7 04 24 dd 14 06 08 	movl   $0x80614dd,(%esp)
 8056dee:	e8 79 2b 00 00       	call   805996c <open>
 8056df3:	89 45 e0             	mov    %eax,-0x20(%ebp)
 8056df6:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8056df9:	f7 d0                	not    %eax
 8056dfb:	c1 e8 1f             	shr    $0x1f,%eax
 8056dfe:	0f b6 c0             	movzbl %al,%eax
 8056e01:	89 74 24 18          	mov    %esi,0x18(%esp)
 8056e05:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8056e09:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056e10:	08 
 8056e11:	c7 44 24 0c fc 14 06 	movl   $0x80614fc,0xc(%esp)
 8056e18:	08 
 8056e19:	c7 44 24 08 7c 03 00 	movl   $0x37c,0x8(%esp)
 8056e20:	00 
 8056e21:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056e28:	08 
 8056e29:	89 04 24             	mov    %eax,(%esp)
 8056e2c:	e8 5f 77 00 00       	call   805e590 <_test_assert>
        syscall_success(ret = getdents(fd, dirents, 4 * sizeof(dirent_t)));
 8056e31:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8056e37:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056e3c:	89 04 24             	mov    %eax,(%esp)
 8056e3f:	e8 e5 74 00 00       	call   805e329 <test_errstr>
 8056e44:	89 c3                	mov    %eax,%ebx
 8056e46:	c7 44 24 08 a0 00 00 	movl   $0xa0,0x8(%esp)
 8056e4d:	00 
 8056e4e:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
 8056e54:	89 44 24 04          	mov    %eax,0x4(%esp)
 8056e58:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8056e5b:	89 04 24             	mov    %eax,(%esp)
 8056e5e:	e8 07 32 00 00       	call   805a06a <getdents>
 8056e63:	89 45 dc             	mov    %eax,-0x24(%ebp)
 8056e66:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8056e69:	f7 d0                	not    %eax
 8056e6b:	c1 e8 1f             	shr    $0x1f,%eax
 8056e6e:	0f b6 c0             	movzbl %al,%eax
 8056e71:	89 74 24 18          	mov    %esi,0x18(%esp)
 8056e75:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8056e79:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056e80:	08 
 8056e81:	c7 44 24 0c f8 1d 06 	movl   $0x8061df8,0xc(%esp)
 8056e88:	08 
 8056e89:	c7 44 24 08 7d 03 00 	movl   $0x37d,0x8(%esp)
 8056e90:	00 
 8056e91:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056e98:	08 
 8056e99:	89 04 24             	mov    %eax,(%esp)
 8056e9c:	e8 ef 76 00 00       	call   805e590 <_test_assert>
        test_assert(4 * sizeof(dirent_t) == ret, NULL);
 8056ea1:	81 7d dc a0 00 00 00 	cmpl   $0xa0,-0x24(%ebp)
 8056ea8:	0f 94 c0             	sete   %al
 8056eab:	0f b6 c0             	movzbl %al,%eax
 8056eae:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8056eb5:	00 
 8056eb6:	c7 44 24 0c 31 1e 06 	movl   $0x8061e31,0xc(%esp)
 8056ebd:	08 
 8056ebe:	c7 44 24 08 7e 03 00 	movl   $0x37e,0x8(%esp)
 8056ec5:	00 
 8056ec6:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056ecd:	08 
 8056ece:	89 04 24             	mov    %eax,(%esp)
 8056ed1:	e8 ba 76 00 00       	call   805e590 <_test_assert>

        syscall_success(ret = getdents(fd, dirents, sizeof(dirent_t)));
 8056ed6:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8056edc:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056ee1:	89 04 24             	mov    %eax,(%esp)
 8056ee4:	e8 40 74 00 00       	call   805e329 <test_errstr>
 8056ee9:	89 c3                	mov    %eax,%ebx
 8056eeb:	c7 44 24 08 28 00 00 	movl   $0x28,0x8(%esp)
 8056ef2:	00 
 8056ef3:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
 8056ef9:	89 44 24 04          	mov    %eax,0x4(%esp)
 8056efd:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8056f00:	89 04 24             	mov    %eax,(%esp)
 8056f03:	e8 62 31 00 00       	call   805a06a <getdents>
 8056f08:	89 45 dc             	mov    %eax,-0x24(%ebp)
 8056f0b:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8056f0e:	f7 d0                	not    %eax
 8056f10:	c1 e8 1f             	shr    $0x1f,%eax
 8056f13:	0f b6 c0             	movzbl %al,%eax
 8056f16:	89 74 24 18          	mov    %esi,0x18(%esp)
 8056f1a:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8056f1e:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056f25:	08 
 8056f26:	c7 44 24 0c 50 1e 06 	movl   $0x8061e50,0xc(%esp)
 8056f2d:	08 
 8056f2e:	c7 44 24 08 80 03 00 	movl   $0x380,0x8(%esp)
 8056f35:	00 
 8056f36:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056f3d:	08 
 8056f3e:	89 04 24             	mov    %eax,(%esp)
 8056f41:	e8 4a 76 00 00       	call   805e590 <_test_assert>
        test_assert(0 == ret, NULL);
 8056f46:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
 8056f4a:	0f 94 c0             	sete   %al
 8056f4d:	0f b6 c0             	movzbl %al,%eax
 8056f50:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8056f57:	00 
 8056f58:	c7 44 24 0c a3 14 06 	movl   $0x80614a3,0xc(%esp)
 8056f5f:	08 
 8056f60:	c7 44 24 08 81 03 00 	movl   $0x381,0x8(%esp)
 8056f67:	00 
 8056f68:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056f6f:	08 
 8056f70:	89 04 24             	mov    %eax,(%esp)
 8056f73:	e8 18 76 00 00       	call   805e590 <_test_assert>

        syscall_success(lseek(fd, 0, SEEK_SET));
 8056f78:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8056f7e:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056f83:	89 04 24             	mov    %eax,(%esp)
 8056f86:	e8 9e 73 00 00       	call   805e329 <test_errstr>
 8056f8b:	89 c3                	mov    %eax,%ebx
 8056f8d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8056f94:	00 
 8056f95:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8056f9c:	00 
 8056f9d:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8056fa0:	89 04 24             	mov    %eax,(%esp)
 8056fa3:	e8 28 2a 00 00       	call   80599d0 <lseek>
 8056fa8:	f7 d0                	not    %eax
 8056faa:	c1 e8 1f             	shr    $0x1f,%eax
 8056fad:	0f b6 c0             	movzbl %al,%eax
 8056fb0:	89 74 24 18          	mov    %esi,0x18(%esp)
 8056fb4:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8056fb8:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8056fbf:	08 
 8056fc0:	c7 44 24 0c 33 07 06 	movl   $0x8060733,0xc(%esp)
 8056fc7:	08 
 8056fc8:	c7 44 24 08 83 03 00 	movl   $0x383,0x8(%esp)
 8056fcf:	00 
 8056fd0:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8056fd7:	08 
 8056fd8:	89 04 24             	mov    %eax,(%esp)
 8056fdb:	e8 b0 75 00 00       	call   805e590 <_test_assert>
        test_fpos(fd, 0);
 8056fe0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
 8056fe7:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8056fed:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8056ff2:	89 04 24             	mov    %eax,(%esp)
 8056ff5:	e8 2f 73 00 00       	call   805e329 <test_errstr>
 8056ffa:	89 c3                	mov    %eax,%ebx
 8056ffc:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8057003:	00 
 8057004:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 805700b:	00 
 805700c:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805700f:	89 04 24             	mov    %eax,(%esp)
 8057012:	e8 b9 29 00 00       	call   80599d0 <lseek>
 8057017:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 805701a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805701d:	f7 d0                	not    %eax
 805701f:	c1 e8 1f             	shr    $0x1f,%eax
 8057022:	0f b6 c0             	movzbl %al,%eax
 8057025:	89 74 24 18          	mov    %esi,0x18(%esp)
 8057029:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805702d:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8057034:	08 
 8057035:	c7 44 24 0c 61 1a 06 	movl   $0x8061a61,0xc(%esp)
 805703c:	08 
 805703d:	c7 44 24 08 84 03 00 	movl   $0x384,0x8(%esp)
 8057044:	00 
 8057045:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805704c:	08 
 805704d:	89 04 24             	mov    %eax,(%esp)
 8057050:	e8 3b 75 00 00       	call   805e590 <_test_assert>
 8057055:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 8057058:	3b 45 d8             	cmp    -0x28(%ebp),%eax
 805705b:	0f 94 c0             	sete   %al
 805705e:	0f b6 c0             	movzbl %al,%eax
 8057061:	8b 55 d8             	mov    -0x28(%ebp),%edx
 8057064:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8057068:	8b 55 d4             	mov    -0x2c(%ebp),%edx
 805706b:	89 54 24 18          	mov    %edx,0x18(%esp)
 805706f:	8b 55 e0             	mov    -0x20(%ebp),%edx
 8057072:	89 54 24 14          	mov    %edx,0x14(%esp)
 8057076:	c7 44 24 10 50 02 06 	movl   $0x8060250,0x10(%esp)
 805707d:	08 
 805707e:	c7 44 24 0c 6e 02 06 	movl   $0x806026e,0xc(%esp)
 8057085:	08 
 8057086:	c7 44 24 08 84 03 00 	movl   $0x384,0x8(%esp)
 805708d:	00 
 805708e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057095:	08 
 8057096:	89 04 24             	mov    %eax,(%esp)
 8057099:	e8 f2 74 00 00       	call   805e590 <_test_assert>
        syscall_success(ret = getdents(fd, dirents, 2 * sizeof(dirent_t)));
 805709e:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80570a4:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80570a9:	89 04 24             	mov    %eax,(%esp)
 80570ac:	e8 78 72 00 00       	call   805e329 <test_errstr>
 80570b1:	89 c3                	mov    %eax,%ebx
 80570b3:	c7 44 24 08 50 00 00 	movl   $0x50,0x8(%esp)
 80570ba:	00 
 80570bb:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
 80570c1:	89 44 24 04          	mov    %eax,0x4(%esp)
 80570c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
 80570c8:	89 04 24             	mov    %eax,(%esp)
 80570cb:	e8 9a 2f 00 00       	call   805a06a <getdents>
 80570d0:	89 45 dc             	mov    %eax,-0x24(%ebp)
 80570d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
 80570d6:	f7 d0                	not    %eax
 80570d8:	c1 e8 1f             	shr    $0x1f,%eax
 80570db:	0f b6 c0             	movzbl %al,%eax
 80570de:	89 74 24 18          	mov    %esi,0x18(%esp)
 80570e2:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80570e6:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80570ed:	08 
 80570ee:	c7 44 24 0c 88 1e 06 	movl   $0x8061e88,0xc(%esp)
 80570f5:	08 
 80570f6:	c7 44 24 08 85 03 00 	movl   $0x385,0x8(%esp)
 80570fd:	00 
 80570fe:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057105:	08 
 8057106:	89 04 24             	mov    %eax,(%esp)
 8057109:	e8 82 74 00 00       	call   805e590 <_test_assert>
        test_assert(2 * sizeof(dirent_t) == ret, NULL);
 805710e:	83 7d dc 50          	cmpl   $0x50,-0x24(%ebp)
 8057112:	0f 94 c0             	sete   %al
 8057115:	0f b6 c0             	movzbl %al,%eax
 8057118:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 805711f:	00 
 8057120:	c7 44 24 0c c1 1e 06 	movl   $0x8061ec1,0xc(%esp)
 8057127:	08 
 8057128:	c7 44 24 08 86 03 00 	movl   $0x386,0x8(%esp)
 805712f:	00 
 8057130:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057137:	08 
 8057138:	89 04 24             	mov    %eax,(%esp)
 805713b:	e8 50 74 00 00       	call   805e590 <_test_assert>
        syscall_success(ret = getdents(fd, dirents, 2 * sizeof(dirent_t)));
 8057140:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8057146:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805714b:	89 04 24             	mov    %eax,(%esp)
 805714e:	e8 d6 71 00 00       	call   805e329 <test_errstr>
 8057153:	89 c3                	mov    %eax,%ebx
 8057155:	c7 44 24 08 50 00 00 	movl   $0x50,0x8(%esp)
 805715c:	00 
 805715d:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
 8057163:	89 44 24 04          	mov    %eax,0x4(%esp)
 8057167:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805716a:	89 04 24             	mov    %eax,(%esp)
 805716d:	e8 f8 2e 00 00       	call   805a06a <getdents>
 8057172:	89 45 dc             	mov    %eax,-0x24(%ebp)
 8057175:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8057178:	f7 d0                	not    %eax
 805717a:	c1 e8 1f             	shr    $0x1f,%eax
 805717d:	0f b6 c0             	movzbl %al,%eax
 8057180:	89 74 24 18          	mov    %esi,0x18(%esp)
 8057184:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057188:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805718f:	08 
 8057190:	c7 44 24 0c 88 1e 06 	movl   $0x8061e88,0xc(%esp)
 8057197:	08 
 8057198:	c7 44 24 08 87 03 00 	movl   $0x387,0x8(%esp)
 805719f:	00 
 80571a0:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80571a7:	08 
 80571a8:	89 04 24             	mov    %eax,(%esp)
 80571ab:	e8 e0 73 00 00       	call   805e590 <_test_assert>
        test_assert(2 * sizeof(dirent_t) == ret, NULL);
 80571b0:	83 7d dc 50          	cmpl   $0x50,-0x24(%ebp)
 80571b4:	0f 94 c0             	sete   %al
 80571b7:	0f b6 c0             	movzbl %al,%eax
 80571ba:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 80571c1:	00 
 80571c2:	c7 44 24 0c c1 1e 06 	movl   $0x8061ec1,0xc(%esp)
 80571c9:	08 
 80571ca:	c7 44 24 08 88 03 00 	movl   $0x388,0x8(%esp)
 80571d1:	00 
 80571d2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80571d9:	08 
 80571da:	89 04 24             	mov    %eax,(%esp)
 80571dd:	e8 ae 73 00 00       	call   805e590 <_test_assert>
        syscall_success(ret = getdents(fd, dirents, sizeof(dirent_t)));
 80571e2:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80571e8:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80571ed:	89 04 24             	mov    %eax,(%esp)
 80571f0:	e8 34 71 00 00       	call   805e329 <test_errstr>
 80571f5:	89 c3                	mov    %eax,%ebx
 80571f7:	c7 44 24 08 28 00 00 	movl   $0x28,0x8(%esp)
 80571fe:	00 
 80571ff:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
 8057205:	89 44 24 04          	mov    %eax,0x4(%esp)
 8057209:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805720c:	89 04 24             	mov    %eax,(%esp)
 805720f:	e8 56 2e 00 00       	call   805a06a <getdents>
 8057214:	89 45 dc             	mov    %eax,-0x24(%ebp)
 8057217:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805721a:	f7 d0                	not    %eax
 805721c:	c1 e8 1f             	shr    $0x1f,%eax
 805721f:	0f b6 c0             	movzbl %al,%eax
 8057222:	89 74 24 18          	mov    %esi,0x18(%esp)
 8057226:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805722a:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8057231:	08 
 8057232:	c7 44 24 0c 50 1e 06 	movl   $0x8061e50,0xc(%esp)
 8057239:	08 
 805723a:	c7 44 24 08 89 03 00 	movl   $0x389,0x8(%esp)
 8057241:	00 
 8057242:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057249:	08 
 805724a:	89 04 24             	mov    %eax,(%esp)
 805724d:	e8 3e 73 00 00       	call   805e590 <_test_assert>
        test_assert(0 == ret, NULL);
 8057252:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
 8057256:	0f 94 c0             	sete   %al
 8057259:	0f b6 c0             	movzbl %al,%eax
 805725c:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8057263:	00 
 8057264:	c7 44 24 0c a3 14 06 	movl   $0x80614a3,0xc(%esp)
 805726b:	08 
 805726c:	c7 44 24 08 8a 03 00 	movl   $0x38a,0x8(%esp)
 8057273:	00 
 8057274:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805727b:	08 
 805727c:	89 04 24             	mov    %eax,(%esp)
 805727f:	e8 0c 73 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 8057284:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805728a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805728f:	89 04 24             	mov    %eax,(%esp)
 8057292:	e8 92 70 00 00       	call   805e329 <test_errstr>
 8057297:	89 c3                	mov    %eax,%ebx
 8057299:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805729c:	89 04 24             	mov    %eax,(%esp)
 805729f:	e8 1f 28 00 00       	call   8059ac3 <close>
 80572a4:	f7 d0                	not    %eax
 80572a6:	c1 e8 1f             	shr    $0x1f,%eax
 80572a9:	0f b6 c0             	movzbl %al,%eax
 80572ac:	89 74 24 18          	mov    %esi,0x18(%esp)
 80572b0:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80572b4:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80572bb:	08 
 80572bc:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 80572c3:	08 
 80572c4:	c7 44 24 08 8b 03 00 	movl   $0x38b,0x8(%esp)
 80572cb:	00 
 80572cc:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80572d3:	08 
 80572d4:	89 04 24             	mov    %eax,(%esp)
 80572d7:	e8 b4 72 00 00       	call   805e590 <_test_assert>

        /* Cannot call getdents on regular file */
        create_file("file01");
 80572dc:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80572e2:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80572e7:	89 04 24             	mov    %eax,(%esp)
 80572ea:	e8 3a 70 00 00       	call   805e329 <test_errstr>
 80572ef:	89 c3                	mov    %eax,%ebx
 80572f1:	c7 44 24 08 ff 01 00 	movl   $0x1ff,0x8(%esp)
 80572f8:	00 
 80572f9:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
 8057300:	00 
 8057301:	c7 04 24 81 01 06 08 	movl   $0x8060181,(%esp)
 8057308:	e8 5f 26 00 00       	call   805996c <open>
 805730d:	89 45 d0             	mov    %eax,-0x30(%ebp)
 8057310:	8b 45 d0             	mov    -0x30(%ebp),%eax
 8057313:	f7 d0                	not    %eax
 8057315:	c1 e8 1f             	shr    $0x1f,%eax
 8057318:	0f b6 c0             	movzbl %al,%eax
 805731b:	89 74 24 18          	mov    %esi,0x18(%esp)
 805731f:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057323:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805732a:	08 
 805732b:	c7 44 24 0c 88 01 06 	movl   $0x8060188,0xc(%esp)
 8057332:	08 
 8057333:	c7 44 24 08 8e 03 00 	movl   $0x38e,0x8(%esp)
 805733a:	00 
 805733b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057342:	08 
 8057343:	89 04 24             	mov    %eax,(%esp)
 8057346:	e8 45 72 00 00       	call   805e590 <_test_assert>
 805734b:	85 c0                	test   %eax,%eax
 805734d:	74 58                	je     80573a7 <vfstest_getdents+0x838>
 805734f:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8057355:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805735a:	89 04 24             	mov    %eax,(%esp)
 805735d:	e8 c7 6f 00 00       	call   805e329 <test_errstr>
 8057362:	89 c3                	mov    %eax,%ebx
 8057364:	8b 45 d0             	mov    -0x30(%ebp),%eax
 8057367:	89 04 24             	mov    %eax,(%esp)
 805736a:	e8 54 27 00 00       	call   8059ac3 <close>
 805736f:	f7 d0                	not    %eax
 8057371:	c1 e8 1f             	shr    $0x1f,%eax
 8057374:	0f b6 c0             	movzbl %al,%eax
 8057377:	89 74 24 18          	mov    %esi,0x18(%esp)
 805737b:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805737f:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8057386:	08 
 8057387:	c7 44 24 0c 78 ec 05 	movl   $0x805ec78,0xc(%esp)
 805738e:	08 
 805738f:	c7 44 24 08 8e 03 00 	movl   $0x38e,0x8(%esp)
 8057396:	00 
 8057397:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805739e:	08 
 805739f:	89 04 24             	mov    %eax,(%esp)
 80573a2:	e8 e9 71 00 00       	call   805e590 <_test_assert>
        syscall_success(fd = open("file01", O_RDONLY, 0));
 80573a7:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80573ad:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80573b2:	89 04 24             	mov    %eax,(%esp)
 80573b5:	e8 6f 6f 00 00       	call   805e329 <test_errstr>
 80573ba:	89 c3                	mov    %eax,%ebx
 80573bc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80573c3:	00 
 80573c4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80573cb:	00 
 80573cc:	c7 04 24 81 01 06 08 	movl   $0x8060181,(%esp)
 80573d3:	e8 94 25 00 00       	call   805996c <open>
 80573d8:	89 45 e0             	mov    %eax,-0x20(%ebp)
 80573db:	8b 45 e0             	mov    -0x20(%ebp),%eax
 80573de:	f7 d0                	not    %eax
 80573e0:	c1 e8 1f             	shr    $0x1f,%eax
 80573e3:	0f b6 c0             	movzbl %al,%eax
 80573e6:	89 74 24 18          	mov    %esi,0x18(%esp)
 80573ea:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80573ee:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80573f5:	08 
 80573f6:	c7 44 24 0c e0 1e 06 	movl   $0x8061ee0,0xc(%esp)
 80573fd:	08 
 80573fe:	c7 44 24 08 8f 03 00 	movl   $0x38f,0x8(%esp)
 8057405:	00 
 8057406:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805740d:	08 
 805740e:	89 04 24             	mov    %eax,(%esp)
 8057411:	e8 7a 71 00 00       	call   805e590 <_test_assert>
        syscall_fail(getdents(fd, dirents, 4 * sizeof(dirent_t)), ENOTDIR);
 8057416:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 805741d:	e8 07 6f 00 00       	call   805e329 <test_errstr>
 8057422:	89 c3                	mov    %eax,%ebx
 8057424:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 805742b:	00 00 00 
 805742e:	c7 44 24 08 a0 00 00 	movl   $0xa0,0x8(%esp)
 8057435:	00 
 8057436:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
 805743c:	89 44 24 04          	mov    %eax,0x4(%esp)
 8057440:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8057443:	89 04 24             	mov    %eax,(%esp)
 8057446:	e8 1f 2c 00 00       	call   805a06a <getdents>
 805744b:	83 f8 ff             	cmp    $0xffffffff,%eax
 805744e:	0f 94 c0             	sete   %al
 8057451:	0f b6 c0             	movzbl %al,%eax
 8057454:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 805745b:	00 
 805745c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057460:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8057467:	08 
 8057468:	c7 44 24 0c 04 1f 06 	movl   $0x8061f04,0xc(%esp)
 805746f:	08 
 8057470:	c7 44 24 08 90 03 00 	movl   $0x390,0x8(%esp)
 8057477:	00 
 8057478:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805747f:	08 
 8057480:	89 04 24             	mov    %eax,(%esp)
 8057483:	e8 08 71 00 00       	call   805e590 <_test_assert>
 8057488:	85 c0                	test   %eax,%eax
 805748a:	0f 84 8a 00 00 00    	je     805751a <vfstest_getdents+0x9ab>
 8057490:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8057496:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805749b:	89 04 24             	mov    %eax,(%esp)
 805749e:	e8 86 6e 00 00       	call   805e329 <test_errstr>
 80574a3:	89 c6                	mov    %eax,%esi
 80574a5:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 80574ac:	e8 78 6e 00 00       	call   805e329 <test_errstr>
 80574b1:	89 c3                	mov    %eax,%ebx
 80574b3:	c7 44 24 08 a0 00 00 	movl   $0xa0,0x8(%esp)
 80574ba:	00 
 80574bb:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
 80574c1:	89 44 24 04          	mov    %eax,0x4(%esp)
 80574c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
 80574c8:	89 04 24             	mov    %eax,(%esp)
 80574cb:	e8 9a 2b 00 00       	call   805a06a <getdents>
 80574d0:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80574d5:	83 f8 14             	cmp    $0x14,%eax
 80574d8:	0f 94 c0             	sete   %al
 80574db:	0f b6 c0             	movzbl %al,%eax
 80574de:	89 7c 24 20          	mov    %edi,0x20(%esp)
 80574e2:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 80574e6:	c7 44 24 18 14 00 00 	movl   $0x14,0x18(%esp)
 80574ed:	00 
 80574ee:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80574f2:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 80574f9:	08 
 80574fa:	c7 44 24 0c 48 1f 06 	movl   $0x8061f48,0xc(%esp)
 8057501:	08 
 8057502:	c7 44 24 08 90 03 00 	movl   $0x390,0x8(%esp)
 8057509:	00 
 805750a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057511:	08 
 8057512:	89 04 24             	mov    %eax,(%esp)
 8057515:	e8 76 70 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 805751a:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8057520:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8057525:	89 04 24             	mov    %eax,(%esp)
 8057528:	e8 fc 6d 00 00       	call   805e329 <test_errstr>
 805752d:	89 c3                	mov    %eax,%ebx
 805752f:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8057532:	89 04 24             	mov    %eax,(%esp)
 8057535:	e8 89 25 00 00       	call   8059ac3 <close>
 805753a:	f7 d0                	not    %eax
 805753c:	c1 e8 1f             	shr    $0x1f,%eax
 805753f:	0f b6 c0             	movzbl %al,%eax
 8057542:	89 74 24 18          	mov    %esi,0x18(%esp)
 8057546:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805754a:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8057551:	08 
 8057552:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 8057559:	08 
 805755a:	c7 44 24 08 91 03 00 	movl   $0x391,0x8(%esp)
 8057561:	00 
 8057562:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057569:	08 
 805756a:	89 04 24             	mov    %eax,(%esp)
 805756d:	e8 1e 70 00 00       	call   805e590 <_test_assert>

        syscall_success(chdir(".."));
 8057572:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8057578:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805757d:	89 04 24             	mov    %eax,(%esp)
 8057580:	e8 a4 6d 00 00       	call   805e329 <test_errstr>
 8057585:	89 c3                	mov    %eax,%ebx
 8057587:	c7 04 24 26 e6 05 08 	movl   $0x805e626,(%esp)
 805758e:	e8 e1 27 00 00       	call   8059d74 <chdir>
 8057593:	f7 d0                	not    %eax
 8057595:	c1 e8 1f             	shr    $0x1f,%eax
 8057598:	0f b6 c0             	movzbl %al,%eax
 805759b:	89 74 24 18          	mov    %esi,0x18(%esp)
 805759f:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80575a3:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80575aa:	08 
 80575ab:	c7 44 24 0c ac ed 05 	movl   $0x805edac,0xc(%esp)
 80575b2:	08 
 80575b3:	c7 44 24 08 93 03 00 	movl   $0x393,0x8(%esp)
 80575ba:	00 
 80575bb:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80575c2:	08 
 80575c3:	89 04 24             	mov    %eax,(%esp)
 80575c6:	e8 c5 6f 00 00       	call   805e590 <_test_assert>
        test_fini("vfstest_getdents");
 80575cb:	c7 04 24 83 1f 06 08 	movl   $0x8061f83,(%esp)
 80575d2:	e8 a4 6c 00 00       	call   805e27b <test_fini>
}
 80575d7:	90                   	nop
 80575d8:	81 c4 fc 00 00 00    	add    $0xfc,%esp
 80575de:	5b                   	pop    %ebx
 80575df:	5e                   	pop    %esi
 80575e0:	5f                   	pop    %edi
 80575e1:	5d                   	pop    %ebp
 80575e2:	c3                   	ret    

080575e3 <vfstest_s5fs_vm>:
 * vfs privtest (hence the name)
 */

static void
vfstest_s5fs_vm(void)
{
 80575e3:	55                   	push   %ebp
 80575e4:	89 e5                	mov    %esp,%ebp
 80575e6:	57                   	push   %edi
 80575e7:	56                   	push   %esi
 80575e8:	53                   	push   %ebx
 80575e9:	81 ec bc 08 00 00    	sub    $0x8bc,%esp
        int fd, newfd, ret;
        char buf[2048];
        struct stat oldstatbuf, newstatbuf;
        void *addr;
        memset(&oldstatbuf, '\0', sizeof(struct stat));
 80575ef:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
 80575f6:	00 
 80575f7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80575fe:	00 
 80575ff:	8d 85 a8 f7 ff ff    	lea    -0x858(%ebp),%eax
 8057605:	89 04 24             	mov    %eax,(%esp)
 8057608:	e8 9e 2d 00 00       	call   805a3ab <memset>
        memset(&newstatbuf, '\0', sizeof(struct stat));
 805760d:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
 8057614:	00 
 8057615:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 805761c:	00 
 805761d:	8d 85 74 f7 ff ff    	lea    -0x88c(%ebp),%eax
 8057623:	89 04 24             	mov    %eax,(%esp)
 8057626:	e8 80 2d 00 00       	call   805a3ab <memset>

        syscall_success(mkdir("s5fs", 0));
 805762b:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8057631:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8057636:	89 04 24             	mov    %eax,(%esp)
 8057639:	e8 eb 6c 00 00       	call   805e329 <test_errstr>
 805763e:	89 c3                	mov    %eax,%ebx
 8057640:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8057647:	00 
 8057648:	c7 04 24 94 1f 06 08 	movl   $0x8061f94,(%esp)
 805764f:	e8 3a 25 00 00       	call   8059b8e <mkdir>
 8057654:	f7 d0                	not    %eax
 8057656:	c1 e8 1f             	shr    $0x1f,%eax
 8057659:	0f b6 c0             	movzbl %al,%eax
 805765c:	89 74 24 18          	mov    %esi,0x18(%esp)
 8057660:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057664:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805766b:	08 
 805766c:	c7 44 24 0c 99 1f 06 	movl   $0x8061f99,0xc(%esp)
 8057673:	08 
 8057674:	c7 44 24 08 a8 03 00 	movl   $0x3a8,0x8(%esp)
 805767b:	00 
 805767c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057683:	08 
 8057684:	89 04 24             	mov    %eax,(%esp)
 8057687:	e8 04 6f 00 00       	call   805e590 <_test_assert>
        syscall_success(chdir("s5fs"));
 805768c:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8057692:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8057697:	89 04 24             	mov    %eax,(%esp)
 805769a:	e8 8a 6c 00 00       	call   805e329 <test_errstr>
 805769f:	89 c3                	mov    %eax,%ebx
 80576a1:	c7 04 24 94 1f 06 08 	movl   $0x8061f94,(%esp)
 80576a8:	e8 c7 26 00 00       	call   8059d74 <chdir>
 80576ad:	f7 d0                	not    %eax
 80576af:	c1 e8 1f             	shr    $0x1f,%eax
 80576b2:	0f b6 c0             	movzbl %al,%eax
 80576b5:	89 74 24 18          	mov    %esi,0x18(%esp)
 80576b9:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80576bd:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80576c4:	08 
 80576c5:	c7 44 24 0c b1 1f 06 	movl   $0x8061fb1,0xc(%esp)
 80576cc:	08 
 80576cd:	c7 44 24 08 a9 03 00 	movl   $0x3a9,0x8(%esp)
 80576d4:	00 
 80576d5:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80576dc:	08 
 80576dd:	89 04 24             	mov    %eax,(%esp)
 80576e0:	e8 ab 6e 00 00       	call   805e590 <_test_assert>

        /* Open some stuff */
        syscall_success(fd = open("oldchld", O_RDWR | O_CREAT, 0));
 80576e5:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80576eb:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80576f0:	89 04 24             	mov    %eax,(%esp)
 80576f3:	e8 31 6c 00 00       	call   805e329 <test_errstr>
 80576f8:	89 c3                	mov    %eax,%ebx
 80576fa:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8057701:	00 
 8057702:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
 8057709:	00 
 805770a:	c7 04 24 c6 1f 06 08 	movl   $0x8061fc6,(%esp)
 8057711:	e8 56 22 00 00       	call   805996c <open>
 8057716:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 8057719:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805771c:	f7 d0                	not    %eax
 805771e:	c1 e8 1f             	shr    $0x1f,%eax
 8057721:	0f b6 c0             	movzbl %al,%eax
 8057724:	89 74 24 18          	mov    %esi,0x18(%esp)
 8057728:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805772c:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8057733:	08 
 8057734:	c7 44 24 0c d0 1f 06 	movl   $0x8061fd0,0xc(%esp)
 805773b:	08 
 805773c:	c7 44 24 08 ac 03 00 	movl   $0x3ac,0x8(%esp)
 8057743:	00 
 8057744:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805774b:	08 
 805774c:	89 04 24             	mov    %eax,(%esp)
 805774f:	e8 3c 6e 00 00       	call   805e590 <_test_assert>
        syscall_success(mkdir("parent", 0));
 8057754:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805775a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805775f:	89 04 24             	mov    %eax,(%esp)
 8057762:	e8 c2 6b 00 00       	call   805e329 <test_errstr>
 8057767:	89 c3                	mov    %eax,%ebx
 8057769:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8057770:	00 
 8057771:	c7 04 24 fa 1f 06 08 	movl   $0x8061ffa,(%esp)
 8057778:	e8 11 24 00 00       	call   8059b8e <mkdir>
 805777d:	f7 d0                	not    %eax
 805777f:	c1 e8 1f             	shr    $0x1f,%eax
 8057782:	0f b6 c0             	movzbl %al,%eax
 8057785:	89 74 24 18          	mov    %esi,0x18(%esp)
 8057789:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805778d:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8057794:	08 
 8057795:	c7 44 24 0c 01 20 06 	movl   $0x8062001,0xc(%esp)
 805779c:	08 
 805779d:	c7 44 24 08 ad 03 00 	movl   $0x3ad,0x8(%esp)
 80577a4:	00 
 80577a5:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80577ac:	08 
 80577ad:	89 04 24             	mov    %eax,(%esp)
 80577b0:	e8 db 6d 00 00       	call   805e590 <_test_assert>

        /* link/unlink tests */
        syscall_success(link("oldchld", "newchld"));
 80577b5:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80577bb:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80577c0:	89 04 24             	mov    %eax,(%esp)
 80577c3:	e8 61 6b 00 00       	call   805e329 <test_errstr>
 80577c8:	89 c3                	mov    %eax,%ebx
 80577ca:	c7 44 24 04 1b 20 06 	movl   $0x806201b,0x4(%esp)
 80577d1:	08 
 80577d2:	c7 04 24 c6 1f 06 08 	movl   $0x8061fc6,(%esp)
 80577d9:	e8 be 24 00 00       	call   8059c9c <link>
 80577de:	f7 d0                	not    %eax
 80577e0:	c1 e8 1f             	shr    $0x1f,%eax
 80577e3:	0f b6 c0             	movzbl %al,%eax
 80577e6:	89 74 24 18          	mov    %esi,0x18(%esp)
 80577ea:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80577ee:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80577f5:	08 
 80577f6:	c7 44 24 0c 24 20 06 	movl   $0x8062024,0xc(%esp)
 80577fd:	08 
 80577fe:	c7 44 24 08 b0 03 00 	movl   $0x3b0,0x8(%esp)
 8057805:	00 
 8057806:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805780d:	08 
 805780e:	89 04 24             	mov    %eax,(%esp)
 8057811:	e8 7a 6d 00 00       	call   805e590 <_test_assert>

        /* Make sure stats match */
        syscall_success(stat("oldchld", &oldstatbuf));
 8057816:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805781c:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8057821:	89 04 24             	mov    %eax,(%esp)
 8057824:	e8 00 6b 00 00       	call   805e329 <test_errstr>
 8057829:	89 c3                	mov    %eax,%ebx
 805782b:	8d 85 a8 f7 ff ff    	lea    -0x858(%ebp),%eax
 8057831:	89 44 24 04          	mov    %eax,0x4(%esp)
 8057835:	c7 04 24 c6 1f 06 08 	movl   $0x8061fc6,(%esp)
 805783c:	e8 7a 28 00 00       	call   805a0bb <stat>
 8057841:	f7 d0                	not    %eax
 8057843:	c1 e8 1f             	shr    $0x1f,%eax
 8057846:	0f b6 c0             	movzbl %al,%eax
 8057849:	89 74 24 18          	mov    %esi,0x18(%esp)
 805784d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057851:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8057858:	08 
 8057859:	c7 44 24 0c 48 20 06 	movl   $0x8062048,0xc(%esp)
 8057860:	08 
 8057861:	c7 44 24 08 b3 03 00 	movl   $0x3b3,0x8(%esp)
 8057868:	00 
 8057869:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057870:	08 
 8057871:	89 04 24             	mov    %eax,(%esp)
 8057874:	e8 17 6d 00 00       	call   805e590 <_test_assert>
        syscall_success(stat("newchld", &newstatbuf));
 8057879:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805787f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8057884:	89 04 24             	mov    %eax,(%esp)
 8057887:	e8 9d 6a 00 00       	call   805e329 <test_errstr>
 805788c:	89 c3                	mov    %eax,%ebx
 805788e:	8d 85 74 f7 ff ff    	lea    -0x88c(%ebp),%eax
 8057894:	89 44 24 04          	mov    %eax,0x4(%esp)
 8057898:	c7 04 24 1b 20 06 08 	movl   $0x806201b,(%esp)
 805789f:	e8 17 28 00 00       	call   805a0bb <stat>
 80578a4:	f7 d0                	not    %eax
 80578a6:	c1 e8 1f             	shr    $0x1f,%eax
 80578a9:	0f b6 c0             	movzbl %al,%eax
 80578ac:	89 74 24 18          	mov    %esi,0x18(%esp)
 80578b0:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80578b4:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80578bb:	08 
 80578bc:	c7 44 24 0c 6c 20 06 	movl   $0x806206c,0xc(%esp)
 80578c3:	08 
 80578c4:	c7 44 24 08 b4 03 00 	movl   $0x3b4,0x8(%esp)
 80578cb:	00 
 80578cc:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80578d3:	08 
 80578d4:	89 04 24             	mov    %eax,(%esp)
 80578d7:	e8 b4 6c 00 00       	call   805e590 <_test_assert>
        test_assert(0 == memcmp(&oldstatbuf, &newstatbuf, sizeof(struct stat)), NULL);
 80578dc:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
 80578e3:	00 
 80578e4:	8d 85 74 f7 ff ff    	lea    -0x88c(%ebp),%eax
 80578ea:	89 44 24 04          	mov    %eax,0x4(%esp)
 80578ee:	8d 85 a8 f7 ff ff    	lea    -0x858(%ebp),%eax
 80578f4:	89 04 24             	mov    %eax,(%esp)
 80578f7:	e8 01 29 00 00       	call   805a1fd <memcmp>
 80578fc:	85 c0                	test   %eax,%eax
 80578fe:	0f 94 c0             	sete   %al
 8057901:	0f b6 c0             	movzbl %al,%eax
 8057904:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 805790b:	00 
 805790c:	c7 44 24 0c 90 20 06 	movl   $0x8062090,0xc(%esp)
 8057913:	08 
 8057914:	c7 44 24 08 b5 03 00 	movl   $0x3b5,0x8(%esp)
 805791b:	00 
 805791c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057923:	08 
 8057924:	89 04 24             	mov    %eax,(%esp)
 8057927:	e8 64 6c 00 00       	call   805e590 <_test_assert>

        /* Make sure contents match */
        syscall_success(newfd = open("newchld", O_RDWR, 0));
 805792c:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8057932:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8057937:	89 04 24             	mov    %eax,(%esp)
 805793a:	e8 ea 69 00 00       	call   805e329 <test_errstr>
 805793f:	89 c3                	mov    %eax,%ebx
 8057941:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8057948:	00 
 8057949:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 8057950:	00 
 8057951:	c7 04 24 1b 20 06 08 	movl   $0x806201b,(%esp)
 8057958:	e8 0f 20 00 00       	call   805996c <open>
 805795d:	89 45 e0             	mov    %eax,-0x20(%ebp)
 8057960:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8057963:	f7 d0                	not    %eax
 8057965:	c1 e8 1f             	shr    $0x1f,%eax
 8057968:	0f b6 c0             	movzbl %al,%eax
 805796b:	89 74 24 18          	mov    %esi,0x18(%esp)
 805796f:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057973:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805797a:	08 
 805797b:	c7 44 24 0c cc 20 06 	movl   $0x80620cc,0xc(%esp)
 8057982:	08 
 8057983:	c7 44 24 08 b8 03 00 	movl   $0x3b8,0x8(%esp)
 805798a:	00 
 805798b:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057992:	08 
 8057993:	89 04 24             	mov    %eax,(%esp)
 8057996:	e8 f5 6b 00 00       	call   805e590 <_test_assert>
        syscall_success(ret = write(fd, TESTSTR, strlen(TESTSTR)));
 805799b:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80579a1:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80579a6:	89 04 24             	mov    %eax,(%esp)
 80579a9:	e8 7b 69 00 00       	call   805e329 <test_errstr>
 80579ae:	89 c3                	mov    %eax,%ebx
 80579b0:	c7 04 24 f4 20 06 08 	movl   $0x80620f4,(%esp)
 80579b7:	e8 ae 2a 00 00       	call   805a46a <strlen>
 80579bc:	89 44 24 08          	mov    %eax,0x8(%esp)
 80579c0:	c7 44 24 04 f4 20 06 	movl   $0x80620f4,0x4(%esp)
 80579c7:	08 
 80579c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80579cb:	89 04 24             	mov    %eax,(%esp)
 80579ce:	e8 9f 20 00 00       	call   8059a72 <write>
 80579d3:	89 45 dc             	mov    %eax,-0x24(%ebp)
 80579d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
 80579d9:	f7 d0                	not    %eax
 80579db:	c1 e8 1f             	shr    $0x1f,%eax
 80579de:	0f b6 c0             	movzbl %al,%eax
 80579e1:	89 74 24 18          	mov    %esi,0x18(%esp)
 80579e5:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80579e9:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80579f0:	08 
 80579f1:	c7 44 24 0c b4 22 06 	movl   $0x80622b4,0xc(%esp)
 80579f8:	08 
 80579f9:	c7 44 24 08 b9 03 00 	movl   $0x3b9,0x8(%esp)
 8057a00:	00 
 8057a01:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057a08:	08 
 8057a09:	89 04 24             	mov    %eax,(%esp)
 8057a0c:	e8 7f 6b 00 00       	call   805e590 <_test_assert>
        test_assert(ret == (int)strlen(TESTSTR), NULL);
 8057a11:	c7 04 24 f4 20 06 08 	movl   $0x80620f4,(%esp)
 8057a18:	e8 4d 2a 00 00       	call   805a46a <strlen>
 8057a1d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
 8057a20:	0f 94 c0             	sete   %al
 8057a23:	0f b6 c0             	movzbl %al,%eax
 8057a26:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8057a2d:	00 
 8057a2e:	c7 44 24 0c 75 26 06 	movl   $0x8062675,0xc(%esp)
 8057a35:	08 
 8057a36:	c7 44 24 08 ba 03 00 	movl   $0x3ba,0x8(%esp)
 8057a3d:	00 
 8057a3e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057a45:	08 
 8057a46:	89 04 24             	mov    %eax,(%esp)
 8057a49:	e8 42 6b 00 00       	call   805e590 <_test_assert>
        syscall_success(ret = read(newfd, buf, strlen(TESTSTR)));
 8057a4e:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8057a54:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8057a59:	89 04 24             	mov    %eax,(%esp)
 8057a5c:	e8 c8 68 00 00       	call   805e329 <test_errstr>
 8057a61:	89 c3                	mov    %eax,%ebx
 8057a63:	c7 04 24 f4 20 06 08 	movl   $0x80620f4,(%esp)
 8057a6a:	e8 fb 29 00 00       	call   805a46a <strlen>
 8057a6f:	89 44 24 08          	mov    %eax,0x8(%esp)
 8057a73:	8d 85 dc f7 ff ff    	lea    -0x824(%ebp),%eax
 8057a79:	89 44 24 04          	mov    %eax,0x4(%esp)
 8057a7d:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8057a80:	89 04 24             	mov    %eax,(%esp)
 8057a83:	e8 99 1f 00 00       	call   8059a21 <read>
 8057a88:	89 45 dc             	mov    %eax,-0x24(%ebp)
 8057a8b:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8057a8e:	f7 d0                	not    %eax
 8057a90:	c1 e8 1f             	shr    $0x1f,%eax
 8057a93:	0f b6 c0             	movzbl %al,%eax
 8057a96:	89 74 24 18          	mov    %esi,0x18(%esp)
 8057a9a:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057a9e:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8057aa5:	08 
 8057aa6:	c7 44 24 0c 94 26 06 	movl   $0x8062694,0xc(%esp)
 8057aad:	08 
 8057aae:	c7 44 24 08 bb 03 00 	movl   $0x3bb,0x8(%esp)
 8057ab5:	00 
 8057ab6:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057abd:	08 
 8057abe:	89 04 24             	mov    %eax,(%esp)
 8057ac1:	e8 ca 6a 00 00       	call   805e590 <_test_assert>
        test_assert(ret == (int)strlen(TESTSTR), NULL);
 8057ac6:	c7 04 24 f4 20 06 08 	movl   $0x80620f4,(%esp)
 8057acd:	e8 98 29 00 00       	call   805a46a <strlen>
 8057ad2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
 8057ad5:	0f 94 c0             	sete   %al
 8057ad8:	0f b6 c0             	movzbl %al,%eax
 8057adb:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8057ae2:	00 
 8057ae3:	c7 44 24 0c 75 26 06 	movl   $0x8062675,0xc(%esp)
 8057aea:	08 
 8057aeb:	c7 44 24 08 bc 03 00 	movl   $0x3bc,0x8(%esp)
 8057af2:	00 
 8057af3:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057afa:	08 
 8057afb:	89 04 24             	mov    %eax,(%esp)
 8057afe:	e8 8d 6a 00 00       	call   805e590 <_test_assert>
        test_assert(0 == strncmp(buf, TESTSTR, strlen(TESTSTR)), "string is %.*s, expected %s", strlen(TESTSTR), buf, TESTSTR);
 8057b03:	c7 04 24 f4 20 06 08 	movl   $0x80620f4,(%esp)
 8057b0a:	e8 5b 29 00 00       	call   805a46a <strlen>
 8057b0f:	89 c3                	mov    %eax,%ebx
 8057b11:	c7 04 24 f4 20 06 08 	movl   $0x80620f4,(%esp)
 8057b18:	e8 4d 29 00 00       	call   805a46a <strlen>
 8057b1d:	89 44 24 08          	mov    %eax,0x8(%esp)
 8057b21:	c7 44 24 04 f4 20 06 	movl   $0x80620f4,0x4(%esp)
 8057b28:	08 
 8057b29:	8d 85 dc f7 ff ff    	lea    -0x824(%ebp),%eax
 8057b2f:	89 04 24             	mov    %eax,(%esp)
 8057b32:	e8 60 27 00 00       	call   805a297 <strncmp>
 8057b37:	85 c0                	test   %eax,%eax
 8057b39:	0f 94 c0             	sete   %al
 8057b3c:	0f b6 c0             	movzbl %al,%eax
 8057b3f:	c7 44 24 1c f4 20 06 	movl   $0x80620f4,0x1c(%esp)
 8057b46:	08 
 8057b47:	8d 95 dc f7 ff ff    	lea    -0x824(%ebp),%edx
 8057b4d:	89 54 24 18          	mov    %edx,0x18(%esp)
 8057b51:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057b55:	c7 44 24 10 8b 28 06 	movl   $0x806288b,0x10(%esp)
 8057b5c:	08 
 8057b5d:	c7 44 24 0c a8 28 06 	movl   $0x80628a8,0xc(%esp)
 8057b64:	08 
 8057b65:	c7 44 24 08 bd 03 00 	movl   $0x3bd,0x8(%esp)
 8057b6c:	00 
 8057b6d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057b74:	08 
 8057b75:	89 04 24             	mov    %eax,(%esp)
 8057b78:	e8 13 6a 00 00       	call   805e590 <_test_assert>

        syscall_success(close(fd));
 8057b7d:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8057b83:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8057b88:	89 04 24             	mov    %eax,(%esp)
 8057b8b:	e8 99 67 00 00       	call   805e329 <test_errstr>
 8057b90:	89 c3                	mov    %eax,%ebx
 8057b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8057b95:	89 04 24             	mov    %eax,(%esp)
 8057b98:	e8 26 1f 00 00       	call   8059ac3 <close>
 8057b9d:	f7 d0                	not    %eax
 8057b9f:	c1 e8 1f             	shr    $0x1f,%eax
 8057ba2:	0f b6 c0             	movzbl %al,%eax
 8057ba5:	89 74 24 18          	mov    %esi,0x18(%esp)
 8057ba9:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057bad:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8057bb4:	08 
 8057bb5:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 8057bbc:	08 
 8057bbd:	c7 44 24 08 bf 03 00 	movl   $0x3bf,0x8(%esp)
 8057bc4:	00 
 8057bc5:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057bcc:	08 
 8057bcd:	89 04 24             	mov    %eax,(%esp)
 8057bd0:	e8 bb 69 00 00       	call   805e590 <_test_assert>
        syscall_success(close(newfd));
 8057bd5:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8057bdb:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8057be0:	89 04 24             	mov    %eax,(%esp)
 8057be3:	e8 41 67 00 00       	call   805e329 <test_errstr>
 8057be8:	89 c3                	mov    %eax,%ebx
 8057bea:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8057bed:	89 04 24             	mov    %eax,(%esp)
 8057bf0:	e8 ce 1e 00 00       	call   8059ac3 <close>
 8057bf5:	f7 d0                	not    %eax
 8057bf7:	c1 e8 1f             	shr    $0x1f,%eax
 8057bfa:	0f b6 c0             	movzbl %al,%eax
 8057bfd:	89 74 24 18          	mov    %esi,0x18(%esp)
 8057c01:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057c05:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8057c0c:	08 
 8057c0d:	c7 44 24 0c d4 28 06 	movl   $0x80628d4,0xc(%esp)
 8057c14:	08 
 8057c15:	c7 44 24 08 c0 03 00 	movl   $0x3c0,0x8(%esp)
 8057c1c:	00 
 8057c1d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057c24:	08 
 8057c25:	89 04 24             	mov    %eax,(%esp)
 8057c28:	e8 63 69 00 00       	call   805e590 <_test_assert>

        /* Remove one, make sure the other remains */
        syscall_success(unlink("oldchld"));
 8057c2d:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8057c33:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8057c38:	89 04 24             	mov    %eax,(%esp)
 8057c3b:	e8 e9 66 00 00       	call   805e329 <test_errstr>
 8057c40:	89 c3                	mov    %eax,%ebx
 8057c42:	c7 04 24 c6 1f 06 08 	movl   $0x8061fc6,(%esp)
 8057c49:	e8 f6 1f 00 00       	call   8059c44 <unlink>
 8057c4e:	f7 d0                	not    %eax
 8057c50:	c1 e8 1f             	shr    $0x1f,%eax
 8057c53:	0f b6 c0             	movzbl %al,%eax
 8057c56:	89 74 24 18          	mov    %esi,0x18(%esp)
 8057c5a:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057c5e:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8057c65:	08 
 8057c66:	c7 44 24 0c e8 28 06 	movl   $0x80628e8,0xc(%esp)
 8057c6d:	08 
 8057c6e:	c7 44 24 08 c3 03 00 	movl   $0x3c3,0x8(%esp)
 8057c75:	00 
 8057c76:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057c7d:	08 
 8057c7e:	89 04 24             	mov    %eax,(%esp)
 8057c81:	e8 0a 69 00 00       	call   805e590 <_test_assert>
        syscall_fail(mkdir("newchld", 0), EEXIST);
 8057c86:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
 8057c8d:	e8 97 66 00 00       	call   805e329 <test_errstr>
 8057c92:	89 c3                	mov    %eax,%ebx
 8057c94:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8057c9b:	00 00 00 
 8057c9e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8057ca5:	00 
 8057ca6:	c7 04 24 1b 20 06 08 	movl   $0x806201b,(%esp)
 8057cad:	e8 dc 1e 00 00       	call   8059b8e <mkdir>
 8057cb2:	83 f8 ff             	cmp    $0xffffffff,%eax
 8057cb5:	0f 94 c0             	sete   %al
 8057cb8:	0f b6 c0             	movzbl %al,%eax
 8057cbb:	c7 44 24 18 11 00 00 	movl   $0x11,0x18(%esp)
 8057cc2:	00 
 8057cc3:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057cc7:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8057cce:	08 
 8057ccf:	c7 44 24 0c 04 29 06 	movl   $0x8062904,0xc(%esp)
 8057cd6:	08 
 8057cd7:	c7 44 24 08 c4 03 00 	movl   $0x3c4,0x8(%esp)
 8057cde:	00 
 8057cdf:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057ce6:	08 
 8057ce7:	89 04 24             	mov    %eax,(%esp)
 8057cea:	e8 a1 68 00 00       	call   805e590 <_test_assert>
 8057cef:	85 c0                	test   %eax,%eax
 8057cf1:	0f 84 81 00 00 00    	je     8057d78 <vfstest_s5fs_vm+0x795>
 8057cf7:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8057cfd:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8057d02:	89 04 24             	mov    %eax,(%esp)
 8057d05:	e8 1f 66 00 00       	call   805e329 <test_errstr>
 8057d0a:	89 c6                	mov    %eax,%esi
 8057d0c:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
 8057d13:	e8 11 66 00 00       	call   805e329 <test_errstr>
 8057d18:	89 c3                	mov    %eax,%ebx
 8057d1a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8057d21:	00 
 8057d22:	c7 04 24 1b 20 06 08 	movl   $0x806201b,(%esp)
 8057d29:	e8 60 1e 00 00       	call   8059b8e <mkdir>
 8057d2e:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8057d33:	83 f8 11             	cmp    $0x11,%eax
 8057d36:	0f 94 c0             	sete   %al
 8057d39:	0f b6 c0             	movzbl %al,%eax
 8057d3c:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8057d40:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8057d44:	c7 44 24 18 11 00 00 	movl   $0x11,0x18(%esp)
 8057d4b:	00 
 8057d4c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057d50:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8057d57:	08 
 8057d58:	c7 44 24 0c 30 29 06 	movl   $0x8062930,0xc(%esp)
 8057d5f:	08 
 8057d60:	c7 44 24 08 c4 03 00 	movl   $0x3c4,0x8(%esp)
 8057d67:	00 
 8057d68:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057d6f:	08 
 8057d70:	89 04 24             	mov    %eax,(%esp)
 8057d73:	e8 18 68 00 00       	call   805e590 <_test_assert>
        syscall_success(link("newchld", "oldchld"));
 8057d78:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8057d7e:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8057d83:	89 04 24             	mov    %eax,(%esp)
 8057d86:	e8 9e 65 00 00       	call   805e329 <test_errstr>
 8057d8b:	89 c3                	mov    %eax,%ebx
 8057d8d:	c7 44 24 04 c6 1f 06 	movl   $0x8061fc6,0x4(%esp)
 8057d94:	08 
 8057d95:	c7 04 24 1b 20 06 08 	movl   $0x806201b,(%esp)
 8057d9c:	e8 fb 1e 00 00       	call   8059c9c <link>
 8057da1:	f7 d0                	not    %eax
 8057da3:	c1 e8 1f             	shr    $0x1f,%eax
 8057da6:	0f b6 c0             	movzbl %al,%eax
 8057da9:	89 74 24 18          	mov    %esi,0x18(%esp)
 8057dad:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057db1:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8057db8:	08 
 8057db9:	c7 44 24 0c 54 29 06 	movl   $0x8062954,0xc(%esp)
 8057dc0:	08 
 8057dc1:	c7 44 24 08 c5 03 00 	movl   $0x3c5,0x8(%esp)
 8057dc8:	00 
 8057dc9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057dd0:	08 
 8057dd1:	89 04 24             	mov    %eax,(%esp)
 8057dd4:	e8 b7 67 00 00       	call   805e590 <_test_assert>

        /* Link/unlink error cases */
        syscall_fail(link("oldchld", "newchld"), EEXIST);
 8057dd9:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
 8057de0:	e8 44 65 00 00       	call   805e329 <test_errstr>
 8057de5:	89 c3                	mov    %eax,%ebx
 8057de7:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8057dee:	00 00 00 
 8057df1:	c7 44 24 04 1b 20 06 	movl   $0x806201b,0x4(%esp)
 8057df8:	08 
 8057df9:	c7 04 24 c6 1f 06 08 	movl   $0x8061fc6,(%esp)
 8057e00:	e8 97 1e 00 00       	call   8059c9c <link>
 8057e05:	83 f8 ff             	cmp    $0xffffffff,%eax
 8057e08:	0f 94 c0             	sete   %al
 8057e0b:	0f b6 c0             	movzbl %al,%eax
 8057e0e:	c7 44 24 18 11 00 00 	movl   $0x11,0x18(%esp)
 8057e15:	00 
 8057e16:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057e1a:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8057e21:	08 
 8057e22:	c7 44 24 0c 78 29 06 	movl   $0x8062978,0xc(%esp)
 8057e29:	08 
 8057e2a:	c7 44 24 08 c8 03 00 	movl   $0x3c8,0x8(%esp)
 8057e31:	00 
 8057e32:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057e39:	08 
 8057e3a:	89 04 24             	mov    %eax,(%esp)
 8057e3d:	e8 4e 67 00 00       	call   805e590 <_test_assert>
 8057e42:	85 c0                	test   %eax,%eax
 8057e44:	0f 84 81 00 00 00    	je     8057ecb <vfstest_s5fs_vm+0x8e8>
 8057e4a:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8057e50:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8057e55:	89 04 24             	mov    %eax,(%esp)
 8057e58:	e8 cc 64 00 00       	call   805e329 <test_errstr>
 8057e5d:	89 c6                	mov    %eax,%esi
 8057e5f:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
 8057e66:	e8 be 64 00 00       	call   805e329 <test_errstr>
 8057e6b:	89 c3                	mov    %eax,%ebx
 8057e6d:	c7 44 24 04 1b 20 06 	movl   $0x806201b,0x4(%esp)
 8057e74:	08 
 8057e75:	c7 04 24 c6 1f 06 08 	movl   $0x8061fc6,(%esp)
 8057e7c:	e8 1b 1e 00 00       	call   8059c9c <link>
 8057e81:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8057e86:	83 f8 11             	cmp    $0x11,%eax
 8057e89:	0f 94 c0             	sete   %al
 8057e8c:	0f b6 c0             	movzbl %al,%eax
 8057e8f:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8057e93:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8057e97:	c7 44 24 18 11 00 00 	movl   $0x11,0x18(%esp)
 8057e9e:	00 
 8057e9f:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057ea3:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8057eaa:	08 
 8057eab:	c7 44 24 0c a8 29 06 	movl   $0x80629a8,0xc(%esp)
 8057eb2:	08 
 8057eb3:	c7 44 24 08 c8 03 00 	movl   $0x3c8,0x8(%esp)
 8057eba:	00 
 8057ebb:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057ec2:	08 
 8057ec3:	89 04 24             	mov    %eax,(%esp)
 8057ec6:	e8 c5 66 00 00       	call   805e590 <_test_assert>
        syscall_fail(link("oldchld", LONGNAME), ENAMETOOLONG);
 8057ecb:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
 8057ed2:	e8 52 64 00 00       	call   805e329 <test_errstr>
 8057ed7:	89 c3                	mov    %eax,%ebx
 8057ed9:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8057ee0:	00 00 00 
 8057ee3:	c7 44 24 04 c0 ee 05 	movl   $0x805eec0,0x4(%esp)
 8057eea:	08 
 8057eeb:	c7 04 24 c6 1f 06 08 	movl   $0x8061fc6,(%esp)
 8057ef2:	e8 a5 1d 00 00       	call   8059c9c <link>
 8057ef7:	83 f8 ff             	cmp    $0xffffffff,%eax
 8057efa:	0f 94 c0             	sete   %al
 8057efd:	0f b6 c0             	movzbl %al,%eax
 8057f00:	c7 44 24 18 24 00 00 	movl   $0x24,0x18(%esp)
 8057f07:	00 
 8057f08:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057f0c:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8057f13:	08 
 8057f14:	c7 44 24 0c d4 29 06 	movl   $0x80629d4,0xc(%esp)
 8057f1b:	08 
 8057f1c:	c7 44 24 08 c9 03 00 	movl   $0x3c9,0x8(%esp)
 8057f23:	00 
 8057f24:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057f2b:	08 
 8057f2c:	89 04 24             	mov    %eax,(%esp)
 8057f2f:	e8 5c 66 00 00       	call   805e590 <_test_assert>
 8057f34:	85 c0                	test   %eax,%eax
 8057f36:	0f 84 81 00 00 00    	je     8057fbd <vfstest_s5fs_vm+0x9da>
 8057f3c:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8057f42:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8057f47:	89 04 24             	mov    %eax,(%esp)
 8057f4a:	e8 da 63 00 00       	call   805e329 <test_errstr>
 8057f4f:	89 c6                	mov    %eax,%esi
 8057f51:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
 8057f58:	e8 cc 63 00 00       	call   805e329 <test_errstr>
 8057f5d:	89 c3                	mov    %eax,%ebx
 8057f5f:	c7 44 24 04 c0 ee 05 	movl   $0x805eec0,0x4(%esp)
 8057f66:	08 
 8057f67:	c7 04 24 c6 1f 06 08 	movl   $0x8061fc6,(%esp)
 8057f6e:	e8 29 1d 00 00       	call   8059c9c <link>
 8057f73:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8057f78:	83 f8 24             	cmp    $0x24,%eax
 8057f7b:	0f 94 c0             	sete   %al
 8057f7e:	0f b6 c0             	movzbl %al,%eax
 8057f81:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8057f85:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8057f89:	c7 44 24 18 24 00 00 	movl   $0x24,0x18(%esp)
 8057f90:	00 
 8057f91:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057f95:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8057f9c:	08 
 8057f9d:	c7 44 24 0c 20 2a 06 	movl   $0x8062a20,0xc(%esp)
 8057fa4:	08 
 8057fa5:	c7 44 24 08 c9 03 00 	movl   $0x3c9,0x8(%esp)
 8057fac:	00 
 8057fad:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8057fb4:	08 
 8057fb5:	89 04 24             	mov    %eax,(%esp)
 8057fb8:	e8 d3 65 00 00       	call   805e590 <_test_assert>
        syscall_fail(link("parent", "newchld"), EPERM);
 8057fbd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 8057fc4:	e8 60 63 00 00       	call   805e329 <test_errstr>
 8057fc9:	89 c3                	mov    %eax,%ebx
 8057fcb:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8057fd2:	00 00 00 
 8057fd5:	c7 44 24 04 1b 20 06 	movl   $0x806201b,0x4(%esp)
 8057fdc:	08 
 8057fdd:	c7 04 24 fa 1f 06 08 	movl   $0x8061ffa,(%esp)
 8057fe4:	e8 b3 1c 00 00       	call   8059c9c <link>
 8057fe9:	83 f8 ff             	cmp    $0xffffffff,%eax
 8057fec:	0f 94 c0             	sete   %al
 8057fef:	0f b6 c0             	movzbl %al,%eax
 8057ff2:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 8057ff9:	00 
 8057ffa:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8057ffe:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8058005:	08 
 8058006:	c7 44 24 0c 68 2a 06 	movl   $0x8062a68,0xc(%esp)
 805800d:	08 
 805800e:	c7 44 24 08 ca 03 00 	movl   $0x3ca,0x8(%esp)
 8058015:	00 
 8058016:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805801d:	08 
 805801e:	89 04 24             	mov    %eax,(%esp)
 8058021:	e8 6a 65 00 00       	call   805e590 <_test_assert>
 8058026:	85 c0                	test   %eax,%eax
 8058028:	0f 84 81 00 00 00    	je     80580af <vfstest_s5fs_vm+0xacc>
 805802e:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8058034:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8058039:	89 04 24             	mov    %eax,(%esp)
 805803c:	e8 e8 62 00 00       	call   805e329 <test_errstr>
 8058041:	89 c6                	mov    %eax,%esi
 8058043:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 805804a:	e8 da 62 00 00       	call   805e329 <test_errstr>
 805804f:	89 c3                	mov    %eax,%ebx
 8058051:	c7 44 24 04 1b 20 06 	movl   $0x806201b,0x4(%esp)
 8058058:	08 
 8058059:	c7 04 24 fa 1f 06 08 	movl   $0x8061ffa,(%esp)
 8058060:	e8 37 1c 00 00       	call   8059c9c <link>
 8058065:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805806a:	83 f8 01             	cmp    $0x1,%eax
 805806d:	0f 94 c0             	sete   %al
 8058070:	0f b6 c0             	movzbl %al,%eax
 8058073:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8058077:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 805807b:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 8058082:	00 
 8058083:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8058087:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 805808e:	08 
 805808f:	c7 44 24 0c 98 2a 06 	movl   $0x8062a98,0xc(%esp)
 8058096:	08 
 8058097:	c7 44 24 08 ca 03 00 	movl   $0x3ca,0x8(%esp)
 805809e:	00 
 805809f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80580a6:	08 
 80580a7:	89 04 24             	mov    %eax,(%esp)
 80580aa:	e8 e1 64 00 00       	call   805e590 <_test_assert>

        /* only rename test */
        /*syscall_success(rename("oldchld", "newchld"));*/

        /* mmap/munmap tests */
        syscall_success(fd = open("newchld", O_RDWR, 0));
 80580af:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80580b5:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80580ba:	89 04 24             	mov    %eax,(%esp)
 80580bd:	e8 67 62 00 00       	call   805e329 <test_errstr>
 80580c2:	89 c3                	mov    %eax,%ebx
 80580c4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80580cb:	00 
 80580cc:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 80580d3:	00 
 80580d4:	c7 04 24 1b 20 06 08 	movl   $0x806201b,(%esp)
 80580db:	e8 8c 18 00 00       	call   805996c <open>
 80580e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 80580e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80580e6:	f7 d0                	not    %eax
 80580e8:	c1 e8 1f             	shr    $0x1f,%eax
 80580eb:	0f b6 c0             	movzbl %al,%eax
 80580ee:	89 74 24 18          	mov    %esi,0x18(%esp)
 80580f2:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80580f6:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80580fd:	08 
 80580fe:	c7 44 24 0c c0 2a 06 	movl   $0x8062ac0,0xc(%esp)
 8058105:	08 
 8058106:	c7 44 24 08 d0 03 00 	movl   $0x3d0,0x8(%esp)
 805810d:	00 
 805810e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058115:	08 
 8058116:	89 04 24             	mov    %eax,(%esp)
 8058119:	e8 72 64 00 00       	call   805e590 <_test_assert>
        test_assert(MAP_FAILED != (addr = mmap(0, strlen(TESTSTR), PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0)), NULL);
 805811e:	c7 04 24 f4 20 06 08 	movl   $0x80620f4,(%esp)
 8058125:	e8 40 23 00 00       	call   805a46a <strlen>
 805812a:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 8058131:	00 
 8058132:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 8058135:	89 54 24 10          	mov    %edx,0x10(%esp)
 8058139:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
 8058140:	00 
 8058141:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
 8058148:	00 
 8058149:	89 44 24 04          	mov    %eax,0x4(%esp)
 805814d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8058154:	e8 27 17 00 00       	call   8059880 <mmap>
 8058159:	89 85 70 f7 ff ff    	mov    %eax,-0x890(%ebp)
 805815f:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 8058165:	83 f8 ff             	cmp    $0xffffffff,%eax
 8058168:	0f 95 c0             	setne  %al
 805816b:	0f b6 c0             	movzbl %al,%eax
 805816e:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8058175:	00 
 8058176:	c7 44 24 0c e4 2a 06 	movl   $0x8062ae4,0xc(%esp)
 805817d:	08 
 805817e:	c7 44 24 08 d1 03 00 	movl   $0x3d1,0x8(%esp)
 8058185:	00 
 8058186:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805818d:	08 
 805818e:	89 04 24             	mov    %eax,(%esp)
 8058191:	e8 fa 63 00 00       	call   805e590 <_test_assert>
        /* Check contents of memory */
        test_assert(0 == memcmp(addr, TESTSTR, strlen(TESTSTR)), NULL);
 8058196:	c7 04 24 f4 20 06 08 	movl   $0x80620f4,(%esp)
 805819d:	e8 c8 22 00 00       	call   805a46a <strlen>
 80581a2:	89 c2                	mov    %eax,%edx
 80581a4:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 80581aa:	89 54 24 08          	mov    %edx,0x8(%esp)
 80581ae:	c7 44 24 04 f4 20 06 	movl   $0x80620f4,0x4(%esp)
 80581b5:	08 
 80581b6:	89 04 24             	mov    %eax,(%esp)
 80581b9:	e8 3f 20 00 00       	call   805a1fd <memcmp>
 80581be:	85 c0                	test   %eax,%eax
 80581c0:	0f 94 c0             	sete   %al
 80581c3:	0f b6 c0             	movzbl %al,%eax
 80581c6:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 80581cd:	00 
 80581ce:	c7 44 24 0c 40 2b 06 	movl   $0x8062b40,0xc(%esp)
 80581d5:	08 
 80581d6:	c7 44 24 08 d3 03 00 	movl   $0x3d3,0x8(%esp)
 80581dd:	00 
 80581de:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80581e5:	08 
 80581e6:	89 04 24             	mov    %eax,(%esp)
 80581e9:	e8 a2 63 00 00       	call   805e590 <_test_assert>

        /* Write to it -> we shouldn't pagefault */
        memcpy(addr, SHORTSTR, strlen(SHORTSTR));
 80581ee:	c7 04 24 6c 2b 06 08 	movl   $0x8062b6c,(%esp)
 80581f5:	e8 70 22 00 00       	call   805a46a <strlen>
 80581fa:	89 c2                	mov    %eax,%edx
 80581fc:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 8058202:	89 54 24 08          	mov    %edx,0x8(%esp)
 8058206:	c7 44 24 04 6c 2b 06 	movl   $0x8062b6c,0x4(%esp)
 805820d:	08 
 805820e:	89 04 24             	mov    %eax,(%esp)
 8058211:	e8 3a 20 00 00       	call   805a250 <memcpy>
        test_assert(0 == memcmp(addr, SHORTSTR, strlen(SHORTSTR)), NULL);
 8058216:	c7 04 24 6c 2b 06 08 	movl   $0x8062b6c,(%esp)
 805821d:	e8 48 22 00 00       	call   805a46a <strlen>
 8058222:	89 c2                	mov    %eax,%edx
 8058224:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 805822a:	89 54 24 08          	mov    %edx,0x8(%esp)
 805822e:	c7 44 24 04 6c 2b 06 	movl   $0x8062b6c,0x4(%esp)
 8058235:	08 
 8058236:	89 04 24             	mov    %eax,(%esp)
 8058239:	e8 bf 1f 00 00       	call   805a1fd <memcmp>
 805823e:	85 c0                	test   %eax,%eax
 8058240:	0f 94 c0             	sete   %al
 8058243:	0f b6 c0             	movzbl %al,%eax
 8058246:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 805824d:	00 
 805824e:	c7 44 24 0c 94 2b 06 	movl   $0x8062b94,0xc(%esp)
 8058255:	08 
 8058256:	c7 44 24 08 d7 03 00 	movl   $0x3d7,0x8(%esp)
 805825d:	00 
 805825e:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058265:	08 
 8058266:	89 04 24             	mov    %eax,(%esp)
 8058269:	e8 22 63 00 00       	call   805e590 <_test_assert>

        /* mmap the same thing on top of it, but shared */
        test_assert(MAP_FAILED != mmap(addr, strlen(TESTSTR), PROT_READ | PROT_WRITE, MAP_SHARED | MAP_FIXED, fd, 0), NULL);
 805826e:	c7 04 24 f4 20 06 08 	movl   $0x80620f4,(%esp)
 8058275:	e8 f0 21 00 00       	call   805a46a <strlen>
 805827a:	89 c2                	mov    %eax,%edx
 805827c:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 8058282:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 8058289:	00 
 805828a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
 805828d:	89 4c 24 10          	mov    %ecx,0x10(%esp)
 8058291:	c7 44 24 0c 05 00 00 	movl   $0x5,0xc(%esp)
 8058298:	00 
 8058299:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
 80582a0:	00 
 80582a1:	89 54 24 04          	mov    %edx,0x4(%esp)
 80582a5:	89 04 24             	mov    %eax,(%esp)
 80582a8:	e8 d3 15 00 00       	call   8059880 <mmap>
 80582ad:	83 f8 ff             	cmp    $0xffffffff,%eax
 80582b0:	0f 95 c0             	setne  %al
 80582b3:	0f b6 c0             	movzbl %al,%eax
 80582b6:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 80582bd:	00 
 80582be:	c7 44 24 0c c4 2b 06 	movl   $0x8062bc4,0xc(%esp)
 80582c5:	08 
 80582c6:	c7 44 24 08 da 03 00 	movl   $0x3da,0x8(%esp)
 80582cd:	00 
 80582ce:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80582d5:	08 
 80582d6:	89 04 24             	mov    %eax,(%esp)
 80582d9:	e8 b2 62 00 00       	call   805e590 <_test_assert>
        /* Make sure the old contents were restored (the mapping was private) */
        test_assert(0 == memcmp(addr, TESTSTR, strlen(TESTSTR)), NULL);
 80582de:	c7 04 24 f4 20 06 08 	movl   $0x80620f4,(%esp)
 80582e5:	e8 80 21 00 00       	call   805a46a <strlen>
 80582ea:	89 c2                	mov    %eax,%edx
 80582ec:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 80582f2:	89 54 24 08          	mov    %edx,0x8(%esp)
 80582f6:	c7 44 24 04 f4 20 06 	movl   $0x80620f4,0x4(%esp)
 80582fd:	08 
 80582fe:	89 04 24             	mov    %eax,(%esp)
 8058301:	e8 f7 1e 00 00       	call   805a1fd <memcmp>
 8058306:	85 c0                	test   %eax,%eax
 8058308:	0f 94 c0             	sete   %al
 805830b:	0f b6 c0             	movzbl %al,%eax
 805830e:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8058315:	00 
 8058316:	c7 44 24 0c 40 2b 06 	movl   $0x8062b40,0xc(%esp)
 805831d:	08 
 805831e:	c7 44 24 08 dc 03 00 	movl   $0x3dc,0x8(%esp)
 8058325:	00 
 8058326:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805832d:	08 
 805832e:	89 04 24             	mov    %eax,(%esp)
 8058331:	e8 5a 62 00 00       	call   805e590 <_test_assert>

        /* Now change the contents */
        memcpy(addr, SHORTSTR, strlen(SHORTSTR));
 8058336:	c7 04 24 6c 2b 06 08 	movl   $0x8062b6c,(%esp)
 805833d:	e8 28 21 00 00       	call   805a46a <strlen>
 8058342:	89 c2                	mov    %eax,%edx
 8058344:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 805834a:	89 54 24 08          	mov    %edx,0x8(%esp)
 805834e:	c7 44 24 04 6c 2b 06 	movl   $0x8062b6c,0x4(%esp)
 8058355:	08 
 8058356:	89 04 24             	mov    %eax,(%esp)
 8058359:	e8 f2 1e 00 00       	call   805a250 <memcpy>
        /* mmap it on, private, on top again */
        test_assert(MAP_FAILED != mmap(addr, strlen(TESTSTR), PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_FIXED, fd, 0), NULL);
 805835e:	c7 04 24 f4 20 06 08 	movl   $0x80620f4,(%esp)
 8058365:	e8 00 21 00 00       	call   805a46a <strlen>
 805836a:	89 c2                	mov    %eax,%edx
 805836c:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 8058372:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 8058379:	00 
 805837a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
 805837d:	89 4c 24 10          	mov    %ecx,0x10(%esp)
 8058381:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
 8058388:	00 
 8058389:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
 8058390:	00 
 8058391:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058395:	89 04 24             	mov    %eax,(%esp)
 8058398:	e8 e3 14 00 00       	call   8059880 <mmap>
 805839d:	83 f8 ff             	cmp    $0xffffffff,%eax
 80583a0:	0f 95 c0             	setne  %al
 80583a3:	0f b6 c0             	movzbl %al,%eax
 80583a6:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 80583ad:	00 
 80583ae:	c7 44 24 0c 28 2c 06 	movl   $0x8062c28,0xc(%esp)
 80583b5:	08 
 80583b6:	c7 44 24 08 e1 03 00 	movl   $0x3e1,0x8(%esp)
 80583bd:	00 
 80583be:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80583c5:	08 
 80583c6:	89 04 24             	mov    %eax,(%esp)
 80583c9:	e8 c2 61 00 00       	call   805e590 <_test_assert>
        /* Make sure it changed */
        test_assert(0 == memcmp(addr, SHORTSTR, strlen(SHORTSTR)), NULL);
 80583ce:	c7 04 24 6c 2b 06 08 	movl   $0x8062b6c,(%esp)
 80583d5:	e8 90 20 00 00       	call   805a46a <strlen>
 80583da:	89 c2                	mov    %eax,%edx
 80583dc:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 80583e2:	89 54 24 08          	mov    %edx,0x8(%esp)
 80583e6:	c7 44 24 04 6c 2b 06 	movl   $0x8062b6c,0x4(%esp)
 80583ed:	08 
 80583ee:	89 04 24             	mov    %eax,(%esp)
 80583f1:	e8 07 1e 00 00       	call   805a1fd <memcmp>
 80583f6:	85 c0                	test   %eax,%eax
 80583f8:	0f 94 c0             	sete   %al
 80583fb:	0f b6 c0             	movzbl %al,%eax
 80583fe:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8058405:	00 
 8058406:	c7 44 24 0c 94 2b 06 	movl   $0x8062b94,0xc(%esp)
 805840d:	08 
 805840e:	c7 44 24 08 e3 03 00 	movl   $0x3e3,0x8(%esp)
 8058415:	00 
 8058416:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805841d:	08 
 805841e:	89 04 24             	mov    %eax,(%esp)
 8058421:	e8 6a 61 00 00       	call   805e590 <_test_assert>

        /* Fork and try changing things */
        if (!fork()) {
 8058426:	e8 a7 11 00 00       	call   80595d2 <fork>
 805842b:	85 c0                	test   %eax,%eax
 805842d:	75 34                	jne    8058463 <vfstest_s5fs_vm+0xe80>
                /* Child changes private mapping */
                memcpy(addr, TESTSTR, strlen(TESTSTR));
 805842f:	c7 04 24 f4 20 06 08 	movl   $0x80620f4,(%esp)
 8058436:	e8 2f 20 00 00       	call   805a46a <strlen>
 805843b:	89 c2                	mov    %eax,%edx
 805843d:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 8058443:	89 54 24 08          	mov    %edx,0x8(%esp)
 8058447:	c7 44 24 04 f4 20 06 	movl   $0x80620f4,0x4(%esp)
 805844e:	08 
 805844f:	89 04 24             	mov    %eax,(%esp)
 8058452:	e8 f9 1d 00 00       	call   805a250 <memcpy>
                exit(0);
 8058457:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 805845e:	e8 2b 12 00 00       	call   805968e <exit>
        }

        /* Wait until child is done */
        syscall_success(wait(0));
 8058463:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8058469:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805846e:	89 04 24             	mov    %eax,(%esp)
 8058471:	e8 b3 5e 00 00       	call   805e329 <test_errstr>
 8058476:	89 c3                	mov    %eax,%ebx
 8058478:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 805847f:	e8 99 12 00 00       	call   805971d <wait>
 8058484:	f7 d0                	not    %eax
 8058486:	c1 e8 1f             	shr    $0x1f,%eax
 8058489:	0f b6 c0             	movzbl %al,%eax
 805848c:	89 74 24 18          	mov    %esi,0x18(%esp)
 8058490:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8058494:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805849b:	08 
 805849c:	c7 44 24 0c 8a 2c 06 	movl   $0x8062c8a,0xc(%esp)
 80584a3:	08 
 80584a4:	c7 44 24 08 ed 03 00 	movl   $0x3ed,0x8(%esp)
 80584ab:	00 
 80584ac:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80584b3:	08 
 80584b4:	89 04 24             	mov    %eax,(%esp)
 80584b7:	e8 d4 60 00 00       	call   805e590 <_test_assert>

        /* Make sure it's actually private */
        test_assert(0 == memcmp(addr, SHORTSTR, strlen(SHORTSTR)), NULL);
 80584bc:	c7 04 24 6c 2b 06 08 	movl   $0x8062b6c,(%esp)
 80584c3:	e8 a2 1f 00 00       	call   805a46a <strlen>
 80584c8:	89 c2                	mov    %eax,%edx
 80584ca:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 80584d0:	89 54 24 08          	mov    %edx,0x8(%esp)
 80584d4:	c7 44 24 04 6c 2b 06 	movl   $0x8062b6c,0x4(%esp)
 80584db:	08 
 80584dc:	89 04 24             	mov    %eax,(%esp)
 80584df:	e8 19 1d 00 00       	call   805a1fd <memcmp>
 80584e4:	85 c0                	test   %eax,%eax
 80584e6:	0f 94 c0             	sete   %al
 80584e9:	0f b6 c0             	movzbl %al,%eax
 80584ec:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 80584f3:	00 
 80584f4:	c7 44 24 0c 94 2b 06 	movl   $0x8062b94,0xc(%esp)
 80584fb:	08 
 80584fc:	c7 44 24 08 f0 03 00 	movl   $0x3f0,0x8(%esp)
 8058503:	00 
 8058504:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805850b:	08 
 805850c:	89 04 24             	mov    %eax,(%esp)
 805850f:	e8 7c 60 00 00       	call   805e590 <_test_assert>

        /* Unmap it */
        syscall_success(munmap(addr, 2048));
 8058514:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805851a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805851f:	89 04 24             	mov    %eax,(%esp)
 8058522:	e8 02 5e 00 00       	call   805e329 <test_errstr>
 8058527:	89 c3                	mov    %eax,%ebx
 8058529:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 805852f:	c7 44 24 04 00 08 00 	movl   $0x800,0x4(%esp)
 8058536:	00 
 8058537:	89 04 24             	mov    %eax,(%esp)
 805853a:	e8 a4 13 00 00       	call   80598e3 <munmap>
 805853f:	f7 d0                	not    %eax
 8058541:	c1 e8 1f             	shr    $0x1f,%eax
 8058544:	0f b6 c0             	movzbl %al,%eax
 8058547:	89 74 24 18          	mov    %esi,0x18(%esp)
 805854b:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805854f:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8058556:	08 
 8058557:	c7 44 24 0c 99 2c 06 	movl   $0x8062c99,0xc(%esp)
 805855e:	08 
 805855f:	c7 44 24 08 f3 03 00 	movl   $0x3f3,0x8(%esp)
 8058566:	00 
 8058567:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805856e:	08 
 805856f:	89 04 24             	mov    %eax,(%esp)
 8058572:	e8 19 60 00 00       	call   805e590 <_test_assert>

        /* mmap errors */
        test_assert(MAP_FAILED == mmap(0, 1024, PROT_READ, MAP_PRIVATE, 12, 0), NULL);
 8058577:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 805857e:	00 
 805857f:	c7 44 24 10 0c 00 00 	movl   $0xc,0x10(%esp)
 8058586:	00 
 8058587:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
 805858e:	00 
 805858f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8058596:	00 
 8058597:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
 805859e:	00 
 805859f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 80585a6:	e8 d5 12 00 00       	call   8059880 <mmap>
 80585ab:	83 f8 ff             	cmp    $0xffffffff,%eax
 80585ae:	0f 94 c0             	sete   %al
 80585b1:	0f b6 c0             	movzbl %al,%eax
 80585b4:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 80585bb:	00 
 80585bc:	c7 44 24 0c b4 2c 06 	movl   $0x8062cb4,0xc(%esp)
 80585c3:	08 
 80585c4:	c7 44 24 08 f6 03 00 	movl   $0x3f6,0x8(%esp)
 80585cb:	00 
 80585cc:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80585d3:	08 
 80585d4:	89 04 24             	mov    %eax,(%esp)
 80585d7:	e8 b4 5f 00 00       	call   805e590 <_test_assert>
        test_assert(MAP_FAILED == mmap(0, 1024, PROT_READ, MAP_PRIVATE, -1, 0), NULL);
 80585dc:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 80585e3:	00 
 80585e4:	c7 44 24 10 ff ff ff 	movl   $0xffffffff,0x10(%esp)
 80585eb:	ff 
 80585ec:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
 80585f3:	00 
 80585f4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 80585fb:	00 
 80585fc:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
 8058603:	00 
 8058604:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 805860b:	e8 70 12 00 00       	call   8059880 <mmap>
 8058610:	83 f8 ff             	cmp    $0xffffffff,%eax
 8058613:	0f 94 c0             	sete   %al
 8058616:	0f b6 c0             	movzbl %al,%eax
 8058619:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8058620:	00 
 8058621:	c7 44 24 0c f0 2c 06 	movl   $0x8062cf0,0xc(%esp)
 8058628:	08 
 8058629:	c7 44 24 08 f7 03 00 	movl   $0x3f7,0x8(%esp)
 8058630:	00 
 8058631:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058638:	08 
 8058639:	89 04 24             	mov    %eax,(%esp)
 805863c:	e8 4f 5f 00 00       	call   805e590 <_test_assert>
        test_assert(MAP_FAILED == mmap(0, 1024, PROT_READ, 0, fd, 0), NULL);
 8058641:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 8058648:	00 
 8058649:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805864c:	89 44 24 10          	mov    %eax,0x10(%esp)
 8058650:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 8058657:	00 
 8058658:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 805865f:	00 
 8058660:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
 8058667:	00 
 8058668:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 805866f:	e8 0c 12 00 00       	call   8059880 <mmap>
 8058674:	83 f8 ff             	cmp    $0xffffffff,%eax
 8058677:	0f 94 c0             	sete   %al
 805867a:	0f b6 c0             	movzbl %al,%eax
 805867d:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8058684:	00 
 8058685:	c7 44 24 0c 2c 2d 06 	movl   $0x8062d2c,0xc(%esp)
 805868c:	08 
 805868d:	c7 44 24 08 f8 03 00 	movl   $0x3f8,0x8(%esp)
 8058694:	00 
 8058695:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805869c:	08 
 805869d:	89 04 24             	mov    %eax,(%esp)
 80586a0:	e8 eb 5e 00 00       	call   805e590 <_test_assert>
        test_assert(MAP_FAILED == mmap(0, 1024, PROT_READ, MAP_FIXED, fd, 0), NULL);
 80586a5:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 80586ac:	00 
 80586ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80586b0:	89 44 24 10          	mov    %eax,0x10(%esp)
 80586b4:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
 80586bb:	00 
 80586bc:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 80586c3:	00 
 80586c4:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
 80586cb:	00 
 80586cc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 80586d3:	e8 a8 11 00 00       	call   8059880 <mmap>
 80586d8:	83 f8 ff             	cmp    $0xffffffff,%eax
 80586db:	0f 94 c0             	sete   %al
 80586de:	0f b6 c0             	movzbl %al,%eax
 80586e1:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 80586e8:	00 
 80586e9:	c7 44 24 0c 60 2d 06 	movl   $0x8062d60,0xc(%esp)
 80586f0:	08 
 80586f1:	c7 44 24 08 f9 03 00 	movl   $0x3f9,0x8(%esp)
 80586f8:	00 
 80586f9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058700:	08 
 8058701:	89 04 24             	mov    %eax,(%esp)
 8058704:	e8 87 5e 00 00       	call   805e590 <_test_assert>
        test_assert(MAP_FAILED == mmap(0, 1024, PROT_READ, MAP_FIXED | MAP_PRIVATE, fd, 0), NULL);
 8058709:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 8058710:	00 
 8058711:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8058714:	89 44 24 10          	mov    %eax,0x10(%esp)
 8058718:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
 805871f:	00 
 8058720:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8058727:	00 
 8058728:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
 805872f:	00 
 8058730:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8058737:	e8 44 11 00 00       	call   8059880 <mmap>
 805873c:	83 f8 ff             	cmp    $0xffffffff,%eax
 805873f:	0f 94 c0             	sete   %al
 8058742:	0f b6 c0             	movzbl %al,%eax
 8058745:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 805874c:	00 
 805874d:	c7 44 24 0c 9c 2d 06 	movl   $0x8062d9c,0xc(%esp)
 8058754:	08 
 8058755:	c7 44 24 08 fa 03 00 	movl   $0x3fa,0x8(%esp)
 805875c:	00 
 805875d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058764:	08 
 8058765:	89 04 24             	mov    %eax,(%esp)
 8058768:	e8 23 5e 00 00       	call   805e590 <_test_assert>
        test_assert(MAP_FAILED == mmap(0, 1024, PROT_READ, MAP_PRIVATE, fd, 0x12345), NULL);
 805876d:	c7 44 24 14 45 23 01 	movl   $0x12345,0x14(%esp)
 8058774:	00 
 8058775:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8058778:	89 44 24 10          	mov    %eax,0x10(%esp)
 805877c:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
 8058783:	00 
 8058784:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 805878b:	00 
 805878c:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
 8058793:	00 
 8058794:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 805879b:	e8 e0 10 00 00       	call   8059880 <mmap>
 80587a0:	83 f8 ff             	cmp    $0xffffffff,%eax
 80587a3:	0f 94 c0             	sete   %al
 80587a6:	0f b6 c0             	movzbl %al,%eax
 80587a9:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 80587b0:	00 
 80587b1:	c7 44 24 0c e4 2d 06 	movl   $0x8062de4,0xc(%esp)
 80587b8:	08 
 80587b9:	c7 44 24 08 fb 03 00 	movl   $0x3fb,0x8(%esp)
 80587c0:	00 
 80587c1:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80587c8:	08 
 80587c9:	89 04 24             	mov    %eax,(%esp)
 80587cc:	e8 bf 5d 00 00       	call   805e590 <_test_assert>
        test_assert(MAP_FAILED == mmap((void *) 0x12345, 1024, PROT_READ, MAP_PRIVATE | MAP_FIXED, fd, 0), NULL);
 80587d1:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 80587d8:	00 
 80587d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80587dc:	89 44 24 10          	mov    %eax,0x10(%esp)
 80587e0:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
 80587e7:	00 
 80587e8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 80587ef:	00 
 80587f0:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
 80587f7:	00 
 80587f8:	c7 04 24 45 23 01 00 	movl   $0x12345,(%esp)
 80587ff:	e8 7c 10 00 00       	call   8059880 <mmap>
 8058804:	83 f8 ff             	cmp    $0xffffffff,%eax
 8058807:	0f 94 c0             	sete   %al
 805880a:	0f b6 c0             	movzbl %al,%eax
 805880d:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8058814:	00 
 8058815:	c7 44 24 0c 28 2e 06 	movl   $0x8062e28,0xc(%esp)
 805881c:	08 
 805881d:	c7 44 24 08 fc 03 00 	movl   $0x3fc,0x8(%esp)
 8058824:	00 
 8058825:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 805882c:	08 
 805882d:	89 04 24             	mov    %eax,(%esp)
 8058830:	e8 5b 5d 00 00       	call   805e590 <_test_assert>
        test_assert(MAP_FAILED == mmap(0, 0, PROT_READ, MAP_PRIVATE, fd, 0), NULL);
 8058835:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 805883c:	00 
 805883d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8058840:	89 44 24 10          	mov    %eax,0x10(%esp)
 8058844:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
 805884b:	00 
 805884c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 8058853:	00 
 8058854:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 805885b:	00 
 805885c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8058863:	e8 18 10 00 00       	call   8059880 <mmap>
 8058868:	83 f8 ff             	cmp    $0xffffffff,%eax
 805886b:	0f 94 c0             	sete   %al
 805886e:	0f b6 c0             	movzbl %al,%eax
 8058871:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8058878:	00 
 8058879:	c7 44 24 0c 80 2e 06 	movl   $0x8062e80,0xc(%esp)
 8058880:	08 
 8058881:	c7 44 24 08 fd 03 00 	movl   $0x3fd,0x8(%esp)
 8058888:	00 
 8058889:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058890:	08 
 8058891:	89 04 24             	mov    %eax,(%esp)
 8058894:	e8 f7 5c 00 00       	call   805e590 <_test_assert>
        test_assert(MAP_FAILED == mmap(0, -1, PROT_READ, MAP_PRIVATE, fd, 0), NULL);
 8058899:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 80588a0:	00 
 80588a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80588a4:	89 44 24 10          	mov    %eax,0x10(%esp)
 80588a8:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
 80588af:	00 
 80588b0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 80588b7:	00 
 80588b8:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 80588bf:	ff 
 80588c0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 80588c7:	e8 b4 0f 00 00       	call   8059880 <mmap>
 80588cc:	83 f8 ff             	cmp    $0xffffffff,%eax
 80588cf:	0f 94 c0             	sete   %al
 80588d2:	0f b6 c0             	movzbl %al,%eax
 80588d5:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 80588dc:	00 
 80588dd:	c7 44 24 0c b8 2e 06 	movl   $0x8062eb8,0xc(%esp)
 80588e4:	08 
 80588e5:	c7 44 24 08 fe 03 00 	movl   $0x3fe,0x8(%esp)
 80588ec:	00 
 80588ed:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80588f4:	08 
 80588f5:	89 04 24             	mov    %eax,(%esp)
 80588f8:	e8 93 5c 00 00       	call   805e590 <_test_assert>
        test_assert(MAP_FAILED == mmap(0, 1024, PROT_READ, MAP_PRIVATE | MAP_FIXED, fd, 0), NULL);
 80588fd:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 8058904:	00 
 8058905:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8058908:	89 44 24 10          	mov    %eax,0x10(%esp)
 805890c:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
 8058913:	00 
 8058914:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 805891b:	00 
 805891c:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
 8058923:	00 
 8058924:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 805892b:	e8 50 0f 00 00       	call   8059880 <mmap>
 8058930:	83 f8 ff             	cmp    $0xffffffff,%eax
 8058933:	0f 94 c0             	sete   %al
 8058936:	0f b6 c0             	movzbl %al,%eax
 8058939:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8058940:	00 
 8058941:	c7 44 24 0c f4 2e 06 	movl   $0x8062ef4,0xc(%esp)
 8058948:	08 
 8058949:	c7 44 24 08 ff 03 00 	movl   $0x3ff,0x8(%esp)
 8058950:	00 
 8058951:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058958:	08 
 8058959:	89 04 24             	mov    %eax,(%esp)
 805895c:	e8 2f 5c 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 8058961:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8058967:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805896c:	89 04 24             	mov    %eax,(%esp)
 805896f:	e8 b5 59 00 00       	call   805e329 <test_errstr>
 8058974:	89 c3                	mov    %eax,%ebx
 8058976:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8058979:	89 04 24             	mov    %eax,(%esp)
 805897c:	e8 42 11 00 00       	call   8059ac3 <close>
 8058981:	f7 d0                	not    %eax
 8058983:	c1 e8 1f             	shr    $0x1f,%eax
 8058986:	0f b6 c0             	movzbl %al,%eax
 8058989:	89 74 24 18          	mov    %esi,0x18(%esp)
 805898d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8058991:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8058998:	08 
 8058999:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 80589a0:	08 
 80589a1:	c7 44 24 08 00 04 00 	movl   $0x400,0x8(%esp)
 80589a8:	00 
 80589a9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80589b0:	08 
 80589b1:	89 04 24             	mov    %eax,(%esp)
 80589b4:	e8 d7 5b 00 00       	call   805e590 <_test_assert>

        syscall_success(fd = open("newchld", O_RDONLY, 0));
 80589b9:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80589bf:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80589c4:	89 04 24             	mov    %eax,(%esp)
 80589c7:	e8 5d 59 00 00       	call   805e329 <test_errstr>
 80589cc:	89 c3                	mov    %eax,%ebx
 80589ce:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 80589d5:	00 
 80589d6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80589dd:	00 
 80589de:	c7 04 24 1b 20 06 08 	movl   $0x806201b,(%esp)
 80589e5:	e8 82 0f 00 00       	call   805996c <open>
 80589ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 80589ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80589f0:	f7 d0                	not    %eax
 80589f2:	c1 e8 1f             	shr    $0x1f,%eax
 80589f5:	0f b6 c0             	movzbl %al,%eax
 80589f8:	89 74 24 18          	mov    %esi,0x18(%esp)
 80589fc:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8058a00:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8058a07:	08 
 8058a08:	c7 44 24 0c 3c 2f 06 	movl   $0x8062f3c,0xc(%esp)
 8058a0f:	08 
 8058a10:	c7 44 24 08 02 04 00 	movl   $0x402,0x8(%esp)
 8058a17:	00 
 8058a18:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058a1f:	08 
 8058a20:	89 04 24             	mov    %eax,(%esp)
 8058a23:	e8 68 5b 00 00       	call   805e590 <_test_assert>
        test_assert(MAP_FAILED == mmap(0, 1024, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0), NULL);
 8058a28:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 8058a2f:	00 
 8058a30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8058a33:	89 44 24 10          	mov    %eax,0x10(%esp)
 8058a37:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
 8058a3e:	00 
 8058a3f:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
 8058a46:	00 
 8058a47:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
 8058a4e:	00 
 8058a4f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8058a56:	e8 25 0e 00 00       	call   8059880 <mmap>
 8058a5b:	83 f8 ff             	cmp    $0xffffffff,%eax
 8058a5e:	0f 94 c0             	sete   %al
 8058a61:	0f b6 c0             	movzbl %al,%eax
 8058a64:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8058a6b:	00 
 8058a6c:	c7 44 24 0c 60 2f 06 	movl   $0x8062f60,0xc(%esp)
 8058a73:	08 
 8058a74:	c7 44 24 08 03 04 00 	movl   $0x403,0x8(%esp)
 8058a7b:	00 
 8058a7c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058a83:	08 
 8058a84:	89 04 24             	mov    %eax,(%esp)
 8058a87:	e8 04 5b 00 00       	call   805e590 <_test_assert>
        syscall_success(close(fd));
 8058a8c:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8058a92:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8058a97:	89 04 24             	mov    %eax,(%esp)
 8058a9a:	e8 8a 58 00 00       	call   805e329 <test_errstr>
 8058a9f:	89 c3                	mov    %eax,%ebx
 8058aa1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8058aa4:	89 04 24             	mov    %eax,(%esp)
 8058aa7:	e8 17 10 00 00       	call   8059ac3 <close>
 8058aac:	f7 d0                	not    %eax
 8058aae:	c1 e8 1f             	shr    $0x1f,%eax
 8058ab1:	0f b6 c0             	movzbl %al,%eax
 8058ab4:	89 74 24 18          	mov    %esi,0x18(%esp)
 8058ab8:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8058abc:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8058ac3:	08 
 8058ac4:	c7 44 24 0c 3f e7 05 	movl   $0x805e73f,0xc(%esp)
 8058acb:	08 
 8058acc:	c7 44 24 08 04 04 00 	movl   $0x404,0x8(%esp)
 8058ad3:	00 
 8058ad4:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058adb:	08 
 8058adc:	89 04 24             	mov    %eax,(%esp)
 8058adf:	e8 ac 5a 00 00       	call   805e590 <_test_assert>
           EOVERFLOW (mmap SO MUCH of /dev/zero that fpointer would overflow) */

        /* Also should test opening too many file descriptors somewhere */

        /* munmap errors */
        syscall_fail(munmap((void *) 0x12345, 15), EINVAL);
 8058ae4:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 8058aeb:	e8 39 58 00 00       	call   805e329 <test_errstr>
 8058af0:	89 c3                	mov    %eax,%ebx
 8058af2:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8058af9:	00 00 00 
 8058afc:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
 8058b03:	00 
 8058b04:	c7 04 24 45 23 01 00 	movl   $0x12345,(%esp)
 8058b0b:	e8 d3 0d 00 00       	call   80598e3 <munmap>
 8058b10:	83 f8 ff             	cmp    $0xffffffff,%eax
 8058b13:	0f 94 c0             	sete   %al
 8058b16:	0f b6 c0             	movzbl %al,%eax
 8058b19:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 8058b20:	00 
 8058b21:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8058b25:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8058b2c:	08 
 8058b2d:	c7 44 24 0c a8 2f 06 	movl   $0x8062fa8,0xc(%esp)
 8058b34:	08 
 8058b35:	c7 44 24 08 0c 04 00 	movl   $0x40c,0x8(%esp)
 8058b3c:	00 
 8058b3d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058b44:	08 
 8058b45:	89 04 24             	mov    %eax,(%esp)
 8058b48:	e8 43 5a 00 00       	call   805e590 <_test_assert>
 8058b4d:	85 c0                	test   %eax,%eax
 8058b4f:	0f 84 81 00 00 00    	je     8058bd6 <vfstest_s5fs_vm+0x15f3>
 8058b55:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8058b5b:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8058b60:	89 04 24             	mov    %eax,(%esp)
 8058b63:	e8 c1 57 00 00       	call   805e329 <test_errstr>
 8058b68:	89 c6                	mov    %eax,%esi
 8058b6a:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 8058b71:	e8 b3 57 00 00       	call   805e329 <test_errstr>
 8058b76:	89 c3                	mov    %eax,%ebx
 8058b78:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
 8058b7f:	00 
 8058b80:	c7 04 24 45 23 01 00 	movl   $0x12345,(%esp)
 8058b87:	e8 57 0d 00 00       	call   80598e3 <munmap>
 8058b8c:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8058b91:	83 f8 16             	cmp    $0x16,%eax
 8058b94:	0f 94 c0             	sete   %al
 8058b97:	0f b6 c0             	movzbl %al,%eax
 8058b9a:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8058b9e:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8058ba2:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 8058ba9:	00 
 8058baa:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8058bae:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8058bb5:	08 
 8058bb6:	c7 44 24 0c dc 2f 06 	movl   $0x8062fdc,0xc(%esp)
 8058bbd:	08 
 8058bbe:	c7 44 24 08 0c 04 00 	movl   $0x40c,0x8(%esp)
 8058bc5:	00 
 8058bc6:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058bcd:	08 
 8058bce:	89 04 24             	mov    %eax,(%esp)
 8058bd1:	e8 ba 59 00 00       	call   805e590 <_test_assert>
        syscall_fail(munmap(0x0, 15), EINVAL);
 8058bd6:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 8058bdd:	e8 47 57 00 00       	call   805e329 <test_errstr>
 8058be2:	89 c3                	mov    %eax,%ebx
 8058be4:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8058beb:	00 00 00 
 8058bee:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
 8058bf5:	00 
 8058bf6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8058bfd:	e8 e1 0c 00 00       	call   80598e3 <munmap>
 8058c02:	83 f8 ff             	cmp    $0xffffffff,%eax
 8058c05:	0f 94 c0             	sete   %al
 8058c08:	0f b6 c0             	movzbl %al,%eax
 8058c0b:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 8058c12:	00 
 8058c13:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8058c17:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8058c1e:	08 
 8058c1f:	c7 44 24 0c 08 30 06 	movl   $0x8063008,0xc(%esp)
 8058c26:	08 
 8058c27:	c7 44 24 08 0d 04 00 	movl   $0x40d,0x8(%esp)
 8058c2e:	00 
 8058c2f:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058c36:	08 
 8058c37:	89 04 24             	mov    %eax,(%esp)
 8058c3a:	e8 51 59 00 00       	call   805e590 <_test_assert>
 8058c3f:	85 c0                	test   %eax,%eax
 8058c41:	0f 84 81 00 00 00    	je     8058cc8 <vfstest_s5fs_vm+0x16e5>
 8058c47:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8058c4d:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8058c52:	89 04 24             	mov    %eax,(%esp)
 8058c55:	e8 cf 56 00 00       	call   805e329 <test_errstr>
 8058c5a:	89 c6                	mov    %eax,%esi
 8058c5c:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 8058c63:	e8 c1 56 00 00       	call   805e329 <test_errstr>
 8058c68:	89 c3                	mov    %eax,%ebx
 8058c6a:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
 8058c71:	00 
 8058c72:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8058c79:	e8 65 0c 00 00       	call   80598e3 <munmap>
 8058c7e:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8058c83:	83 f8 16             	cmp    $0x16,%eax
 8058c86:	0f 94 c0             	sete   %al
 8058c89:	0f b6 c0             	movzbl %al,%eax
 8058c8c:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8058c90:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8058c94:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 8058c9b:	00 
 8058c9c:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8058ca0:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8058ca7:	08 
 8058ca8:	c7 44 24 0c 30 30 06 	movl   $0x8063030,0xc(%esp)
 8058caf:	08 
 8058cb0:	c7 44 24 08 0d 04 00 	movl   $0x40d,0x8(%esp)
 8058cb7:	00 
 8058cb8:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058cbf:	08 
 8058cc0:	89 04 24             	mov    %eax,(%esp)
 8058cc3:	e8 c8 58 00 00       	call   805e590 <_test_assert>
        syscall_fail(munmap(addr, 0), EINVAL);
 8058cc8:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 8058ccf:	e8 55 56 00 00       	call   805e329 <test_errstr>
 8058cd4:	89 c3                	mov    %eax,%ebx
 8058cd6:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8058cdd:	00 00 00 
 8058ce0:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 8058ce6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8058ced:	00 
 8058cee:	89 04 24             	mov    %eax,(%esp)
 8058cf1:	e8 ed 0b 00 00       	call   80598e3 <munmap>
 8058cf6:	83 f8 ff             	cmp    $0xffffffff,%eax
 8058cf9:	0f 94 c0             	sete   %al
 8058cfc:	0f b6 c0             	movzbl %al,%eax
 8058cff:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 8058d06:	00 
 8058d07:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8058d0b:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8058d12:	08 
 8058d13:	c7 44 24 0c 50 30 06 	movl   $0x8063050,0xc(%esp)
 8058d1a:	08 
 8058d1b:	c7 44 24 08 0e 04 00 	movl   $0x40e,0x8(%esp)
 8058d22:	00 
 8058d23:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058d2a:	08 
 8058d2b:	89 04 24             	mov    %eax,(%esp)
 8058d2e:	e8 5d 58 00 00       	call   805e590 <_test_assert>
 8058d33:	85 c0                	test   %eax,%eax
 8058d35:	0f 84 83 00 00 00    	je     8058dbe <vfstest_s5fs_vm+0x17db>
 8058d3b:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8058d41:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8058d46:	89 04 24             	mov    %eax,(%esp)
 8058d49:	e8 db 55 00 00       	call   805e329 <test_errstr>
 8058d4e:	89 c6                	mov    %eax,%esi
 8058d50:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 8058d57:	e8 cd 55 00 00       	call   805e329 <test_errstr>
 8058d5c:	89 c3                	mov    %eax,%ebx
 8058d5e:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 8058d64:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8058d6b:	00 
 8058d6c:	89 04 24             	mov    %eax,(%esp)
 8058d6f:	e8 6f 0b 00 00       	call   80598e3 <munmap>
 8058d74:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8058d79:	83 f8 16             	cmp    $0x16,%eax
 8058d7c:	0f 94 c0             	sete   %al
 8058d7f:	0f b6 c0             	movzbl %al,%eax
 8058d82:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8058d86:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8058d8a:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 8058d91:	00 
 8058d92:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8058d96:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8058d9d:	08 
 8058d9e:	c7 44 24 0c 78 30 06 	movl   $0x8063078,0xc(%esp)
 8058da5:	08 
 8058da6:	c7 44 24 08 0e 04 00 	movl   $0x40e,0x8(%esp)
 8058dad:	00 
 8058dae:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058db5:	08 
 8058db6:	89 04 24             	mov    %eax,(%esp)
 8058db9:	e8 d2 57 00 00       	call   805e590 <_test_assert>
        syscall_fail(munmap(addr, -1), EINVAL);
 8058dbe:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 8058dc5:	e8 5f 55 00 00       	call   805e329 <test_errstr>
 8058dca:	89 c3                	mov    %eax,%ebx
 8058dcc:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8058dd3:	00 00 00 
 8058dd6:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 8058ddc:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 8058de3:	ff 
 8058de4:	89 04 24             	mov    %eax,(%esp)
 8058de7:	e8 f7 0a 00 00       	call   80598e3 <munmap>
 8058dec:	83 f8 ff             	cmp    $0xffffffff,%eax
 8058def:	0f 94 c0             	sete   %al
 8058df2:	0f b6 c0             	movzbl %al,%eax
 8058df5:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 8058dfc:	00 
 8058dfd:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8058e01:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8058e08:	08 
 8058e09:	c7 44 24 0c 98 30 06 	movl   $0x8063098,0xc(%esp)
 8058e10:	08 
 8058e11:	c7 44 24 08 0f 04 00 	movl   $0x40f,0x8(%esp)
 8058e18:	00 
 8058e19:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058e20:	08 
 8058e21:	89 04 24             	mov    %eax,(%esp)
 8058e24:	e8 67 57 00 00       	call   805e590 <_test_assert>
 8058e29:	85 c0                	test   %eax,%eax
 8058e2b:	0f 84 83 00 00 00    	je     8058eb4 <vfstest_s5fs_vm+0x18d1>
 8058e31:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8058e37:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8058e3c:	89 04 24             	mov    %eax,(%esp)
 8058e3f:	e8 e5 54 00 00       	call   805e329 <test_errstr>
 8058e44:	89 c6                	mov    %eax,%esi
 8058e46:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
 8058e4d:	e8 d7 54 00 00       	call   805e329 <test_errstr>
 8058e52:	89 c3                	mov    %eax,%ebx
 8058e54:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 8058e5a:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 8058e61:	ff 
 8058e62:	89 04 24             	mov    %eax,(%esp)
 8058e65:	e8 79 0a 00 00       	call   80598e3 <munmap>
 8058e6a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8058e6f:	83 f8 16             	cmp    $0x16,%eax
 8058e72:	0f 94 c0             	sete   %al
 8058e75:	0f b6 c0             	movzbl %al,%eax
 8058e78:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8058e7c:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8058e80:	c7 44 24 18 16 00 00 	movl   $0x16,0x18(%esp)
 8058e87:	00 
 8058e88:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8058e8c:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8058e93:	08 
 8058e94:	c7 44 24 0c c0 30 06 	movl   $0x80630c0,0xc(%esp)
 8058e9b:	08 
 8058e9c:	c7 44 24 08 0f 04 00 	movl   $0x40f,0x8(%esp)
 8058ea3:	00 
 8058ea4:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058eab:	08 
 8058eac:	89 04 24             	mov    %eax,(%esp)
 8058eaf:	e8 dc 56 00 00       	call   805e590 <_test_assert>

        /* brk tests */
        /* Set the break, and use the memory in question */
        test_assert((void *) - 1 != (addr = sbrk(128)), NULL);
 8058eb4:	c7 04 24 80 00 00 00 	movl   $0x80,(%esp)
 8058ebb:	e8 df 05 00 00       	call   805949f <sbrk>
 8058ec0:	89 85 70 f7 ff ff    	mov    %eax,-0x890(%ebp)
 8058ec6:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 8058ecc:	83 f8 ff             	cmp    $0xffffffff,%eax
 8058ecf:	0f 95 c0             	setne  %al
 8058ed2:	0f b6 c0             	movzbl %al,%eax
 8058ed5:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8058edc:	00 
 8058edd:	c7 44 24 0c e0 30 06 	movl   $0x80630e0,0xc(%esp)
 8058ee4:	08 
 8058ee5:	c7 44 24 08 13 04 00 	movl   $0x413,0x8(%esp)
 8058eec:	00 
 8058eed:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058ef4:	08 
 8058ef5:	89 04 24             	mov    %eax,(%esp)
 8058ef8:	e8 93 56 00 00       	call   805e590 <_test_assert>
        memcpy(addr, TESTSTR, 128);
 8058efd:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 8058f03:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
 8058f0a:	00 
 8058f0b:	c7 44 24 04 f4 20 06 	movl   $0x80620f4,0x4(%esp)
 8058f12:	08 
 8058f13:	89 04 24             	mov    %eax,(%esp)
 8058f16:	e8 35 13 00 00       	call   805a250 <memcpy>
        test_assert(0 == memcmp(addr, TESTSTR, 128), NULL);
 8058f1b:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 8058f21:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
 8058f28:	00 
 8058f29:	c7 44 24 04 f4 20 06 	movl   $0x80620f4,0x4(%esp)
 8058f30:	08 
 8058f31:	89 04 24             	mov    %eax,(%esp)
 8058f34:	e8 c4 12 00 00       	call   805a1fd <memcmp>
 8058f39:	85 c0                	test   %eax,%eax
 8058f3b:	0f 94 c0             	sete   %al
 8058f3e:	0f b6 c0             	movzbl %al,%eax
 8058f41:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8058f48:	00 
 8058f49:	c7 44 24 0c 04 31 06 	movl   $0x8063104,0xc(%esp)
 8058f50:	08 
 8058f51:	c7 44 24 08 15 04 00 	movl   $0x415,0x8(%esp)
 8058f58:	00 
 8058f59:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058f60:	08 
 8058f61:	89 04 24             	mov    %eax,(%esp)
 8058f64:	e8 27 56 00 00       	call   805e590 <_test_assert>

        /* Make sure that the brk is being saved properly */
        test_assert((void *)((unsigned long) addr + 128) == sbrk(0), NULL);
 8058f69:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 8058f6f:	83 e8 80             	sub    $0xffffff80,%eax
 8058f72:	89 c3                	mov    %eax,%ebx
 8058f74:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8058f7b:	e8 1f 05 00 00       	call   805949f <sbrk>
 8058f80:	39 c3                	cmp    %eax,%ebx
 8058f82:	0f 94 c0             	sete   %al
 8058f85:	0f b6 c0             	movzbl %al,%eax
 8058f88:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8058f8f:	00 
 8058f90:	c7 44 24 0c 24 31 06 	movl   $0x8063124,0xc(%esp)
 8058f97:	08 
 8058f98:	c7 44 24 08 18 04 00 	movl   $0x418,0x8(%esp)
 8058f9f:	00 
 8058fa0:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8058fa7:	08 
 8058fa8:	89 04 24             	mov    %eax,(%esp)
 8058fab:	e8 e0 55 00 00       	call   805e590 <_test_assert>
        /* Knock the break back down */
        syscall_success(brk(addr));
 8058fb0:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 8058fb6:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8058fbb:	89 04 24             	mov    %eax,(%esp)
 8058fbe:	e8 66 53 00 00       	call   805e329 <test_errstr>
 8058fc3:	89 c3                	mov    %eax,%ebx
 8058fc5:	8b 85 70 f7 ff ff    	mov    -0x890(%ebp),%eax
 8058fcb:	89 04 24             	mov    %eax,(%esp)
 8058fce:	e8 95 05 00 00       	call   8059568 <brk>
 8058fd3:	f7 d0                	not    %eax
 8058fd5:	c1 e8 1f             	shr    $0x1f,%eax
 8058fd8:	0f b6 c0             	movzbl %al,%eax
 8058fdb:	89 74 24 18          	mov    %esi,0x18(%esp)
 8058fdf:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8058fe3:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8058fea:	08 
 8058feb:	c7 44 24 0c 54 31 06 	movl   $0x8063154,0xc(%esp)
 8058ff2:	08 
 8058ff3:	c7 44 24 08 1a 04 00 	movl   $0x41a,0x8(%esp)
 8058ffa:	00 
 8058ffb:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8059002:	08 
 8059003:	89 04 24             	mov    %eax,(%esp)
 8059006:	e8 85 55 00 00       	call   805e590 <_test_assert>

        /* brk errors */
        syscall_fail(brk((void *)(&"brk")), ENOMEM);
 805900b:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
 8059012:	e8 12 53 00 00       	call   805e329 <test_errstr>
 8059017:	89 c3                	mov    %eax,%ebx
 8059019:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 8059020:	00 00 00 
 8059023:	c7 04 24 65 31 06 08 	movl   $0x8063165,(%esp)
 805902a:	e8 39 05 00 00       	call   8059568 <brk>
 805902f:	83 f8 ff             	cmp    $0xffffffff,%eax
 8059032:	0f 94 c0             	sete   %al
 8059035:	0f b6 c0             	movzbl %al,%eax
 8059038:	c7 44 24 18 0c 00 00 	movl   $0xc,0x18(%esp)
 805903f:	00 
 8059040:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8059044:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 805904b:	08 
 805904c:	c7 44 24 0c 6c 31 06 	movl   $0x806316c,0xc(%esp)
 8059053:	08 
 8059054:	c7 44 24 08 1d 04 00 	movl   $0x41d,0x8(%esp)
 805905b:	00 
 805905c:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8059063:	08 
 8059064:	89 04 24             	mov    %eax,(%esp)
 8059067:	e8 24 55 00 00       	call   805e590 <_test_assert>
 805906c:	85 c0                	test   %eax,%eax
 805906e:	74 79                	je     80590e9 <vfstest_s5fs_vm+0x1b06>
 8059070:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8059076:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805907b:	89 04 24             	mov    %eax,(%esp)
 805907e:	e8 a6 52 00 00       	call   805e329 <test_errstr>
 8059083:	89 c6                	mov    %eax,%esi
 8059085:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
 805908c:	e8 98 52 00 00       	call   805e329 <test_errstr>
 8059091:	89 c3                	mov    %eax,%ebx
 8059093:	c7 04 24 65 31 06 08 	movl   $0x8063165,(%esp)
 805909a:	e8 c9 04 00 00       	call   8059568 <brk>
 805909f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80590a4:	83 f8 0c             	cmp    $0xc,%eax
 80590a7:	0f 94 c0             	sete   %al
 80590aa:	0f b6 c0             	movzbl %al,%eax
 80590ad:	89 7c 24 20          	mov    %edi,0x20(%esp)
 80590b1:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 80590b5:	c7 44 24 18 0c 00 00 	movl   $0xc,0x18(%esp)
 80590bc:	00 
 80590bd:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80590c1:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 80590c8:	08 
 80590c9:	c7 44 24 0c 98 31 06 	movl   $0x8063198,0xc(%esp)
 80590d0:	08 
 80590d1:	c7 44 24 08 1d 04 00 	movl   $0x41d,0x8(%esp)
 80590d8:	00 
 80590d9:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80590e0:	08 
 80590e1:	89 04 24             	mov    %eax,(%esp)
 80590e4:	e8 a7 54 00 00       	call   805e590 <_test_assert>
        syscall_fail(brk((void *) 1), ENOMEM);
 80590e9:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
 80590f0:	e8 34 52 00 00       	call   805e329 <test_errstr>
 80590f5:	89 c3                	mov    %eax,%ebx
 80590f7:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 80590fe:	00 00 00 
 8059101:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 8059108:	e8 5b 04 00 00       	call   8059568 <brk>
 805910d:	83 f8 ff             	cmp    $0xffffffff,%eax
 8059110:	0f 94 c0             	sete   %al
 8059113:	0f b6 c0             	movzbl %al,%eax
 8059116:	c7 44 24 18 0c 00 00 	movl   $0xc,0x18(%esp)
 805911d:	00 
 805911e:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8059122:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8059129:	08 
 805912a:	c7 44 24 0c c0 31 06 	movl   $0x80631c0,0xc(%esp)
 8059131:	08 
 8059132:	c7 44 24 08 1e 04 00 	movl   $0x41e,0x8(%esp)
 8059139:	00 
 805913a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8059141:	08 
 8059142:	89 04 24             	mov    %eax,(%esp)
 8059145:	e8 46 54 00 00       	call   805e590 <_test_assert>
 805914a:	85 c0                	test   %eax,%eax
 805914c:	74 79                	je     80591c7 <vfstest_s5fs_vm+0x1be4>
 805914e:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8059154:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8059159:	89 04 24             	mov    %eax,(%esp)
 805915c:	e8 c8 51 00 00       	call   805e329 <test_errstr>
 8059161:	89 c6                	mov    %eax,%esi
 8059163:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
 805916a:	e8 ba 51 00 00       	call   805e329 <test_errstr>
 805916f:	89 c3                	mov    %eax,%ebx
 8059171:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 8059178:	e8 eb 03 00 00       	call   8059568 <brk>
 805917d:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8059182:	83 f8 0c             	cmp    $0xc,%eax
 8059185:	0f 94 c0             	sete   %al
 8059188:	0f b6 c0             	movzbl %al,%eax
 805918b:	89 7c 24 20          	mov    %edi,0x20(%esp)
 805918f:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8059193:	c7 44 24 18 0c 00 00 	movl   $0xc,0x18(%esp)
 805919a:	00 
 805919b:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805919f:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 80591a6:	08 
 80591a7:	c7 44 24 0c e8 31 06 	movl   $0x80631e8,0xc(%esp)
 80591ae:	08 
 80591af:	c7 44 24 08 1e 04 00 	movl   $0x41e,0x8(%esp)
 80591b6:	00 
 80591b7:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80591be:	08 
 80591bf:	89 04 24             	mov    %eax,(%esp)
 80591c2:	e8 c9 53 00 00       	call   805e590 <_test_assert>
        syscall_fail(brk((void *) &addr), ENOMEM);
 80591c7:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
 80591ce:	e8 56 51 00 00       	call   805e329 <test_errstr>
 80591d3:	89 c3                	mov    %eax,%ebx
 80591d5:	c7 05 28 6b 06 08 00 	movl   $0x0,0x8066b28
 80591dc:	00 00 00 
 80591df:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
 80591e5:	89 04 24             	mov    %eax,(%esp)
 80591e8:	e8 7b 03 00 00       	call   8059568 <brk>
 80591ed:	83 f8 ff             	cmp    $0xffffffff,%eax
 80591f0:	0f 94 c0             	sete   %al
 80591f3:	0f b6 c0             	movzbl %al,%eax
 80591f6:	c7 44 24 18 0c 00 00 	movl   $0xc,0x18(%esp)
 80591fd:	00 
 80591fe:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8059202:	c7 44 24 10 a4 e7 05 	movl   $0x805e7a4,0x10(%esp)
 8059209:	08 
 805920a:	c7 44 24 0c 08 32 06 	movl   $0x8063208,0xc(%esp)
 8059211:	08 
 8059212:	c7 44 24 08 1f 04 00 	movl   $0x41f,0x8(%esp)
 8059219:	00 
 805921a:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8059221:	08 
 8059222:	89 04 24             	mov    %eax,(%esp)
 8059225:	e8 66 53 00 00       	call   805e590 <_test_assert>
 805922a:	85 c0                	test   %eax,%eax
 805922c:	74 7b                	je     80592a9 <vfstest_s5fs_vm+0x1cc6>
 805922e:	8b 3d 28 6b 06 08    	mov    0x8066b28,%edi
 8059234:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8059239:	89 04 24             	mov    %eax,(%esp)
 805923c:	e8 e8 50 00 00       	call   805e329 <test_errstr>
 8059241:	89 c6                	mov    %eax,%esi
 8059243:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
 805924a:	e8 da 50 00 00       	call   805e329 <test_errstr>
 805924f:	89 c3                	mov    %eax,%ebx
 8059251:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
 8059257:	89 04 24             	mov    %eax,(%esp)
 805925a:	e8 09 03 00 00       	call   8059568 <brk>
 805925f:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 8059264:	83 f8 0c             	cmp    $0xc,%eax
 8059267:	0f 94 c0             	sete   %al
 805926a:	0f b6 c0             	movzbl %al,%eax
 805926d:	89 7c 24 20          	mov    %edi,0x20(%esp)
 8059271:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8059275:	c7 44 24 18 0c 00 00 	movl   $0xc,0x18(%esp)
 805927c:	00 
 805927d:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8059281:	c7 44 24 10 04 e8 05 	movl   $0x805e804,0x10(%esp)
 8059288:	08 
 8059289:	c7 44 24 0c 34 32 06 	movl   $0x8063234,0xc(%esp)
 8059290:	08 
 8059291:	c7 44 24 08 1f 04 00 	movl   $0x41f,0x8(%esp)
 8059298:	00 
 8059299:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80592a0:	08 
 80592a1:	89 04 24             	mov    %eax,(%esp)
 80592a4:	e8 e7 52 00 00       	call   805e590 <_test_assert>

        syscall_success(chdir(".."));
 80592a9:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80592af:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80592b4:	89 04 24             	mov    %eax,(%esp)
 80592b7:	e8 6d 50 00 00       	call   805e329 <test_errstr>
 80592bc:	89 c3                	mov    %eax,%ebx
 80592be:	c7 04 24 26 e6 05 08 	movl   $0x805e626,(%esp)
 80592c5:	e8 aa 0a 00 00       	call   8059d74 <chdir>
 80592ca:	f7 d0                	not    %eax
 80592cc:	c1 e8 1f             	shr    $0x1f,%eax
 80592cf:	0f b6 c0             	movzbl %al,%eax
 80592d2:	89 74 24 18          	mov    %esi,0x18(%esp)
 80592d6:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 80592da:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 80592e1:	08 
 80592e2:	c7 44 24 0c ac ed 05 	movl   $0x805edac,0xc(%esp)
 80592e9:	08 
 80592ea:	c7 44 24 08 21 04 00 	movl   $0x421,0x8(%esp)
 80592f1:	00 
 80592f2:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80592f9:	08 
 80592fa:	89 04 24             	mov    %eax,(%esp)
 80592fd:	e8 8e 52 00 00       	call   805e590 <_test_assert>
        test_fini("vfstest_s5fs_vm");
 8059302:	c7 04 24 57 32 06 08 	movl   $0x8063257,(%esp)
 8059309:	e8 6d 4f 00 00       	call   805e27b <test_fini>
}
 805930e:	90                   	nop
 805930f:	81 c4 bc 08 00 00    	add    $0x8bc,%esp
 8059315:	5b                   	pop    %ebx
 8059316:	5e                   	pop    %esi
 8059317:	5f                   	pop    %edi
 8059318:	5d                   	pop    %ebp
 8059319:	c3                   	ret    

0805931a <main>:
#ifndef __KERNEL__
int main(int argc, char **argv)
#else
int vfstest_main(int argc, char **argv)
#endif
{
 805931a:	55                   	push   %ebp
 805931b:	89 e5                	mov    %esp,%ebp
 805931d:	56                   	push   %esi
 805931e:	53                   	push   %ebx
 805931f:	83 e4 f0             	and    $0xfffffff0,%esp
 8059322:	83 ec 20             	sub    $0x20,%esp
        if (argc != 1) {
 8059325:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
 8059329:	74 1f                	je     805934a <main+0x30>
                fprintf(stderr, "USAGE: vfstest\n");
 805932b:	a1 9c 68 06 08       	mov    0x806689c,%eax
 8059330:	c7 44 24 04 67 32 06 	movl   $0x8063267,0x4(%esp)
 8059337:	08 
 8059338:	89 04 24             	mov    %eax,(%esp)
 805933b:	e8 37 39 00 00       	call   805cc77 <fprintf>
                return 1;
 8059340:	b8 01 00 00 00       	mov    $0x1,%eax
 8059345:	e9 0e 01 00 00       	jmp    8059458 <main+0x13e>
        }

        test_init();
 805934a:	e8 ef 4d 00 00       	call   805e13e <test_init>
        vfstest_start();
 805934f:	e8 e4 ef fe ff       	call   8048338 <vfstest_start>

        syscall_success(chdir(root_dir));
 8059354:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 805935a:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 805935f:	89 04 24             	mov    %eax,(%esp)
 8059362:	e8 c2 4f 00 00       	call   805e329 <test_errstr>
 8059367:	89 c3                	mov    %eax,%ebx
 8059369:	c7 04 24 e0 69 06 08 	movl   $0x80669e0,(%esp)
 8059370:	e8 ff 09 00 00       	call   8059d74 <chdir>
 8059375:	f7 d0                	not    %eax
 8059377:	c1 e8 1f             	shr    $0x1f,%eax
 805937a:	0f b6 c0             	movzbl %al,%eax
 805937d:	89 74 24 18          	mov    %esi,0x18(%esp)
 8059381:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8059385:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 805938c:	08 
 805938d:	c7 44 24 0c 77 32 06 	movl   $0x8063277,0xc(%esp)
 8059394:	08 
 8059395:	c7 44 24 08 37 04 00 	movl   $0x437,0x8(%esp)
 805939c:	00 
 805939d:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 80593a4:	08 
 80593a5:	89 04 24             	mov    %eax,(%esp)
 80593a8:	e8 e3 51 00 00       	call   805e590 <_test_assert>

        vfstest_notdir();
 80593ad:	e8 4d f0 fe ff       	call   80483ff <vfstest_notdir>
        vfstest_stat();
 80593b2:	e8 d6 fa fe ff       	call   8048e8d <vfstest_stat>
        vfstest_chdir();
 80593b7:	e8 a4 14 ff ff       	call   804a860 <vfstest_chdir>
        vfstest_mkdir();
 80593bc:	e8 a3 01 ff ff       	call   8049564 <vfstest_mkdir>
        vfstest_paths();
 80593c1:	e8 af 1c ff ff       	call   804b075 <vfstest_paths>
        vfstest_fd();
 80593c6:	e8 dd 52 ff ff       	call   804e6a8 <vfstest_fd>
        vfstest_open();
 80593cb:	e8 01 92 ff ff       	call   80525d1 <vfstest_open>
        vfstest_read();
 80593d0:	e8 26 b1 ff ff       	call   80544fb <vfstest_read>
        vfstest_getdents();
 80593d5:	e8 95 d7 ff ff       	call   8056b6f <vfstest_getdents>
        vfstest_memdev();
 80593da:	e8 76 80 ff ff       	call   8051455 <vfstest_memdev>
        vfstest_write();
 80593df:	e8 a4 85 ff ff       	call   8051988 <vfstest_write>

#ifdef __VM__
        vfstest_s5fs_vm();
 80593e4:	e8 fa e1 ff ff       	call   80575e3 <vfstest_s5fs_vm>
#endif

        /*vfstest_infinite();*/

        syscall_success(chdir(".."));
 80593e9:	8b 35 28 6b 06 08    	mov    0x8066b28,%esi
 80593ef:	a1 28 6b 06 08       	mov    0x8066b28,%eax
 80593f4:	89 04 24             	mov    %eax,(%esp)
 80593f7:	e8 2d 4f 00 00       	call   805e329 <test_errstr>
 80593fc:	89 c3                	mov    %eax,%ebx
 80593fe:	c7 04 24 26 e6 05 08 	movl   $0x805e626,(%esp)
 8059405:	e8 6a 09 00 00       	call   8059d74 <chdir>
 805940a:	f7 d0                	not    %eax
 805940c:	c1 e8 1f             	shr    $0x1f,%eax
 805940f:	0f b6 c0             	movzbl %al,%eax
 8059412:	89 74 24 18          	mov    %esi,0x18(%esp)
 8059416:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805941a:	c7 44 24 10 b3 e6 05 	movl   $0x805e6b3,0x10(%esp)
 8059421:	08 
 8059422:	c7 44 24 0c ac ed 05 	movl   $0x805edac,0xc(%esp)
 8059429:	08 
 805942a:	c7 44 24 08 4b 04 00 	movl   $0x44b,0x8(%esp)
 8059431:	00 
 8059432:	c7 44 24 04 e9 e6 05 	movl   $0x805e6e9,0x4(%esp)
 8059439:	08 
 805943a:	89 04 24             	mov    %eax,(%esp)
 805943d:	e8 4e 51 00 00       	call   805e590 <_test_assert>

        vfstest_term();
 8059442:	e8 4f ef fe ff       	call   8048396 <vfstest_term>
        test_fini(NULL);
 8059447:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 805944e:	e8 28 4e 00 00       	call   805e27b <test_fini>

        return 0;
 8059453:	b8 00 00 00 00       	mov    $0x0,%eax
}
 8059458:	8d 65 f8             	lea    -0x8(%ebp),%esp
 805945b:	5b                   	pop    %ebx
 805945c:	5e                   	pop    %esi
 805945d:	5d                   	pop    %ebp
 805945e:	c3                   	ret    

0805945f <__libc_static_entry>:
#ifndef __DYNAMIC__

.globl __libc_static_entry

__libc_static_entry:
	addl $4, %esp; /* Make sure when we overwrite dummy return address
 805945f:	83 c4 04             	add    $0x4,%esp
	                  with the correct one, so args will be in the right
	                  place when we call main */
	call main;
 8059462:	e8 b3 fe ff ff       	call   805931a <main>
	push %eax; /* Argument to exit is return value from main */
 8059467:	50                   	push   %eax
	call exit;
 8059468:	e8 21 02 00 00       	call   805968e <exit>

0805946d <trap>:
#include "errno.h"

#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
 805946d:	55                   	push   %ebp
 805946e:	89 e5                	mov    %esp,%ebp
 8059470:	83 ec 10             	sub    $0x10,%esp
 8059473:	e8 7d 0d 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 8059478:	81 c1 e8 d3 00 00    	add    $0xd3e8,%ecx
        int ret;
        __asm__ volatile(
 805947e:	8b 45 08             	mov    0x8(%ebp),%eax
 8059481:	8b 55 0c             	mov    0xc(%ebp),%edx
 8059484:	cd 2e                	int    $0x2e
 8059486:	89 45 fc             	mov    %eax,-0x4(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059489:	b8 27 00 00 00       	mov    $0x27,%eax
 805948e:	cd 2e                	int    $0x2e
 8059490:	89 c2                	mov    %eax,%edx
 8059492:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059498:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 805949a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
 805949d:	c9                   	leave  
 805949e:	c3                   	ret    

0805949f <sbrk>:
static void     (*atexit_func[MAX_EXIT_HANDLERS])();
static int      atexit_handlers = 0;


void *sbrk(intptr_t incr)
{
 805949f:	55                   	push   %ebp
 80594a0:	89 e5                	mov    %esp,%ebp
 80594a2:	53                   	push   %ebx
 80594a3:	83 ec 24             	sub    $0x24,%esp
 80594a6:	e8 4a 0d 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 80594ab:	81 c1 b5 d3 00 00    	add    $0xd3b5,%ecx
        uintptr_t oldbrk;

        /* If we don't have a saved break, find it from the kernel */
        if (!__curbrk) {
 80594b1:	8b 81 c0 01 00 00    	mov    0x1c0(%ecx),%eax
 80594b7:	85 c0                	test   %eax,%eax
 80594b9:	75 44                	jne    80594ff <sbrk+0x60>
 80594bb:	c7 45 f0 2c 00 00 00 	movl   $0x2c,-0x10(%ebp)
 80594c2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 80594c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
 80594cc:	8b 55 ec             	mov    -0x14(%ebp),%edx
 80594cf:	cd 2e                	int    $0x2e
 80594d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 80594d4:	b8 27 00 00 00       	mov    $0x27,%eax
 80594d9:	cd 2e                	int    $0x2e
 80594db:	89 c2                	mov    %eax,%edx
 80594dd:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 80594e3:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 80594e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
                if (0 > (long)(__curbrk = (void *) trap(SYS_brk, (uint32_t) NULL))) {
 80594e8:	89 81 c0 01 00 00    	mov    %eax,0x1c0(%ecx)
 80594ee:	8b 81 c0 01 00 00    	mov    0x1c0(%ecx),%eax
 80594f4:	85 c0                	test   %eax,%eax
 80594f6:	79 07                	jns    80594ff <sbrk+0x60>
                        return (void *) -1;
 80594f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80594fd:	eb 63                	jmp    8059562 <sbrk+0xc3>
                }
        }

        oldbrk = (uintptr_t) __curbrk;
 80594ff:	8b 81 c0 01 00 00    	mov    0x1c0(%ecx),%eax
 8059505:	89 45 f4             	mov    %eax,-0xc(%ebp)

        /* Increment or decrement the saved break */

        if (incr < 0) {
 8059508:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 805950c:	79 2e                	jns    805953c <sbrk+0x9d>
                if ((uintptr_t) - incr > oldbrk) {
 805950e:	8b 45 08             	mov    0x8(%ebp),%eax
 8059511:	f7 d8                	neg    %eax
 8059513:	3b 45 f4             	cmp    -0xc(%ebp),%eax
 8059516:	76 07                	jbe    805951f <sbrk+0x80>
                        return (void *) -1;
 8059518:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 805951d:	eb 43                	jmp    8059562 <sbrk+0xc3>
                } else if (brk((void *)(oldbrk - (uintptr_t) - incr)) < 0) {
 805951f:	8b 55 08             	mov    0x8(%ebp),%edx
 8059522:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059525:	01 d0                	add    %edx,%eax
 8059527:	89 04 24             	mov    %eax,(%esp)
 805952a:	89 cb                	mov    %ecx,%ebx
 805952c:	e8 37 00 00 00       	call   8059568 <brk>
 8059531:	85 c0                	test   %eax,%eax
 8059533:	79 2a                	jns    805955f <sbrk+0xc0>
                        return (void *) -1;
 8059535:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 805953a:	eb 26                	jmp    8059562 <sbrk+0xc3>
                }
        } else if (incr > 0) {
 805953c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 8059540:	7e 1d                	jle    805955f <sbrk+0xc0>
                if (brk((void *)(oldbrk + (uintptr_t) incr)) < 0) {
 8059542:	8b 55 08             	mov    0x8(%ebp),%edx
 8059545:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059548:	01 d0                	add    %edx,%eax
 805954a:	89 04 24             	mov    %eax,(%esp)
 805954d:	89 cb                	mov    %ecx,%ebx
 805954f:	e8 14 00 00 00       	call   8059568 <brk>
 8059554:	85 c0                	test   %eax,%eax
 8059556:	79 07                	jns    805955f <sbrk+0xc0>
                        return (void *) -1;
 8059558:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 805955d:	eb 03                	jmp    8059562 <sbrk+0xc3>
                }
        }
        return (void *) oldbrk;
 805955f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 8059562:	83 c4 24             	add    $0x24,%esp
 8059565:	5b                   	pop    %ebx
 8059566:	5d                   	pop    %ebp
 8059567:	c3                   	ret    

08059568 <brk>:

int brk(void *addr)
{
 8059568:	55                   	push   %ebp
 8059569:	89 e5                	mov    %esp,%ebp
 805956b:	83 ec 10             	sub    $0x10,%esp
 805956e:	e8 82 0c 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 8059573:	81 c1 ed d2 00 00    	add    $0xd2ed,%ecx
        if (NULL == addr)
 8059579:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 805957d:	75 07                	jne    8059586 <brk+0x1e>
                return -1;
 805957f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8059584:	eb 4a                	jmp    80595d0 <brk+0x68>
        void *newbrk = (void *) trap(SYS_brk, (uint32_t) addr);
 8059586:	8b 45 08             	mov    0x8(%ebp),%eax
 8059589:	c7 45 f8 2c 00 00 00 	movl   $0x2c,-0x8(%ebp)
 8059590:	89 45 f4             	mov    %eax,-0xc(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 8059593:	8b 45 f8             	mov    -0x8(%ebp),%eax
 8059596:	8b 55 f4             	mov    -0xc(%ebp),%edx
 8059599:	cd 2e                	int    $0x2e
 805959b:	89 45 f0             	mov    %eax,-0x10(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 805959e:	b8 27 00 00 00       	mov    $0x27,%eax
 80595a3:	cd 2e                	int    $0x2e
 80595a5:	89 c2                	mov    %eax,%edx
 80595a7:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 80595ad:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 80595af:	8b 45 f0             	mov    -0x10(%ebp),%eax
 80595b2:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (newbrk == (void *) -1)
 80595b5:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%ebp)
 80595b9:	75 07                	jne    80595c2 <brk+0x5a>
                return -1;
 80595bb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80595c0:	eb 0e                	jmp    80595d0 <brk+0x68>
        __curbrk = newbrk;
 80595c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
 80595c5:	89 81 c0 01 00 00    	mov    %eax,0x1c0(%ecx)
        return 0;
 80595cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
 80595d0:	c9                   	leave  
 80595d1:	c3                   	ret    

080595d2 <fork>:

int fork(void)
{
 80595d2:	55                   	push   %ebp
 80595d3:	89 e5                	mov    %esp,%ebp
 80595d5:	83 ec 10             	sub    $0x10,%esp
 80595d8:	e8 18 0c 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 80595dd:	81 c1 83 d2 00 00    	add    $0xd283,%ecx
 80595e3:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
 80595ea:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 80595f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
 80595f4:	8b 55 f8             	mov    -0x8(%ebp),%edx
 80595f7:	cd 2e                	int    $0x2e
 80595f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 80595fc:	b8 27 00 00 00       	mov    $0x27,%eax
 8059601:	cd 2e                	int    $0x2e
 8059603:	89 c2                	mov    %eax,%edx
 8059605:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 805960b:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 805960d:	8b 45 f4             	mov    -0xc(%ebp),%eax
        return trap(SYS_fork, 0);
 8059610:	90                   	nop
}
 8059611:	c9                   	leave  
 8059612:	c3                   	ret    

08059613 <atexit>:

int atexit(void (*func)(void))
{
 8059613:	55                   	push   %ebp
 8059614:	89 e5                	mov    %esp,%ebp
 8059616:	e8 d6 0b 00 00       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805961b:	05 45 d2 00 00       	add    $0xd245,%eax
        if (atexit_handlers < MAX_EXIT_HANDLERS) {
 8059620:	8b 90 60 02 00 00    	mov    0x260(%eax),%edx
 8059626:	83 fa 1f             	cmp    $0x1f,%edx
 8059629:	7f 20                	jg     805964b <atexit+0x38>
                atexit_func[atexit_handlers++] = func;
 805962b:	8b 90 60 02 00 00    	mov    0x260(%eax),%edx
 8059631:	8d 4a 01             	lea    0x1(%edx),%ecx
 8059634:	89 88 60 02 00 00    	mov    %ecx,0x260(%eax)
 805963a:	8b 4d 08             	mov    0x8(%ebp),%ecx
 805963d:	89 8c 90 e0 01 00 00 	mov    %ecx,0x1e0(%eax,%edx,4)
                return 0;
 8059644:	b8 00 00 00 00       	mov    $0x0,%eax
 8059649:	eb 05                	jmp    8059650 <atexit+0x3d>
        }

        return 1;
 805964b:	b8 01 00 00 00       	mov    $0x1,%eax
}
 8059650:	5d                   	pop    %ebp
 8059651:	c3                   	ret    

08059652 <_exit>:

void _exit(int status)
{
 8059652:	55                   	push   %ebp
 8059653:	89 e5                	mov    %esp,%ebp
 8059655:	83 ec 10             	sub    $0x10,%esp
 8059658:	e8 98 0b 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 805965d:	81 c1 03 d2 00 00    	add    $0xd203,%ecx
        trap(SYS_exit, (uint32_t) status);
 8059663:	8b 45 08             	mov    0x8(%ebp),%eax
 8059666:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
 805966d:	89 45 f8             	mov    %eax,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 8059670:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8059673:	8b 55 f8             	mov    -0x8(%ebp),%edx
 8059676:	cd 2e                	int    $0x2e
 8059678:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 805967b:	b8 27 00 00 00       	mov    $0x27,%eax
 8059680:	cd 2e                	int    $0x2e
 8059682:	89 c2                	mov    %eax,%edx
 8059684:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 805968a:	89 10                	mov    %edx,(%eax)

        /* this keeps gcc from warning us about exit returning, because it
         * expects exit not to. We never actually get here. */
        for (;;);
 805968c:	eb fe                	jmp    805968c <_exit+0x3a>

0805968e <exit>:
}

void exit(int status)
{
 805968e:	55                   	push   %ebp
 805968f:	89 e5                	mov    %esp,%ebp
 8059691:	53                   	push   %ebx
 8059692:	83 ec 14             	sub    $0x14,%esp
 8059695:	e8 5f 0b 00 00       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805969a:	81 c3 c6 d1 00 00    	add    $0xd1c6,%ebx
        while (atexit_handlers--) {
 80596a0:	eb 0f                	jmp    80596b1 <exit+0x23>
                atexit_func[atexit_handlers]();
 80596a2:	8b 83 60 02 00 00    	mov    0x260(%ebx),%eax
 80596a8:	8b 84 83 e0 01 00 00 	mov    0x1e0(%ebx,%eax,4),%eax
 80596af:	ff d0                	call   *%eax
        for (;;);
}

void exit(int status)
{
        while (atexit_handlers--) {
 80596b1:	8b 83 60 02 00 00    	mov    0x260(%ebx),%eax
 80596b7:	8d 50 ff             	lea    -0x1(%eax),%edx
 80596ba:	89 93 60 02 00 00    	mov    %edx,0x260(%ebx)
 80596c0:	85 c0                	test   %eax,%eax
 80596c2:	75 de                	jne    80596a2 <exit+0x14>
                atexit_func[atexit_handlers]();
        }

        _exit(status);
 80596c4:	8b 45 08             	mov    0x8(%ebp),%eax
 80596c7:	89 04 24             	mov    %eax,(%esp)
 80596ca:	e8 83 ff ff ff       	call   8059652 <_exit>
        exit(status); /* gcc doesn't realize that _exit() exits */
 80596cf:	8b 45 08             	mov    0x8(%ebp),%eax
 80596d2:	89 04 24             	mov    %eax,(%esp)
 80596d5:	e8 b4 ff ff ff       	call   805968e <exit>
}
 80596da:	90                   	nop
 80596db:	83 c4 14             	add    $0x14,%esp
 80596de:	5b                   	pop    %ebx
 80596df:	5d                   	pop    %ebp
 80596e0:	c3                   	ret    

080596e1 <yield>:

void yield(void)
{
 80596e1:	55                   	push   %ebp
 80596e2:	89 e5                	mov    %esp,%ebp
 80596e4:	53                   	push   %ebx
 80596e5:	83 ec 14             	sub    $0x14,%esp
 80596e8:	e8 0c 0b 00 00       	call   805a1f9 <__x86.get_pc_thunk.bx>
 80596ed:	81 c3 73 d1 00 00    	add    $0xd173,%ebx
        /* Due to a Bochs bug, the yield syscall itself is highly unyielding
         * (for instance, it's impossible to type while a process is in a yield
         * loop. This is good enough. */
        (fork() ? wait(NULL) : exit(0));
 80596f3:	e8 da fe ff ff       	call   80595d2 <fork>
 80596f8:	85 c0                	test   %eax,%eax
 80596fa:	74 0e                	je     805970a <yield+0x29>
 80596fc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8059703:	e8 15 00 00 00       	call   805971d <wait>
}
 8059708:	eb 0c                	jmp    8059716 <yield+0x35>
void yield(void)
{
        /* Due to a Bochs bug, the yield syscall itself is highly unyielding
         * (for instance, it's impossible to type while a process is in a yield
         * loop. This is good enough. */
        (fork() ? wait(NULL) : exit(0));
 805970a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8059711:	e8 78 ff ff ff       	call   805968e <exit>
}
 8059716:	90                   	nop
 8059717:	83 c4 14             	add    $0x14,%esp
 805971a:	5b                   	pop    %ebx
 805971b:	5d                   	pop    %ebp
 805971c:	c3                   	ret    

0805971d <wait>:

pid_t wait(int *status)
{
 805971d:	55                   	push   %ebp
 805971e:	89 e5                	mov    %esp,%ebp
 8059720:	83 ec 20             	sub    $0x20,%esp
 8059723:	e8 cd 0a 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 8059728:	81 c1 38 d1 00 00    	add    $0xd138,%ecx
        waitpid_args_t args;

        args.wpa_pid = -1;
 805972e:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%ebp)
        args.wpa_options = 0;
 8059735:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
        args.wpa_status = status;
 805973c:	8b 45 08             	mov    0x8(%ebp),%eax
 805973f:	89 45 f0             	mov    %eax,-0x10(%ebp)

        return trap(SYS_waitpid, (uint32_t) &args);
 8059742:	8d 45 e8             	lea    -0x18(%ebp),%eax
 8059745:	c7 45 fc 07 00 00 00 	movl   $0x7,-0x4(%ebp)
 805974c:	89 45 f8             	mov    %eax,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 805974f:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8059752:	8b 55 f8             	mov    -0x8(%ebp),%edx
 8059755:	cd 2e                	int    $0x2e
 8059757:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 805975a:	b8 27 00 00 00       	mov    $0x27,%eax
 805975f:	cd 2e                	int    $0x2e
 8059761:	89 c2                	mov    %eax,%edx
 8059763:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059769:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 805976b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 805976e:	c9                   	leave  
 805976f:	c3                   	ret    

08059770 <waitpid>:

pid_t waitpid(pid_t pid, int options, int *status)
{
 8059770:	55                   	push   %ebp
 8059771:	89 e5                	mov    %esp,%ebp
 8059773:	83 ec 20             	sub    $0x20,%esp
 8059776:	e8 7a 0a 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 805977b:	81 c1 e5 d0 00 00    	add    $0xd0e5,%ecx
        waitpid_args_t args;

        args.wpa_pid = pid;
 8059781:	8b 45 08             	mov    0x8(%ebp),%eax
 8059784:	89 45 e8             	mov    %eax,-0x18(%ebp)
        args.wpa_options = options;
 8059787:	8b 45 0c             	mov    0xc(%ebp),%eax
 805978a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        args.wpa_status = status;
 805978d:	8b 45 10             	mov    0x10(%ebp),%eax
 8059790:	89 45 f0             	mov    %eax,-0x10(%ebp)

        return trap(SYS_waitpid, (uint32_t) &args);
 8059793:	8d 45 e8             	lea    -0x18(%ebp),%eax
 8059796:	c7 45 fc 07 00 00 00 	movl   $0x7,-0x4(%ebp)
 805979d:	89 45 f8             	mov    %eax,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 80597a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
 80597a3:	8b 55 f8             	mov    -0x8(%ebp),%edx
 80597a6:	cd 2e                	int    $0x2e
 80597a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 80597ab:	b8 27 00 00 00       	mov    $0x27,%eax
 80597b0:	cd 2e                	int    $0x2e
 80597b2:	89 c2                	mov    %eax,%edx
 80597b4:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 80597ba:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 80597bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 80597bf:	c9                   	leave  
 80597c0:	c3                   	ret    

080597c1 <thr_exit>:

void thr_exit(int status)
{
 80597c1:	55                   	push   %ebp
 80597c2:	89 e5                	mov    %esp,%ebp
 80597c4:	83 ec 10             	sub    $0x10,%esp
 80597c7:	e8 29 0a 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 80597cc:	81 c1 94 d0 00 00    	add    $0xd094,%ecx
        trap(SYS_thr_exit, (uint32_t) status);
 80597d2:	8b 45 08             	mov    0x8(%ebp),%eax
 80597d5:	c7 45 fc 1f 00 00 00 	movl   $0x1f,-0x4(%ebp)
 80597dc:	89 45 f8             	mov    %eax,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 80597df:	8b 45 fc             	mov    -0x4(%ebp),%eax
 80597e2:	8b 55 f8             	mov    -0x8(%ebp),%edx
 80597e5:	cd 2e                	int    $0x2e
 80597e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 80597ea:	b8 27 00 00 00       	mov    $0x27,%eax
 80597ef:	cd 2e                	int    $0x2e
 80597f1:	89 c2                	mov    %eax,%edx
 80597f3:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 80597f9:	89 10                	mov    %edx,(%eax)
}
 80597fb:	90                   	nop
 80597fc:	c9                   	leave  
 80597fd:	c3                   	ret    

080597fe <getpid>:

pid_t getpid(void)
{
 80597fe:	55                   	push   %ebp
 80597ff:	89 e5                	mov    %esp,%ebp
 8059801:	83 ec 10             	sub    $0x10,%esp
 8059804:	e8 ec 09 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 8059809:	81 c1 57 d0 00 00    	add    $0xd057,%ecx
 805980f:	c7 45 fc 23 00 00 00 	movl   $0x23,-0x4(%ebp)
 8059816:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 805981d:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8059820:	8b 55 f8             	mov    -0x8(%ebp),%edx
 8059823:	cd 2e                	int    $0x2e
 8059825:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059828:	b8 27 00 00 00       	mov    $0x27,%eax
 805982d:	cd 2e                	int    $0x2e
 805982f:	89 c2                	mov    %eax,%edx
 8059831:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059837:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 8059839:	8b 45 f4             	mov    -0xc(%ebp),%eax
        return trap(SYS_getpid, 0);
 805983c:	90                   	nop
}
 805983d:	c9                   	leave  
 805983e:	c3                   	ret    

0805983f <halt>:

int halt(void)
{
 805983f:	55                   	push   %ebp
 8059840:	89 e5                	mov    %esp,%ebp
 8059842:	83 ec 10             	sub    $0x10,%esp
 8059845:	e8 ab 09 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 805984a:	81 c1 16 d0 00 00    	add    $0xd016,%ecx
 8059850:	c7 45 fc 28 00 00 00 	movl   $0x28,-0x4(%ebp)
 8059857:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 805985e:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8059861:	8b 55 f8             	mov    -0x8(%ebp),%edx
 8059864:	cd 2e                	int    $0x2e
 8059866:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059869:	b8 27 00 00 00       	mov    $0x27,%eax
 805986e:	cd 2e                	int    $0x2e
 8059870:	89 c2                	mov    %eax,%edx
 8059872:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059878:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 805987a:	8b 45 f4             	mov    -0xc(%ebp),%eax
        return trap(SYS_halt, 0);
 805987d:	90                   	nop
}
 805987e:	c9                   	leave  
 805987f:	c3                   	ret    

08059880 <mmap>:

void *mmap(void *addr, size_t len, int prot, int flags, int fd, off_t off)
{
 8059880:	55                   	push   %ebp
 8059881:	89 e5                	mov    %esp,%ebp
 8059883:	83 ec 30             	sub    $0x30,%esp
 8059886:	e8 6a 09 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 805988b:	81 c1 d5 cf 00 00    	add    $0xcfd5,%ecx
        mmap_args_t args;

        args.mma_addr = addr;
 8059891:	8b 45 08             	mov    0x8(%ebp),%eax
 8059894:	89 45 dc             	mov    %eax,-0x24(%ebp)
        args.mma_len = len;
 8059897:	8b 45 0c             	mov    0xc(%ebp),%eax
 805989a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        args.mma_prot = prot;
 805989d:	8b 45 10             	mov    0x10(%ebp),%eax
 80598a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        args.mma_flags = flags;
 80598a3:	8b 45 14             	mov    0x14(%ebp),%eax
 80598a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
        args.mma_fd = fd;
 80598a9:	8b 45 18             	mov    0x18(%ebp),%eax
 80598ac:	89 45 ec             	mov    %eax,-0x14(%ebp)
        args.mma_off = off;
 80598af:	8b 45 1c             	mov    0x1c(%ebp),%eax
 80598b2:	89 45 f0             	mov    %eax,-0x10(%ebp)

        return (void *) trap(SYS_mmap, (uint32_t) &args);
 80598b5:	8d 45 dc             	lea    -0x24(%ebp),%eax
 80598b8:	c7 45 fc 18 00 00 00 	movl   $0x18,-0x4(%ebp)
 80598bf:	89 45 f8             	mov    %eax,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 80598c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
 80598c5:	8b 55 f8             	mov    -0x8(%ebp),%edx
 80598c8:	cd 2e                	int    $0x2e
 80598ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 80598cd:	b8 27 00 00 00       	mov    $0x27,%eax
 80598d2:	cd 2e                	int    $0x2e
 80598d4:	89 c2                	mov    %eax,%edx
 80598d6:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 80598dc:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 80598de:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 80598e1:	c9                   	leave  
 80598e2:	c3                   	ret    

080598e3 <munmap>:

int munmap(void *addr, size_t len)
{
 80598e3:	55                   	push   %ebp
 80598e4:	89 e5                	mov    %esp,%ebp
 80598e6:	83 ec 20             	sub    $0x20,%esp
 80598e9:	e8 07 09 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 80598ee:	81 c1 72 cf 00 00    	add    $0xcf72,%ecx
        munmap_args_t args;

        args.addr = addr;
 80598f4:	8b 45 08             	mov    0x8(%ebp),%eax
 80598f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
        args.len = len;
 80598fa:	8b 45 0c             	mov    0xc(%ebp),%eax
 80598fd:	89 45 f0             	mov    %eax,-0x10(%ebp)

        return trap(SYS_munmap, (uint32_t) &args);
 8059900:	8d 45 ec             	lea    -0x14(%ebp),%eax
 8059903:	c7 45 fc 1a 00 00 00 	movl   $0x1a,-0x4(%ebp)
 805990a:	89 45 f8             	mov    %eax,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 805990d:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8059910:	8b 55 f8             	mov    -0x8(%ebp),%edx
 8059913:	cd 2e                	int    $0x2e
 8059915:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059918:	b8 27 00 00 00       	mov    $0x27,%eax
 805991d:	cd 2e                	int    $0x2e
 805991f:	89 c2                	mov    %eax,%edx
 8059921:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059927:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 8059929:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 805992c:	c9                   	leave  
 805992d:	c3                   	ret    

0805992e <sync>:

void sync(void)
{
 805992e:	55                   	push   %ebp
 805992f:	89 e5                	mov    %esp,%ebp
 8059931:	83 ec 10             	sub    $0x10,%esp
 8059934:	e8 bc 08 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 8059939:	81 c1 27 cf 00 00    	add    $0xcf27,%ecx
 805993f:	c7 45 fc 0f 00 00 00 	movl   $0xf,-0x4(%ebp)
 8059946:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 805994d:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8059950:	8b 55 f8             	mov    -0x8(%ebp),%edx
 8059953:	cd 2e                	int    $0x2e
 8059955:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059958:	b8 27 00 00 00       	mov    $0x27,%eax
 805995d:	cd 2e                	int    $0x2e
 805995f:	89 c2                	mov    %eax,%edx
 8059961:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059967:	89 10                	mov    %edx,(%eax)
        trap(SYS_sync, 0);
}
 8059969:	90                   	nop
 805996a:	c9                   	leave  
 805996b:	c3                   	ret    

0805996c <open>:

int open(const char *filename, int flags, int mode)
{
 805996c:	55                   	push   %ebp
 805996d:	89 e5                	mov    %esp,%ebp
 805996f:	53                   	push   %ebx
 8059970:	83 ec 34             	sub    $0x34,%esp
 8059973:	e8 81 08 00 00       	call   805a1f9 <__x86.get_pc_thunk.bx>
 8059978:	81 c3 e8 ce 00 00    	add    $0xcee8,%ebx
        open_args_t args;

        args.filename.as_len = strlen(filename);
 805997e:	8b 45 08             	mov    0x8(%ebp),%eax
 8059981:	89 04 24             	mov    %eax,(%esp)
 8059984:	e8 e1 0a 00 00       	call   805a46a <strlen>
 8059989:	89 45 e0             	mov    %eax,-0x20(%ebp)
        args.filename.as_str = filename;
 805998c:	8b 45 08             	mov    0x8(%ebp),%eax
 805998f:	89 45 dc             	mov    %eax,-0x24(%ebp)
        args.flags = flags;
 8059992:	8b 45 0c             	mov    0xc(%ebp),%eax
 8059995:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        args.mode = mode;
 8059998:	8b 45 10             	mov    0x10(%ebp),%eax
 805999b:	89 45 e8             	mov    %eax,-0x18(%ebp)

        return trap(SYS_open, (uint32_t) &args);
 805999e:	8d 45 dc             	lea    -0x24(%ebp),%eax
 80599a1:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
 80599a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 80599ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80599ae:	8b 55 f0             	mov    -0x10(%ebp),%edx
 80599b1:	cd 2e                	int    $0x2e
 80599b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 80599b6:	b8 27 00 00 00       	mov    $0x27,%eax
 80599bb:	cd 2e                	int    $0x2e
 80599bd:	89 c2                	mov    %eax,%edx
 80599bf:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 80599c5:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 80599c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
 80599ca:	83 c4 34             	add    $0x34,%esp
 80599cd:	5b                   	pop    %ebx
 80599ce:	5d                   	pop    %ebp
 80599cf:	c3                   	ret    

080599d0 <lseek>:

off_t lseek(int fd, off_t offset, int whence)
{
 80599d0:	55                   	push   %ebp
 80599d1:	89 e5                	mov    %esp,%ebp
 80599d3:	83 ec 20             	sub    $0x20,%esp
 80599d6:	e8 1a 08 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 80599db:	81 c1 85 ce 00 00    	add    $0xce85,%ecx
        lseek_args_t args;

        args.fd = fd;
 80599e1:	8b 45 08             	mov    0x8(%ebp),%eax
 80599e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
        args.offset = offset;
 80599e7:	8b 45 0c             	mov    0xc(%ebp),%eax
 80599ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
        args.whence = whence;
 80599ed:	8b 45 10             	mov    0x10(%ebp),%eax
 80599f0:	89 45 f0             	mov    %eax,-0x10(%ebp)

        return trap(SYS_lseek, (uint32_t) &args);
 80599f3:	8d 45 e8             	lea    -0x18(%ebp),%eax
 80599f6:	c7 45 fc 0e 00 00 00 	movl   $0xe,-0x4(%ebp)
 80599fd:	89 45 f8             	mov    %eax,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 8059a00:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8059a03:	8b 55 f8             	mov    -0x8(%ebp),%edx
 8059a06:	cd 2e                	int    $0x2e
 8059a08:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059a0b:	b8 27 00 00 00       	mov    $0x27,%eax
 8059a10:	cd 2e                	int    $0x2e
 8059a12:	89 c2                	mov    %eax,%edx
 8059a14:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059a1a:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 8059a1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 8059a1f:	c9                   	leave  
 8059a20:	c3                   	ret    

08059a21 <read>:


int read(int fd, void *buf, size_t nbytes)
{
 8059a21:	55                   	push   %ebp
 8059a22:	89 e5                	mov    %esp,%ebp
 8059a24:	83 ec 20             	sub    $0x20,%esp
 8059a27:	e8 c9 07 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 8059a2c:	81 c1 34 ce 00 00    	add    $0xce34,%ecx
        read_args_t args;

        args.fd = fd;
 8059a32:	8b 45 08             	mov    0x8(%ebp),%eax
 8059a35:	89 45 e8             	mov    %eax,-0x18(%ebp)
        args.buf = buf;
 8059a38:	8b 45 0c             	mov    0xc(%ebp),%eax
 8059a3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        args.nbytes = nbytes;
 8059a3e:	8b 45 10             	mov    0x10(%ebp),%eax
 8059a41:	89 45 f0             	mov    %eax,-0x10(%ebp)


        return trap(SYS_read, (uint32_t) &args);
 8059a44:	8d 45 e8             	lea    -0x18(%ebp),%eax
 8059a47:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
 8059a4e:	89 45 f8             	mov    %eax,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 8059a51:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8059a54:	8b 55 f8             	mov    -0x8(%ebp),%edx
 8059a57:	cd 2e                	int    $0x2e
 8059a59:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059a5c:	b8 27 00 00 00       	mov    $0x27,%eax
 8059a61:	cd 2e                	int    $0x2e
 8059a63:	89 c2                	mov    %eax,%edx
 8059a65:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059a6b:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 8059a6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 8059a70:	c9                   	leave  
 8059a71:	c3                   	ret    

08059a72 <write>:

int write(int fd, const void *buf, size_t nbytes)
{
 8059a72:	55                   	push   %ebp
 8059a73:	89 e5                	mov    %esp,%ebp
 8059a75:	83 ec 20             	sub    $0x20,%esp
 8059a78:	e8 78 07 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 8059a7d:	81 c1 e3 cd 00 00    	add    $0xcde3,%ecx
        write_args_t args;

        args.fd = fd;
 8059a83:	8b 45 08             	mov    0x8(%ebp),%eax
 8059a86:	89 45 e8             	mov    %eax,-0x18(%ebp)
        args.buf = (void *) buf;
 8059a89:	8b 45 0c             	mov    0xc(%ebp),%eax
 8059a8c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        args.nbytes = nbytes;
 8059a8f:	8b 45 10             	mov    0x10(%ebp),%eax
 8059a92:	89 45 f0             	mov    %eax,-0x10(%ebp)

        return trap(SYS_write, (uint32_t) &args);
 8059a95:	8d 45 e8             	lea    -0x18(%ebp),%eax
 8059a98:	c7 45 fc 04 00 00 00 	movl   $0x4,-0x4(%ebp)
 8059a9f:	89 45 f8             	mov    %eax,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 8059aa2:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8059aa5:	8b 55 f8             	mov    -0x8(%ebp),%edx
 8059aa8:	cd 2e                	int    $0x2e
 8059aaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059aad:	b8 27 00 00 00       	mov    $0x27,%eax
 8059ab2:	cd 2e                	int    $0x2e
 8059ab4:	89 c2                	mov    %eax,%edx
 8059ab6:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059abc:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 8059abe:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 8059ac1:	c9                   	leave  
 8059ac2:	c3                   	ret    

08059ac3 <close>:

int close(int fd)
{
 8059ac3:	55                   	push   %ebp
 8059ac4:	89 e5                	mov    %esp,%ebp
 8059ac6:	83 ec 10             	sub    $0x10,%esp
 8059ac9:	e8 27 07 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 8059ace:	81 c1 92 cd 00 00    	add    $0xcd92,%ecx
        return trap(SYS_close, (uint32_t) fd);
 8059ad4:	8b 45 08             	mov    0x8(%ebp),%eax
 8059ad7:	c7 45 fc 06 00 00 00 	movl   $0x6,-0x4(%ebp)
 8059ade:	89 45 f8             	mov    %eax,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 8059ae1:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8059ae4:	8b 55 f8             	mov    -0x8(%ebp),%edx
 8059ae7:	cd 2e                	int    $0x2e
 8059ae9:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059aec:	b8 27 00 00 00       	mov    $0x27,%eax
 8059af1:	cd 2e                	int    $0x2e
 8059af3:	89 c2                	mov    %eax,%edx
 8059af5:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059afb:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 8059afd:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059b00:	90                   	nop
}
 8059b01:	c9                   	leave  
 8059b02:	c3                   	ret    

08059b03 <dup>:

int dup(int fd)
{
 8059b03:	55                   	push   %ebp
 8059b04:	89 e5                	mov    %esp,%ebp
 8059b06:	83 ec 10             	sub    $0x10,%esp
 8059b09:	e8 e7 06 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 8059b0e:	81 c1 52 cd 00 00    	add    $0xcd52,%ecx
        return trap(SYS_dup, (uint32_t) fd);
 8059b14:	8b 45 08             	mov    0x8(%ebp),%eax
 8059b17:	c7 45 fc 11 00 00 00 	movl   $0x11,-0x4(%ebp)
 8059b1e:	89 45 f8             	mov    %eax,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 8059b21:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8059b24:	8b 55 f8             	mov    -0x8(%ebp),%edx
 8059b27:	cd 2e                	int    $0x2e
 8059b29:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059b2c:	b8 27 00 00 00       	mov    $0x27,%eax
 8059b31:	cd 2e                	int    $0x2e
 8059b33:	89 c2                	mov    %eax,%edx
 8059b35:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059b3b:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 8059b3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059b40:	90                   	nop
}
 8059b41:	c9                   	leave  
 8059b42:	c3                   	ret    

08059b43 <dup2>:

int dup2(int ofd, int nfd)
{
 8059b43:	55                   	push   %ebp
 8059b44:	89 e5                	mov    %esp,%ebp
 8059b46:	83 ec 20             	sub    $0x20,%esp
 8059b49:	e8 a7 06 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 8059b4e:	81 c1 12 cd 00 00    	add    $0xcd12,%ecx
        dup2_args_t args;

        args.ofd = ofd;
 8059b54:	8b 45 08             	mov    0x8(%ebp),%eax
 8059b57:	89 45 ec             	mov    %eax,-0x14(%ebp)
        args.nfd = nfd;
 8059b5a:	8b 45 0c             	mov    0xc(%ebp),%eax
 8059b5d:	89 45 f0             	mov    %eax,-0x10(%ebp)

        return trap(SYS_dup2, (uint32_t) &args);
 8059b60:	8d 45 ec             	lea    -0x14(%ebp),%eax
 8059b63:	c7 45 fc 2b 00 00 00 	movl   $0x2b,-0x4(%ebp)
 8059b6a:	89 45 f8             	mov    %eax,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 8059b6d:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8059b70:	8b 55 f8             	mov    -0x8(%ebp),%edx
 8059b73:	cd 2e                	int    $0x2e
 8059b75:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059b78:	b8 27 00 00 00       	mov    $0x27,%eax
 8059b7d:	cd 2e                	int    $0x2e
 8059b7f:	89 c2                	mov    %eax,%edx
 8059b81:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059b87:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 8059b89:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 8059b8c:	c9                   	leave  
 8059b8d:	c3                   	ret    

08059b8e <mkdir>:

int mkdir(const char *path, int mode)
{
 8059b8e:	55                   	push   %ebp
 8059b8f:	89 e5                	mov    %esp,%ebp
 8059b91:	53                   	push   %ebx
 8059b92:	83 ec 34             	sub    $0x34,%esp
 8059b95:	e8 5f 06 00 00       	call   805a1f9 <__x86.get_pc_thunk.bx>
 8059b9a:	81 c3 c6 cc 00 00    	add    $0xccc6,%ebx
        mkdir_args_t args;

        args.path.as_len = strlen(path);
 8059ba0:	8b 45 08             	mov    0x8(%ebp),%eax
 8059ba3:	89 04 24             	mov    %eax,(%esp)
 8059ba6:	e8 bf 08 00 00       	call   805a46a <strlen>
 8059bab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        args.path.as_str = path;
 8059bae:	8b 45 08             	mov    0x8(%ebp),%eax
 8059bb1:	89 45 e0             	mov    %eax,-0x20(%ebp)
        args.mode = mode;
 8059bb4:	8b 45 0c             	mov    0xc(%ebp),%eax
 8059bb7:	89 45 e8             	mov    %eax,-0x18(%ebp)

        return trap(SYS_mkdir, (uint32_t) &args);
 8059bba:	8d 45 e0             	lea    -0x20(%ebp),%eax
 8059bbd:	c7 45 f4 16 00 00 00 	movl   $0x16,-0xc(%ebp)
 8059bc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 8059bc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059bca:	8b 55 f0             	mov    -0x10(%ebp),%edx
 8059bcd:	cd 2e                	int    $0x2e
 8059bcf:	89 45 ec             	mov    %eax,-0x14(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059bd2:	b8 27 00 00 00       	mov    $0x27,%eax
 8059bd7:	cd 2e                	int    $0x2e
 8059bd9:	89 c2                	mov    %eax,%edx
 8059bdb:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059be1:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 8059be3:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
 8059be6:	83 c4 34             	add    $0x34,%esp
 8059be9:	5b                   	pop    %ebx
 8059bea:	5d                   	pop    %ebp
 8059beb:	c3                   	ret    

08059bec <rmdir>:

int rmdir(const char *path)
{
 8059bec:	55                   	push   %ebp
 8059bed:	89 e5                	mov    %esp,%ebp
 8059bef:	53                   	push   %ebx
 8059bf0:	83 ec 34             	sub    $0x34,%esp
 8059bf3:	e8 01 06 00 00       	call   805a1f9 <__x86.get_pc_thunk.bx>
 8059bf8:	81 c3 68 cc 00 00    	add    $0xcc68,%ebx
        argstr_t args;
        args.as_len = strlen(path);
 8059bfe:	8b 45 08             	mov    0x8(%ebp),%eax
 8059c01:	89 04 24             	mov    %eax,(%esp)
 8059c04:	e8 61 08 00 00       	call   805a46a <strlen>
 8059c09:	89 45 e8             	mov    %eax,-0x18(%ebp)
        args.as_str = path;
 8059c0c:	8b 45 08             	mov    0x8(%ebp),%eax
 8059c0f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        return trap(SYS_rmdir, (uint32_t) &args);
 8059c12:	8d 45 e4             	lea    -0x1c(%ebp),%eax
 8059c15:	c7 45 f4 15 00 00 00 	movl   $0x15,-0xc(%ebp)
 8059c1c:	89 45 f0             	mov    %eax,-0x10(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 8059c1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059c22:	8b 55 f0             	mov    -0x10(%ebp),%edx
 8059c25:	cd 2e                	int    $0x2e
 8059c27:	89 45 ec             	mov    %eax,-0x14(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059c2a:	b8 27 00 00 00       	mov    $0x27,%eax
 8059c2f:	cd 2e                	int    $0x2e
 8059c31:	89 c2                	mov    %eax,%edx
 8059c33:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059c39:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 8059c3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
 8059c3e:	83 c4 34             	add    $0x34,%esp
 8059c41:	5b                   	pop    %ebx
 8059c42:	5d                   	pop    %ebp
 8059c43:	c3                   	ret    

08059c44 <unlink>:

int unlink(const char *path)
{
 8059c44:	55                   	push   %ebp
 8059c45:	89 e5                	mov    %esp,%ebp
 8059c47:	53                   	push   %ebx
 8059c48:	83 ec 34             	sub    $0x34,%esp
 8059c4b:	e8 a9 05 00 00       	call   805a1f9 <__x86.get_pc_thunk.bx>
 8059c50:	81 c3 10 cc 00 00    	add    $0xcc10,%ebx
        argstr_t args;
        args.as_len = strlen(path);
 8059c56:	8b 45 08             	mov    0x8(%ebp),%eax
 8059c59:	89 04 24             	mov    %eax,(%esp)
 8059c5c:	e8 09 08 00 00       	call   805a46a <strlen>
 8059c61:	89 45 e8             	mov    %eax,-0x18(%ebp)
        args.as_str = path;
 8059c64:	8b 45 08             	mov    0x8(%ebp),%eax
 8059c67:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        return trap(SYS_unlink, (uint32_t) &args);
 8059c6a:	8d 45 e4             	lea    -0x1c(%ebp),%eax
 8059c6d:	c7 45 f4 09 00 00 00 	movl   $0x9,-0xc(%ebp)
 8059c74:	89 45 f0             	mov    %eax,-0x10(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 8059c77:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059c7a:	8b 55 f0             	mov    -0x10(%ebp),%edx
 8059c7d:	cd 2e                	int    $0x2e
 8059c7f:	89 45 ec             	mov    %eax,-0x14(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059c82:	b8 27 00 00 00       	mov    $0x27,%eax
 8059c87:	cd 2e                	int    $0x2e
 8059c89:	89 c2                	mov    %eax,%edx
 8059c8b:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059c91:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 8059c93:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
 8059c96:	83 c4 34             	add    $0x34,%esp
 8059c99:	5b                   	pop    %ebx
 8059c9a:	5d                   	pop    %ebp
 8059c9b:	c3                   	ret    

08059c9c <link>:

int link(const char *from, const char *to)
{
 8059c9c:	55                   	push   %ebp
 8059c9d:	89 e5                	mov    %esp,%ebp
 8059c9f:	53                   	push   %ebx
 8059ca0:	83 ec 34             	sub    $0x34,%esp
 8059ca3:	e8 51 05 00 00       	call   805a1f9 <__x86.get_pc_thunk.bx>
 8059ca8:	81 c3 b8 cb 00 00    	add    $0xcbb8,%ebx
        link_args_t args;

        args.from.as_len = strlen(from);
 8059cae:	8b 45 08             	mov    0x8(%ebp),%eax
 8059cb1:	89 04 24             	mov    %eax,(%esp)
 8059cb4:	e8 b1 07 00 00       	call   805a46a <strlen>
 8059cb9:	89 45 e8             	mov    %eax,-0x18(%ebp)
        args.from.as_str = from;
 8059cbc:	8b 45 08             	mov    0x8(%ebp),%eax
 8059cbf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        args.to.as_len = strlen(to);
 8059cc2:	8b 45 0c             	mov    0xc(%ebp),%eax
 8059cc5:	89 04 24             	mov    %eax,(%esp)
 8059cc8:	e8 9d 07 00 00       	call   805a46a <strlen>
 8059ccd:	89 45 e0             	mov    %eax,-0x20(%ebp)
        args.to.as_str = to;
 8059cd0:	8b 45 0c             	mov    0xc(%ebp),%eax
 8059cd3:	89 45 dc             	mov    %eax,-0x24(%ebp)

        return trap(SYS_link, (uint32_t) &args);
 8059cd6:	8d 45 dc             	lea    -0x24(%ebp),%eax
 8059cd9:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
 8059ce0:	89 45 f0             	mov    %eax,-0x10(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 8059ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059ce6:	8b 55 f0             	mov    -0x10(%ebp),%edx
 8059ce9:	cd 2e                	int    $0x2e
 8059ceb:	89 45 ec             	mov    %eax,-0x14(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059cee:	b8 27 00 00 00       	mov    $0x27,%eax
 8059cf3:	cd 2e                	int    $0x2e
 8059cf5:	89 c2                	mov    %eax,%edx
 8059cf7:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059cfd:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 8059cff:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
 8059d02:	83 c4 34             	add    $0x34,%esp
 8059d05:	5b                   	pop    %ebx
 8059d06:	5d                   	pop    %ebp
 8059d07:	c3                   	ret    

08059d08 <rename>:

int rename(const char *oldname, const char *newname)
{
 8059d08:	55                   	push   %ebp
 8059d09:	89 e5                	mov    %esp,%ebp
 8059d0b:	53                   	push   %ebx
 8059d0c:	83 ec 34             	sub    $0x34,%esp
 8059d0f:	e8 e5 04 00 00       	call   805a1f9 <__x86.get_pc_thunk.bx>
 8059d14:	81 c3 4c cb 00 00    	add    $0xcb4c,%ebx
        rename_args_t args;

        args.oldname.as_len = strlen(oldname);
 8059d1a:	8b 45 08             	mov    0x8(%ebp),%eax
 8059d1d:	89 04 24             	mov    %eax,(%esp)
 8059d20:	e8 45 07 00 00       	call   805a46a <strlen>
 8059d25:	89 45 e0             	mov    %eax,-0x20(%ebp)
        args.oldname.as_str = oldname;
 8059d28:	8b 45 08             	mov    0x8(%ebp),%eax
 8059d2b:	89 45 dc             	mov    %eax,-0x24(%ebp)
        args.newname.as_len = strlen(newname);
 8059d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
 8059d31:	89 04 24             	mov    %eax,(%esp)
 8059d34:	e8 31 07 00 00       	call   805a46a <strlen>
 8059d39:	89 45 e8             	mov    %eax,-0x18(%ebp)
        args.newname.as_str = newname;
 8059d3c:	8b 45 0c             	mov    0xc(%ebp),%eax
 8059d3f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        return trap(SYS_rename, (uint32_t) &args);
 8059d42:	8d 45 dc             	lea    -0x24(%ebp),%eax
 8059d45:	c7 45 f4 1b 00 00 00 	movl   $0x1b,-0xc(%ebp)
 8059d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 8059d4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059d52:	8b 55 f0             	mov    -0x10(%ebp),%edx
 8059d55:	cd 2e                	int    $0x2e
 8059d57:	89 45 ec             	mov    %eax,-0x14(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059d5a:	b8 27 00 00 00       	mov    $0x27,%eax
 8059d5f:	cd 2e                	int    $0x2e
 8059d61:	89 c2                	mov    %eax,%edx
 8059d63:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059d69:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 8059d6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
 8059d6e:	83 c4 34             	add    $0x34,%esp
 8059d71:	5b                   	pop    %ebx
 8059d72:	5d                   	pop    %ebp
 8059d73:	c3                   	ret    

08059d74 <chdir>:

int chdir(const char *path)
{
 8059d74:	55                   	push   %ebp
 8059d75:	89 e5                	mov    %esp,%ebp
 8059d77:	53                   	push   %ebx
 8059d78:	83 ec 34             	sub    $0x34,%esp
 8059d7b:	e8 79 04 00 00       	call   805a1f9 <__x86.get_pc_thunk.bx>
 8059d80:	81 c3 e0 ca 00 00    	add    $0xcae0,%ebx
        argstr_t args;
        args.as_len = strlen(path);
 8059d86:	8b 45 08             	mov    0x8(%ebp),%eax
 8059d89:	89 04 24             	mov    %eax,(%esp)
 8059d8c:	e8 d9 06 00 00       	call   805a46a <strlen>
 8059d91:	89 45 e8             	mov    %eax,-0x18(%ebp)
        args.as_str = path;
 8059d94:	8b 45 08             	mov    0x8(%ebp),%eax
 8059d97:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        return trap(SYS_chdir, (uint32_t) &args);
 8059d9a:	8d 45 e4             	lea    -0x1c(%ebp),%eax
 8059d9d:	c7 45 f4 0b 00 00 00 	movl   $0xb,-0xc(%ebp)
 8059da4:	89 45 f0             	mov    %eax,-0x10(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 8059da7:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059daa:	8b 55 f0             	mov    -0x10(%ebp),%edx
 8059dad:	cd 2e                	int    $0x2e
 8059daf:	89 45 ec             	mov    %eax,-0x14(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059db2:	b8 27 00 00 00       	mov    $0x27,%eax
 8059db7:	cd 2e                	int    $0x2e
 8059db9:	89 c2                	mov    %eax,%edx
 8059dbb:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059dc1:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 8059dc3:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
 8059dc6:	83 c4 34             	add    $0x34,%esp
 8059dc9:	5b                   	pop    %ebx
 8059dca:	5d                   	pop    %ebp
 8059dcb:	c3                   	ret    

08059dcc <get_free_mem>:

size_t get_free_mem(void)
{
 8059dcc:	55                   	push   %ebp
 8059dcd:	89 e5                	mov    %esp,%ebp
 8059dcf:	83 ec 10             	sub    $0x10,%esp
 8059dd2:	e8 1e 04 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 8059dd7:	81 c1 89 ca 00 00    	add    $0xca89,%ecx
 8059ddd:	c7 45 fc 29 00 00 00 	movl   $0x29,-0x4(%ebp)
 8059de4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 8059deb:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8059dee:	8b 55 f8             	mov    -0x8(%ebp),%edx
 8059df1:	cd 2e                	int    $0x2e
 8059df3:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059df6:	b8 27 00 00 00       	mov    $0x27,%eax
 8059dfb:	cd 2e                	int    $0x2e
 8059dfd:	89 c2                	mov    %eax,%edx
 8059dff:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059e05:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 8059e07:	8b 45 f4             	mov    -0xc(%ebp),%eax
        return (size_t) trap(SYS_get_free_mem, 0);
}
 8059e0a:	c9                   	leave  
 8059e0b:	c3                   	ret    

08059e0c <execve>:

int execve(const char *filename, char *const argv[], char *const envp[])
{
 8059e0c:	55                   	push   %ebp
 8059e0d:	89 e5                	mov    %esp,%ebp
 8059e0f:	56                   	push   %esi
 8059e10:	53                   	push   %ebx
 8059e11:	83 ec 40             	sub    $0x40,%esp
 8059e14:	e8 e0 03 00 00       	call   805a1f9 <__x86.get_pc_thunk.bx>
 8059e19:	81 c3 47 ca 00 00    	add    $0xca47,%ebx
        execve_args_t           args;

        int i;

        args.filename.as_len = strlen(filename);
 8059e1f:	8b 45 08             	mov    0x8(%ebp),%eax
 8059e22:	89 04 24             	mov    %eax,(%esp)
 8059e25:	e8 40 06 00 00       	call   805a46a <strlen>
 8059e2a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        args.filename.as_str = filename;
 8059e2d:	8b 45 08             	mov    0x8(%ebp),%eax
 8059e30:	89 45 d0             	mov    %eax,-0x30(%ebp)

        /* Build argv vector */
        for (i = 0; argv[i] != NULL; i++)
 8059e33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 8059e3a:	eb 03                	jmp    8059e3f <execve+0x33>
 8059e3c:	ff 45 f4             	incl   -0xc(%ebp)
 8059e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059e42:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 8059e49:	8b 45 0c             	mov    0xc(%ebp),%eax
 8059e4c:	01 d0                	add    %edx,%eax
 8059e4e:	8b 00                	mov    (%eax),%eax
 8059e50:	85 c0                	test   %eax,%eax
 8059e52:	75 e8                	jne    8059e3c <execve+0x30>
                ;
        args.argv.av_len = i;
 8059e54:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059e57:	89 45 dc             	mov    %eax,-0x24(%ebp)
        args.argv.av_vec = malloc((args.argv.av_len + 1) * sizeof(argstr_t));
 8059e5a:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8059e5d:	40                   	inc    %eax
 8059e5e:	c1 e0 03             	shl    $0x3,%eax
 8059e61:	89 04 24             	mov    %eax,(%esp)
 8059e64:	e8 c5 2a 00 00       	call   805c92e <malloc>
 8059e69:	89 45 d8             	mov    %eax,-0x28(%ebp)
        for (i = 0; argv[i] != NULL; i++) {
 8059e6c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 8059e73:	eb 49                	jmp    8059ebe <execve+0xb2>
                args.argv.av_vec[i].as_len = strlen(argv[i]);
 8059e75:	8b 45 d8             	mov    -0x28(%ebp),%eax
 8059e78:	8b 55 f4             	mov    -0xc(%ebp),%edx
 8059e7b:	c1 e2 03             	shl    $0x3,%edx
 8059e7e:	8d 34 10             	lea    (%eax,%edx,1),%esi
 8059e81:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059e84:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 8059e8b:	8b 45 0c             	mov    0xc(%ebp),%eax
 8059e8e:	01 d0                	add    %edx,%eax
 8059e90:	8b 00                	mov    (%eax),%eax
 8059e92:	89 04 24             	mov    %eax,(%esp)
 8059e95:	e8 d0 05 00 00       	call   805a46a <strlen>
 8059e9a:	89 46 04             	mov    %eax,0x4(%esi)
                args.argv.av_vec[i].as_str = argv[i];
 8059e9d:	8b 45 d8             	mov    -0x28(%ebp),%eax
 8059ea0:	8b 55 f4             	mov    -0xc(%ebp),%edx
 8059ea3:	c1 e2 03             	shl    $0x3,%edx
 8059ea6:	01 c2                	add    %eax,%edx
 8059ea8:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059eab:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
 8059eb2:	8b 45 0c             	mov    0xc(%ebp),%eax
 8059eb5:	01 c8                	add    %ecx,%eax
 8059eb7:	8b 00                	mov    (%eax),%eax
 8059eb9:	89 02                	mov    %eax,(%edx)
        /* Build argv vector */
        for (i = 0; argv[i] != NULL; i++)
                ;
        args.argv.av_len = i;
        args.argv.av_vec = malloc((args.argv.av_len + 1) * sizeof(argstr_t));
        for (i = 0; argv[i] != NULL; i++) {
 8059ebb:	ff 45 f4             	incl   -0xc(%ebp)
 8059ebe:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059ec1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 8059ec8:	8b 45 0c             	mov    0xc(%ebp),%eax
 8059ecb:	01 d0                	add    %edx,%eax
 8059ecd:	8b 00                	mov    (%eax),%eax
 8059ecf:	85 c0                	test   %eax,%eax
 8059ed1:	75 a2                	jne    8059e75 <execve+0x69>
                args.argv.av_vec[i].as_len = strlen(argv[i]);
                args.argv.av_vec[i].as_str = argv[i];
        }
        args.argv.av_vec[i].as_len = 0;
 8059ed3:	8b 45 d8             	mov    -0x28(%ebp),%eax
 8059ed6:	8b 55 f4             	mov    -0xc(%ebp),%edx
 8059ed9:	c1 e2 03             	shl    $0x3,%edx
 8059edc:	01 d0                	add    %edx,%eax
 8059ede:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        args.argv.av_vec[i].as_str = NULL;
 8059ee5:	8b 45 d8             	mov    -0x28(%ebp),%eax
 8059ee8:	8b 55 f4             	mov    -0xc(%ebp),%edx
 8059eeb:	c1 e2 03             	shl    $0x3,%edx
 8059eee:	01 d0                	add    %edx,%eax
 8059ef0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

        /* Build envp vector */
        for (i = 0; envp[i] != NULL; i++)
 8059ef6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 8059efd:	eb 03                	jmp    8059f02 <execve+0xf6>
 8059eff:	ff 45 f4             	incl   -0xc(%ebp)
 8059f02:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059f05:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 8059f0c:	8b 45 10             	mov    0x10(%ebp),%eax
 8059f0f:	01 d0                	add    %edx,%eax
 8059f11:	8b 00                	mov    (%eax),%eax
 8059f13:	85 c0                	test   %eax,%eax
 8059f15:	75 e8                	jne    8059eff <execve+0xf3>
                ;
        args.envp.av_len = i;
 8059f17:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059f1a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        args.envp.av_vec = malloc((args.envp.av_len + 1) * sizeof(argstr_t));
 8059f1d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8059f20:	40                   	inc    %eax
 8059f21:	c1 e0 03             	shl    $0x3,%eax
 8059f24:	89 04 24             	mov    %eax,(%esp)
 8059f27:	e8 02 2a 00 00       	call   805c92e <malloc>
 8059f2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        for (i = 0; envp[i] != NULL; i++) {
 8059f2f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 8059f36:	eb 49                	jmp    8059f81 <execve+0x175>
                args.envp.av_vec[i].as_len = strlen(envp[i]);
 8059f38:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8059f3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
 8059f3e:	c1 e2 03             	shl    $0x3,%edx
 8059f41:	8d 34 10             	lea    (%eax,%edx,1),%esi
 8059f44:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059f47:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 8059f4e:	8b 45 10             	mov    0x10(%ebp),%eax
 8059f51:	01 d0                	add    %edx,%eax
 8059f53:	8b 00                	mov    (%eax),%eax
 8059f55:	89 04 24             	mov    %eax,(%esp)
 8059f58:	e8 0d 05 00 00       	call   805a46a <strlen>
 8059f5d:	89 46 04             	mov    %eax,0x4(%esi)
                args.envp.av_vec[i].as_str = envp[i];
 8059f60:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8059f63:	8b 55 f4             	mov    -0xc(%ebp),%edx
 8059f66:	c1 e2 03             	shl    $0x3,%edx
 8059f69:	01 c2                	add    %eax,%edx
 8059f6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059f6e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
 8059f75:	8b 45 10             	mov    0x10(%ebp),%eax
 8059f78:	01 c8                	add    %ecx,%eax
 8059f7a:	8b 00                	mov    (%eax),%eax
 8059f7c:	89 02                	mov    %eax,(%edx)
        /* Build envp vector */
        for (i = 0; envp[i] != NULL; i++)
                ;
        args.envp.av_len = i;
        args.envp.av_vec = malloc((args.envp.av_len + 1) * sizeof(argstr_t));
        for (i = 0; envp[i] != NULL; i++) {
 8059f7e:	ff 45 f4             	incl   -0xc(%ebp)
 8059f81:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8059f84:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 8059f8b:	8b 45 10             	mov    0x10(%ebp),%eax
 8059f8e:	01 d0                	add    %edx,%eax
 8059f90:	8b 00                	mov    (%eax),%eax
 8059f92:	85 c0                	test   %eax,%eax
 8059f94:	75 a2                	jne    8059f38 <execve+0x12c>
                args.envp.av_vec[i].as_len = strlen(envp[i]);
                args.envp.av_vec[i].as_str = envp[i];
        }
        args.envp.av_vec[i].as_len = 0;
 8059f96:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8059f99:	8b 55 f4             	mov    -0xc(%ebp),%edx
 8059f9c:	c1 e2 03             	shl    $0x3,%edx
 8059f9f:	01 d0                	add    %edx,%eax
 8059fa1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        args.envp.av_vec[i].as_str = NULL;
 8059fa8:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8059fab:	8b 55 f4             	mov    -0xc(%ebp),%edx
 8059fae:	c1 e2 03             	shl    $0x3,%edx
 8059fb1:	01 d0                	add    %edx,%eax
 8059fb3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

        /* Note that we don't need to worry about freeing since we are going to exec
         * (so all our memory will be cleaned up) */

        return trap(SYS_execve, (uint32_t) &args);
 8059fb9:	8d 45 d0             	lea    -0x30(%ebp),%eax
 8059fbc:	c7 45 f0 0a 00 00 00 	movl   $0xa,-0x10(%ebp)
 8059fc3:	89 45 ec             	mov    %eax,-0x14(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 8059fc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8059fc9:	8b 55 ec             	mov    -0x14(%ebp),%edx
 8059fcc:	cd 2e                	int    $0x2e
 8059fce:	89 45 e8             	mov    %eax,-0x18(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 8059fd1:	b8 27 00 00 00       	mov    $0x27,%eax
 8059fd6:	cd 2e                	int    $0x2e
 8059fd8:	89 c2                	mov    %eax,%edx
 8059fda:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 8059fe0:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 8059fe2:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
 8059fe5:	83 c4 40             	add    $0x40,%esp
 8059fe8:	5b                   	pop    %ebx
 8059fe9:	5e                   	pop    %esi
 8059fea:	5d                   	pop    %ebp
 8059feb:	c3                   	ret    

08059fec <thr_set_errno>:

void thr_set_errno(int n)
{
 8059fec:	55                   	push   %ebp
 8059fed:	89 e5                	mov    %esp,%ebp
 8059fef:	83 ec 10             	sub    $0x10,%esp
 8059ff2:	e8 fe 01 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 8059ff7:	81 c1 69 c8 00 00    	add    $0xc869,%ecx
        trap(SYS_set_errno, (uint32_t) n);
 8059ffd:	8b 45 08             	mov    0x8(%ebp),%eax
 805a000:	c7 45 fc 2a 00 00 00 	movl   $0x2a,-0x4(%ebp)
 805a007:	89 45 f8             	mov    %eax,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 805a00a:	8b 45 fc             	mov    -0x4(%ebp),%eax
 805a00d:	8b 55 f8             	mov    -0x8(%ebp),%edx
 805a010:	cd 2e                	int    $0x2e
 805a012:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 805a015:	b8 27 00 00 00       	mov    $0x27,%eax
 805a01a:	cd 2e                	int    $0x2e
 805a01c:	89 c2                	mov    %eax,%edx
 805a01e:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 805a024:	89 10                	mov    %edx,(%eax)
}
 805a026:	90                   	nop
 805a027:	c9                   	leave  
 805a028:	c3                   	ret    

0805a029 <thr_errno>:

int thr_errno(void)
{
 805a029:	55                   	push   %ebp
 805a02a:	89 e5                	mov    %esp,%ebp
 805a02c:	83 ec 10             	sub    $0x10,%esp
 805a02f:	e8 c1 01 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 805a034:	81 c1 2c c8 00 00    	add    $0xc82c,%ecx
 805a03a:	c7 45 fc 27 00 00 00 	movl   $0x27,-0x4(%ebp)
 805a041:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 805a048:	8b 45 fc             	mov    -0x4(%ebp),%eax
 805a04b:	8b 55 f8             	mov    -0x8(%ebp),%edx
 805a04e:	cd 2e                	int    $0x2e
 805a050:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 805a053:	b8 27 00 00 00       	mov    $0x27,%eax
 805a058:	cd 2e                	int    $0x2e
 805a05a:	89 c2                	mov    %eax,%edx
 805a05c:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 805a062:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 805a064:	8b 45 f4             	mov    -0xc(%ebp),%eax
        return trap(SYS_errno, 0);
 805a067:	90                   	nop
}
 805a068:	c9                   	leave  
 805a069:	c3                   	ret    

0805a06a <getdents>:

int getdents(int fd, dirent_t *dir, size_t size)
{
 805a06a:	55                   	push   %ebp
 805a06b:	89 e5                	mov    %esp,%ebp
 805a06d:	83 ec 20             	sub    $0x20,%esp
 805a070:	e8 80 01 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 805a075:	81 c1 eb c7 00 00    	add    $0xc7eb,%ecx
        getdents_args_t args;

        args.fd = fd;
 805a07b:	8b 45 08             	mov    0x8(%ebp),%eax
 805a07e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        args.dirp = dir;
 805a081:	8b 45 0c             	mov    0xc(%ebp),%eax
 805a084:	89 45 ec             	mov    %eax,-0x14(%ebp)
        args.count = size;
 805a087:	8b 45 10             	mov    0x10(%ebp),%eax
 805a08a:	89 45 f0             	mov    %eax,-0x10(%ebp)

        return trap(SYS_getdents, (uint32_t) &args);
 805a08d:	8d 45 e8             	lea    -0x18(%ebp),%eax
 805a090:	c7 45 fc 17 00 00 00 	movl   $0x17,-0x4(%ebp)
 805a097:	89 45 f8             	mov    %eax,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 805a09a:	8b 45 fc             	mov    -0x4(%ebp),%eax
 805a09d:	8b 55 f8             	mov    -0x8(%ebp),%edx
 805a0a0:	cd 2e                	int    $0x2e
 805a0a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 805a0a5:	b8 27 00 00 00       	mov    $0x27,%eax
 805a0aa:	cd 2e                	int    $0x2e
 805a0ac:	89 c2                	mov    %eax,%edx
 805a0ae:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 805a0b4:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 805a0b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 805a0b9:	c9                   	leave  
 805a0ba:	c3                   	ret    

0805a0bb <stat>:
}
#endif /* MOUNTING */

int
stat(const char *path, struct stat *buf)
{
 805a0bb:	55                   	push   %ebp
 805a0bc:	89 e5                	mov    %esp,%ebp
 805a0be:	53                   	push   %ebx
 805a0bf:	83 ec 34             	sub    $0x34,%esp
 805a0c2:	e8 32 01 00 00       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805a0c7:	81 c3 99 c7 00 00    	add    $0xc799,%ebx
        stat_args_t args;

        args.path.as_len = strlen(path);
 805a0cd:	8b 45 08             	mov    0x8(%ebp),%eax
 805a0d0:	89 04 24             	mov    %eax,(%esp)
 805a0d3:	e8 92 03 00 00       	call   805a46a <strlen>
 805a0d8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        args.path.as_str = path;
 805a0db:	8b 45 08             	mov    0x8(%ebp),%eax
 805a0de:	89 45 e0             	mov    %eax,-0x20(%ebp)
        args.buf = buf;
 805a0e1:	8b 45 0c             	mov    0xc(%ebp),%eax
 805a0e4:	89 45 e8             	mov    %eax,-0x18(%ebp)

        return trap(SYS_stat, (uint32_t) &args);
 805a0e7:	8d 45 e0             	lea    -0x20(%ebp),%eax
 805a0ea:	c7 45 f4 2f 00 00 00 	movl   $0x2f,-0xc(%ebp)
 805a0f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 805a0f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805a0f7:	8b 55 f0             	mov    -0x10(%ebp),%edx
 805a0fa:	cd 2e                	int    $0x2e
 805a0fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 805a0ff:	b8 27 00 00 00       	mov    $0x27,%eax
 805a104:	cd 2e                	int    $0x2e
 805a106:	89 c2                	mov    %eax,%edx
 805a108:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 805a10e:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 805a110:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
 805a113:	83 c4 34             	add    $0x34,%esp
 805a116:	5b                   	pop    %ebx
 805a117:	5d                   	pop    %ebp
 805a118:	c3                   	ret    

0805a119 <pipe>:

int
pipe(int pipefd[2])
{
 805a119:	55                   	push   %ebp
 805a11a:	89 e5                	mov    %esp,%ebp
 805a11c:	83 ec 10             	sub    $0x10,%esp
 805a11f:	e8 d1 00 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 805a124:	81 c1 3c c7 00 00    	add    $0xc73c,%ecx
        return trap(SYS_pipe, (uint32_t) pipefd);
 805a12a:	8b 45 08             	mov    0x8(%ebp),%eax
 805a12d:	c7 45 fc 12 00 00 00 	movl   $0x12,-0x4(%ebp)
 805a134:	89 45 f8             	mov    %eax,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 805a137:	8b 45 fc             	mov    -0x4(%ebp),%eax
 805a13a:	8b 55 f8             	mov    -0x8(%ebp),%edx
 805a13d:	cd 2e                	int    $0x2e
 805a13f:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 805a142:	b8 27 00 00 00       	mov    $0x27,%eax
 805a147:	cd 2e                	int    $0x2e
 805a149:	89 c2                	mov    %eax,%edx
 805a14b:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 805a151:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 805a153:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805a156:	90                   	nop
}
 805a157:	c9                   	leave  
 805a158:	c3                   	ret    

0805a159 <uname>:

int
uname(struct utsname *buf)
{
 805a159:	55                   	push   %ebp
 805a15a:	89 e5                	mov    %esp,%ebp
 805a15c:	83 ec 10             	sub    $0x10,%esp
 805a15f:	e8 91 00 00 00       	call   805a1f5 <__x86.get_pc_thunk.cx>
 805a164:	81 c1 fc c6 00 00    	add    $0xc6fc,%ecx
        return trap(SYS_uname, (uint32_t) buf);
 805a16a:	8b 45 08             	mov    0x8(%ebp),%eax
 805a16d:	c7 45 fc 1c 00 00 00 	movl   $0x1c,-0x4(%ebp)
 805a174:	89 45 f8             	mov    %eax,-0x8(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 805a177:	8b 45 fc             	mov    -0x4(%ebp),%eax
 805a17a:	8b 55 f8             	mov    -0x8(%ebp),%edx
 805a17d:	cd 2e                	int    $0x2e
 805a17f:	89 45 f4             	mov    %eax,-0xc(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 805a182:	b8 27 00 00 00       	mov    $0x27,%eax
 805a187:	cd 2e                	int    $0x2e
 805a189:	89 c2                	mov    %eax,%edx
 805a18b:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 805a191:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 805a193:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805a196:	90                   	nop
}
 805a197:	c9                   	leave  
 805a198:	c3                   	ret    

0805a199 <debug>:

int
debug(const char *str)
{
 805a199:	55                   	push   %ebp
 805a19a:	89 e5                	mov    %esp,%ebp
 805a19c:	53                   	push   %ebx
 805a19d:	83 ec 34             	sub    $0x34,%esp
 805a1a0:	e8 54 00 00 00       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805a1a5:	81 c3 bb c6 00 00    	add    $0xc6bb,%ebx
        argstr_t argstr;
        argstr.as_len = strlen(str);
 805a1ab:	8b 45 08             	mov    0x8(%ebp),%eax
 805a1ae:	89 04 24             	mov    %eax,(%esp)
 805a1b1:	e8 b4 02 00 00       	call   805a46a <strlen>
 805a1b6:	89 45 e8             	mov    %eax,-0x18(%ebp)
        argstr.as_str = str;
 805a1b9:	8b 45 08             	mov    0x8(%ebp),%eax
 805a1bc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        return trap(SYS_debug, (uint32_t) &argstr);
 805a1bf:	8d 45 e4             	lea    -0x1c(%ebp),%eax
 805a1c2:	c7 45 f4 29 23 00 00 	movl   $0x2329,-0xc(%ebp)
 805a1c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
#define TRAP_INTR_STRING QUOTE(INTR_SYSCALL)

static inline int trap(uint32_t num, uint32_t arg)
{
        int ret;
        __asm__ volatile(
 805a1cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805a1cf:	8b 55 f0             	mov    -0x10(%ebp),%edx
 805a1d2:	cd 2e                	int    $0x2e
 805a1d4:	89 45 ec             	mov    %eax,-0x14(%ebp)
                "int $" TRAP_INTR_STRING
                : "=a"(ret)
                : "a"(num), "d"(arg)
        );
        /* Copy in errno */
        __asm__ volatile(
 805a1d7:	b8 27 00 00 00       	mov    $0x27,%eax
 805a1dc:	cd 2e                	int    $0x2e
 805a1de:	89 c2                	mov    %eax,%edx
 805a1e0:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 805a1e6:	89 10                	mov    %edx,(%eax)
                "int $" TRAP_INTR_STRING
                : "=a"(errno)
                : "a"(SYS_errno)
        );
        return ret;
 805a1e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
 805a1eb:	83 c4 34             	add    $0x34,%esp
 805a1ee:	5b                   	pop    %ebx
 805a1ef:	5d                   	pop    %ebp
 805a1f0:	c3                   	ret    

0805a1f1 <__x86.get_pc_thunk.ax>:
 805a1f1:	8b 04 24             	mov    (%esp),%eax
 805a1f4:	c3                   	ret    

0805a1f5 <__x86.get_pc_thunk.cx>:
 805a1f5:	8b 0c 24             	mov    (%esp),%ecx
 805a1f8:	c3                   	ret    

0805a1f9 <__x86.get_pc_thunk.bx>:
 805a1f9:	8b 1c 24             	mov    (%esp),%ebx
 805a1fc:	c3                   	ret    

0805a1fd <memcmp>:
#include "stdlib.h"
#include "string.h"
#include "errno.h"

int memcmp(const void *cs, const void *ct, size_t count)
{
 805a1fd:	55                   	push   %ebp
 805a1fe:	89 e5                	mov    %esp,%ebp
 805a200:	83 ec 10             	sub    $0x10,%esp
 805a203:	e8 e9 ff ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805a208:	05 58 c6 00 00       	add    $0xc658,%eax
        const unsigned char *su1, *su2;
        signed char res = 0;
 805a20d:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)

        for (su1 = cs, su2 = ct; 0 < count; ++su1, ++su2, count--)
 805a211:	8b 45 08             	mov    0x8(%ebp),%eax
 805a214:	89 45 fc             	mov    %eax,-0x4(%ebp)
 805a217:	8b 45 0c             	mov    0xc(%ebp),%eax
 805a21a:	89 45 f8             	mov    %eax,-0x8(%ebp)
 805a21d:	eb 22                	jmp    805a241 <memcmp+0x44>
                if ((res = *su1 - *su2) != 0)
 805a21f:	8b 45 fc             	mov    -0x4(%ebp),%eax
 805a222:	0f b6 10             	movzbl (%eax),%edx
 805a225:	8b 45 f8             	mov    -0x8(%ebp),%eax
 805a228:	0f b6 00             	movzbl (%eax),%eax
 805a22b:	28 c2                	sub    %al,%dl
 805a22d:	88 d0                	mov    %dl,%al
 805a22f:	88 45 f7             	mov    %al,-0x9(%ebp)
 805a232:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
 805a236:	75 11                	jne    805a249 <memcmp+0x4c>
int memcmp(const void *cs, const void *ct, size_t count)
{
        const unsigned char *su1, *su2;
        signed char res = 0;

        for (su1 = cs, su2 = ct; 0 < count; ++su1, ++su2, count--)
 805a238:	ff 45 fc             	incl   -0x4(%ebp)
 805a23b:	ff 45 f8             	incl   -0x8(%ebp)
 805a23e:	ff 4d 10             	decl   0x10(%ebp)
 805a241:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
 805a245:	75 d8                	jne    805a21f <memcmp+0x22>
 805a247:	eb 01                	jmp    805a24a <memcmp+0x4d>
                if ((res = *su1 - *su2) != 0)
                        break;
 805a249:	90                   	nop
        return res;
 805a24a:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
}
 805a24e:	c9                   	leave  
 805a24f:	c3                   	ret    

0805a250 <memcpy>:

void *memcpy(void *dest, const void *src, size_t count)
{
 805a250:	55                   	push   %ebp
 805a251:	89 e5                	mov    %esp,%ebp
 805a253:	83 ec 10             	sub    $0x10,%esp
 805a256:	e8 96 ff ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805a25b:	05 05 c6 00 00       	add    $0xc605,%eax
        char *tmp = (char *) dest;
 805a260:	8b 45 08             	mov    0x8(%ebp),%eax
 805a263:	89 45 fc             	mov    %eax,-0x4(%ebp)
        const char *s = src;
 805a266:	8b 45 0c             	mov    0xc(%ebp),%eax
 805a269:	89 45 f8             	mov    %eax,-0x8(%ebp)

        while (count--)
 805a26c:	eb 17                	jmp    805a285 <memcpy+0x35>
                *tmp++ = *s++;
 805a26e:	8b 45 fc             	mov    -0x4(%ebp),%eax
 805a271:	8d 50 01             	lea    0x1(%eax),%edx
 805a274:	89 55 fc             	mov    %edx,-0x4(%ebp)
 805a277:	8b 55 f8             	mov    -0x8(%ebp),%edx
 805a27a:	8d 4a 01             	lea    0x1(%edx),%ecx
 805a27d:	89 4d f8             	mov    %ecx,-0x8(%ebp)
 805a280:	0f b6 12             	movzbl (%edx),%edx
 805a283:	88 10                	mov    %dl,(%eax)
void *memcpy(void *dest, const void *src, size_t count)
{
        char *tmp = (char *) dest;
        const char *s = src;

        while (count--)
 805a285:	8b 45 10             	mov    0x10(%ebp),%eax
 805a288:	8d 50 ff             	lea    -0x1(%eax),%edx
 805a28b:	89 55 10             	mov    %edx,0x10(%ebp)
 805a28e:	85 c0                	test   %eax,%eax
 805a290:	75 dc                	jne    805a26e <memcpy+0x1e>
                *tmp++ = *s++;

        return dest;
 805a292:	8b 45 08             	mov    0x8(%ebp),%eax
}
 805a295:	c9                   	leave  
 805a296:	c3                   	ret    

0805a297 <strncmp>:

int strncmp(const char *cs, const char *ct, size_t count)
{
 805a297:	55                   	push   %ebp
 805a298:	89 e5                	mov    %esp,%ebp
 805a29a:	53                   	push   %ebx
 805a29b:	e8 51 ff ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805a2a0:	05 c0 c5 00 00       	add    $0xc5c0,%eax
        register signed char __res = 0;
 805a2a5:	b3 00                	mov    $0x0,%bl

        while (count) {
 805a2a7:	eb 31                	jmp    805a2da <strncmp+0x43>
                if ((__res = *cs - *ct++) != 0 || !*cs++)
 805a2a9:	8b 45 08             	mov    0x8(%ebp),%eax
 805a2ac:	0f b6 00             	movzbl (%eax),%eax
 805a2af:	88 c1                	mov    %al,%cl
 805a2b1:	8b 45 0c             	mov    0xc(%ebp),%eax
 805a2b4:	8d 50 01             	lea    0x1(%eax),%edx
 805a2b7:	89 55 0c             	mov    %edx,0xc(%ebp)
 805a2ba:	0f b6 00             	movzbl (%eax),%eax
 805a2bd:	28 c1                	sub    %al,%cl
 805a2bf:	88 c8                	mov    %cl,%al
 805a2c1:	88 c3                	mov    %al,%bl
 805a2c3:	84 db                	test   %bl,%bl
 805a2c5:	75 19                	jne    805a2e0 <strncmp+0x49>
 805a2c7:	8b 45 08             	mov    0x8(%ebp),%eax
 805a2ca:	8d 50 01             	lea    0x1(%eax),%edx
 805a2cd:	89 55 08             	mov    %edx,0x8(%ebp)
 805a2d0:	0f b6 00             	movzbl (%eax),%eax
 805a2d3:	84 c0                	test   %al,%al
 805a2d5:	74 09                	je     805a2e0 <strncmp+0x49>
                        break;
                count--;
 805a2d7:	ff 4d 10             	decl   0x10(%ebp)

int strncmp(const char *cs, const char *ct, size_t count)
{
        register signed char __res = 0;

        while (count) {
 805a2da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
 805a2de:	75 c9                	jne    805a2a9 <strncmp+0x12>
                if ((__res = *cs - *ct++) != 0 || !*cs++)
                        break;
                count--;
        }

        return __res;
 805a2e0:	0f be c3             	movsbl %bl,%eax
}
 805a2e3:	5b                   	pop    %ebx
 805a2e4:	5d                   	pop    %ebp
 805a2e5:	c3                   	ret    

0805a2e6 <strcmp>:

int strcmp(const char *cs, const char *ct)
{
 805a2e6:	55                   	push   %ebp
 805a2e7:	89 e5                	mov    %esp,%ebp
 805a2e9:	53                   	push   %ebx
 805a2ea:	e8 02 ff ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805a2ef:	05 71 c5 00 00       	add    $0xc571,%eax
        register signed char __res;

        while (1) {
                if ((__res = *cs - *ct++) != 0 || !*cs++)
 805a2f4:	8b 45 08             	mov    0x8(%ebp),%eax
 805a2f7:	0f b6 00             	movzbl (%eax),%eax
 805a2fa:	88 c1                	mov    %al,%cl
 805a2fc:	8b 45 0c             	mov    0xc(%ebp),%eax
 805a2ff:	8d 50 01             	lea    0x1(%eax),%edx
 805a302:	89 55 0c             	mov    %edx,0xc(%ebp)
 805a305:	0f b6 00             	movzbl (%eax),%eax
 805a308:	28 c1                	sub    %al,%cl
 805a30a:	88 c8                	mov    %cl,%al
 805a30c:	88 c3                	mov    %al,%bl
 805a30e:	84 db                	test   %bl,%bl
 805a310:	75 12                	jne    805a324 <strcmp+0x3e>
 805a312:	8b 45 08             	mov    0x8(%ebp),%eax
 805a315:	8d 50 01             	lea    0x1(%eax),%edx
 805a318:	89 55 08             	mov    %edx,0x8(%ebp)
 805a31b:	0f b6 00             	movzbl (%eax),%eax
 805a31e:	84 c0                	test   %al,%al
 805a320:	74 02                	je     805a324 <strcmp+0x3e>
                        break;
        }
 805a322:	eb d0                	jmp    805a2f4 <strcmp+0xe>

        return __res;
 805a324:	0f be c3             	movsbl %bl,%eax
}
 805a327:	5b                   	pop    %ebx
 805a328:	5d                   	pop    %ebp
 805a329:	c3                   	ret    

0805a32a <strcpy>:

char *strcpy(char *dest, const char *src)
{
 805a32a:	55                   	push   %ebp
 805a32b:	89 e5                	mov    %esp,%ebp
 805a32d:	83 ec 10             	sub    $0x10,%esp
 805a330:	e8 bc fe ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805a335:	05 2b c5 00 00       	add    $0xc52b,%eax
        char *tmp = dest;
 805a33a:	8b 45 08             	mov    0x8(%ebp),%eax
 805a33d:	89 45 fc             	mov    %eax,-0x4(%ebp)

        while ((*dest++ = *src++) != '\0')
 805a340:	90                   	nop
 805a341:	8b 45 08             	mov    0x8(%ebp),%eax
 805a344:	8d 50 01             	lea    0x1(%eax),%edx
 805a347:	89 55 08             	mov    %edx,0x8(%ebp)
 805a34a:	8b 55 0c             	mov    0xc(%ebp),%edx
 805a34d:	8d 4a 01             	lea    0x1(%edx),%ecx
 805a350:	89 4d 0c             	mov    %ecx,0xc(%ebp)
 805a353:	0f b6 12             	movzbl (%edx),%edx
 805a356:	88 10                	mov    %dl,(%eax)
 805a358:	0f b6 00             	movzbl (%eax),%eax
 805a35b:	84 c0                	test   %al,%al
 805a35d:	75 e2                	jne    805a341 <strcpy+0x17>
                /* nothing */;
        return tmp;
 805a35f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
 805a362:	c9                   	leave  
 805a363:	c3                   	ret    

0805a364 <strncpy>:

char *strncpy(char *dest, const char *src, size_t count)
{
 805a364:	55                   	push   %ebp
 805a365:	89 e5                	mov    %esp,%ebp
 805a367:	83 ec 10             	sub    $0x10,%esp
 805a36a:	e8 82 fe ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805a36f:	05 f1 c4 00 00       	add    $0xc4f1,%eax
        char *tmp = dest;
 805a374:	8b 45 08             	mov    0x8(%ebp),%eax
 805a377:	89 45 fc             	mov    %eax,-0x4(%ebp)

        while (count-- && (*dest++ = *src++) != '\0')
 805a37a:	90                   	nop
 805a37b:	8b 45 10             	mov    0x10(%ebp),%eax
 805a37e:	8d 50 ff             	lea    -0x1(%eax),%edx
 805a381:	89 55 10             	mov    %edx,0x10(%ebp)
 805a384:	85 c0                	test   %eax,%eax
 805a386:	74 1e                	je     805a3a6 <strncpy+0x42>
 805a388:	8b 45 08             	mov    0x8(%ebp),%eax
 805a38b:	8d 50 01             	lea    0x1(%eax),%edx
 805a38e:	89 55 08             	mov    %edx,0x8(%ebp)
 805a391:	8b 55 0c             	mov    0xc(%ebp),%edx
 805a394:	8d 4a 01             	lea    0x1(%edx),%ecx
 805a397:	89 4d 0c             	mov    %ecx,0xc(%ebp)
 805a39a:	0f b6 12             	movzbl (%edx),%edx
 805a39d:	88 10                	mov    %dl,(%eax)
 805a39f:	0f b6 00             	movzbl (%eax),%eax
 805a3a2:	84 c0                	test   %al,%al
 805a3a4:	75 d5                	jne    805a37b <strncpy+0x17>
                /* nothing */;

        return tmp;
 805a3a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
 805a3a9:	c9                   	leave  
 805a3aa:	c3                   	ret    

0805a3ab <memset>:

void *memset(void *s, int c, size_t count)
{
 805a3ab:	55                   	push   %ebp
 805a3ac:	89 e5                	mov    %esp,%ebp
 805a3ae:	83 ec 10             	sub    $0x10,%esp
 805a3b1:	e8 3b fe ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805a3b6:	05 aa c4 00 00       	add    $0xc4aa,%eax
        char *xs = (char *) s;
 805a3bb:	8b 45 08             	mov    0x8(%ebp),%eax
 805a3be:	89 45 fc             	mov    %eax,-0x4(%ebp)

        while (count--)
 805a3c1:	eb 0e                	jmp    805a3d1 <memset+0x26>
                *xs++ = c;
 805a3c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
 805a3c6:	8d 50 01             	lea    0x1(%eax),%edx
 805a3c9:	89 55 fc             	mov    %edx,-0x4(%ebp)
 805a3cc:	8b 55 0c             	mov    0xc(%ebp),%edx
 805a3cf:	88 10                	mov    %dl,(%eax)

void *memset(void *s, int c, size_t count)
{
        char *xs = (char *) s;

        while (count--)
 805a3d1:	8b 45 10             	mov    0x10(%ebp),%eax
 805a3d4:	8d 50 ff             	lea    -0x1(%eax),%edx
 805a3d7:	89 55 10             	mov    %edx,0x10(%ebp)
 805a3da:	85 c0                	test   %eax,%eax
 805a3dc:	75 e5                	jne    805a3c3 <memset+0x18>
                *xs++ = c;

        return s;
 805a3de:	8b 45 08             	mov    0x8(%ebp),%eax
}
 805a3e1:	c9                   	leave  
 805a3e2:	c3                   	ret    

0805a3e3 <strnlen>:

size_t strnlen(const char *s, size_t count)
{
 805a3e3:	55                   	push   %ebp
 805a3e4:	89 e5                	mov    %esp,%ebp
 805a3e6:	83 ec 10             	sub    $0x10,%esp
 805a3e9:	e8 03 fe ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805a3ee:	05 72 c4 00 00       	add    $0xc472,%eax
        const char *sc;

        for (sc = s; count-- && *sc != '\0'; ++sc)
 805a3f3:	8b 45 08             	mov    0x8(%ebp),%eax
 805a3f6:	89 45 fc             	mov    %eax,-0x4(%ebp)
 805a3f9:	eb 03                	jmp    805a3fe <strnlen+0x1b>
 805a3fb:	ff 45 fc             	incl   -0x4(%ebp)
 805a3fe:	8b 45 0c             	mov    0xc(%ebp),%eax
 805a401:	8d 50 ff             	lea    -0x1(%eax),%edx
 805a404:	89 55 0c             	mov    %edx,0xc(%ebp)
 805a407:	85 c0                	test   %eax,%eax
 805a409:	74 0a                	je     805a415 <strnlen+0x32>
 805a40b:	8b 45 fc             	mov    -0x4(%ebp),%eax
 805a40e:	0f b6 00             	movzbl (%eax),%eax
 805a411:	84 c0                	test   %al,%al
 805a413:	75 e6                	jne    805a3fb <strnlen+0x18>
                /* nothing */;
        return sc - s;
 805a415:	8b 55 fc             	mov    -0x4(%ebp),%edx
 805a418:	8b 45 08             	mov    0x8(%ebp),%eax
 805a41b:	29 c2                	sub    %eax,%edx
 805a41d:	89 d0                	mov    %edx,%eax
}
 805a41f:	c9                   	leave  
 805a420:	c3                   	ret    

0805a421 <strcat>:


char *strcat(char *dest, const char *src)
{
 805a421:	55                   	push   %ebp
 805a422:	89 e5                	mov    %esp,%ebp
 805a424:	83 ec 10             	sub    $0x10,%esp
 805a427:	e8 c5 fd ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805a42c:	05 34 c4 00 00       	add    $0xc434,%eax
        char *tmp = dest;
 805a431:	8b 45 08             	mov    0x8(%ebp),%eax
 805a434:	89 45 fc             	mov    %eax,-0x4(%ebp)

        while (*dest)
 805a437:	eb 03                	jmp    805a43c <strcat+0x1b>
                dest++;
 805a439:	ff 45 08             	incl   0x8(%ebp)

char *strcat(char *dest, const char *src)
{
        char *tmp = dest;

        while (*dest)
 805a43c:	8b 45 08             	mov    0x8(%ebp),%eax
 805a43f:	0f b6 00             	movzbl (%eax),%eax
 805a442:	84 c0                	test   %al,%al
 805a444:	75 f3                	jne    805a439 <strcat+0x18>
                dest++;

        while ((*dest++ = *src++) != '\0');
 805a446:	90                   	nop
 805a447:	8b 45 08             	mov    0x8(%ebp),%eax
 805a44a:	8d 50 01             	lea    0x1(%eax),%edx
 805a44d:	89 55 08             	mov    %edx,0x8(%ebp)
 805a450:	8b 55 0c             	mov    0xc(%ebp),%edx
 805a453:	8d 4a 01             	lea    0x1(%edx),%ecx
 805a456:	89 4d 0c             	mov    %ecx,0xc(%ebp)
 805a459:	0f b6 12             	movzbl (%edx),%edx
 805a45c:	88 10                	mov    %dl,(%eax)
 805a45e:	0f b6 00             	movzbl (%eax),%eax
 805a461:	84 c0                	test   %al,%al
 805a463:	75 e2                	jne    805a447 <strcat+0x26>

        return tmp;
 805a465:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
 805a468:	c9                   	leave  
 805a469:	c3                   	ret    

0805a46a <strlen>:

size_t strlen(const char *s)
{
 805a46a:	55                   	push   %ebp
 805a46b:	89 e5                	mov    %esp,%ebp
 805a46d:	83 ec 10             	sub    $0x10,%esp
 805a470:	e8 7c fd ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805a475:	05 eb c3 00 00       	add    $0xc3eb,%eax
        const char *sc;

        for (sc = s; *sc != '\0'; ++sc)
 805a47a:	8b 45 08             	mov    0x8(%ebp),%eax
 805a47d:	89 45 fc             	mov    %eax,-0x4(%ebp)
 805a480:	eb 03                	jmp    805a485 <strlen+0x1b>
 805a482:	ff 45 fc             	incl   -0x4(%ebp)
 805a485:	8b 45 fc             	mov    -0x4(%ebp),%eax
 805a488:	0f b6 00             	movzbl (%eax),%eax
 805a48b:	84 c0                	test   %al,%al
 805a48d:	75 f3                	jne    805a482 <strlen+0x18>
                /* nothing */;
        return sc - s;
 805a48f:	8b 55 fc             	mov    -0x4(%ebp),%edx
 805a492:	8b 45 08             	mov    0x8(%ebp),%eax
 805a495:	29 c2                	sub    %eax,%edx
 805a497:	89 d0                	mov    %edx,%eax
}
 805a499:	c9                   	leave  
 805a49a:	c3                   	ret    

0805a49b <strchr>:

char *strchr(const char *s, int c)
{
 805a49b:	55                   	push   %ebp
 805a49c:	89 e5                	mov    %esp,%ebp
 805a49e:	e8 4e fd ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805a4a3:	05 bd c3 00 00       	add    $0xc3bd,%eax
        for (; *s != (char) c; ++s)
 805a4a8:	eb 14                	jmp    805a4be <strchr+0x23>
                if (*s == '\0')
 805a4aa:	8b 45 08             	mov    0x8(%ebp),%eax
 805a4ad:	0f b6 00             	movzbl (%eax),%eax
 805a4b0:	84 c0                	test   %al,%al
 805a4b2:	75 07                	jne    805a4bb <strchr+0x20>
                        return NULL;
 805a4b4:	b8 00 00 00 00       	mov    $0x0,%eax
 805a4b9:	eb 13                	jmp    805a4ce <strchr+0x33>
        return sc - s;
}

char *strchr(const char *s, int c)
{
        for (; *s != (char) c; ++s)
 805a4bb:	ff 45 08             	incl   0x8(%ebp)
 805a4be:	8b 45 08             	mov    0x8(%ebp),%eax
 805a4c1:	0f b6 00             	movzbl (%eax),%eax
 805a4c4:	8b 55 0c             	mov    0xc(%ebp),%edx
 805a4c7:	38 d0                	cmp    %dl,%al
 805a4c9:	75 df                	jne    805a4aa <strchr+0xf>
                if (*s == '\0')
                        return NULL;
        return (char *)s;
 805a4cb:	8b 45 08             	mov    0x8(%ebp),%eax
}
 805a4ce:	5d                   	pop    %ebp
 805a4cf:	c3                   	ret    

0805a4d0 <strrchr>:

char *strrchr(const char *s, int c)
{
 805a4d0:	55                   	push   %ebp
 805a4d1:	89 e5                	mov    %esp,%ebp
 805a4d3:	83 ec 10             	sub    $0x10,%esp
 805a4d6:	e8 16 fd ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805a4db:	05 85 c3 00 00       	add    $0xc385,%eax
        char *r = NULL;
 805a4e0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
        for (; *s; ++s)
 805a4e7:	eb 16                	jmp    805a4ff <strrchr+0x2f>
                if (*s == (char)c)
 805a4e9:	8b 45 08             	mov    0x8(%ebp),%eax
 805a4ec:	0f b6 00             	movzbl (%eax),%eax
 805a4ef:	8b 55 0c             	mov    0xc(%ebp),%edx
 805a4f2:	38 d0                	cmp    %dl,%al
 805a4f4:	75 06                	jne    805a4fc <strrchr+0x2c>
                        r = (char *)s;
 805a4f6:	8b 45 08             	mov    0x8(%ebp),%eax
 805a4f9:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

char *strrchr(const char *s, int c)
{
        char *r = NULL;
        for (; *s; ++s)
 805a4fc:	ff 45 08             	incl   0x8(%ebp)
 805a4ff:	8b 45 08             	mov    0x8(%ebp),%eax
 805a502:	0f b6 00             	movzbl (%eax),%eax
 805a505:	84 c0                	test   %al,%al
 805a507:	75 e0                	jne    805a4e9 <strrchr+0x19>
                if (*s == (char)c)
                        r = (char *)s;
        return r;
 805a509:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
 805a50c:	c9                   	leave  
 805a50d:	c3                   	ret    

0805a50e <strstr>:

char *strstr(const char *s1, const char *s2)
{
 805a50e:	55                   	push   %ebp
 805a50f:	89 e5                	mov    %esp,%ebp
 805a511:	53                   	push   %ebx
 805a512:	83 ec 24             	sub    $0x24,%esp
 805a515:	e8 df fc ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805a51a:	81 c3 46 c3 00 00    	add    $0xc346,%ebx
        int l1, l2;

        l2 = strlen(s2);
 805a520:	8b 45 0c             	mov    0xc(%ebp),%eax
 805a523:	89 04 24             	mov    %eax,(%esp)
 805a526:	e8 3f ff ff ff       	call   805a46a <strlen>
 805a52b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (!l2)
 805a52e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
 805a532:	75 05                	jne    805a539 <strstr+0x2b>
                return (char *) s1;
 805a534:	8b 45 08             	mov    0x8(%ebp),%eax
 805a537:	eb 45                	jmp    805a57e <strstr+0x70>
        l1 = strlen(s1);
 805a539:	8b 45 08             	mov    0x8(%ebp),%eax
 805a53c:	89 04 24             	mov    %eax,(%esp)
 805a53f:	e8 26 ff ff ff       	call   805a46a <strlen>
 805a544:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (l1 >= l2) {
 805a547:	eb 28                	jmp    805a571 <strstr+0x63>
                l1--;
 805a549:	ff 4d f4             	decl   -0xc(%ebp)
                if (!memcmp(s1, s2, l2))
 805a54c:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805a54f:	89 44 24 08          	mov    %eax,0x8(%esp)
 805a553:	8b 45 0c             	mov    0xc(%ebp),%eax
 805a556:	89 44 24 04          	mov    %eax,0x4(%esp)
 805a55a:	8b 45 08             	mov    0x8(%ebp),%eax
 805a55d:	89 04 24             	mov    %eax,(%esp)
 805a560:	e8 98 fc ff ff       	call   805a1fd <memcmp>
 805a565:	85 c0                	test   %eax,%eax
 805a567:	75 05                	jne    805a56e <strstr+0x60>
                        return (char *) s1;
 805a569:	8b 45 08             	mov    0x8(%ebp),%eax
 805a56c:	eb 10                	jmp    805a57e <strstr+0x70>
                s1++;
 805a56e:	ff 45 08             	incl   0x8(%ebp)

        l2 = strlen(s2);
        if (!l2)
                return (char *) s1;
        l1 = strlen(s1);
        while (l1 >= l2) {
 805a571:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805a574:	3b 45 f0             	cmp    -0x10(%ebp),%eax
 805a577:	7d d0                	jge    805a549 <strstr+0x3b>
                l1--;
                if (!memcmp(s1, s2, l2))
                        return (char *) s1;
                s1++;
        }
        return NULL;
 805a579:	b8 00 00 00 00       	mov    $0x0,%eax
}
 805a57e:	83 c4 24             	add    $0x24,%esp
 805a581:	5b                   	pop    %ebx
 805a582:	5d                   	pop    %ebp
 805a583:	c3                   	ret    

0805a584 <strdup>:

char *strdup(const char *s)
{
 805a584:	55                   	push   %ebp
 805a585:	89 e5                	mov    %esp,%ebp
 805a587:	e8 65 fc ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805a58c:	05 d4 c2 00 00       	add    $0xc2d4,%eax
        /* TODO - alvin */
        return NULL;
 805a591:	b8 00 00 00 00       	mov    $0x0,%eax
}
 805a596:	5d                   	pop    %ebp
 805a597:	c3                   	ret    

0805a598 <strpbrk>:
 * Got this from /onnv-gate/usr/src/common/uti/string.c.
 */

char *
strpbrk(const char *string, const char *brkset)
{
 805a598:	55                   	push   %ebp
 805a599:	89 e5                	mov    %esp,%ebp
 805a59b:	83 ec 10             	sub    $0x10,%esp
 805a59e:	e8 4e fc ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805a5a3:	05 bd c2 00 00       	add    $0xc2bd,%eax
        const char *p;

        do {
                for (p = brkset; *p != '\0' && *p != *string; ++p)
 805a5a8:	8b 45 0c             	mov    0xc(%ebp),%eax
 805a5ab:	89 45 fc             	mov    %eax,-0x4(%ebp)
 805a5ae:	eb 03                	jmp    805a5b3 <strpbrk+0x1b>
 805a5b0:	ff 45 fc             	incl   -0x4(%ebp)
 805a5b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
 805a5b6:	0f b6 00             	movzbl (%eax),%eax
 805a5b9:	84 c0                	test   %al,%al
 805a5bb:	74 10                	je     805a5cd <strpbrk+0x35>
 805a5bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
 805a5c0:	0f b6 10             	movzbl (%eax),%edx
 805a5c3:	8b 45 08             	mov    0x8(%ebp),%eax
 805a5c6:	0f b6 00             	movzbl (%eax),%eax
 805a5c9:	38 c2                	cmp    %al,%dl
 805a5cb:	75 e3                	jne    805a5b0 <strpbrk+0x18>
                        ;
                if (*p != '\0')
 805a5cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
 805a5d0:	0f b6 00             	movzbl (%eax),%eax
 805a5d3:	84 c0                	test   %al,%al
 805a5d5:	74 05                	je     805a5dc <strpbrk+0x44>
                        return ((char *)string);
 805a5d7:	8b 45 08             	mov    0x8(%ebp),%eax
 805a5da:	eb 15                	jmp    805a5f1 <strpbrk+0x59>
        } while (*string++);
 805a5dc:	8b 45 08             	mov    0x8(%ebp),%eax
 805a5df:	8d 50 01             	lea    0x1(%eax),%edx
 805a5e2:	89 55 08             	mov    %edx,0x8(%ebp)
 805a5e5:	0f b6 00             	movzbl (%eax),%eax
 805a5e8:	84 c0                	test   %al,%al
 805a5ea:	75 bc                	jne    805a5a8 <strpbrk+0x10>

        return (NULL);
 805a5ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
 805a5f1:	c9                   	leave  
 805a5f2:	c3                   	ret    

0805a5f3 <strspn>:

size_t
strspn(const char *string, const char *charset)
{
 805a5f3:	55                   	push   %ebp
 805a5f4:	89 e5                	mov    %esp,%ebp
 805a5f6:	83 ec 10             	sub    $0x10,%esp
 805a5f9:	e8 f3 fb ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805a5fe:	05 62 c2 00 00       	add    $0xc262,%eax
        const char *p, *q;

        for (q = string; *q != '\0'; ++q) {
 805a603:	8b 45 08             	mov    0x8(%ebp),%eax
 805a606:	89 45 f8             	mov    %eax,-0x8(%ebp)
 805a609:	eb 32                	jmp    805a63d <strspn+0x4a>
                for (p = charset; *p != '\0' && *p != *q; ++p)
 805a60b:	8b 45 0c             	mov    0xc(%ebp),%eax
 805a60e:	89 45 fc             	mov    %eax,-0x4(%ebp)
 805a611:	eb 03                	jmp    805a616 <strspn+0x23>
 805a613:	ff 45 fc             	incl   -0x4(%ebp)
 805a616:	8b 45 fc             	mov    -0x4(%ebp),%eax
 805a619:	0f b6 00             	movzbl (%eax),%eax
 805a61c:	84 c0                	test   %al,%al
 805a61e:	74 10                	je     805a630 <strspn+0x3d>
 805a620:	8b 45 fc             	mov    -0x4(%ebp),%eax
 805a623:	0f b6 10             	movzbl (%eax),%edx
 805a626:	8b 45 f8             	mov    -0x8(%ebp),%eax
 805a629:	0f b6 00             	movzbl (%eax),%eax
 805a62c:	38 c2                	cmp    %al,%dl
 805a62e:	75 e3                	jne    805a613 <strspn+0x20>
                        ;
                if (*p == '\0')
 805a630:	8b 45 fc             	mov    -0x4(%ebp),%eax
 805a633:	0f b6 00             	movzbl (%eax),%eax
 805a636:	84 c0                	test   %al,%al
 805a638:	74 0f                	je     805a649 <strspn+0x56>
size_t
strspn(const char *string, const char *charset)
{
        const char *p, *q;

        for (q = string; *q != '\0'; ++q) {
 805a63a:	ff 45 f8             	incl   -0x8(%ebp)
 805a63d:	8b 45 f8             	mov    -0x8(%ebp),%eax
 805a640:	0f b6 00             	movzbl (%eax),%eax
 805a643:	84 c0                	test   %al,%al
 805a645:	75 c4                	jne    805a60b <strspn+0x18>
 805a647:	eb 01                	jmp    805a64a <strspn+0x57>
                for (p = charset; *p != '\0' && *p != *q; ++p)
                        ;
                if (*p == '\0')
                        break;
 805a649:	90                   	nop
        }

        return (q - string);
 805a64a:	8b 55 f8             	mov    -0x8(%ebp),%edx
 805a64d:	8b 45 08             	mov    0x8(%ebp),%eax
 805a650:	29 c2                	sub    %eax,%edx
 805a652:	89 d0                	mov    %edx,%eax
}
 805a654:	c9                   	leave  
 805a655:	c3                   	ret    

0805a656 <strtok>:

char *
strtok(char *string, const char *sepset)
{
 805a656:	55                   	push   %ebp
 805a657:	89 e5                	mov    %esp,%ebp
 805a659:	53                   	push   %ebx
 805a65a:	83 ec 24             	sub    $0x24,%esp
 805a65d:	e8 97 fb ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805a662:	81 c3 fe c1 00 00    	add    $0xc1fe,%ebx
        static char     *savept;

        /*
         * Set `p' to our current location in the string.
         */
        p = (string == NULL) ? savept : string;
 805a668:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 805a66c:	75 08                	jne    805a676 <strtok+0x20>
 805a66e:	8b 83 64 02 00 00    	mov    0x264(%ebx),%eax
 805a674:	eb 03                	jmp    805a679 <strtok+0x23>
 805a676:	8b 45 08             	mov    0x8(%ebp),%eax
 805a679:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (p == NULL)
 805a67c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 805a680:	75 07                	jne    805a689 <strtok+0x33>
                return (NULL);
 805a682:	b8 00 00 00 00       	mov    $0x0,%eax
 805a687:	eb 69                	jmp    805a6f2 <strtok+0x9c>

        /*
         * Skip leading separators; bail if no tokens remain.
         */
        q = p + strspn(p, sepset);
 805a689:	8b 45 0c             	mov    0xc(%ebp),%eax
 805a68c:	89 44 24 04          	mov    %eax,0x4(%esp)
 805a690:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805a693:	89 04 24             	mov    %eax,(%esp)
 805a696:	e8 58 ff ff ff       	call   805a5f3 <strspn>
 805a69b:	89 c2                	mov    %eax,%edx
 805a69d:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805a6a0:	01 d0                	add    %edx,%eax
 805a6a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (*q == '\0')
 805a6a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805a6a8:	0f b6 00             	movzbl (%eax),%eax
 805a6ab:	84 c0                	test   %al,%al
 805a6ad:	75 07                	jne    805a6b6 <strtok+0x60>
                return (NULL);
 805a6af:	b8 00 00 00 00       	mov    $0x0,%eax
 805a6b4:	eb 3c                	jmp    805a6f2 <strtok+0x9c>

        /*
         * Mark the end of the token and set `savept' for the next iteration.
         */
        if ((r = strpbrk(q, sepset)) == NULL)
 805a6b6:	8b 45 0c             	mov    0xc(%ebp),%eax
 805a6b9:	89 44 24 04          	mov    %eax,0x4(%esp)
 805a6bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805a6c0:	89 04 24             	mov    %eax,(%esp)
 805a6c3:	e8 d0 fe ff ff       	call   805a598 <strpbrk>
 805a6c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
 805a6cb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
 805a6cf:	75 0c                	jne    805a6dd <strtok+0x87>
                savept = NULL;
 805a6d1:	c7 83 64 02 00 00 00 	movl   $0x0,0x264(%ebx)
 805a6d8:	00 00 00 
 805a6db:	eb 12                	jmp    805a6ef <strtok+0x99>
        else {
                *r = '\0';
 805a6dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805a6e0:	c6 00 00             	movb   $0x0,(%eax)
                savept = ++r;
 805a6e3:	ff 45 ec             	incl   -0x14(%ebp)
 805a6e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805a6e9:	89 83 64 02 00 00    	mov    %eax,0x264(%ebx)
        }

        return (q);
 805a6ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
 805a6f2:	83 c4 24             	add    $0x24,%esp
 805a6f5:	5b                   	pop    %ebx
 805a6f6:	5d                   	pop    %ebp
 805a6f7:	c3                   	ret    

0805a6f8 <strerror>:

/* created with the help of:
 * perl -p -e 's/#define\s+(\w+)\s+\d+\s+\/\* ([^\t\*]+)\s*\*\/\s*$/case $1: return "$2";\n/' < /usr/include/sys/errno.h
 */
char *strerror(int errnum)
{
 805a6f8:	55                   	push   %ebp
 805a6f9:	89 e5                	mov    %esp,%ebp
 805a6fb:	e8 f1 fa ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805a700:	05 60 c1 00 00       	add    $0xc160,%eax
        switch (errnum) {
 805a705:	81 7d 08 83 00 00 00 	cmpl   $0x83,0x8(%ebp)
 805a70c:	0f 87 e8 04 00 00    	ja     805abfa <.L90>
 805a712:	8b 55 08             	mov    0x8(%ebp),%edx
 805a715:	c1 e2 02             	shl    $0x2,%edx
 805a718:	8b 94 02 ec d4 ff ff 	mov    -0x2b14(%edx,%eax,1),%edx
 805a71f:	01 c2                	add    %eax,%edx
 805a721:	ff e2                	jmp    *%edx

0805a723 <.L91>:
                case EPERM: return "Not super-user";
 805a723:	8d 80 30 ca ff ff    	lea    -0x35d0(%eax),%eax
 805a729:	e9 d1 04 00 00       	jmp    805abff <.L90+0x5>

0805a72e <.L93>:
                case ENOENT: return "No such file or directory";
 805a72e:	8d 80 3f ca ff ff    	lea    -0x35c1(%eax),%eax
 805a734:	e9 c6 04 00 00       	jmp    805abff <.L90+0x5>

0805a739 <.L94>:
                case ESRCH: return "No such process";
 805a739:	8d 80 59 ca ff ff    	lea    -0x35a7(%eax),%eax
 805a73f:	e9 bb 04 00 00       	jmp    805abff <.L90+0x5>

0805a744 <.L95>:
                case EINTR: return "interrupted system call";
 805a744:	8d 80 69 ca ff ff    	lea    -0x3597(%eax),%eax
 805a74a:	e9 b0 04 00 00       	jmp    805abff <.L90+0x5>

0805a74f <.L96>:
                case EIO: return "I/O error";
 805a74f:	8d 80 81 ca ff ff    	lea    -0x357f(%eax),%eax
 805a755:	e9 a5 04 00 00       	jmp    805abff <.L90+0x5>

0805a75a <.L97>:
                case ENXIO: return "No such device or address";
 805a75a:	8d 80 8b ca ff ff    	lea    -0x3575(%eax),%eax
 805a760:	e9 9a 04 00 00       	jmp    805abff <.L90+0x5>

0805a765 <.L98>:
                case E2BIG: return "Arg list too long";
 805a765:	8d 80 a5 ca ff ff    	lea    -0x355b(%eax),%eax
 805a76b:	e9 8f 04 00 00       	jmp    805abff <.L90+0x5>

0805a770 <.L99>:
                case ENOEXEC: return "Exec format error";
 805a770:	8d 80 b7 ca ff ff    	lea    -0x3549(%eax),%eax
 805a776:	e9 84 04 00 00       	jmp    805abff <.L90+0x5>

0805a77b <.L100>:
                case EBADF: return "Bad file number";
 805a77b:	8d 80 c9 ca ff ff    	lea    -0x3537(%eax),%eax
 805a781:	e9 79 04 00 00       	jmp    805abff <.L90+0x5>

0805a786 <.L101>:
                case ECHILD: return "No children";
 805a786:	8d 80 d9 ca ff ff    	lea    -0x3527(%eax),%eax
 805a78c:	e9 6e 04 00 00       	jmp    805abff <.L90+0x5>

0805a791 <.L102>:
                case EAGAIN: return "Resource temporarily unavailable";
 805a791:	8d 80 e8 ca ff ff    	lea    -0x3518(%eax),%eax
 805a797:	e9 63 04 00 00       	jmp    805abff <.L90+0x5>

0805a79c <.L103>:
                case ENOMEM: return "Not enough core";
 805a79c:	8d 80 09 cb ff ff    	lea    -0x34f7(%eax),%eax
 805a7a2:	e9 58 04 00 00       	jmp    805abff <.L90+0x5>

0805a7a7 <.L104>:
                case EACCES: return "Permission denied";
 805a7a7:	8d 80 19 cb ff ff    	lea    -0x34e7(%eax),%eax
 805a7ad:	e9 4d 04 00 00       	jmp    805abff <.L90+0x5>

0805a7b2 <.L105>:
                case EFAULT: return "Bad address";
 805a7b2:	8d 80 2b cb ff ff    	lea    -0x34d5(%eax),%eax
 805a7b8:	e9 42 04 00 00       	jmp    805abff <.L90+0x5>

0805a7bd <.L106>:
                case ENOTBLK: return "Block device required";
 805a7bd:	8d 80 37 cb ff ff    	lea    -0x34c9(%eax),%eax
 805a7c3:	e9 37 04 00 00       	jmp    805abff <.L90+0x5>

0805a7c8 <.L107>:
                case EBUSY: return "Mount device busy";
 805a7c8:	8d 80 4d cb ff ff    	lea    -0x34b3(%eax),%eax
 805a7ce:	e9 2c 04 00 00       	jmp    805abff <.L90+0x5>

0805a7d3 <.L108>:
                case EEXIST: return "File exists";
 805a7d3:	8d 80 5f cb ff ff    	lea    -0x34a1(%eax),%eax
 805a7d9:	e9 21 04 00 00       	jmp    805abff <.L90+0x5>

0805a7de <.L109>:
                case EXDEV: return "Cross-device link";
 805a7de:	8d 80 6b cb ff ff    	lea    -0x3495(%eax),%eax
 805a7e4:	e9 16 04 00 00       	jmp    805abff <.L90+0x5>

0805a7e9 <.L110>:
                case ENODEV: return "No such device";
 805a7e9:	8d 80 7d cb ff ff    	lea    -0x3483(%eax),%eax
 805a7ef:	e9 0b 04 00 00       	jmp    805abff <.L90+0x5>

0805a7f4 <.L111>:
                case ENOTDIR: return "Not a directory";
 805a7f4:	8d 80 8c cb ff ff    	lea    -0x3474(%eax),%eax
 805a7fa:	e9 00 04 00 00       	jmp    805abff <.L90+0x5>

0805a7ff <.L112>:
                case EISDIR: return "Is a directory";
 805a7ff:	8d 80 9c cb ff ff    	lea    -0x3464(%eax),%eax
 805a805:	e9 f5 03 00 00       	jmp    805abff <.L90+0x5>

0805a80a <.L113>:
                case EINVAL: return "Invalid argument";
 805a80a:	8d 80 ab cb ff ff    	lea    -0x3455(%eax),%eax
 805a810:	e9 ea 03 00 00       	jmp    805abff <.L90+0x5>

0805a815 <.L114>:
                case ENFILE: return "File table overflow";
 805a815:	8d 80 bc cb ff ff    	lea    -0x3444(%eax),%eax
 805a81b:	e9 df 03 00 00       	jmp    805abff <.L90+0x5>

0805a820 <.L115>:
                case EMFILE: return "Too many open files";
 805a820:	8d 80 d0 cb ff ff    	lea    -0x3430(%eax),%eax
 805a826:	e9 d4 03 00 00       	jmp    805abff <.L90+0x5>

0805a82b <.L116>:
                case ENOTTY: return "Inappropriate ioctl for device";
 805a82b:	8d 80 e4 cb ff ff    	lea    -0x341c(%eax),%eax
 805a831:	e9 c9 03 00 00       	jmp    805abff <.L90+0x5>

0805a836 <.L117>:
                case ETXTBSY: return "Text file busy";
 805a836:	8d 80 03 cc ff ff    	lea    -0x33fd(%eax),%eax
 805a83c:	e9 be 03 00 00       	jmp    805abff <.L90+0x5>

0805a841 <.L118>:
                case EFBIG: return "File too large";
 805a841:	8d 80 12 cc ff ff    	lea    -0x33ee(%eax),%eax
 805a847:	e9 b3 03 00 00       	jmp    805abff <.L90+0x5>

0805a84c <.L119>:
                case ENOSPC: return "No space left on device";
 805a84c:	8d 80 21 cc ff ff    	lea    -0x33df(%eax),%eax
 805a852:	e9 a8 03 00 00       	jmp    805abff <.L90+0x5>

0805a857 <.L120>:
                case ESPIPE: return "Illegal seek";
 805a857:	8d 80 39 cc ff ff    	lea    -0x33c7(%eax),%eax
 805a85d:	e9 9d 03 00 00       	jmp    805abff <.L90+0x5>

0805a862 <.L121>:
                case EROFS: return "Read only file system";
 805a862:	8d 80 46 cc ff ff    	lea    -0x33ba(%eax),%eax
 805a868:	e9 92 03 00 00       	jmp    805abff <.L90+0x5>

0805a86d <.L122>:
                case EMLINK: return "Too many links";
 805a86d:	8d 80 5c cc ff ff    	lea    -0x33a4(%eax),%eax
 805a873:	e9 87 03 00 00       	jmp    805abff <.L90+0x5>

0805a878 <.L123>:
                case EPIPE: return "Broken pipe";
 805a878:	8d 80 6b cc ff ff    	lea    -0x3395(%eax),%eax
 805a87e:	e9 7c 03 00 00       	jmp    805abff <.L90+0x5>

0805a883 <.L124>:
                case EDOM: return "Math arg out of domain of func";
 805a883:	8d 80 78 cc ff ff    	lea    -0x3388(%eax),%eax
 805a889:	e9 71 03 00 00       	jmp    805abff <.L90+0x5>

0805a88e <.L125>:
                case ERANGE: return "Math result not representable";
 805a88e:	8d 80 97 cc ff ff    	lea    -0x3369(%eax),%eax
 805a894:	e9 66 03 00 00       	jmp    805abff <.L90+0x5>

0805a899 <.L132>:
                case ENOMSG: return "No message of desired type";
 805a899:	8d 80 b5 cc ff ff    	lea    -0x334b(%eax),%eax
 805a89f:	e9 5b 03 00 00       	jmp    805abff <.L90+0x5>

0805a8a4 <.L133>:
                case EIDRM: return "Identifier removed";
 805a8a4:	8d 80 d0 cc ff ff    	lea    -0x3330(%eax),%eax
 805a8aa:	e9 50 03 00 00       	jmp    805abff <.L90+0x5>

0805a8af <.L134>:
                case ECHRNG: return "Channel number out of range";
 805a8af:	8d 80 e3 cc ff ff    	lea    -0x331d(%eax),%eax
 805a8b5:	e9 45 03 00 00       	jmp    805abff <.L90+0x5>

0805a8ba <.L135>:
                case EL2NSYNC: return "Level 2 not synchronized";
 805a8ba:	8d 80 ff cc ff ff    	lea    -0x3301(%eax),%eax
 805a8c0:	e9 3a 03 00 00       	jmp    805abff <.L90+0x5>

0805a8c5 <.L136>:
                case EL3HLT: return "Level 3 halted";
 805a8c5:	8d 80 18 cd ff ff    	lea    -0x32e8(%eax),%eax
 805a8cb:	e9 2f 03 00 00       	jmp    805abff <.L90+0x5>

0805a8d0 <.L137>:
                case EL3RST: return "Level 3 reset";
 805a8d0:	8d 80 27 cd ff ff    	lea    -0x32d9(%eax),%eax
 805a8d6:	e9 24 03 00 00       	jmp    805abff <.L90+0x5>

0805a8db <.L138>:
                case ELNRNG: return "Link number out of range";
 805a8db:	8d 80 35 cd ff ff    	lea    -0x32cb(%eax),%eax
 805a8e1:	e9 19 03 00 00       	jmp    805abff <.L90+0x5>

0805a8e6 <.L139>:
                case EUNATCH: return "Protocol driver not attached";
 805a8e6:	8d 80 4e cd ff ff    	lea    -0x32b2(%eax),%eax
 805a8ec:	e9 0e 03 00 00       	jmp    805abff <.L90+0x5>

0805a8f1 <.L140>:
                case ENOCSI: return "No CSI structure available";
 805a8f1:	8d 80 6b cd ff ff    	lea    -0x3295(%eax),%eax
 805a8f7:	e9 03 03 00 00       	jmp    805abff <.L90+0x5>

0805a8fc <.L141>:
                case EL2HLT: return "Level 2 halted";
 805a8fc:	8d 80 86 cd ff ff    	lea    -0x327a(%eax),%eax
 805a902:	e9 f8 02 00 00       	jmp    805abff <.L90+0x5>

0805a907 <.L126>:
                case EDEADLK: return "Deadlock condition.";
 805a907:	8d 80 95 cd ff ff    	lea    -0x326b(%eax),%eax
 805a90d:	e9 ed 02 00 00       	jmp    805abff <.L90+0x5>

0805a912 <.L128>:
                case ENOLCK: return "No record locks available.";
 805a912:	8d 80 a9 cd ff ff    	lea    -0x3257(%eax),%eax
 805a918:	e9 e2 02 00 00       	jmp    805abff <.L90+0x5>

0805a91d <.L206>:
                case ECANCELED: return "Operation canceled";
 805a91d:	8d 80 c4 cd ff ff    	lea    -0x323c(%eax),%eax
 805a923:	e9 d7 02 00 00       	jmp    805abff <.L90+0x5>

0805a928 <.L183>:
                case ENOTSUP: return "Operation not supported";
 805a928:	8d 80 d7 cd ff ff    	lea    -0x3229(%eax),%eax
 805a92e:	e9 cc 02 00 00       	jmp    805abff <.L90+0x5>

0805a933 <.L205>:
                case EDQUOT: return "Disc quota exceeded";
 805a933:	8d 80 ef cd ff ff    	lea    -0x3211(%eax),%eax
 805a939:	e9 c1 02 00 00       	jmp    805abff <.L90+0x5>

0805a93e <.L142>:
                case EBADE: return "invalid exchange";
 805a93e:	8d 80 03 ce ff ff    	lea    -0x31fd(%eax),%eax
 805a944:	e9 b6 02 00 00       	jmp    805abff <.L90+0x5>

0805a949 <.L143>:
                case EBADR: return "invalid request descriptor";
 805a949:	8d 80 14 ce ff ff    	lea    -0x31ec(%eax),%eax
 805a94f:	e9 ab 02 00 00       	jmp    805abff <.L90+0x5>

0805a954 <.L144>:
                case EXFULL: return "exchange full";
 805a954:	8d 80 2f ce ff ff    	lea    -0x31d1(%eax),%eax
 805a95a:	e9 a0 02 00 00       	jmp    805abff <.L90+0x5>

0805a95f <.L145>:
                case ENOANO: return "no anode";
 805a95f:	8d 80 3d ce ff ff    	lea    -0x31c3(%eax),%eax
 805a965:	e9 95 02 00 00       	jmp    805abff <.L90+0x5>

0805a96a <.L146>:
                case EBADRQC: return "invalid request code";
 805a96a:	8d 80 46 ce ff ff    	lea    -0x31ba(%eax),%eax
 805a970:	e9 8a 02 00 00       	jmp    805abff <.L90+0x5>

0805a975 <.L147>:
                case EBADSLT: return "invalid slot";
 805a975:	8d 80 5b ce ff ff    	lea    -0x31a5(%eax),%eax
 805a97b:	e9 7f 02 00 00       	jmp    805abff <.L90+0x5>

0805a980 <.L148>:
                case EBFONT: return "bad font file fmt";
 805a980:	8d 80 68 ce ff ff    	lea    -0x3198(%eax),%eax
 805a986:	e9 74 02 00 00       	jmp    805abff <.L90+0x5>

0805a98b <.L207>:
                case EOWNERDEAD: return "process died with the lock";
 805a98b:	8d 80 7a ce ff ff    	lea    -0x3186(%eax),%eax
 805a991:	e9 69 02 00 00       	jmp    805abff <.L90+0x5>

0805a996 <.L208>:
                case ENOTRECOVERABLE: return "lock is not recoverable";
 805a996:	8d 80 95 ce ff ff    	lea    -0x316b(%eax),%eax
 805a99c:	e9 5e 02 00 00       	jmp    805abff <.L90+0x5>

0805a9a1 <.L149>:
                case ENOSTR: return "Device not a stream";
 805a9a1:	8d 80 ad ce ff ff    	lea    -0x3153(%eax),%eax
 805a9a7:	e9 53 02 00 00       	jmp    805abff <.L90+0x5>

0805a9ac <.L150>:
                case ENODATA: return "no data (for no delay io)";
 805a9ac:	8d 80 c1 ce ff ff    	lea    -0x313f(%eax),%eax
 805a9b2:	e9 48 02 00 00       	jmp    805abff <.L90+0x5>

0805a9b7 <.L151>:
                case ETIME: return "timer expired";
 805a9b7:	8d 80 db ce ff ff    	lea    -0x3125(%eax),%eax
 805a9bd:	e9 3d 02 00 00       	jmp    805abff <.L90+0x5>

0805a9c2 <.L152>:
                case ENOSR: return "out of streams resources";
 805a9c2:	8d 80 e9 ce ff ff    	lea    -0x3117(%eax),%eax
 805a9c8:	e9 32 02 00 00       	jmp    805abff <.L90+0x5>

0805a9cd <.L153>:
                case ENONET: return "Machine is not on the network";
 805a9cd:	8d 80 02 cf ff ff    	lea    -0x30fe(%eax),%eax
 805a9d3:	e9 27 02 00 00       	jmp    805abff <.L90+0x5>

0805a9d8 <.L154>:
                case ENOPKG: return "Package not installed";
 805a9d8:	8d 80 20 cf ff ff    	lea    -0x30e0(%eax),%eax
 805a9de:	e9 1c 02 00 00       	jmp    805abff <.L90+0x5>

0805a9e3 <.L155>:
                case EREMOTE: return "The object is remote";
 805a9e3:	8d 80 36 cf ff ff    	lea    -0x30ca(%eax),%eax
 805a9e9:	e9 11 02 00 00       	jmp    805abff <.L90+0x5>

0805a9ee <.L156>:
                case ENOLINK: return "the link has been severed";
 805a9ee:	8d 80 4b cf ff ff    	lea    -0x30b5(%eax),%eax
 805a9f4:	e9 06 02 00 00       	jmp    805abff <.L90+0x5>

0805a9f9 <.L157>:
                case EADV: return "advertise error";
 805a9f9:	8d 80 65 cf ff ff    	lea    -0x309b(%eax),%eax
 805a9ff:	e9 fb 01 00 00       	jmp    805abff <.L90+0x5>

0805aa04 <.L158>:
                case ESRMNT: return "srmount error";
 805aa04:	8d 80 75 cf ff ff    	lea    -0x308b(%eax),%eax
 805aa0a:	e9 f0 01 00 00       	jmp    805abff <.L90+0x5>

0805aa0f <.L159>:
                case ECOMM: return "Communication error on send";
 805aa0f:	8d 80 83 cf ff ff    	lea    -0x307d(%eax),%eax
 805aa15:	e9 e5 01 00 00       	jmp    805abff <.L90+0x5>

0805aa1a <.L160>:
                case EPROTO: return "Protocol error";
 805aa1a:	8d 80 9f cf ff ff    	lea    -0x3061(%eax),%eax
 805aa20:	e9 da 01 00 00       	jmp    805abff <.L90+0x5>

0805aa25 <.L161>:
                case EMULTIHOP: return "multihop attempted";
 805aa25:	8d 80 ae cf ff ff    	lea    -0x3052(%eax),%eax
 805aa2b:	e9 cf 01 00 00       	jmp    805abff <.L90+0x5>

0805aa30 <.L162>:
                case EBADMSG: return "trying to read unreadable message";
 805aa30:	8d 80 c4 cf ff ff    	lea    -0x303c(%eax),%eax
 805aa36:	e9 c4 01 00 00       	jmp    805abff <.L90+0x5>

0805aa3b <.L127>:
                case ENAMETOOLONG: return "path name is too long";
 805aa3b:	8d 80 e6 cf ff ff    	lea    -0x301a(%eax),%eax
 805aa41:	e9 b9 01 00 00       	jmp    805abff <.L90+0x5>

0805aa46 <.L163>:
                case EOVERFLOW: return "value too large to be stored in data type";
 805aa46:	8d 80 fc cf ff ff    	lea    -0x3004(%eax),%eax
 805aa4c:	e9 ae 01 00 00       	jmp    805abff <.L90+0x5>

0805aa51 <.L164>:
                case ENOTUNIQ: return "given log. name not unique";
 805aa51:	8d 80 26 d0 ff ff    	lea    -0x2fda(%eax),%eax
 805aa57:	e9 a3 01 00 00       	jmp    805abff <.L90+0x5>

0805aa5c <.L165>:
                case EBADFD: return "f.d. invalid for this operation";
 805aa5c:	8d 80 44 d0 ff ff    	lea    -0x2fbc(%eax),%eax
 805aa62:	e9 98 01 00 00       	jmp    805abff <.L90+0x5>

0805aa67 <.L166>:
                case EREMCHG: return "Remote address changed";
 805aa67:	8d 80 64 d0 ff ff    	lea    -0x2f9c(%eax),%eax
 805aa6d:	e9 8d 01 00 00       	jmp    805abff <.L90+0x5>

0805aa72 <.L167>:
                case ELIBACC: return "Can't access a needed shared lib.";
 805aa72:	8d 80 7c d0 ff ff    	lea    -0x2f84(%eax),%eax
 805aa78:	e9 82 01 00 00       	jmp    805abff <.L90+0x5>

0805aa7d <.L168>:
                case ELIBBAD: return "Accessing a corrupted shared lib.";
 805aa7d:	8d 80 a0 d0 ff ff    	lea    -0x2f60(%eax),%eax
 805aa83:	e9 77 01 00 00       	jmp    805abff <.L90+0x5>

0805aa88 <.L169>:
                case ELIBSCN: return ".lib section in a.out corrupted.";
 805aa88:	8d 80 c4 d0 ff ff    	lea    -0x2f3c(%eax),%eax
 805aa8e:	e9 6c 01 00 00       	jmp    805abff <.L90+0x5>

0805aa93 <.L170>:
                case ELIBMAX: return "Attempting to link in too many libs.";
 805aa93:	8d 80 e8 d0 ff ff    	lea    -0x2f18(%eax),%eax
 805aa99:	e9 61 01 00 00       	jmp    805abff <.L90+0x5>

0805aa9e <.L171>:
                case ELIBEXEC: return "Attempting to exec a shared library.";
 805aa9e:	8d 80 10 d1 ff ff    	lea    -0x2ef0(%eax),%eax
 805aaa4:	e9 56 01 00 00       	jmp    805abff <.L90+0x5>

0805aaa9 <.L172>:
                case EILSEQ: return "Illegal byte sequence.";
 805aaa9:	8d 80 35 d1 ff ff    	lea    -0x2ecb(%eax),%eax
 805aaaf:	e9 4b 01 00 00       	jmp    805abff <.L90+0x5>

0805aab4 <.L129>:
                case ENOSYS: return "Unsupported file system operation";
 805aab4:	8d 80 4c d1 ff ff    	lea    -0x2eb4(%eax),%eax
 805aaba:	e9 40 01 00 00       	jmp    805abff <.L90+0x5>

0805aabf <.L131>:
                case ELOOP: return "Symbolic link loop";
 805aabf:	8d 80 6e d1 ff ff    	lea    -0x2e92(%eax),%eax
 805aac5:	e9 35 01 00 00       	jmp    805abff <.L90+0x5>

0805aaca <.L173>:
                case ERESTART: return "Restartable system call";
 805aaca:	8d 80 81 d1 ff ff    	lea    -0x2e7f(%eax),%eax
 805aad0:	e9 2a 01 00 00       	jmp    805abff <.L90+0x5>

0805aad5 <.L174>:
                case ESTRPIPE: return "if pipe/FIFO, don't sleep in stream head";
 805aad5:	8d 80 9c d1 ff ff    	lea    -0x2e64(%eax),%eax
 805aadb:	e9 1f 01 00 00       	jmp    805abff <.L90+0x5>

0805aae0 <.L130>:
                case ENOTEMPTY: return "directory not empty";
 805aae0:	8d 80 c5 d1 ff ff    	lea    -0x2e3b(%eax),%eax
 805aae6:	e9 14 01 00 00       	jmp    805abff <.L90+0x5>

0805aaeb <.L175>:
                case EUSERS: return "Too many users (for UFS)";
 805aaeb:	8d 80 d9 d1 ff ff    	lea    -0x2e27(%eax),%eax
 805aaf1:	e9 09 01 00 00       	jmp    805abff <.L90+0x5>

0805aaf6 <.L176>:
                case ENOTSOCK: return "Socket operation on non-socket";
 805aaf6:	8d 80 f4 d1 ff ff    	lea    -0x2e0c(%eax),%eax
 805aafc:	e9 fe 00 00 00       	jmp    805abff <.L90+0x5>

0805ab01 <.L177>:
                case EDESTADDRREQ: return "Destination address required";
 805ab01:	8d 80 13 d2 ff ff    	lea    -0x2ded(%eax),%eax
 805ab07:	e9 f3 00 00 00       	jmp    805abff <.L90+0x5>

0805ab0c <.L178>:
                case EMSGSIZE: return "Message too long";
 805ab0c:	8d 80 30 d2 ff ff    	lea    -0x2dd0(%eax),%eax
 805ab12:	e9 e8 00 00 00       	jmp    805abff <.L90+0x5>

0805ab17 <.L179>:
                case EPROTOTYPE: return "Protocol wrong type for socket";
 805ab17:	8d 80 44 d2 ff ff    	lea    -0x2dbc(%eax),%eax
 805ab1d:	e9 dd 00 00 00       	jmp    805abff <.L90+0x5>

0805ab22 <.L180>:
                case ENOPROTOOPT: return "Protocol not available";
 805ab22:	8d 80 63 d2 ff ff    	lea    -0x2d9d(%eax),%eax
 805ab28:	e9 d2 00 00 00       	jmp    805abff <.L90+0x5>

0805ab2d <.L181>:
                case EPROTONOSUPPORT: return "Protocol not supported";
 805ab2d:	8d 80 7a d2 ff ff    	lea    -0x2d86(%eax),%eax
 805ab33:	e9 c7 00 00 00       	jmp    805abff <.L90+0x5>

0805ab38 <.L182>:
                case ESOCKTNOSUPPORT: return "Socket type not supported";
 805ab38:	8d 80 91 d2 ff ff    	lea    -0x2d6f(%eax),%eax
 805ab3e:	e9 bc 00 00 00       	jmp    805abff <.L90+0x5>

0805ab43 <.L184>:
                case EPFNOSUPPORT: return "Protocol family not supported";
 805ab43:	8d 80 ab d2 ff ff    	lea    -0x2d55(%eax),%eax
 805ab49:	e9 b1 00 00 00       	jmp    805abff <.L90+0x5>

0805ab4e <.L185>:
                case EAFNOSUPPORT: return "Address family not supported by protocol family";
 805ab4e:	8d 80 cc d2 ff ff    	lea    -0x2d34(%eax),%eax
 805ab54:	e9 a6 00 00 00       	jmp    805abff <.L90+0x5>

0805ab59 <.L186>:
                case EADDRINUSE: return "Address already in use";
 805ab59:	8d 80 fc d2 ff ff    	lea    -0x2d04(%eax),%eax
 805ab5f:	e9 9b 00 00 00       	jmp    805abff <.L90+0x5>

0805ab64 <.L187>:
                case EADDRNOTAVAIL: return "Can't assign requested address";
 805ab64:	8d 80 14 d3 ff ff    	lea    -0x2cec(%eax),%eax
 805ab6a:	e9 90 00 00 00       	jmp    805abff <.L90+0x5>

0805ab6f <.L188>:
                case ENETDOWN: return "Network is down";
 805ab6f:	8d 80 33 d3 ff ff    	lea    -0x2ccd(%eax),%eax
 805ab75:	e9 85 00 00 00       	jmp    805abff <.L90+0x5>

0805ab7a <.L189>:
                case ENETUNREACH: return "Network is unreachable";
 805ab7a:	8d 80 43 d3 ff ff    	lea    -0x2cbd(%eax),%eax
 805ab80:	eb 7d                	jmp    805abff <.L90+0x5>

0805ab82 <.L190>:
                case ENETRESET: return "Network dropped connection because of reset";
 805ab82:	8d 80 5c d3 ff ff    	lea    -0x2ca4(%eax),%eax
 805ab88:	eb 75                	jmp    805abff <.L90+0x5>

0805ab8a <.L191>:
                case ECONNABORTED: return "Software caused connection abort";
 805ab8a:	8d 80 88 d3 ff ff    	lea    -0x2c78(%eax),%eax
 805ab90:	eb 6d                	jmp    805abff <.L90+0x5>

0805ab92 <.L192>:
                case ECONNRESET: return "Connection reset by peer";
 805ab92:	8d 80 a9 d3 ff ff    	lea    -0x2c57(%eax),%eax
 805ab98:	eb 65                	jmp    805abff <.L90+0x5>

0805ab9a <.L193>:
                case ENOBUFS: return "No buffer space available";
 805ab9a:	8d 80 c2 d3 ff ff    	lea    -0x2c3e(%eax),%eax
 805aba0:	eb 5d                	jmp    805abff <.L90+0x5>

0805aba2 <.L194>:
                case EISCONN: return "Socket is already connected";
 805aba2:	8d 80 dc d3 ff ff    	lea    -0x2c24(%eax),%eax
 805aba8:	eb 55                	jmp    805abff <.L90+0x5>

0805abaa <.L195>:
                case ENOTCONN: return "Socket is not connected";
 805abaa:	8d 80 f8 d3 ff ff    	lea    -0x2c08(%eax),%eax
 805abb0:	eb 4d                	jmp    805abff <.L90+0x5>

0805abb2 <.L196>:
                case ESHUTDOWN: return "Can't send after socket shutdown";
 805abb2:	8d 80 10 d4 ff ff    	lea    -0x2bf0(%eax),%eax
 805abb8:	eb 45                	jmp    805abff <.L90+0x5>

0805abba <.L197>:
                case ETOOMANYREFS: return "Too many references: can't splice";
 805abba:	8d 80 34 d4 ff ff    	lea    -0x2bcc(%eax),%eax
 805abc0:	eb 3d                	jmp    805abff <.L90+0x5>

0805abc2 <.L198>:
                case ETIMEDOUT: return "Connection timed out";
 805abc2:	8d 80 56 d4 ff ff    	lea    -0x2baa(%eax),%eax
 805abc8:	eb 35                	jmp    805abff <.L90+0x5>

0805abca <.L199>:
                case ECONNREFUSED: return "Connection refused";
 805abca:	8d 80 6b d4 ff ff    	lea    -0x2b95(%eax),%eax
 805abd0:	eb 2d                	jmp    805abff <.L90+0x5>

0805abd2 <.L200>:
                case EHOSTDOWN: return "Host is down";
 805abd2:	8d 80 7e d4 ff ff    	lea    -0x2b82(%eax),%eax
 805abd8:	eb 25                	jmp    805abff <.L90+0x5>

0805abda <.L201>:
                case EHOSTUNREACH: return "No route to host";
 805abda:	8d 80 8b d4 ff ff    	lea    -0x2b75(%eax),%eax
 805abe0:	eb 1d                	jmp    805abff <.L90+0x5>

0805abe2 <.L202>:
                case EALREADY: return "operation already in progress";
 805abe2:	8d 80 9c d4 ff ff    	lea    -0x2b64(%eax),%eax
 805abe8:	eb 15                	jmp    805abff <.L90+0x5>

0805abea <.L203>:
                case EINPROGRESS: return "operation now in progress";
 805abea:	8d 80 ba d4 ff ff    	lea    -0x2b46(%eax),%eax
 805abf0:	eb 0d                	jmp    805abff <.L90+0x5>

0805abf2 <.L204>:
                case ESTALE: return "Stale NFS file handle";
 805abf2:	8d 80 d4 d4 ff ff    	lea    -0x2b2c(%eax),%eax
 805abf8:	eb 05                	jmp    805abff <.L90+0x5>

0805abfa <.L90>:
                default: return 0;
 805abfa:	b8 00 00 00 00       	mov    $0x0,%eax
        }
}
 805abff:	5d                   	pop    %ebp
 805ac00:	c3                   	ret    

0805ac01 <wrterror>:
#define abort() exit(1)
#endif

static void
wrterror(char *p)
{
 805ac01:	55                   	push   %ebp
 805ac02:	89 e5                	mov    %esp,%ebp
 805ac04:	53                   	push   %ebx
 805ac05:	83 ec 24             	sub    $0x24,%esp
 805ac08:	e8 ec f5 ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805ac0d:	81 c3 53 bc 00 00    	add    $0xbc53,%ebx
        char *q = " error: ";
 805ac13:	8d 83 fd d6 ff ff    	lea    -0x2903(%ebx),%eax
 805ac19:	89 45 f4             	mov    %eax,-0xc(%ebp)
        _write(STDERR_FILENO, __progname, strlen(__progname));
 805ac1c:	8b 83 24 00 00 00    	mov    0x24(%ebx),%eax
 805ac22:	89 04 24             	mov    %eax,(%esp)
 805ac25:	e8 40 f8 ff ff       	call   805a46a <strlen>
 805ac2a:	89 c2                	mov    %eax,%edx
 805ac2c:	8b 83 24 00 00 00    	mov    0x24(%ebx),%eax
 805ac32:	89 54 24 08          	mov    %edx,0x8(%esp)
 805ac36:	89 44 24 04          	mov    %eax,0x4(%esp)
 805ac3a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 805ac41:	e8 2c ee ff ff       	call   8059a72 <write>
        _write(STDERR_FILENO, malloc_func, strlen(malloc_func));
 805ac46:	8b 83 c0 02 00 00    	mov    0x2c0(%ebx),%eax
 805ac4c:	89 04 24             	mov    %eax,(%esp)
 805ac4f:	e8 16 f8 ff ff       	call   805a46a <strlen>
 805ac54:	89 c2                	mov    %eax,%edx
 805ac56:	8b 83 c0 02 00 00    	mov    0x2c0(%ebx),%eax
 805ac5c:	89 54 24 08          	mov    %edx,0x8(%esp)
 805ac60:	89 44 24 04          	mov    %eax,0x4(%esp)
 805ac64:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 805ac6b:	e8 02 ee ff ff       	call   8059a72 <write>
        _write(STDERR_FILENO, q, strlen(q));
 805ac70:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805ac73:	89 04 24             	mov    %eax,(%esp)
 805ac76:	e8 ef f7 ff ff       	call   805a46a <strlen>
 805ac7b:	89 44 24 08          	mov    %eax,0x8(%esp)
 805ac7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805ac82:	89 44 24 04          	mov    %eax,0x4(%esp)
 805ac86:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 805ac8d:	e8 e0 ed ff ff       	call   8059a72 <write>
        _write(STDERR_FILENO, p, strlen(p));
 805ac92:	8b 45 08             	mov    0x8(%ebp),%eax
 805ac95:	89 04 24             	mov    %eax,(%esp)
 805ac98:	e8 cd f7 ff ff       	call   805a46a <strlen>
 805ac9d:	89 44 24 08          	mov    %eax,0x8(%esp)
 805aca1:	8b 45 08             	mov    0x8(%ebp),%eax
 805aca4:	89 44 24 04          	mov    %eax,0x4(%esp)
 805aca8:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 805acaf:	e8 be ed ff ff       	call   8059a72 <write>
        suicide = 1;
 805acb4:	c7 83 9c 02 00 00 01 	movl   $0x1,0x29c(%ebx)
 805acbb:	00 00 00 
        abort();
 805acbe:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 805acc5:	e8 c4 e9 ff ff       	call   805968e <exit>
}
 805acca:	90                   	nop
 805accb:	83 c4 24             	add    $0x24,%esp
 805acce:	5b                   	pop    %ebx
 805accf:	5d                   	pop    %ebp
 805acd0:	c3                   	ret    

0805acd1 <wrtwarning>:

static void
wrtwarning(char *p)
{
 805acd1:	55                   	push   %ebp
 805acd2:	89 e5                	mov    %esp,%ebp
 805acd4:	53                   	push   %ebx
 805acd5:	83 ec 24             	sub    $0x24,%esp
 805acd8:	e8 1c f5 ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805acdd:	81 c3 83 bb 00 00    	add    $0xbb83,%ebx
        char *q = " warning: ";
 805ace3:	8d 83 06 d7 ff ff    	lea    -0x28fa(%ebx),%eax
 805ace9:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (malloc_abort)
 805acec:	8b 83 98 02 00 00    	mov    0x298(%ebx),%eax
 805acf2:	85 c0                	test   %eax,%eax
 805acf4:	74 0b                	je     805ad01 <wrtwarning+0x30>
                wrterror(p);
 805acf6:	8b 45 08             	mov    0x8(%ebp),%eax
 805acf9:	89 04 24             	mov    %eax,(%esp)
 805acfc:	e8 00 ff ff ff       	call   805ac01 <wrterror>
        _write(STDERR_FILENO, __progname, strlen(__progname));
 805ad01:	8b 83 24 00 00 00    	mov    0x24(%ebx),%eax
 805ad07:	89 04 24             	mov    %eax,(%esp)
 805ad0a:	e8 5b f7 ff ff       	call   805a46a <strlen>
 805ad0f:	89 c2                	mov    %eax,%edx
 805ad11:	8b 83 24 00 00 00    	mov    0x24(%ebx),%eax
 805ad17:	89 54 24 08          	mov    %edx,0x8(%esp)
 805ad1b:	89 44 24 04          	mov    %eax,0x4(%esp)
 805ad1f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 805ad26:	e8 47 ed ff ff       	call   8059a72 <write>
        _write(STDERR_FILENO, malloc_func, strlen(malloc_func));
 805ad2b:	8b 83 c0 02 00 00    	mov    0x2c0(%ebx),%eax
 805ad31:	89 04 24             	mov    %eax,(%esp)
 805ad34:	e8 31 f7 ff ff       	call   805a46a <strlen>
 805ad39:	89 c2                	mov    %eax,%edx
 805ad3b:	8b 83 c0 02 00 00    	mov    0x2c0(%ebx),%eax
 805ad41:	89 54 24 08          	mov    %edx,0x8(%esp)
 805ad45:	89 44 24 04          	mov    %eax,0x4(%esp)
 805ad49:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 805ad50:	e8 1d ed ff ff       	call   8059a72 <write>
        _write(STDERR_FILENO, q, strlen(q));
 805ad55:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805ad58:	89 04 24             	mov    %eax,(%esp)
 805ad5b:	e8 0a f7 ff ff       	call   805a46a <strlen>
 805ad60:	89 44 24 08          	mov    %eax,0x8(%esp)
 805ad64:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805ad67:	89 44 24 04          	mov    %eax,0x4(%esp)
 805ad6b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 805ad72:	e8 fb ec ff ff       	call   8059a72 <write>
        _write(STDERR_FILENO, p, strlen(p));
 805ad77:	8b 45 08             	mov    0x8(%ebp),%eax
 805ad7a:	89 04 24             	mov    %eax,(%esp)
 805ad7d:	e8 e8 f6 ff ff       	call   805a46a <strlen>
 805ad82:	89 44 24 08          	mov    %eax,0x8(%esp)
 805ad86:	8b 45 08             	mov    0x8(%ebp),%eax
 805ad89:	89 44 24 04          	mov    %eax,0x4(%esp)
 805ad8d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 805ad94:	e8 d9 ec ff ff       	call   8059a72 <write>
}
 805ad99:	90                   	nop
 805ad9a:	83 c4 24             	add    $0x24,%esp
 805ad9d:	5b                   	pop    %ebx
 805ad9e:	5d                   	pop    %ebp
 805ad9f:	c3                   	ret    

0805ada0 <map_pages>:
/*
 * Allocate a number of pages from the OS
 */
static void *
map_pages(int pages)
{
 805ada0:	55                   	push   %ebp
 805ada1:	89 e5                	mov    %esp,%ebp
 805ada3:	53                   	push   %ebx
 805ada4:	83 ec 24             	sub    $0x24,%esp
 805ada7:	e8 4d f4 ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805adac:	81 c3 b4 ba 00 00    	add    $0xbab4,%ebx
        caddr_t result, tail;

        result = (caddr_t)pageround((u_long)sbrk(0));
 805adb2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 805adb9:	e8 e1 e6 ff ff       	call   805949f <sbrk>
 805adbe:	05 ff 0f 00 00       	add    $0xfff,%eax
 805adc3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
 805adc8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        tail = result + (pages << malloc_pageshift);
 805adcb:	8b 45 08             	mov    0x8(%ebp),%eax
 805adce:	c1 e0 0c             	shl    $0xc,%eax
 805add1:	89 c2                	mov    %eax,%edx
 805add3:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805add6:	01 d0                	add    %edx,%eax
 805add8:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if (brk(tail)) {
 805addb:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805adde:	89 04 24             	mov    %eax,(%esp)
 805ade1:	e8 82 e7 ff ff       	call   8059568 <brk>
 805ade6:	85 c0                	test   %eax,%eax
 805ade8:	74 07                	je     805adf1 <map_pages+0x51>
#ifdef EXTRA_SANITY
                wrterror("(ES): map_pages fails\n");
#endif /* EXTRA_SANITY */
                return 0;
 805adea:	b8 00 00 00 00       	mov    $0x0,%eax
 805adef:	eb 51                	jmp    805ae42 <map_pages+0xa2>
        }

        last_index = ptr2index(tail) - 1;
 805adf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805adf4:	c1 e8 0c             	shr    $0xc,%eax
 805adf7:	89 c2                	mov    %eax,%edx
 805adf9:	8b 83 74 02 00 00    	mov    0x274(%ebx),%eax
 805adff:	29 c2                	sub    %eax,%edx
 805ae01:	89 d0                	mov    %edx,%eax
 805ae03:	48                   	dec    %eax
 805ae04:	89 83 78 02 00 00    	mov    %eax,0x278(%ebx)
        malloc_brk = tail;
 805ae0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805ae0d:	89 83 b8 02 00 00    	mov    %eax,0x2b8(%ebx)

        if ((last_index + 1) >= malloc_ninfo && !extend_pgdir(last_index))
 805ae13:	8b 83 78 02 00 00    	mov    0x278(%ebx),%eax
 805ae19:	8d 50 01             	lea    0x1(%eax),%edx
 805ae1c:	8b 83 80 02 00 00    	mov    0x280(%ebx),%eax
 805ae22:	39 c2                	cmp    %eax,%edx
 805ae24:	72 19                	jb     805ae3f <map_pages+0x9f>
 805ae26:	8b 83 78 02 00 00    	mov    0x278(%ebx),%eax
 805ae2c:	89 04 24             	mov    %eax,(%esp)
 805ae2f:	e8 14 00 00 00       	call   805ae48 <extend_pgdir>
 805ae34:	85 c0                	test   %eax,%eax
 805ae36:	75 07                	jne    805ae3f <map_pages+0x9f>
                return 0;;
 805ae38:	b8 00 00 00 00       	mov    $0x0,%eax
 805ae3d:	eb 03                	jmp    805ae42 <map_pages+0xa2>

        return result;
 805ae3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 805ae42:	83 c4 24             	add    $0x24,%esp
 805ae45:	5b                   	pop    %ebx
 805ae46:	5d                   	pop    %ebp
 805ae47:	c3                   	ret    

0805ae48 <extend_pgdir>:
/*
 * Extend page directory
 */
static int
extend_pgdir(u_long index)
{
 805ae48:	55                   	push   %ebp
 805ae49:	89 e5                	mov    %esp,%ebp
 805ae4b:	53                   	push   %ebx
 805ae4c:	83 ec 34             	sub    $0x34,%esp
 805ae4f:	e8 a5 f3 ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805ae54:	81 c3 0c ba 00 00    	add    $0xba0c,%ebx
        struct  pginfo **new, **old;
        int i, oldlen;

        /* Make it this many pages */
        i = index * sizeof * page_dir;
 805ae5a:	8b 45 08             	mov    0x8(%ebp),%eax
 805ae5d:	c1 e0 02             	shl    $0x2,%eax
 805ae60:	89 45 f4             	mov    %eax,-0xc(%ebp)
        i /= malloc_pagesize;
 805ae63:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805ae66:	c1 e8 0c             	shr    $0xc,%eax
 805ae69:	89 45 f4             	mov    %eax,-0xc(%ebp)
        i += 2;
 805ae6c:	83 45 f4 02          	addl   $0x2,-0xc(%ebp)

        /* remember the old mapping size */
        oldlen = malloc_ninfo * sizeof * page_dir;
 805ae70:	8b 83 80 02 00 00    	mov    0x280(%ebx),%eax
 805ae76:	c1 e0 02             	shl    $0x2,%eax
 805ae79:	89 45 f0             	mov    %eax,-0x10(%ebp)
         * address, the old pages will be "magically" remapped..  But this means
         * keeping open a "secret" file descriptor.....
         */

        /* Get new pages */
        new = (struct pginfo **) MMAP(i * malloc_pagesize);
 805ae7c:	8b 83 68 02 00 00    	mov    0x268(%ebx),%eax
 805ae82:	8b 55 f4             	mov    -0xc(%ebp),%edx
 805ae85:	c1 e2 0c             	shl    $0xc,%edx
 805ae88:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 805ae8f:	00 
 805ae90:	89 44 24 10          	mov    %eax,0x10(%esp)
 805ae94:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
 805ae9b:	00 
 805ae9c:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
 805aea3:	00 
 805aea4:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aea8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 805aeaf:	e8 cc e9 ff ff       	call   8059880 <mmap>
 805aeb4:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (new == (struct pginfo **) - 1)
 805aeb7:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
 805aebb:	75 07                	jne    805aec4 <extend_pgdir+0x7c>
                return 0;
 805aebd:	b8 00 00 00 00       	mov    $0x0,%eax
 805aec2:	eb 5e                	jmp    805af22 <extend_pgdir+0xda>

        /* Copy the old stuff */
        memcpy(new, page_dir,
 805aec4:	8b 83 80 02 00 00    	mov    0x280(%ebx),%eax
 805aeca:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 805aed1:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805aed7:	89 54 24 08          	mov    %edx,0x8(%esp)
 805aedb:	89 44 24 04          	mov    %eax,0x4(%esp)
 805aedf:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805aee2:	89 04 24             	mov    %eax,(%esp)
 805aee5:	e8 66 f3 ff ff       	call   805a250 <memcpy>
               malloc_ninfo * sizeof * page_dir);

        /* register the new size */
        malloc_ninfo = i * malloc_pagesize / sizeof * page_dir;
 805aeea:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805aeed:	c1 e0 0c             	shl    $0xc,%eax
 805aef0:	c1 e8 02             	shr    $0x2,%eax
 805aef3:	89 83 80 02 00 00    	mov    %eax,0x280(%ebx)

        /* swap the pointers */
        old = page_dir;
 805aef9:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805aeff:	89 45 e8             	mov    %eax,-0x18(%ebp)
        page_dir = new;
 805af02:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805af05:	89 83 7c 02 00 00    	mov    %eax,0x27c(%ebx)

        /* Now free the old stuff */
        munmap((char *)old, oldlen);
 805af0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805af0e:	89 44 24 04          	mov    %eax,0x4(%esp)
 805af12:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805af15:	89 04 24             	mov    %eax,(%esp)
 805af18:	e8 c6 e9 ff ff       	call   80598e3 <munmap>
        return 1;
 805af1d:	b8 01 00 00 00       	mov    $0x1,%eax
}
 805af22:	83 c4 34             	add    $0x34,%esp
 805af25:	5b                   	pop    %ebx
 805af26:	5d                   	pop    %ebp
 805af27:	c3                   	ret    

0805af28 <malloc_init>:
/*
 * Initialize the world
 */
static void
malloc_init()
{
 805af28:	55                   	push   %ebp
 805af29:	89 e5                	mov    %esp,%ebp
 805af2b:	53                   	push   %ebx
 805af2c:	83 ec 34             	sub    $0x34,%esp
 805af2f:	e8 c5 f2 ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805af34:	81 c3 2c b9 00 00    	add    $0xb92c,%ebx
        char *p;
        int i, j;

        INIT_MMAP();
 805af3a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 805af41:	00 
 805af42:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 805af49:	00 
 805af4a:	8d 83 11 d7 ff ff    	lea    -0x28ef(%ebx),%eax
 805af50:	89 04 24             	mov    %eax,(%esp)
 805af53:	e8 14 ea ff ff       	call   805996c <open>
 805af58:	89 83 68 02 00 00    	mov    %eax,0x268(%ebx)
 805af5e:	8b 83 68 02 00 00    	mov    0x268(%ebx),%eax
 805af64:	83 f8 ff             	cmp    $0xffffffff,%eax
 805af67:	75 0e                	jne    805af77 <malloc_init+0x4f>
 805af69:	8d 83 1b d7 ff ff    	lea    -0x28e5(%ebx),%eax
 805af6f:	89 04 24             	mov    %eax,(%esp)
 805af72:	e8 8a fc ff ff       	call   805ac01 <wrterror>

#ifdef EXTRA_SANITY
        malloc_junk = 1;
#endif /* EXTRA_SANITY */

        for (i = 0; i < 3; i++) {
 805af77:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
 805af7e:	e9 7c 01 00 00       	jmp    805b0ff <.L18+0x45>
                if (i == 0) {
 805af83:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
 805af87:	75 0c                	jne    805af95 <malloc_init+0x6d>
                        if (j <= 0)
                                continue;
                        b[j] = '\0';
                        p = b;
#else
                        p = NULL;
 805af89:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 805af90:	e9 53 01 00 00       	jmp    805b0e8 <.L18+0x2e>
#endif
                } else if (i == 1) {
 805af95:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
 805af99:	75 0c                	jne    805afa7 <malloc_init+0x7f>
#ifdef HAS_GETENV
                        p = getenv("MALLOC_OPTIONS");
#else
                        p = NULL;
 805af9b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 805afa2:	e9 41 01 00 00       	jmp    805b0e8 <.L18+0x2e>
#endif
                } else {
                        p = malloc_options;
 805afa7:	8d 05 2c 6b 06 08    	lea    0x8066b2c,%eax
 805afad:	8b 00                	mov    (%eax),%eax
 805afaf:	89 45 f4             	mov    %eax,-0xc(%ebp)
                }
                for (; p && *p; p++) {
 805afb2:	e9 31 01 00 00       	jmp    805b0e8 <.L18+0x2e>
                        switch (*p) {
 805afb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805afba:	0f b6 00             	movzbl (%eax),%eax
 805afbd:	0f be c0             	movsbl %al,%eax
 805afc0:	83 e8 3c             	sub    $0x3c,%eax
 805afc3:	83 f8 3e             	cmp    $0x3e,%eax
 805afc6:	0f 87 ee 00 00 00    	ja     805b0ba <.L18>
 805afcc:	c1 e0 02             	shl    $0x2,%eax
 805afcf:	8b 84 18 70 d7 ff ff 	mov    -0x2890(%eax,%ebx,1),%eax
 805afd6:	01 d8                	add    %ebx,%eax
 805afd8:	ff e0                	jmp    *%eax

0805afda <.L21>:
                                case '>': malloc_cache   <<= 1; break;
 805afda:	8b 83 20 00 00 00    	mov    0x20(%ebx),%eax
 805afe0:	01 c0                	add    %eax,%eax
 805afe2:	89 83 20 00 00 00    	mov    %eax,0x20(%ebx)
 805afe8:	e9 f8 00 00 00       	jmp    805b0e5 <.L18+0x2b>

0805afed <.L19>:
                                case '<': malloc_cache   >>= 1; break;
 805afed:	8b 83 20 00 00 00    	mov    0x20(%ebx),%eax
 805aff3:	d1 e8                	shr    %eax
 805aff5:	89 83 20 00 00 00    	mov    %eax,0x20(%ebx)
 805affb:	e9 e5 00 00 00       	jmp    805b0e5 <.L18+0x2b>

0805b000 <.L29>:
                                case 'a': malloc_abort   = 0; break;
 805b000:	c7 83 98 02 00 00 00 	movl   $0x0,0x298(%ebx)
 805b007:	00 00 00 
 805b00a:	e9 d6 00 00 00       	jmp    805b0e5 <.L18+0x2b>

0805b00f <.L22>:
                                case 'A': malloc_abort   = 1; break;
 805b00f:	c7 83 98 02 00 00 01 	movl   $0x1,0x298(%ebx)
 805b016:	00 00 00 
 805b019:	e9 c7 00 00 00       	jmp    805b0e5 <.L18+0x2b>

0805b01e <.L30>:
                                case 'h': malloc_hint    = 0; break;
 805b01e:	c7 83 a4 02 00 00 00 	movl   $0x0,0x2a4(%ebx)
 805b025:	00 00 00 
 805b028:	e9 b8 00 00 00       	jmp    805b0e5 <.L18+0x2b>

0805b02d <.L23>:
                                case 'H': malloc_hint    = 1; break;
 805b02d:	c7 83 a4 02 00 00 01 	movl   $0x1,0x2a4(%ebx)
 805b034:	00 00 00 
 805b037:	e9 a9 00 00 00       	jmp    805b0e5 <.L18+0x2b>

0805b03c <.L32>:
                                case 'r': malloc_realloc = 0; break;
 805b03c:	c7 83 a0 02 00 00 00 	movl   $0x0,0x2a0(%ebx)
 805b043:	00 00 00 
 805b046:	e9 9a 00 00 00       	jmp    805b0e5 <.L18+0x2b>

0805b04b <.L25>:
                                case 'R': malloc_realloc = 1; break;
 805b04b:	c7 83 a0 02 00 00 01 	movl   $0x1,0x2a0(%ebx)
 805b052:	00 00 00 
 805b055:	e9 8b 00 00 00       	jmp    805b0e5 <.L18+0x2b>

0805b05a <.L31>:
                                case 'j': malloc_junk    = 0; break;
 805b05a:	c7 83 b4 02 00 00 00 	movl   $0x0,0x2b4(%ebx)
 805b061:	00 00 00 
 805b064:	eb 7f                	jmp    805b0e5 <.L18+0x2b>

0805b066 <.L24>:
                                case 'J': malloc_junk    = 1; break;
 805b066:	c7 83 b4 02 00 00 01 	movl   $0x1,0x2b4(%ebx)
 805b06d:	00 00 00 
 805b070:	eb 73                	jmp    805b0e5 <.L18+0x2b>

0805b072 <.L33>:
#ifdef HAS_UTRACE
                                case 'u': malloc_utrace  = 0; break;
                                case 'U': malloc_utrace  = 1; break;
#endif
                                case 'v': malloc_sysv    = 0; break;
 805b072:	c7 83 ac 02 00 00 00 	movl   $0x0,0x2ac(%ebx)
 805b079:	00 00 00 
 805b07c:	eb 67                	jmp    805b0e5 <.L18+0x2b>

0805b07e <.L26>:
                                case 'V': malloc_sysv    = 1; break;
 805b07e:	c7 83 ac 02 00 00 01 	movl   $0x1,0x2ac(%ebx)
 805b085:	00 00 00 
 805b088:	eb 5b                	jmp    805b0e5 <.L18+0x2b>

0805b08a <.L34>:
                                case 'x': malloc_xmalloc = 0; break;
 805b08a:	c7 83 a8 02 00 00 00 	movl   $0x0,0x2a8(%ebx)
 805b091:	00 00 00 
 805b094:	eb 4f                	jmp    805b0e5 <.L18+0x2b>

0805b096 <.L27>:
                                case 'X': malloc_xmalloc = 1; break;
 805b096:	c7 83 a8 02 00 00 01 	movl   $0x1,0x2a8(%ebx)
 805b09d:	00 00 00 
 805b0a0:	eb 43                	jmp    805b0e5 <.L18+0x2b>

0805b0a2 <.L35>:
                                case 'z': malloc_zero    = 0; break;
 805b0a2:	c7 83 b0 02 00 00 00 	movl   $0x0,0x2b0(%ebx)
 805b0a9:	00 00 00 
 805b0ac:	eb 37                	jmp    805b0e5 <.L18+0x2b>

0805b0ae <.L28>:
                                case 'Z': malloc_zero    = 1; break;
 805b0ae:	c7 83 b0 02 00 00 01 	movl   $0x1,0x2b0(%ebx)
 805b0b5:	00 00 00 
 805b0b8:	eb 2b                	jmp    805b0e5 <.L18+0x2b>

0805b0ba <.L18>:
                                default:
                                        j = malloc_abort;
 805b0ba:	8b 83 98 02 00 00    	mov    0x298(%ebx),%eax
 805b0c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
                                        malloc_abort = 0;
 805b0c3:	c7 83 98 02 00 00 00 	movl   $0x0,0x298(%ebx)
 805b0ca:	00 00 00 
                                        wrtwarning("unknown char in MALLOC_OPTIONS\n");
 805b0cd:	8d 83 30 d7 ff ff    	lea    -0x28d0(%ebx),%eax
 805b0d3:	89 04 24             	mov    %eax,(%esp)
 805b0d6:	e8 f6 fb ff ff       	call   805acd1 <wrtwarning>
                                        malloc_abort = j;
 805b0db:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805b0de:	89 83 98 02 00 00    	mov    %eax,0x298(%ebx)
                                        break;
 805b0e4:	90                   	nop
                        p = NULL;
#endif
                } else {
                        p = malloc_options;
                }
                for (; p && *p; p++) {
 805b0e5:	ff 45 f4             	incl   -0xc(%ebp)
 805b0e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 805b0ec:	74 0e                	je     805b0fc <.L18+0x42>
 805b0ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b0f1:	0f b6 00             	movzbl (%eax),%eax
 805b0f4:	84 c0                	test   %al,%al
 805b0f6:	0f 85 bb fe ff ff    	jne    805afb7 <malloc_init+0x8f>

#ifdef EXTRA_SANITY
        malloc_junk = 1;
#endif /* EXTRA_SANITY */

        for (i = 0; i < 3; i++) {
 805b0fc:	ff 45 f0             	incl   -0x10(%ebp)
 805b0ff:	83 7d f0 02          	cmpl   $0x2,-0x10(%ebp)
 805b103:	0f 8e 7a fe ff ff    	jle    805af83 <malloc_init+0x5b>

        /*
         * We want junk in the entire allocation, and zero only in the part
         * the user asked for.
         */
        if (malloc_zero)
 805b109:	8b 83 b0 02 00 00    	mov    0x2b0(%ebx),%eax
 805b10f:	85 c0                	test   %eax,%eax
 805b111:	74 0a                	je     805b11d <.L18+0x63>
                malloc_junk = 1;
 805b113:	c7 83 b4 02 00 00 01 	movl   $0x1,0x2b4(%ebx)
 805b11a:	00 00 00 

        /*
         * If we run with junk (or implicitly from above: zero), we want to
         * force realloc() to get new storage, so we can DTRT with it.
         */
        if (malloc_junk)
 805b11d:	8b 83 b4 02 00 00    	mov    0x2b4(%ebx),%eax
 805b123:	85 c0                	test   %eax,%eax
 805b125:	74 0a                	je     805b131 <.L18+0x77>
                malloc_realloc = 1;
 805b127:	c7 83 a0 02 00 00 01 	movl   $0x1,0x2a0(%ebx)
 805b12e:	00 00 00 

        /* Allocate one page for the page directory */
        page_dir = (struct pginfo **) MMAP(malloc_pagesize);
 805b131:	8b 83 68 02 00 00    	mov    0x268(%ebx),%eax
 805b137:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 805b13e:	00 
 805b13f:	89 44 24 10          	mov    %eax,0x10(%esp)
 805b143:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
 805b14a:	00 
 805b14b:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
 805b152:	00 
 805b153:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
 805b15a:	00 
 805b15b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 805b162:	e8 19 e7 ff ff       	call   8059880 <mmap>
 805b167:	89 83 7c 02 00 00    	mov    %eax,0x27c(%ebx)

        if (page_dir == (struct pginfo **) - 1)
 805b16d:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805b173:	83 f8 ff             	cmp    $0xffffffff,%eax
 805b176:	75 0e                	jne    805b186 <.L18+0xcc>
                wrterror("mmap(2) failed, check limits\n");
 805b178:	8d 83 50 d7 ff ff    	lea    -0x28b0(%ebx),%eax
 805b17e:	89 04 24             	mov    %eax,(%esp)
 805b181:	e8 7b fa ff ff       	call   805ac01 <wrterror>

        /*
         * We need a maximum of malloc_pageshift buckets, steal these from the
         * front of the page_directory;
         */
        malloc_origo = ((u_long)pageround((u_long)sbrk(0))) >> malloc_pageshift;
 805b186:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 805b18d:	e8 0d e3 ff ff       	call   805949f <sbrk>
 805b192:	05 ff 0f 00 00       	add    $0xfff,%eax
 805b197:	c1 e8 0c             	shr    $0xc,%eax
 805b19a:	89 83 74 02 00 00    	mov    %eax,0x274(%ebx)
        malloc_origo -= malloc_pageshift;
 805b1a0:	8b 83 74 02 00 00    	mov    0x274(%ebx),%eax
 805b1a6:	83 e8 0c             	sub    $0xc,%eax
 805b1a9:	89 83 74 02 00 00    	mov    %eax,0x274(%ebx)

        malloc_ninfo = malloc_pagesize / sizeof * page_dir;
 805b1af:	c7 83 80 02 00 00 00 	movl   $0x400,0x280(%ebx)
 805b1b6:	04 00 00 

        /* Recalculate the cache size in bytes, and make sure it's nonzero */

        if (!malloc_cache)
 805b1b9:	8b 83 20 00 00 00    	mov    0x20(%ebx),%eax
 805b1bf:	85 c0                	test   %eax,%eax
 805b1c1:	75 0d                	jne    805b1d0 <.L18+0x116>
                malloc_cache++;
 805b1c3:	8b 83 20 00 00 00    	mov    0x20(%ebx),%eax
 805b1c9:	40                   	inc    %eax
 805b1ca:	89 83 20 00 00 00    	mov    %eax,0x20(%ebx)

        malloc_cache <<= malloc_pageshift;
 805b1d0:	8b 83 20 00 00 00    	mov    0x20(%ebx),%eax
 805b1d6:	c1 e0 0c             	shl    $0xc,%eax
 805b1d9:	89 83 20 00 00 00    	mov    %eax,0x20(%ebx)

        /*
         * This is a nice hack from Kaleb Keithly (kaleb@x.org).
         * We can sbrk(2) further back when we keep this on a low address.
         */
        px = (struct pgfree *) imalloc(sizeof * px);
 805b1df:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 805b1e6:	e8 5d 07 00 00       	call   805b948 <imalloc>
 805b1eb:	89 83 bc 02 00 00    	mov    %eax,0x2bc(%ebx)

        /* Been here, done that */
        malloc_started++;
 805b1f1:	8b 83 6c 02 00 00    	mov    0x26c(%ebx),%eax
 805b1f7:	40                   	inc    %eax
 805b1f8:	89 83 6c 02 00 00    	mov    %eax,0x26c(%ebx)
}
 805b1fe:	90                   	nop
 805b1ff:	83 c4 34             	add    $0x34,%esp
 805b202:	5b                   	pop    %ebx
 805b203:	5d                   	pop    %ebp
 805b204:	c3                   	ret    

0805b205 <malloc_pages>:
/*
 * Allocate a number of complete pages
 */
static void *
malloc_pages(size_t size)
{
 805b205:	55                   	push   %ebp
 805b206:	89 e5                	mov    %esp,%ebp
 805b208:	53                   	push   %ebx
 805b209:	83 ec 34             	sub    $0x34,%esp
 805b20c:	e8 e8 ef ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805b211:	81 c3 4f b6 00 00    	add    $0xb64f,%ebx
        void *p, *delay_free = 0;
 805b217:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
        unsigned int i;
        struct pgfree *pf;
        u_long index;

        size = pageround(size);
 805b21e:	8b 45 08             	mov    0x8(%ebp),%eax
 805b221:	05 ff 0f 00 00       	add    $0xfff,%eax
 805b226:	25 00 f0 ff ff       	and    $0xfffff000,%eax
 805b22b:	89 45 08             	mov    %eax,0x8(%ebp)

        p = 0;
 805b22e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

        /* Look for free pages before asking for more */
        for (pf = free_list.next; pf; pf = pf->next) {
 805b235:	8b 83 84 02 00 00    	mov    0x284(%ebx),%eax
 805b23b:	89 45 e8             	mov    %eax,-0x18(%ebp)
 805b23e:	e9 82 00 00 00       	jmp    805b2c5 <malloc_pages+0xc0>
                        wrterror("(ES): non-free first page on free-list\n");
                if (page_dir[ptr2index(pf->end) - 1] != MALLOC_FREE)
                        wrterror("(ES): non-free last page on free-list\n");
#endif /* EXTRA_SANITY */

                if (pf->size < size)
 805b243:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805b246:	8b 40 10             	mov    0x10(%eax),%eax
 805b249:	3b 45 08             	cmp    0x8(%ebp),%eax
 805b24c:	73 0a                	jae    805b258 <malloc_pages+0x53>
        size = pageround(size);

        p = 0;

        /* Look for free pages before asking for more */
        for (pf = free_list.next; pf; pf = pf->next) {
 805b24e:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805b251:	8b 00                	mov    (%eax),%eax
 805b253:	89 45 e8             	mov    %eax,-0x18(%ebp)
 805b256:	eb 6d                	jmp    805b2c5 <malloc_pages+0xc0>
#endif /* EXTRA_SANITY */

                if (pf->size < size)
                        continue;

                if (pf->size == size) {
 805b258:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805b25b:	8b 40 10             	mov    0x10(%eax),%eax
 805b25e:	3b 45 08             	cmp    0x8(%ebp),%eax
 805b261:	75 35                	jne    805b298 <malloc_pages+0x93>
                        p = pf->page;
 805b263:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805b266:	8b 40 08             	mov    0x8(%eax),%eax
 805b269:	89 45 f4             	mov    %eax,-0xc(%ebp)
                        if (pf->next)
 805b26c:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805b26f:	8b 00                	mov    (%eax),%eax
 805b271:	85 c0                	test   %eax,%eax
 805b273:	74 0e                	je     805b283 <malloc_pages+0x7e>
                                pf->next->prev = pf->prev;
 805b275:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805b278:	8b 00                	mov    (%eax),%eax
 805b27a:	8b 55 e8             	mov    -0x18(%ebp),%edx
 805b27d:	8b 52 04             	mov    0x4(%edx),%edx
 805b280:	89 50 04             	mov    %edx,0x4(%eax)
                        pf->prev->next = pf->next;
 805b283:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805b286:	8b 40 04             	mov    0x4(%eax),%eax
 805b289:	8b 55 e8             	mov    -0x18(%ebp),%edx
 805b28c:	8b 12                	mov    (%edx),%edx
 805b28e:	89 10                	mov    %edx,(%eax)
                        delay_free = pf;
 805b290:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805b293:	89 45 f0             	mov    %eax,-0x10(%ebp)
                        break;
 805b296:	eb 37                	jmp    805b2cf <malloc_pages+0xca>
                }

                p = pf->page;
 805b298:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805b29b:	8b 40 08             	mov    0x8(%eax),%eax
 805b29e:	89 45 f4             	mov    %eax,-0xc(%ebp)
                pf->page = (char *)pf->page + size;
 805b2a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805b2a4:	8b 50 08             	mov    0x8(%eax),%edx
 805b2a7:	8b 45 08             	mov    0x8(%ebp),%eax
 805b2aa:	01 c2                	add    %eax,%edx
 805b2ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805b2af:	89 50 08             	mov    %edx,0x8(%eax)
                pf->size -= size;
 805b2b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805b2b5:	8b 40 10             	mov    0x10(%eax),%eax
 805b2b8:	2b 45 08             	sub    0x8(%ebp),%eax
 805b2bb:	89 c2                	mov    %eax,%edx
 805b2bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805b2c0:	89 50 10             	mov    %edx,0x10(%eax)
                break;
 805b2c3:	eb 0a                	jmp    805b2cf <malloc_pages+0xca>
        size = pageround(size);

        p = 0;

        /* Look for free pages before asking for more */
        for (pf = free_list.next; pf; pf = pf->next) {
 805b2c5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
 805b2c9:	0f 85 74 ff ff ff    	jne    805b243 <malloc_pages+0x3e>
#ifdef EXTRA_SANITY
        if (p && page_dir[ptr2index(p)] != MALLOC_FREE)
                wrterror("(ES): allocated non-free page on free-list\n");
#endif /* EXTRA_SANITY */

        size >>= malloc_pageshift;
 805b2cf:	c1 6d 08 0c          	shrl   $0xc,0x8(%ebp)

        /* Map new pages */
        if (!p)
 805b2d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 805b2d7:	75 0e                	jne    805b2e7 <malloc_pages+0xe2>
                p = map_pages(size);
 805b2d9:	8b 45 08             	mov    0x8(%ebp),%eax
 805b2dc:	89 04 24             	mov    %eax,(%esp)
 805b2df:	e8 bc fa ff ff       	call   805ada0 <map_pages>
 805b2e4:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if (p) {
 805b2e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 805b2eb:	74 7d                	je     805b36a <malloc_pages+0x165>

                index = ptr2index(p);
 805b2ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b2f0:	c1 e8 0c             	shr    $0xc,%eax
 805b2f3:	89 c2                	mov    %eax,%edx
 805b2f5:	8b 83 74 02 00 00    	mov    0x274(%ebx),%eax
 805b2fb:	29 c2                	sub    %eax,%edx
 805b2fd:	89 d0                	mov    %edx,%eax
 805b2ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                page_dir[index] = MALLOC_FIRST;
 805b302:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805b308:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 805b30b:	c1 e2 02             	shl    $0x2,%edx
 805b30e:	01 d0                	add    %edx,%eax
 805b310:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
                for (i = 1; i < size; i++)
 805b316:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
 805b31d:	eb 1c                	jmp    805b33b <malloc_pages+0x136>
                        page_dir[index + i] = MALLOC_FOLLOW;
 805b31f:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805b325:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
 805b328:	8b 55 ec             	mov    -0x14(%ebp),%edx
 805b32b:	01 ca                	add    %ecx,%edx
 805b32d:	c1 e2 02             	shl    $0x2,%edx
 805b330:	01 d0                	add    %edx,%eax
 805b332:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

        if (p) {

                index = ptr2index(p);
                page_dir[index] = MALLOC_FIRST;
                for (i = 1; i < size; i++)
 805b338:	ff 45 ec             	incl   -0x14(%ebp)
 805b33b:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805b33e:	3b 45 08             	cmp    0x8(%ebp),%eax
 805b341:	72 dc                	jb     805b31f <malloc_pages+0x11a>
                        page_dir[index + i] = MALLOC_FOLLOW;

                if (malloc_junk)
 805b343:	8b 83 b4 02 00 00    	mov    0x2b4(%ebx),%eax
 805b349:	85 c0                	test   %eax,%eax
 805b34b:	74 1d                	je     805b36a <malloc_pages+0x165>
                        memset(p, SOME_JUNK, size << malloc_pageshift);
 805b34d:	8b 45 08             	mov    0x8(%ebp),%eax
 805b350:	c1 e0 0c             	shl    $0xc,%eax
 805b353:	89 44 24 08          	mov    %eax,0x8(%esp)
 805b357:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
 805b35e:	00 
 805b35f:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b362:	89 04 24             	mov    %eax,(%esp)
 805b365:	e8 41 f0 ff ff       	call   805a3ab <memset>
        }

        if (delay_free) {
 805b36a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
 805b36e:	74 20                	je     805b390 <malloc_pages+0x18b>
                if (!px)
 805b370:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805b376:	85 c0                	test   %eax,%eax
 805b378:	75 0b                	jne    805b385 <malloc_pages+0x180>
                        px = delay_free;
 805b37a:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805b37d:	89 83 bc 02 00 00    	mov    %eax,0x2bc(%ebx)
 805b383:	eb 0b                	jmp    805b390 <malloc_pages+0x18b>
                else
                        ifree(delay_free);
 805b385:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805b388:	89 04 24             	mov    %eax,(%esp)
 805b38b:	e8 d7 0e 00 00       	call   805c267 <ifree>
        }

        return p;
 805b390:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 805b393:	83 c4 34             	add    $0x34,%esp
 805b396:	5b                   	pop    %ebx
 805b397:	5d                   	pop    %ebp
 805b398:	c3                   	ret    

0805b399 <malloc_make_chunks>:
 * Allocate a page of fragments
 */

static __inline__ int
malloc_make_chunks(int bits)
{
 805b399:	55                   	push   %ebp
 805b39a:	89 e5                	mov    %esp,%ebp
 805b39c:	56                   	push   %esi
 805b39d:	53                   	push   %ebx
 805b39e:	83 ec 30             	sub    $0x30,%esp
 805b3a1:	e8 53 ee ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805b3a6:	81 c3 ba b4 00 00    	add    $0xb4ba,%ebx
        struct  pginfo *bp;
        void *pp;
        unsigned int i, k, l;

        /* Allocate a new bucket */
        pp = malloc_pages(malloc_pagesize);
 805b3ac:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
 805b3b3:	e8 4d fe ff ff       	call   805b205 <malloc_pages>
 805b3b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (!pp)
 805b3bb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
 805b3bf:	75 0a                	jne    805b3cb <malloc_make_chunks+0x32>
                return 0;
 805b3c1:	b8 00 00 00 00       	mov    $0x0,%eax
 805b3c6:	e9 f4 01 00 00       	jmp    805b5bf <malloc_make_chunks+0x226>

        /* Find length of admin structure */
        l = offsetof(struct pginfo, bits[0]);
 805b3cb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        l += sizeof bp->bits[0] *
             (((malloc_pagesize >> bits) + MALLOC_BITS - 1) / MALLOC_BITS);
 805b3d2:	8b 45 08             	mov    0x8(%ebp),%eax
 805b3d5:	ba 00 10 00 00       	mov    $0x1000,%edx
 805b3da:	88 c1                	mov    %al,%cl
 805b3dc:	d3 ea                	shr    %cl,%edx
 805b3de:	89 d0                	mov    %edx,%eax
 805b3e0:	83 c0 1f             	add    $0x1f,%eax
 805b3e3:	c1 e8 05             	shr    $0x5,%eax
        if (!pp)
                return 0;

        /* Find length of admin structure */
        l = offsetof(struct pginfo, bits[0]);
        l += sizeof bp->bits[0] *
 805b3e6:	c1 e0 02             	shl    $0x2,%eax
 805b3e9:	01 45 ec             	add    %eax,-0x14(%ebp)
             (((malloc_pagesize >> bits) + MALLOC_BITS - 1) / MALLOC_BITS);

        /* Don't waste more than two chunks on this */
        if ((1U << (bits)) <= l + l) {
 805b3ec:	8b 45 08             	mov    0x8(%ebp),%eax
 805b3ef:	ba 01 00 00 00       	mov    $0x1,%edx
 805b3f4:	88 c1                	mov    %al,%cl
 805b3f6:	d3 e2                	shl    %cl,%edx
 805b3f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805b3fb:	01 c0                	add    %eax,%eax
 805b3fd:	39 c2                	cmp    %eax,%edx
 805b3ff:	77 08                	ja     805b409 <malloc_make_chunks+0x70>
                bp = (struct  pginfo *)pp;
 805b401:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805b404:	89 45 f4             	mov    %eax,-0xc(%ebp)
 805b407:	eb 29                	jmp    805b432 <malloc_make_chunks+0x99>
        } else {
                bp = (struct  pginfo *)imalloc(l);
 805b409:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805b40c:	89 04 24             	mov    %eax,(%esp)
 805b40f:	e8 34 05 00 00       	call   805b948 <imalloc>
 805b414:	89 45 f4             	mov    %eax,-0xc(%ebp)
                if (!bp) {
 805b417:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 805b41b:	75 15                	jne    805b432 <malloc_make_chunks+0x99>
                        ifree(pp);
 805b41d:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805b420:	89 04 24             	mov    %eax,(%esp)
 805b423:	e8 3f 0e 00 00       	call   805c267 <ifree>
                        return 0;
 805b428:	b8 00 00 00 00       	mov    $0x0,%eax
 805b42d:	e9 8d 01 00 00       	jmp    805b5bf <malloc_make_chunks+0x226>
                }
        }

        bp->size = (1 << bits);
 805b432:	8b 45 08             	mov    0x8(%ebp),%eax
 805b435:	ba 01 00 00 00       	mov    $0x1,%edx
 805b43a:	88 c1                	mov    %al,%cl
 805b43c:	d3 e2                	shl    %cl,%edx
 805b43e:	89 d0                	mov    %edx,%eax
 805b440:	0f b7 d0             	movzwl %ax,%edx
 805b443:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b446:	66 89 50 08          	mov    %dx,0x8(%eax)
        bp->shift = bits;
 805b44a:	8b 45 08             	mov    0x8(%ebp),%eax
 805b44d:	0f b7 d0             	movzwl %ax,%edx
 805b450:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b453:	66 89 50 0a          	mov    %dx,0xa(%eax)
        bp->total = bp->free = malloc_pagesize >> bits;
 805b457:	8b 45 08             	mov    0x8(%ebp),%eax
 805b45a:	ba 00 10 00 00       	mov    $0x1000,%edx
 805b45f:	88 c1                	mov    %al,%cl
 805b461:	d3 ea                	shr    %cl,%edx
 805b463:	89 d0                	mov    %edx,%eax
 805b465:	0f b7 d0             	movzwl %ax,%edx
 805b468:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b46b:	66 89 50 0c          	mov    %dx,0xc(%eax)
 805b46f:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b472:	0f b7 50 0c          	movzwl 0xc(%eax),%edx
 805b476:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b479:	66 89 50 0e          	mov    %dx,0xe(%eax)
        bp->page = pp;
 805b47d:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b480:	8b 55 e8             	mov    -0x18(%ebp),%edx
 805b483:	89 50 04             	mov    %edx,0x4(%eax)

        /* set all valid bits in the bitmap */
        k = bp->total;
 805b486:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b489:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
 805b48d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        i = 0;
 805b490:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

        /* Do a bunch at a time */
        for (; k - i >= MALLOC_BITS; i += MALLOC_BITS)
 805b497:	eb 19                	jmp    805b4b2 <malloc_make_chunks+0x119>
                bp->bits[i / MALLOC_BITS] = ~0;
 805b499:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805b49c:	c1 e8 05             	shr    $0x5,%eax
 805b49f:	89 c2                	mov    %eax,%edx
 805b4a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b4a4:	83 c2 04             	add    $0x4,%edx
 805b4a7:	c7 04 90 ff ff ff ff 	movl   $0xffffffff,(%eax,%edx,4)
        /* set all valid bits in the bitmap */
        k = bp->total;
        i = 0;

        /* Do a bunch at a time */
        for (; k - i >= MALLOC_BITS; i += MALLOC_BITS)
 805b4ae:	83 45 f0 20          	addl   $0x20,-0x10(%ebp)
 805b4b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805b4b5:	2b 45 f0             	sub    -0x10(%ebp),%eax
 805b4b8:	83 f8 1f             	cmp    $0x1f,%eax
 805b4bb:	77 dc                	ja     805b499 <malloc_make_chunks+0x100>
                bp->bits[i / MALLOC_BITS] = ~0;

        for (; i < k; i++)
 805b4bd:	eb 2c                	jmp    805b4eb <malloc_make_chunks+0x152>
                bp->bits[i / MALLOC_BITS] |= 1 << (i % MALLOC_BITS);
 805b4bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805b4c2:	c1 e8 05             	shr    $0x5,%eax
 805b4c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
 805b4c8:	8d 48 04             	lea    0x4(%eax),%ecx
 805b4cb:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
 805b4ce:	8b 4d f0             	mov    -0x10(%ebp),%ecx
 805b4d1:	83 e1 1f             	and    $0x1f,%ecx
 805b4d4:	be 01 00 00 00       	mov    $0x1,%esi
 805b4d9:	d3 e6                	shl    %cl,%esi
 805b4db:	89 f1                	mov    %esi,%ecx
 805b4dd:	09 d1                	or     %edx,%ecx
 805b4df:	8b 55 f4             	mov    -0xc(%ebp),%edx
 805b4e2:	83 c0 04             	add    $0x4,%eax
 805b4e5:	89 0c 82             	mov    %ecx,(%edx,%eax,4)

        /* Do a bunch at a time */
        for (; k - i >= MALLOC_BITS; i += MALLOC_BITS)
                bp->bits[i / MALLOC_BITS] = ~0;

        for (; i < k; i++)
 805b4e8:	ff 45 f0             	incl   -0x10(%ebp)
 805b4eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805b4ee:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
 805b4f1:	72 cc                	jb     805b4bf <malloc_make_chunks+0x126>
                bp->bits[i / MALLOC_BITS] |= 1 << (i % MALLOC_BITS);

        if (bp == bp->page) {
 805b4f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b4f6:	8b 40 04             	mov    0x4(%eax),%eax
 805b4f9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
 805b4fc:	75 72                	jne    805b570 <malloc_make_chunks+0x1d7>
                /* Mark the ones we stole for ourselves */
                for (i = 0; l > 0; i++) {
 805b4fe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
 805b505:	eb 63                	jmp    805b56a <malloc_make_chunks+0x1d1>
                        bp->bits[i / MALLOC_BITS] &= ~(1 << (i % MALLOC_BITS));
 805b507:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805b50a:	c1 e8 05             	shr    $0x5,%eax
 805b50d:	8b 55 f4             	mov    -0xc(%ebp),%edx
 805b510:	8d 48 04             	lea    0x4(%eax),%ecx
 805b513:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
 805b516:	8b 4d f0             	mov    -0x10(%ebp),%ecx
 805b519:	83 e1 1f             	and    $0x1f,%ecx
 805b51c:	be 01 00 00 00       	mov    $0x1,%esi
 805b521:	d3 e6                	shl    %cl,%esi
 805b523:	89 f1                	mov    %esi,%ecx
 805b525:	f7 d1                	not    %ecx
 805b527:	21 d1                	and    %edx,%ecx
 805b529:	8b 55 f4             	mov    -0xc(%ebp),%edx
 805b52c:	83 c0 04             	add    $0x4,%eax
 805b52f:	89 0c 82             	mov    %ecx,(%edx,%eax,4)
                        bp->free--;
 805b532:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b535:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
 805b539:	48                   	dec    %eax
 805b53a:	0f b7 d0             	movzwl %ax,%edx
 805b53d:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b540:	66 89 50 0c          	mov    %dx,0xc(%eax)
                        bp->total--;
 805b544:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b547:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
 805b54b:	48                   	dec    %eax
 805b54c:	0f b7 d0             	movzwl %ax,%edx
 805b54f:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b552:	66 89 50 0e          	mov    %dx,0xe(%eax)
                        l -= (1 << bits);
 805b556:	8b 45 08             	mov    0x8(%ebp),%eax
 805b559:	ba 01 00 00 00       	mov    $0x1,%edx
 805b55e:	88 c1                	mov    %al,%cl
 805b560:	d3 e2                	shl    %cl,%edx
 805b562:	89 d0                	mov    %edx,%eax
 805b564:	29 45 ec             	sub    %eax,-0x14(%ebp)
        for (; i < k; i++)
                bp->bits[i / MALLOC_BITS] |= 1 << (i % MALLOC_BITS);

        if (bp == bp->page) {
                /* Mark the ones we stole for ourselves */
                for (i = 0; l > 0; i++) {
 805b567:	ff 45 f0             	incl   -0x10(%ebp)
 805b56a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
 805b56e:	75 97                	jne    805b507 <malloc_make_chunks+0x16e>
                }
        }

        /* MALLOC_LOCK */

        page_dir[ptr2index(pp)] = bp;
 805b570:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805b576:	8b 55 e8             	mov    -0x18(%ebp),%edx
 805b579:	89 d1                	mov    %edx,%ecx
 805b57b:	c1 e9 0c             	shr    $0xc,%ecx
 805b57e:	8b 93 74 02 00 00    	mov    0x274(%ebx),%edx
 805b584:	29 d1                	sub    %edx,%ecx
 805b586:	89 ca                	mov    %ecx,%edx
 805b588:	c1 e2 02             	shl    $0x2,%edx
 805b58b:	01 c2                	add    %eax,%edx
 805b58d:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b590:	89 02                	mov    %eax,(%edx)

        bp->next = page_dir[bits];
 805b592:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805b598:	8b 55 08             	mov    0x8(%ebp),%edx
 805b59b:	c1 e2 02             	shl    $0x2,%edx
 805b59e:	01 d0                	add    %edx,%eax
 805b5a0:	8b 10                	mov    (%eax),%edx
 805b5a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b5a5:	89 10                	mov    %edx,(%eax)
        page_dir[bits] = bp;
 805b5a7:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805b5ad:	8b 55 08             	mov    0x8(%ebp),%edx
 805b5b0:	c1 e2 02             	shl    $0x2,%edx
 805b5b3:	01 c2                	add    %eax,%edx
 805b5b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b5b8:	89 02                	mov    %eax,(%edx)

        /* MALLOC_UNLOCK */

        return 1;
 805b5ba:	b8 01 00 00 00       	mov    $0x1,%eax
}
 805b5bf:	83 c4 30             	add    $0x30,%esp
 805b5c2:	5b                   	pop    %ebx
 805b5c3:	5e                   	pop    %esi
 805b5c4:	5d                   	pop    %ebp
 805b5c5:	c3                   	ret    

0805b5c6 <malloc_bytes>:
/*
 * Allocate a fragment
 */
static void *
malloc_bytes(size_t size)
{
 805b5c6:	55                   	push   %ebp
 805b5c7:	89 e5                	mov    %esp,%ebp
 805b5c9:	56                   	push   %esi
 805b5ca:	53                   	push   %ebx
 805b5cb:	83 ec 40             	sub    $0x40,%esp
 805b5ce:	e8 26 ec ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805b5d3:	81 c3 8d b2 00 00    	add    $0xb28d,%ebx
        struct  pginfo *bp;
        int k;
        u_int *lp;

        /* Don't bother with anything less than this */
        if (size < malloc_minsize)
 805b5d9:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
 805b5dd:	77 07                	ja     805b5e6 <malloc_bytes+0x20>
                size = malloc_minsize;
 805b5df:	c7 45 08 10 00 00 00 	movl   $0x10,0x8(%ebp)

        /* Find the right bucket */
        j = 1;
 805b5e6:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
        i = size - 1;
 805b5ed:	8b 45 08             	mov    0x8(%ebp),%eax
 805b5f0:	48                   	dec    %eax
 805b5f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (i >>= 1)
 805b5f4:	eb 03                	jmp    805b5f9 <malloc_bytes+0x33>
                j++;
 805b5f6:	ff 45 f0             	incl   -0x10(%ebp)
                size = malloc_minsize;

        /* Find the right bucket */
        j = 1;
        i = size - 1;
        while (i >>= 1)
 805b5f9:	d1 7d f4             	sarl   -0xc(%ebp)
 805b5fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 805b600:	75 f4                	jne    805b5f6 <malloc_bytes+0x30>
                j++;

        /* If it's empty, make a page more of that size chunks */
        if (!page_dir[j] && !malloc_make_chunks(j))
 805b602:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805b608:	8b 55 f0             	mov    -0x10(%ebp),%edx
 805b60b:	c1 e2 02             	shl    $0x2,%edx
 805b60e:	01 d0                	add    %edx,%eax
 805b610:	8b 00                	mov    (%eax),%eax
 805b612:	85 c0                	test   %eax,%eax
 805b614:	0f 85 27 02 00 00    	jne    805b841 <malloc_bytes+0x27b>
 805b61a:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805b61d:	89 45 dc             	mov    %eax,-0x24(%ebp)
        struct  pginfo *bp;
        void *pp;
        unsigned int i, k, l;

        /* Allocate a new bucket */
        pp = malloc_pages(malloc_pagesize);
 805b620:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
 805b627:	e8 d9 fb ff ff       	call   805b205 <malloc_pages>
 805b62c:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (!pp)
 805b62f:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
 805b633:	75 0a                	jne    805b63f <malloc_bytes+0x79>
                return 0;
 805b635:	b8 00 00 00 00       	mov    $0x0,%eax
 805b63a:	e9 f4 01 00 00       	jmp    805b833 <malloc_bytes+0x26d>

        /* Find length of admin structure */
        l = offsetof(struct pginfo, bits[0]);
 805b63f:	c7 45 d4 10 00 00 00 	movl   $0x10,-0x2c(%ebp)
        l += sizeof bp->bits[0] *
             (((malloc_pagesize >> bits) + MALLOC_BITS - 1) / MALLOC_BITS);
 805b646:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805b649:	ba 00 10 00 00       	mov    $0x1000,%edx
 805b64e:	88 c1                	mov    %al,%cl
 805b650:	d3 ea                	shr    %cl,%edx
 805b652:	89 d0                	mov    %edx,%eax
 805b654:	83 c0 1f             	add    $0x1f,%eax
 805b657:	c1 e8 05             	shr    $0x5,%eax
        if (!pp)
                return 0;

        /* Find length of admin structure */
        l = offsetof(struct pginfo, bits[0]);
        l += sizeof bp->bits[0] *
 805b65a:	c1 e0 02             	shl    $0x2,%eax
 805b65d:	01 45 d4             	add    %eax,-0x2c(%ebp)
             (((malloc_pagesize >> bits) + MALLOC_BITS - 1) / MALLOC_BITS);

        /* Don't waste more than two chunks on this */
        if ((1U << (bits)) <= l + l) {
 805b660:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805b663:	ba 01 00 00 00       	mov    $0x1,%edx
 805b668:	88 c1                	mov    %al,%cl
 805b66a:	d3 e2                	shl    %cl,%edx
 805b66c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805b66f:	01 c0                	add    %eax,%eax
 805b671:	39 c2                	cmp    %eax,%edx
 805b673:	77 08                	ja     805b67d <malloc_bytes+0xb7>
                bp = (struct  pginfo *)pp;
 805b675:	8b 45 d8             	mov    -0x28(%ebp),%eax
 805b678:	89 45 d0             	mov    %eax,-0x30(%ebp)
 805b67b:	eb 29                	jmp    805b6a6 <malloc_bytes+0xe0>
        } else {
                bp = (struct  pginfo *)imalloc(l);
 805b67d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805b680:	89 04 24             	mov    %eax,(%esp)
 805b683:	e8 c0 02 00 00       	call   805b948 <imalloc>
 805b688:	89 45 d0             	mov    %eax,-0x30(%ebp)
                if (!bp) {
 805b68b:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
 805b68f:	75 15                	jne    805b6a6 <malloc_bytes+0xe0>
                        ifree(pp);
 805b691:	8b 45 d8             	mov    -0x28(%ebp),%eax
 805b694:	89 04 24             	mov    %eax,(%esp)
 805b697:	e8 cb 0b 00 00       	call   805c267 <ifree>
                        return 0;
 805b69c:	b8 00 00 00 00       	mov    $0x0,%eax
 805b6a1:	e9 8d 01 00 00       	jmp    805b833 <malloc_bytes+0x26d>
                }
        }

        bp->size = (1 << bits);
 805b6a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805b6a9:	ba 01 00 00 00       	mov    $0x1,%edx
 805b6ae:	88 c1                	mov    %al,%cl
 805b6b0:	d3 e2                	shl    %cl,%edx
 805b6b2:	89 d0                	mov    %edx,%eax
 805b6b4:	0f b7 d0             	movzwl %ax,%edx
 805b6b7:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805b6ba:	66 89 50 08          	mov    %dx,0x8(%eax)
        bp->shift = bits;
 805b6be:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805b6c1:	0f b7 d0             	movzwl %ax,%edx
 805b6c4:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805b6c7:	66 89 50 0a          	mov    %dx,0xa(%eax)
        bp->total = bp->free = malloc_pagesize >> bits;
 805b6cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805b6ce:	ba 00 10 00 00       	mov    $0x1000,%edx
 805b6d3:	88 c1                	mov    %al,%cl
 805b6d5:	d3 ea                	shr    %cl,%edx
 805b6d7:	89 d0                	mov    %edx,%eax
 805b6d9:	0f b7 d0             	movzwl %ax,%edx
 805b6dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805b6df:	66 89 50 0c          	mov    %dx,0xc(%eax)
 805b6e3:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805b6e6:	0f b7 50 0c          	movzwl 0xc(%eax),%edx
 805b6ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805b6ed:	66 89 50 0e          	mov    %dx,0xe(%eax)
        bp->page = pp;
 805b6f1:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805b6f4:	8b 55 d8             	mov    -0x28(%ebp),%edx
 805b6f7:	89 50 04             	mov    %edx,0x4(%eax)

        /* set all valid bits in the bitmap */
        k = bp->total;
 805b6fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805b6fd:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
 805b701:	89 45 cc             	mov    %eax,-0x34(%ebp)
        i = 0;
 805b704:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
 805b70b:	eb 19                	jmp    805b726 <malloc_bytes+0x160>

        /* Do a bunch at a time */
        for (; k - i >= MALLOC_BITS; i += MALLOC_BITS)
                bp->bits[i / MALLOC_BITS] = ~0;
 805b70d:	8b 45 c8             	mov    -0x38(%ebp),%eax
 805b710:	c1 e8 05             	shr    $0x5,%eax
 805b713:	89 c2                	mov    %eax,%edx
 805b715:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805b718:	83 c2 04             	add    $0x4,%edx
 805b71b:	c7 04 90 ff ff ff ff 	movl   $0xffffffff,(%eax,%edx,4)
        /* set all valid bits in the bitmap */
        k = bp->total;
        i = 0;

        /* Do a bunch at a time */
        for (; k - i >= MALLOC_BITS; i += MALLOC_BITS)
 805b722:	83 45 c8 20          	addl   $0x20,-0x38(%ebp)
 805b726:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805b729:	2b 45 c8             	sub    -0x38(%ebp),%eax
 805b72c:	83 f8 1f             	cmp    $0x1f,%eax
 805b72f:	77 dc                	ja     805b70d <malloc_bytes+0x147>
 805b731:	eb 2c                	jmp    805b75f <malloc_bytes+0x199>
                bp->bits[i / MALLOC_BITS] = ~0;

        for (; i < k; i++)
                bp->bits[i / MALLOC_BITS] |= 1 << (i % MALLOC_BITS);
 805b733:	8b 45 c8             	mov    -0x38(%ebp),%eax
 805b736:	c1 e8 05             	shr    $0x5,%eax
 805b739:	8b 55 d0             	mov    -0x30(%ebp),%edx
 805b73c:	8d 48 04             	lea    0x4(%eax),%ecx
 805b73f:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
 805b742:	8b 4d c8             	mov    -0x38(%ebp),%ecx
 805b745:	83 e1 1f             	and    $0x1f,%ecx
 805b748:	be 01 00 00 00       	mov    $0x1,%esi
 805b74d:	d3 e6                	shl    %cl,%esi
 805b74f:	89 f1                	mov    %esi,%ecx
 805b751:	09 d1                	or     %edx,%ecx
 805b753:	8b 55 d0             	mov    -0x30(%ebp),%edx
 805b756:	83 c0 04             	add    $0x4,%eax
 805b759:	89 0c 82             	mov    %ecx,(%edx,%eax,4)

        /* Do a bunch at a time */
        for (; k - i >= MALLOC_BITS; i += MALLOC_BITS)
                bp->bits[i / MALLOC_BITS] = ~0;

        for (; i < k; i++)
 805b75c:	ff 45 c8             	incl   -0x38(%ebp)
 805b75f:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805b762:	3b 45 c8             	cmp    -0x38(%ebp),%eax
 805b765:	77 cc                	ja     805b733 <malloc_bytes+0x16d>
                bp->bits[i / MALLOC_BITS] |= 1 << (i % MALLOC_BITS);

        if (bp == bp->page) {
 805b767:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805b76a:	8b 40 04             	mov    0x4(%eax),%eax
 805b76d:	39 45 d0             	cmp    %eax,-0x30(%ebp)
 805b770:	75 72                	jne    805b7e4 <malloc_bytes+0x21e>
                /* Mark the ones we stole for ourselves */
                for (i = 0; l > 0; i++) {
 805b772:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
 805b779:	eb 63                	jmp    805b7de <malloc_bytes+0x218>
                        bp->bits[i / MALLOC_BITS] &= ~(1 << (i % MALLOC_BITS));
 805b77b:	8b 45 c8             	mov    -0x38(%ebp),%eax
 805b77e:	c1 e8 05             	shr    $0x5,%eax
 805b781:	8b 55 d0             	mov    -0x30(%ebp),%edx
 805b784:	8d 48 04             	lea    0x4(%eax),%ecx
 805b787:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
 805b78a:	8b 4d c8             	mov    -0x38(%ebp),%ecx
 805b78d:	83 e1 1f             	and    $0x1f,%ecx
 805b790:	be 01 00 00 00       	mov    $0x1,%esi
 805b795:	d3 e6                	shl    %cl,%esi
 805b797:	89 f1                	mov    %esi,%ecx
 805b799:	f7 d1                	not    %ecx
 805b79b:	21 d1                	and    %edx,%ecx
 805b79d:	8b 55 d0             	mov    -0x30(%ebp),%edx
 805b7a0:	83 c0 04             	add    $0x4,%eax
 805b7a3:	89 0c 82             	mov    %ecx,(%edx,%eax,4)
                        bp->free--;
 805b7a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805b7a9:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
 805b7ad:	48                   	dec    %eax
 805b7ae:	0f b7 d0             	movzwl %ax,%edx
 805b7b1:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805b7b4:	66 89 50 0c          	mov    %dx,0xc(%eax)
                        bp->total--;
 805b7b8:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805b7bb:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
 805b7bf:	48                   	dec    %eax
 805b7c0:	0f b7 d0             	movzwl %ax,%edx
 805b7c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805b7c6:	66 89 50 0e          	mov    %dx,0xe(%eax)
                        l -= (1 << bits);
 805b7ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805b7cd:	ba 01 00 00 00       	mov    $0x1,%edx
 805b7d2:	88 c1                	mov    %al,%cl
 805b7d4:	d3 e2                	shl    %cl,%edx
 805b7d6:	89 d0                	mov    %edx,%eax
 805b7d8:	29 45 d4             	sub    %eax,-0x2c(%ebp)
        for (; i < k; i++)
                bp->bits[i / MALLOC_BITS] |= 1 << (i % MALLOC_BITS);

        if (bp == bp->page) {
                /* Mark the ones we stole for ourselves */
                for (i = 0; l > 0; i++) {
 805b7db:	ff 45 c8             	incl   -0x38(%ebp)
 805b7de:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
 805b7e2:	75 97                	jne    805b77b <malloc_bytes+0x1b5>
                }
        }

        /* MALLOC_LOCK */

        page_dir[ptr2index(pp)] = bp;
 805b7e4:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805b7ea:	8b 55 d8             	mov    -0x28(%ebp),%edx
 805b7ed:	89 d1                	mov    %edx,%ecx
 805b7ef:	c1 e9 0c             	shr    $0xc,%ecx
 805b7f2:	8b 93 74 02 00 00    	mov    0x274(%ebx),%edx
 805b7f8:	29 d1                	sub    %edx,%ecx
 805b7fa:	89 ca                	mov    %ecx,%edx
 805b7fc:	c1 e2 02             	shl    $0x2,%edx
 805b7ff:	01 c2                	add    %eax,%edx
 805b801:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805b804:	89 02                	mov    %eax,(%edx)

        bp->next = page_dir[bits];
 805b806:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805b80c:	8b 55 dc             	mov    -0x24(%ebp),%edx
 805b80f:	c1 e2 02             	shl    $0x2,%edx
 805b812:	01 d0                	add    %edx,%eax
 805b814:	8b 10                	mov    (%eax),%edx
 805b816:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805b819:	89 10                	mov    %edx,(%eax)
        page_dir[bits] = bp;
 805b81b:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805b821:	8b 55 dc             	mov    -0x24(%ebp),%edx
 805b824:	c1 e2 02             	shl    $0x2,%edx
 805b827:	01 c2                	add    %eax,%edx
 805b829:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805b82c:	89 02                	mov    %eax,(%edx)

        /* MALLOC_UNLOCK */

        return 1;
 805b82e:	b8 01 00 00 00       	mov    $0x1,%eax
        i = size - 1;
        while (i >>= 1)
                j++;

        /* If it's empty, make a page more of that size chunks */
        if (!page_dir[j] && !malloc_make_chunks(j))
 805b833:	85 c0                	test   %eax,%eax
 805b835:	75 0a                	jne    805b841 <malloc_bytes+0x27b>
                return 0;
 805b837:	b8 00 00 00 00       	mov    $0x0,%eax
 805b83c:	e9 00 01 00 00       	jmp    805b941 <malloc_bytes+0x37b>

        bp = page_dir[j];
 805b841:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805b847:	8b 55 f0             	mov    -0x10(%ebp),%edx
 805b84a:	c1 e2 02             	shl    $0x2,%edx
 805b84d:	01 d0                	add    %edx,%eax
 805b84f:	8b 00                	mov    (%eax),%eax
 805b851:	89 45 e0             	mov    %eax,-0x20(%ebp)

        /* Find first word of bitmap which isn't empty */
        for (lp = bp->bits; !*lp; lp++)
 805b854:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805b857:	83 c0 10             	add    $0x10,%eax
 805b85a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 805b85d:	eb 04                	jmp    805b863 <malloc_bytes+0x29d>
 805b85f:	83 45 e4 04          	addl   $0x4,-0x1c(%ebp)
 805b863:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805b866:	8b 00                	mov    (%eax),%eax
 805b868:	85 c0                	test   %eax,%eax
 805b86a:	74 f3                	je     805b85f <malloc_bytes+0x299>
                ;

        /* Find that bit, and tweak it */
        u = 1;
 805b86c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
        k = 0;
 805b873:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
        while (!(*lp & u)) {
 805b87a:	eb 0b                	jmp    805b887 <malloc_bytes+0x2c1>
                u += u;
 805b87c:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805b87f:	01 c0                	add    %eax,%eax
 805b881:	89 45 ec             	mov    %eax,-0x14(%ebp)
                k++;
 805b884:	ff 45 e8             	incl   -0x18(%ebp)
                ;

        /* Find that bit, and tweak it */
        u = 1;
        k = 0;
        while (!(*lp & u)) {
 805b887:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805b88a:	8b 00                	mov    (%eax),%eax
 805b88c:	23 45 ec             	and    -0x14(%ebp),%eax
 805b88f:	85 c0                	test   %eax,%eax
 805b891:	74 e9                	je     805b87c <malloc_bytes+0x2b6>
                u += u;
                k++;
        }
        *lp ^= u;
 805b893:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805b896:	8b 00                	mov    (%eax),%eax
 805b898:	33 45 ec             	xor    -0x14(%ebp),%eax
 805b89b:	89 c2                	mov    %eax,%edx
 805b89d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805b8a0:	89 10                	mov    %edx,(%eax)

        /* If there are no more free, remove from free-list */
        if (!--bp->free) {
 805b8a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805b8a5:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
 805b8a9:	48                   	dec    %eax
 805b8aa:	0f b7 d0             	movzwl %ax,%edx
 805b8ad:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805b8b0:	66 89 50 0c          	mov    %dx,0xc(%eax)
 805b8b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805b8b7:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
 805b8bb:	85 c0                	test   %eax,%eax
 805b8bd:	75 1e                	jne    805b8dd <malloc_bytes+0x317>
                page_dir[j] = bp->next;
 805b8bf:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805b8c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
 805b8c8:	c1 e2 02             	shl    $0x2,%edx
 805b8cb:	01 c2                	add    %eax,%edx
 805b8cd:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805b8d0:	8b 00                	mov    (%eax),%eax
 805b8d2:	89 02                	mov    %eax,(%edx)
                bp->next = 0;
 805b8d4:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805b8d7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }

        /* Adjust to the real offset of that chunk */
        k += (lp - bp->bits) * MALLOC_BITS;
 805b8dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805b8e0:	8b 55 e0             	mov    -0x20(%ebp),%edx
 805b8e3:	83 c2 10             	add    $0x10,%edx
 805b8e6:	29 d0                	sub    %edx,%eax
 805b8e8:	c1 f8 02             	sar    $0x2,%eax
 805b8eb:	c1 e0 05             	shl    $0x5,%eax
 805b8ee:	89 c2                	mov    %eax,%edx
 805b8f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805b8f3:	01 d0                	add    %edx,%eax
 805b8f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
        k <<= bp->shift;
 805b8f8:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805b8fb:	0f b7 40 0a          	movzwl 0xa(%eax),%eax
 805b8ff:	88 c1                	mov    %al,%cl
 805b901:	d3 65 e8             	shll   %cl,-0x18(%ebp)

        if (malloc_junk)
 805b904:	8b 83 b4 02 00 00    	mov    0x2b4(%ebx),%eax
 805b90a:	85 c0                	test   %eax,%eax
 805b90c:	74 28                	je     805b936 <malloc_bytes+0x370>
                memset((u_char *)bp->page + k, SOME_JUNK, bp->size);
 805b90e:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805b911:	0f b7 40 08          	movzwl 0x8(%eax),%eax
 805b915:	89 c2                	mov    %eax,%edx
 805b917:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805b91a:	8b 48 04             	mov    0x4(%eax),%ecx
 805b91d:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805b920:	01 c8                	add    %ecx,%eax
 805b922:	89 54 24 08          	mov    %edx,0x8(%esp)
 805b926:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
 805b92d:	00 
 805b92e:	89 04 24             	mov    %eax,(%esp)
 805b931:	e8 75 ea ff ff       	call   805a3ab <memset>

        return (u_char *)bp->page + k;
 805b936:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805b939:	8b 50 04             	mov    0x4(%eax),%edx
 805b93c:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805b93f:	01 d0                	add    %edx,%eax
}
 805b941:	83 c4 40             	add    $0x40,%esp
 805b944:	5b                   	pop    %ebx
 805b945:	5e                   	pop    %esi
 805b946:	5d                   	pop    %ebp
 805b947:	c3                   	ret    

0805b948 <imalloc>:
/*
 * Allocate a piece of memory
 */
static void *
imalloc(size_t size)
{
 805b948:	55                   	push   %ebp
 805b949:	89 e5                	mov    %esp,%ebp
 805b94b:	53                   	push   %ebx
 805b94c:	83 ec 24             	sub    $0x24,%esp
 805b94f:	e8 a5 e8 ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805b954:	81 c3 0c af 00 00    	add    $0xaf0c,%ebx
        void *result;

        if (suicide)
 805b95a:	8b 83 9c 02 00 00    	mov    0x29c(%ebx),%eax
 805b960:	85 c0                	test   %eax,%eax
 805b962:	74 0c                	je     805b970 <imalloc+0x28>
                abort();
 805b964:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 805b96b:	e8 1e dd ff ff       	call   805968e <exit>

        if ((size + malloc_pagesize) < size)        /* Check for overflow */
 805b970:	8b 45 08             	mov    0x8(%ebp),%eax
 805b973:	05 00 10 00 00       	add    $0x1000,%eax
 805b978:	3b 45 08             	cmp    0x8(%ebp),%eax
 805b97b:	73 09                	jae    805b986 <imalloc+0x3e>
                result = 0;
 805b97d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 805b984:	eb 27                	jmp    805b9ad <imalloc+0x65>
        else if (size <= malloc_maxsize)
 805b986:	81 7d 08 00 08 00 00 	cmpl   $0x800,0x8(%ebp)
 805b98d:	77 10                	ja     805b99f <imalloc+0x57>
                result =  malloc_bytes(size);
 805b98f:	8b 45 08             	mov    0x8(%ebp),%eax
 805b992:	89 04 24             	mov    %eax,(%esp)
 805b995:	e8 2c fc ff ff       	call   805b5c6 <malloc_bytes>
 805b99a:	89 45 f4             	mov    %eax,-0xc(%ebp)
 805b99d:	eb 0e                	jmp    805b9ad <imalloc+0x65>
        else
                result =  malloc_pages(size);
 805b99f:	8b 45 08             	mov    0x8(%ebp),%eax
 805b9a2:	89 04 24             	mov    %eax,(%esp)
 805b9a5:	e8 5b f8 ff ff       	call   805b205 <malloc_pages>
 805b9aa:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if (malloc_abort && !result)
 805b9ad:	8b 83 98 02 00 00    	mov    0x298(%ebx),%eax
 805b9b3:	85 c0                	test   %eax,%eax
 805b9b5:	74 14                	je     805b9cb <imalloc+0x83>
 805b9b7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 805b9bb:	75 0e                	jne    805b9cb <imalloc+0x83>
                wrterror("allocation failed.\n");
 805b9bd:	8d 83 6c d8 ff ff    	lea    -0x2794(%ebx),%eax
 805b9c3:	89 04 24             	mov    %eax,(%esp)
 805b9c6:	e8 36 f2 ff ff       	call   805ac01 <wrterror>

        if (malloc_zero && result)
 805b9cb:	8b 83 b0 02 00 00    	mov    0x2b0(%ebx),%eax
 805b9d1:	85 c0                	test   %eax,%eax
 805b9d3:	74 20                	je     805b9f5 <imalloc+0xad>
 805b9d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 805b9d9:	74 1a                	je     805b9f5 <imalloc+0xad>
                memset(result, 0, size);
 805b9db:	8b 45 08             	mov    0x8(%ebp),%eax
 805b9de:	89 44 24 08          	mov    %eax,0x8(%esp)
 805b9e2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 805b9e9:	00 
 805b9ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805b9ed:	89 04 24             	mov    %eax,(%esp)
 805b9f0:	e8 b6 e9 ff ff       	call   805a3ab <memset>

        return result;
 805b9f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 805b9f8:	83 c4 24             	add    $0x24,%esp
 805b9fb:	5b                   	pop    %ebx
 805b9fc:	5d                   	pop    %ebp
 805b9fd:	c3                   	ret    

0805b9fe <irealloc>:
/*
 * Change the size of an allocation.
 */
static void *
irealloc(void *ptr, size_t size)
{
 805b9fe:	55                   	push   %ebp
 805b9ff:	89 e5                	mov    %esp,%ebp
 805ba01:	56                   	push   %esi
 805ba02:	53                   	push   %ebx
 805ba03:	83 ec 30             	sub    $0x30,%esp
 805ba06:	e8 ee e7 ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805ba0b:	81 c3 55 ae 00 00    	add    $0xae55,%ebx
        void *p;
        u_long osize, index;
        struct pginfo **mp;
        int i;

        if (suicide)
 805ba11:	8b 83 9c 02 00 00    	mov    0x29c(%ebx),%eax
 805ba17:	85 c0                	test   %eax,%eax
 805ba19:	74 0c                	je     805ba27 <irealloc+0x29>
                abort();
 805ba1b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 805ba22:	e8 67 dc ff ff       	call   805968e <exit>

        index = ptr2index(ptr);
 805ba27:	8b 45 08             	mov    0x8(%ebp),%eax
 805ba2a:	c1 e8 0c             	shr    $0xc,%eax
 805ba2d:	89 c2                	mov    %eax,%edx
 805ba2f:	8b 83 74 02 00 00    	mov    0x274(%ebx),%eax
 805ba35:	29 c2                	sub    %eax,%edx
 805ba37:	89 d0                	mov    %edx,%eax
 805ba39:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if (index < malloc_pageshift) {
 805ba3c:	83 7d ec 0b          	cmpl   $0xb,-0x14(%ebp)
 805ba40:	77 18                	ja     805ba5a <irealloc+0x5c>
                wrtwarning("junk pointer, too low to make sense.\n");
 805ba42:	8d 83 80 d8 ff ff    	lea    -0x2780(%ebx),%eax
 805ba48:	89 04 24             	mov    %eax,(%esp)
 805ba4b:	e8 81 f2 ff ff       	call   805acd1 <wrtwarning>
                return 0;
 805ba50:	b8 00 00 00 00       	mov    $0x0,%eax
 805ba55:	e9 fc 01 00 00       	jmp    805bc56 <irealloc+0x258>
        }

        if (index > last_index) {
 805ba5a:	8b 83 78 02 00 00    	mov    0x278(%ebx),%eax
 805ba60:	39 45 ec             	cmp    %eax,-0x14(%ebp)
 805ba63:	76 18                	jbe    805ba7d <irealloc+0x7f>
                wrtwarning("junk pointer, too high to make sense.\n");
 805ba65:	8d 83 a8 d8 ff ff    	lea    -0x2758(%ebx),%eax
 805ba6b:	89 04 24             	mov    %eax,(%esp)
 805ba6e:	e8 5e f2 ff ff       	call   805acd1 <wrtwarning>
                return 0;
 805ba73:	b8 00 00 00 00       	mov    $0x0,%eax
 805ba78:	e9 d9 01 00 00       	jmp    805bc56 <irealloc+0x258>
        }

        mp = &page_dir[index];
 805ba7d:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805ba83:	8b 55 ec             	mov    -0x14(%ebp),%edx
 805ba86:	c1 e2 02             	shl    $0x2,%edx
 805ba89:	01 d0                	add    %edx,%eax
 805ba8b:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if (*mp == MALLOC_FIRST) {                  /* Page allocation */
 805ba8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805ba91:	8b 00                	mov    (%eax),%eax
 805ba93:	83 f8 02             	cmp    $0x2,%eax
 805ba96:	75 75                	jne    805bb0d <irealloc+0x10f>

                /* Check the pointer */
                if ((u_long)ptr & malloc_pagemask) {
 805ba98:	8b 45 08             	mov    0x8(%ebp),%eax
 805ba9b:	25 ff 0f 00 00       	and    $0xfff,%eax
 805baa0:	85 c0                	test   %eax,%eax
 805baa2:	74 18                	je     805babc <irealloc+0xbe>
                        wrtwarning("modified (page-) pointer.\n");
 805baa4:	8d 83 cf d8 ff ff    	lea    -0x2731(%ebx),%eax
 805baaa:	89 04 24             	mov    %eax,(%esp)
 805baad:	e8 1f f2 ff ff       	call   805acd1 <wrtwarning>
                        return 0;
 805bab2:	b8 00 00 00 00       	mov    $0x0,%eax
 805bab7:	e9 9a 01 00 00       	jmp    805bc56 <irealloc+0x258>
                }

                /* Find the size in bytes */
                for (osize = malloc_pagesize; *++mp == MALLOC_FOLLOW;)
 805babc:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
 805bac3:	eb 07                	jmp    805bacc <irealloc+0xce>
                        osize += malloc_pagesize;
 805bac5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
                        wrtwarning("modified (page-) pointer.\n");
                        return 0;
                }

                /* Find the size in bytes */
                for (osize = malloc_pagesize; *++mp == MALLOC_FOLLOW;)
 805bacc:	83 45 f0 04          	addl   $0x4,-0x10(%ebp)
 805bad0:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bad3:	8b 00                	mov    (%eax),%eax
 805bad5:	83 f8 03             	cmp    $0x3,%eax
 805bad8:	74 eb                	je     805bac5 <irealloc+0xc7>
                        osize += malloc_pagesize;

                if (!malloc_realloc &&                  /* unless we have to, */
 805bada:	8b 83 a0 02 00 00    	mov    0x2a0(%ebx),%eax
 805bae0:	85 c0                	test   %eax,%eax
 805bae2:	0f 85 04 01 00 00    	jne    805bbec <irealloc+0x1ee>
 805bae8:	8b 45 0c             	mov    0xc(%ebp),%eax
 805baeb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
 805baee:	0f 87 f8 00 00 00    	ja     805bbec <irealloc+0x1ee>
                    size <= osize &&                      /* .. or are too small, */
                    size > (osize - malloc_pagesize)) {   /* .. or can free a page, */
 805baf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805baf7:	2d 00 10 00 00       	sub    $0x1000,%eax
                /* Find the size in bytes */
                for (osize = malloc_pagesize; *++mp == MALLOC_FOLLOW;)
                        osize += malloc_pagesize;

                if (!malloc_realloc &&                  /* unless we have to, */
                    size <= osize &&                      /* .. or are too small, */
 805bafc:	3b 45 0c             	cmp    0xc(%ebp),%eax
 805baff:	0f 83 e7 00 00 00    	jae    805bbec <irealloc+0x1ee>
                    size > (osize - malloc_pagesize)) {   /* .. or can free a page, */
                        return ptr;                         /* don't do anything. */
 805bb05:	8b 45 08             	mov    0x8(%ebp),%eax
 805bb08:	e9 49 01 00 00       	jmp    805bc56 <irealloc+0x258>
                }

        } else if (*mp >= MALLOC_MAGIC) {           /* Chunk allocation */
 805bb0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bb10:	8b 00                	mov    (%eax),%eax
 805bb12:	83 f8 03             	cmp    $0x3,%eax
 805bb15:	0f 86 bc 00 00 00    	jbe    805bbd7 <irealloc+0x1d9>

                /* Check the pointer for sane values */
                if (((u_long)ptr & ((*mp)->size - 1))) {
 805bb1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bb1e:	8b 00                	mov    (%eax),%eax
 805bb20:	0f b7 40 08          	movzwl 0x8(%eax),%eax
 805bb24:	48                   	dec    %eax
 805bb25:	89 c2                	mov    %eax,%edx
 805bb27:	8b 45 08             	mov    0x8(%ebp),%eax
 805bb2a:	21 d0                	and    %edx,%eax
 805bb2c:	85 c0                	test   %eax,%eax
 805bb2e:	74 18                	je     805bb48 <irealloc+0x14a>
                        wrtwarning("modified (chunk-) pointer.\n");
 805bb30:	8d 83 ea d8 ff ff    	lea    -0x2716(%ebx),%eax
 805bb36:	89 04 24             	mov    %eax,(%esp)
 805bb39:	e8 93 f1 ff ff       	call   805acd1 <wrtwarning>
                        return 0;
 805bb3e:	b8 00 00 00 00       	mov    $0x0,%eax
 805bb43:	e9 0e 01 00 00       	jmp    805bc56 <irealloc+0x258>
                }

                /* Find the chunk index in the page */
                i = ((u_long)ptr & malloc_pagemask) >> (*mp)->shift;
 805bb48:	8b 45 08             	mov    0x8(%ebp),%eax
 805bb4b:	25 ff 0f 00 00       	and    $0xfff,%eax
 805bb50:	89 c2                	mov    %eax,%edx
 805bb52:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bb55:	8b 00                	mov    (%eax),%eax
 805bb57:	0f b7 40 0a          	movzwl 0xa(%eax),%eax
 805bb5b:	88 c1                	mov    %al,%cl
 805bb5d:	d3 ea                	shr    %cl,%edx
 805bb5f:	89 d0                	mov    %edx,%eax
 805bb61:	89 45 e8             	mov    %eax,-0x18(%ebp)

                /* Verify that it isn't a free chunk already */
                if ((*mp)->bits[i / MALLOC_BITS] & (1 << (i % MALLOC_BITS))) {
 805bb64:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bb67:	8b 00                	mov    (%eax),%eax
 805bb69:	8b 55 e8             	mov    -0x18(%ebp),%edx
 805bb6c:	c1 ea 05             	shr    $0x5,%edx
 805bb6f:	83 c2 04             	add    $0x4,%edx
 805bb72:	8b 04 90             	mov    (%eax,%edx,4),%eax
 805bb75:	8b 55 e8             	mov    -0x18(%ebp),%edx
 805bb78:	83 e2 1f             	and    $0x1f,%edx
 805bb7b:	be 01 00 00 00       	mov    $0x1,%esi
 805bb80:	88 d1                	mov    %dl,%cl
 805bb82:	d3 e6                	shl    %cl,%esi
 805bb84:	89 f2                	mov    %esi,%edx
 805bb86:	21 d0                	and    %edx,%eax
 805bb88:	85 c0                	test   %eax,%eax
 805bb8a:	74 18                	je     805bba4 <irealloc+0x1a6>
                        wrtwarning("chunk is already free.\n");
 805bb8c:	8d 83 06 d9 ff ff    	lea    -0x26fa(%ebx),%eax
 805bb92:	89 04 24             	mov    %eax,(%esp)
 805bb95:	e8 37 f1 ff ff       	call   805acd1 <wrtwarning>
                        return 0;
 805bb9a:	b8 00 00 00 00       	mov    $0x0,%eax
 805bb9f:	e9 b2 00 00 00       	jmp    805bc56 <irealloc+0x258>
                }

                osize = (*mp)->size;
 805bba4:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bba7:	8b 00                	mov    (%eax),%eax
 805bba9:	0f b7 40 08          	movzwl 0x8(%eax),%eax
 805bbad:	89 45 f4             	mov    %eax,-0xc(%ebp)

                if (!malloc_realloc &&          /* Unless we have to, */
 805bbb0:	8b 83 a0 02 00 00    	mov    0x2a0(%ebx),%eax
 805bbb6:	85 c0                	test   %eax,%eax
 805bbb8:	75 32                	jne    805bbec <irealloc+0x1ee>
 805bbba:	8b 45 0c             	mov    0xc(%ebp),%eax
 805bbbd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
 805bbc0:	73 2a                	jae    805bbec <irealloc+0x1ee>
                    size < osize &&               /* ..or are too small, */
                    (size > osize / 2 ||          /* ..or could use a smaller size, */
 805bbc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805bbc5:	d1 e8                	shr    %eax
                }

                osize = (*mp)->size;

                if (!malloc_realloc &&          /* Unless we have to, */
                    size < osize &&               /* ..or are too small, */
 805bbc7:	3b 45 0c             	cmp    0xc(%ebp),%eax
 805bbca:	72 06                	jb     805bbd2 <irealloc+0x1d4>
                    (size > osize / 2 ||          /* ..or could use a smaller size, */
 805bbcc:	83 7d f4 10          	cmpl   $0x10,-0xc(%ebp)
 805bbd0:	75 1a                	jne    805bbec <irealloc+0x1ee>
                     osize == malloc_minsize)) {   /* ..(if there is one) */
                        return ptr;                 /* ..Don't do anything */
 805bbd2:	8b 45 08             	mov    0x8(%ebp),%eax
 805bbd5:	eb 7f                	jmp    805bc56 <irealloc+0x258>
                }

        } else {
                wrtwarning("pointer to wrong page.\n");
 805bbd7:	8d 83 1e d9 ff ff    	lea    -0x26e2(%ebx),%eax
 805bbdd:	89 04 24             	mov    %eax,(%esp)
 805bbe0:	e8 ec f0 ff ff       	call   805acd1 <wrtwarning>
                return 0;
 805bbe5:	b8 00 00 00 00       	mov    $0x0,%eax
 805bbea:	eb 6a                	jmp    805bc56 <irealloc+0x258>
        }

        p = imalloc(size);
 805bbec:	8b 45 0c             	mov    0xc(%ebp),%eax
 805bbef:	89 04 24             	mov    %eax,(%esp)
 805bbf2:	e8 51 fd ff ff       	call   805b948 <imalloc>
 805bbf7:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        if (p) {
 805bbfa:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
 805bbfe:	74 53                	je     805bc53 <irealloc+0x255>
                /* copy the lesser of the two sizes, and free the old one */
                if (!size || !osize)
 805bc00:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
 805bc04:	74 42                	je     805bc48 <irealloc+0x24a>
 805bc06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 805bc0a:	74 3c                	je     805bc48 <irealloc+0x24a>
                        ;
                else if (osize < size)
 805bc0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805bc0f:	3b 45 0c             	cmp    0xc(%ebp),%eax
 805bc12:	73 1b                	jae    805bc2f <irealloc+0x231>
                        memcpy(p, ptr, osize);
 805bc14:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805bc17:	89 44 24 08          	mov    %eax,0x8(%esp)
 805bc1b:	8b 45 08             	mov    0x8(%ebp),%eax
 805bc1e:	89 44 24 04          	mov    %eax,0x4(%esp)
 805bc22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805bc25:	89 04 24             	mov    %eax,(%esp)
 805bc28:	e8 23 e6 ff ff       	call   805a250 <memcpy>
 805bc2d:	eb 19                	jmp    805bc48 <irealloc+0x24a>
                else
                        memcpy(p, ptr, size);
 805bc2f:	8b 45 0c             	mov    0xc(%ebp),%eax
 805bc32:	89 44 24 08          	mov    %eax,0x8(%esp)
 805bc36:	8b 45 08             	mov    0x8(%ebp),%eax
 805bc39:	89 44 24 04          	mov    %eax,0x4(%esp)
 805bc3d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805bc40:	89 04 24             	mov    %eax,(%esp)
 805bc43:	e8 08 e6 ff ff       	call   805a250 <memcpy>
                ifree(ptr);
 805bc48:	8b 45 08             	mov    0x8(%ebp),%eax
 805bc4b:	89 04 24             	mov    %eax,(%esp)
 805bc4e:	e8 14 06 00 00       	call   805c267 <ifree>
        }
        return p;
 805bc53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
 805bc56:	83 c4 30             	add    $0x30,%esp
 805bc59:	5b                   	pop    %ebx
 805bc5a:	5e                   	pop    %esi
 805bc5b:	5d                   	pop    %ebp
 805bc5c:	c3                   	ret    

0805bc5d <free_pages>:
 * Free a sequence of pages
 */

static __inline__ void
free_pages(void *ptr, int index, struct pginfo *info)
{
 805bc5d:	55                   	push   %ebp
 805bc5e:	89 e5                	mov    %esp,%ebp
 805bc60:	53                   	push   %ebx
 805bc61:	83 ec 34             	sub    $0x34,%esp
 805bc64:	e8 90 e5 ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805bc69:	81 c3 f7 ab 00 00    	add    $0xabf7,%ebx
        unsigned int i;
        struct pgfree *pf, *pt = 0;
 805bc6f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
        u_long l;
        void *tail;

        if (info == MALLOC_FREE) {
 805bc76:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
 805bc7a:	75 13                	jne    805bc8f <free_pages+0x32>
                wrtwarning("page is already free.\n");
 805bc7c:	8d 83 36 d9 ff ff    	lea    -0x26ca(%ebx),%eax
 805bc82:	89 04 24             	mov    %eax,(%esp)
 805bc85:	e8 47 f0 ff ff       	call   805acd1 <wrtwarning>
                return;
 805bc8a:	e9 db 03 00 00       	jmp    805c06a <free_pages+0x40d>
        }

        if (info != MALLOC_FIRST) {
 805bc8f:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
 805bc93:	74 13                	je     805bca8 <free_pages+0x4b>
                wrtwarning("pointer to wrong page.\n");
 805bc95:	8d 83 1e d9 ff ff    	lea    -0x26e2(%ebx),%eax
 805bc9b:	89 04 24             	mov    %eax,(%esp)
 805bc9e:	e8 2e f0 ff ff       	call   805acd1 <wrtwarning>
                return;
 805bca3:	e9 c2 03 00 00       	jmp    805c06a <free_pages+0x40d>
        }

        if ((u_long)ptr & malloc_pagemask) {
 805bca8:	8b 45 08             	mov    0x8(%ebp),%eax
 805bcab:	25 ff 0f 00 00       	and    $0xfff,%eax
 805bcb0:	85 c0                	test   %eax,%eax
 805bcb2:	74 13                	je     805bcc7 <free_pages+0x6a>
                wrtwarning("modified (page-) pointer.\n");
 805bcb4:	8d 83 cf d8 ff ff    	lea    -0x2731(%ebx),%eax
 805bcba:	89 04 24             	mov    %eax,(%esp)
 805bcbd:	e8 0f f0 ff ff       	call   805acd1 <wrtwarning>
                return;
 805bcc2:	e9 a3 03 00 00       	jmp    805c06a <free_pages+0x40d>
        }

        /* Count how many pages and mark them free at the same time */
        page_dir[index] = MALLOC_FREE;
 805bcc7:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805bccd:	8b 55 0c             	mov    0xc(%ebp),%edx
 805bcd0:	c1 e2 02             	shl    $0x2,%edx
 805bcd3:	01 d0                	add    %edx,%eax
 805bcd5:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        for (i = 1; page_dir[index + i] == MALLOC_FOLLOW; i++)
 805bcdb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
 805bce2:	eb 1c                	jmp    805bd00 <free_pages+0xa3>
                page_dir[index + i] = MALLOC_FREE;
 805bce4:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805bcea:	8b 4d 0c             	mov    0xc(%ebp),%ecx
 805bced:	8b 55 f4             	mov    -0xc(%ebp),%edx
 805bcf0:	01 ca                	add    %ecx,%edx
 805bcf2:	c1 e2 02             	shl    $0x2,%edx
 805bcf5:	01 d0                	add    %edx,%eax
 805bcf7:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
                return;
        }

        /* Count how many pages and mark them free at the same time */
        page_dir[index] = MALLOC_FREE;
        for (i = 1; page_dir[index + i] == MALLOC_FOLLOW; i++)
 805bcfd:	ff 45 f4             	incl   -0xc(%ebp)
 805bd00:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805bd06:	8b 4d 0c             	mov    0xc(%ebp),%ecx
 805bd09:	8b 55 f4             	mov    -0xc(%ebp),%edx
 805bd0c:	01 ca                	add    %ecx,%edx
 805bd0e:	c1 e2 02             	shl    $0x2,%edx
 805bd11:	01 d0                	add    %edx,%eax
 805bd13:	8b 00                	mov    (%eax),%eax
 805bd15:	83 f8 03             	cmp    $0x3,%eax
 805bd18:	74 ca                	je     805bce4 <free_pages+0x87>
                page_dir[index + i] = MALLOC_FREE;

        l = i << malloc_pageshift;
 805bd1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805bd1d:	c1 e0 0c             	shl    $0xc,%eax
 805bd20:	89 45 e8             	mov    %eax,-0x18(%ebp)

        if (malloc_junk)
 805bd23:	8b 83 b4 02 00 00    	mov    0x2b4(%ebx),%eax
 805bd29:	85 c0                	test   %eax,%eax
 805bd2b:	74 1a                	je     805bd47 <free_pages+0xea>
                memset(ptr, SOME_JUNK, l);
 805bd2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805bd30:	89 44 24 08          	mov    %eax,0x8(%esp)
 805bd34:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
 805bd3b:	00 
 805bd3c:	8b 45 08             	mov    0x8(%ebp),%eax
 805bd3f:	89 04 24             	mov    %eax,(%esp)
 805bd42:	e8 64 e6 ff ff       	call   805a3ab <memset>
#ifdef HAS_MADVISE
        if (malloc_hint)
                madvise(ptr, l, MADV_FREE);
#endif

        tail = (char *)ptr + l;
 805bd47:	8b 55 08             	mov    0x8(%ebp),%edx
 805bd4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805bd4d:	01 d0                	add    %edx,%eax
 805bd4f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        /* add to free-list */
        if (!px)
 805bd52:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805bd58:	85 c0                	test   %eax,%eax
 805bd5a:	75 12                	jne    805bd6e <free_pages+0x111>
                px = imalloc(sizeof * pt);      /* This cannot fail... */
 805bd5c:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 805bd63:	e8 e0 fb ff ff       	call   805b948 <imalloc>
 805bd68:	89 83 bc 02 00 00    	mov    %eax,0x2bc(%ebx)
        px->page = ptr;
 805bd6e:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805bd74:	8b 55 08             	mov    0x8(%ebp),%edx
 805bd77:	89 50 08             	mov    %edx,0x8(%eax)
        px->end =  tail;
 805bd7a:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805bd80:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 805bd83:	89 50 0c             	mov    %edx,0xc(%eax)
        px->size = l;
 805bd86:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805bd8c:	8b 55 e8             	mov    -0x18(%ebp),%edx
 805bd8f:	89 50 10             	mov    %edx,0x10(%eax)
        if (!free_list.next) {
 805bd92:	8b 83 84 02 00 00    	mov    0x284(%ebx),%eax
 805bd98:	85 c0                	test   %eax,%eax
 805bd9a:	75 41                	jne    805bddd <free_pages+0x180>

                /* Nothing on free list, put this at head */
                px->next = free_list.next;
 805bd9c:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805bda2:	8b 93 84 02 00 00    	mov    0x284(%ebx),%edx
 805bda8:	89 10                	mov    %edx,(%eax)
                px->prev = &free_list;
 805bdaa:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805bdb0:	8d 93 84 02 00 00    	lea    0x284(%ebx),%edx
 805bdb6:	89 50 04             	mov    %edx,0x4(%eax)
                free_list.next = px;
 805bdb9:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805bdbf:	89 83 84 02 00 00    	mov    %eax,0x284(%ebx)
                pf = px;
 805bdc5:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805bdcb:	89 45 f0             	mov    %eax,-0x10(%ebp)
                px = 0;
 805bdce:	c7 83 bc 02 00 00 00 	movl   $0x0,0x2bc(%ebx)
 805bdd5:	00 00 00 
 805bdd8:	e9 a2 01 00 00       	jmp    805bf7f <free_pages+0x322>

        } else {

                /* Find the right spot, leave pf pointing to the modified entry. */
                tail = (char *)ptr + l;
 805bddd:	8b 55 08             	mov    0x8(%ebp),%edx
 805bde0:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805bde3:	01 d0                	add    %edx,%eax
 805bde5:	89 45 e4             	mov    %eax,-0x1c(%ebp)

                for (pf = free_list.next; pf->end < ptr && pf->next; pf = pf->next)
 805bde8:	8b 83 84 02 00 00    	mov    0x284(%ebx),%eax
 805bdee:	89 45 f0             	mov    %eax,-0x10(%ebp)
 805bdf1:	eb 08                	jmp    805bdfb <free_pages+0x19e>
 805bdf3:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bdf6:	8b 00                	mov    (%eax),%eax
 805bdf8:	89 45 f0             	mov    %eax,-0x10(%ebp)
 805bdfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bdfe:	8b 40 0c             	mov    0xc(%eax),%eax
 805be01:	3b 45 08             	cmp    0x8(%ebp),%eax
 805be04:	73 09                	jae    805be0f <free_pages+0x1b2>
 805be06:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805be09:	8b 00                	mov    (%eax),%eax
 805be0b:	85 c0                	test   %eax,%eax
 805be0d:	75 e4                	jne    805bdf3 <free_pages+0x196>
                        ; /* Race ahead here */

                if (pf->page > tail) {
 805be0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805be12:	8b 40 08             	mov    0x8(%eax),%eax
 805be15:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
 805be18:	76 4f                	jbe    805be69 <free_pages+0x20c>
                        /* Insert before entry */
                        px->next = pf;
 805be1a:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805be20:	8b 55 f0             	mov    -0x10(%ebp),%edx
 805be23:	89 10                	mov    %edx,(%eax)
                        px->prev = pf->prev;
 805be25:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805be2b:	8b 55 f0             	mov    -0x10(%ebp),%edx
 805be2e:	8b 52 04             	mov    0x4(%edx),%edx
 805be31:	89 50 04             	mov    %edx,0x4(%eax)
                        pf->prev = px;
 805be34:	8b 93 bc 02 00 00    	mov    0x2bc(%ebx),%edx
 805be3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805be3d:	89 50 04             	mov    %edx,0x4(%eax)
                        px->prev->next = px;
 805be40:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805be46:	8b 40 04             	mov    0x4(%eax),%eax
 805be49:	8b 93 bc 02 00 00    	mov    0x2bc(%ebx),%edx
 805be4f:	89 10                	mov    %edx,(%eax)
                        pf = px;
 805be51:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805be57:	89 45 f0             	mov    %eax,-0x10(%ebp)
                        px = 0;
 805be5a:	c7 83 bc 02 00 00 00 	movl   $0x0,0x2bc(%ebx)
 805be61:	00 00 00 
 805be64:	e9 16 01 00 00       	jmp    805bf7f <free_pages+0x322>
                } else if (pf->end == ptr) {
 805be69:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805be6c:	8b 40 0c             	mov    0xc(%eax),%eax
 805be6f:	3b 45 08             	cmp    0x8(%ebp),%eax
 805be72:	0f 85 91 00 00 00    	jne    805bf09 <free_pages+0x2ac>
                        /* Append to the previous entry */
                        pf->end = (char *)pf->end + l;
 805be78:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805be7b:	8b 50 0c             	mov    0xc(%eax),%edx
 805be7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805be81:	01 c2                	add    %eax,%edx
 805be83:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805be86:	89 50 0c             	mov    %edx,0xc(%eax)
                        pf->size += l;
 805be89:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805be8c:	8b 50 10             	mov    0x10(%eax),%edx
 805be8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805be92:	01 c2                	add    %eax,%edx
 805be94:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805be97:	89 50 10             	mov    %edx,0x10(%eax)
                        if (pf->next && pf->end == pf->next->page) {
 805be9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805be9d:	8b 00                	mov    (%eax),%eax
 805be9f:	85 c0                	test   %eax,%eax
 805bea1:	0f 84 d8 00 00 00    	je     805bf7f <free_pages+0x322>
 805bea7:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805beaa:	8b 50 0c             	mov    0xc(%eax),%edx
 805bead:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805beb0:	8b 00                	mov    (%eax),%eax
 805beb2:	8b 40 08             	mov    0x8(%eax),%eax
 805beb5:	39 c2                	cmp    %eax,%edx
 805beb7:	0f 85 c2 00 00 00    	jne    805bf7f <free_pages+0x322>
                                /* And collapse the next too. */
                                pt = pf->next;
 805bebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bec0:	8b 00                	mov    (%eax),%eax
 805bec2:	89 45 ec             	mov    %eax,-0x14(%ebp)
                                pf->end = pt->end;
 805bec5:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805bec8:	8b 50 0c             	mov    0xc(%eax),%edx
 805becb:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bece:	89 50 0c             	mov    %edx,0xc(%eax)
                                pf->size += pt->size;
 805bed1:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bed4:	8b 50 10             	mov    0x10(%eax),%edx
 805bed7:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805beda:	8b 40 10             	mov    0x10(%eax),%eax
 805bedd:	01 c2                	add    %eax,%edx
 805bedf:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bee2:	89 50 10             	mov    %edx,0x10(%eax)
                                pf->next = pt->next;
 805bee5:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805bee8:	8b 10                	mov    (%eax),%edx
 805beea:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805beed:	89 10                	mov    %edx,(%eax)
                                if (pf->next)
 805beef:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bef2:	8b 00                	mov    (%eax),%eax
 805bef4:	85 c0                	test   %eax,%eax
 805bef6:	0f 84 83 00 00 00    	je     805bf7f <free_pages+0x322>
                                        pf->next->prev = pf;
 805befc:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805beff:	8b 00                	mov    (%eax),%eax
 805bf01:	8b 55 f0             	mov    -0x10(%ebp),%edx
 805bf04:	89 50 04             	mov    %edx,0x4(%eax)
 805bf07:	eb 76                	jmp    805bf7f <free_pages+0x322>
                        }
                } else if (pf->page == tail) {
 805bf09:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bf0c:	8b 40 08             	mov    0x8(%eax),%eax
 805bf0f:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
 805bf12:	75 1c                	jne    805bf30 <free_pages+0x2d3>
                        /* Prepend to entry */
                        pf->size += l;
 805bf14:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bf17:	8b 50 10             	mov    0x10(%eax),%edx
 805bf1a:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805bf1d:	01 c2                	add    %eax,%edx
 805bf1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bf22:	89 50 10             	mov    %edx,0x10(%eax)
                        pf->page = ptr;
 805bf25:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bf28:	8b 55 08             	mov    0x8(%ebp),%edx
 805bf2b:	89 50 08             	mov    %edx,0x8(%eax)
 805bf2e:	eb 4f                	jmp    805bf7f <free_pages+0x322>
                } else if (!pf->next) {
 805bf30:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bf33:	8b 00                	mov    (%eax),%eax
 805bf35:	85 c0                	test   %eax,%eax
 805bf37:	75 38                	jne    805bf71 <free_pages+0x314>
                        /* Append at tail of chain */
                        px->next = 0;
 805bf39:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805bf3f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
                        px->prev = pf;
 805bf45:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805bf4b:	8b 55 f0             	mov    -0x10(%ebp),%edx
 805bf4e:	89 50 04             	mov    %edx,0x4(%eax)
                        pf->next = px;
 805bf51:	8b 93 bc 02 00 00    	mov    0x2bc(%ebx),%edx
 805bf57:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bf5a:	89 10                	mov    %edx,(%eax)
                        pf = px;
 805bf5c:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805bf62:	89 45 f0             	mov    %eax,-0x10(%ebp)
                        px = 0;
 805bf65:	c7 83 bc 02 00 00 00 	movl   $0x0,0x2bc(%ebx)
 805bf6c:	00 00 00 
 805bf6f:	eb 0e                	jmp    805bf7f <free_pages+0x322>
                } else {
                        wrterror("freelist is destroyed.\n");
 805bf71:	8d 83 4d d9 ff ff    	lea    -0x26b3(%ebx),%eax
 805bf77:	89 04 24             	mov    %eax,(%esp)
 805bf7a:	e8 82 ec ff ff       	call   805ac01 <wrterror>
                }
        }

        /* Return something to OS ? */
        if (!pf->next &&                            /* If we're the last one, */
 805bf7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bf82:	8b 00                	mov    (%eax),%eax
 805bf84:	85 c0                	test   %eax,%eax
 805bf86:	0f 85 cd 00 00 00    	jne    805c059 <free_pages+0x3fc>
            pf->size > malloc_cache &&                /* ..and the cache is full, */
 805bf8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bf8f:	8b 50 10             	mov    0x10(%eax),%edx
 805bf92:	8b 83 20 00 00 00    	mov    0x20(%ebx),%eax
                        wrterror("freelist is destroyed.\n");
                }
        }

        /* Return something to OS ? */
        if (!pf->next &&                            /* If we're the last one, */
 805bf98:	39 c2                	cmp    %eax,%edx
 805bf9a:	0f 86 b9 00 00 00    	jbe    805c059 <free_pages+0x3fc>
            pf->size > malloc_cache &&                /* ..and the cache is full, */
            pf->end == malloc_brk &&                  /* ..and none behind us, */
 805bfa0:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bfa3:	8b 50 0c             	mov    0xc(%eax),%edx
 805bfa6:	8b 83 b8 02 00 00    	mov    0x2b8(%ebx),%eax
                }
        }

        /* Return something to OS ? */
        if (!pf->next &&                            /* If we're the last one, */
            pf->size > malloc_cache &&                /* ..and the cache is full, */
 805bfac:	39 c2                	cmp    %eax,%edx
 805bfae:	0f 85 a5 00 00 00    	jne    805c059 <free_pages+0x3fc>
            pf->end == malloc_brk &&                  /* ..and none behind us, */
            malloc_brk == sbrk(0)) {                  /* ..and it's OK to do... */
 805bfb4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 805bfbb:	e8 df d4 ff ff       	call   805949f <sbrk>
 805bfc0:	89 c2                	mov    %eax,%edx
 805bfc2:	8b 83 b8 02 00 00    	mov    0x2b8(%ebx),%eax
        }

        /* Return something to OS ? */
        if (!pf->next &&                            /* If we're the last one, */
            pf->size > malloc_cache &&                /* ..and the cache is full, */
            pf->end == malloc_brk &&                  /* ..and none behind us, */
 805bfc8:	39 c2                	cmp    %eax,%edx
 805bfca:	0f 85 89 00 00 00    	jne    805c059 <free_pages+0x3fc>

                /*
                 * Keep the cache intact.  Notice that the '>' above guarantees that
                 * the pf will always have at least one page afterwards.
                 */
                pf->end = (char *)pf->page + malloc_cache;
 805bfd0:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bfd3:	8b 50 08             	mov    0x8(%eax),%edx
 805bfd6:	8b 83 20 00 00 00    	mov    0x20(%ebx),%eax
 805bfdc:	01 c2                	add    %eax,%edx
 805bfde:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bfe1:	89 50 0c             	mov    %edx,0xc(%eax)
                pf->size = malloc_cache;
 805bfe4:	8b 93 20 00 00 00    	mov    0x20(%ebx),%edx
 805bfea:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bfed:	89 50 10             	mov    %edx,0x10(%eax)

                brk(pf->end);
 805bff0:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805bff3:	8b 40 0c             	mov    0xc(%eax),%eax
 805bff6:	89 04 24             	mov    %eax,(%esp)
 805bff9:	e8 6a d5 ff ff       	call   8059568 <brk>
                malloc_brk = pf->end;
 805bffe:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805c001:	8b 40 0c             	mov    0xc(%eax),%eax
 805c004:	89 83 b8 02 00 00    	mov    %eax,0x2b8(%ebx)

                index = ptr2index(pf->end);
 805c00a:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805c00d:	8b 40 0c             	mov    0xc(%eax),%eax
 805c010:	c1 e8 0c             	shr    $0xc,%eax
 805c013:	89 c2                	mov    %eax,%edx
 805c015:	8b 83 74 02 00 00    	mov    0x274(%ebx),%eax
 805c01b:	29 c2                	sub    %eax,%edx
 805c01d:	89 d0                	mov    %edx,%eax
 805c01f:	89 45 0c             	mov    %eax,0xc(%ebp)
                last_index = index - 1;
 805c022:	8b 45 0c             	mov    0xc(%ebp),%eax
 805c025:	48                   	dec    %eax
 805c026:	89 83 78 02 00 00    	mov    %eax,0x278(%ebx)

                for (i = index; i <= last_index;)
 805c02c:	8b 45 0c             	mov    0xc(%ebp),%eax
 805c02f:	89 45 f4             	mov    %eax,-0xc(%ebp)
 805c032:	eb 1a                	jmp    805c04e <free_pages+0x3f1>
                        page_dir[i++] = MALLOC_NOT_MINE;
 805c034:	8b 8b 7c 02 00 00    	mov    0x27c(%ebx),%ecx
 805c03a:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805c03d:	8d 50 01             	lea    0x1(%eax),%edx
 805c040:	89 55 f4             	mov    %edx,-0xc(%ebp)
 805c043:	c1 e0 02             	shl    $0x2,%eax
 805c046:	01 c8                	add    %ecx,%eax
 805c048:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
                malloc_brk = pf->end;

                index = ptr2index(pf->end);
                last_index = index - 1;

                for (i = index; i <= last_index;)
 805c04e:	8b 83 78 02 00 00    	mov    0x278(%ebx),%eax
 805c054:	39 45 f4             	cmp    %eax,-0xc(%ebp)
 805c057:	76 db                	jbe    805c034 <free_pages+0x3d7>
                        page_dir[i++] = MALLOC_NOT_MINE;

                /* XXX: We could realloc/shrink the pagedir here I guess. */
        }
        if (pt)
 805c059:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
 805c05d:	74 0b                	je     805c06a <free_pages+0x40d>
                ifree(pt);
 805c05f:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805c062:	89 04 24             	mov    %eax,(%esp)
 805c065:	e8 fd 01 00 00       	call   805c267 <ifree>
}
 805c06a:	83 c4 34             	add    $0x34,%esp
 805c06d:	5b                   	pop    %ebx
 805c06e:	5d                   	pop    %ebp
 805c06f:	c3                   	ret    

0805c070 <free_bytes>:
 * Free a chunk, and possibly the page it's on, if the page becomes empty.
 */

static __inline__ void
free_bytes(void *ptr, int index, struct pginfo *info)
{
 805c070:	55                   	push   %ebp
 805c071:	89 e5                	mov    %esp,%ebp
 805c073:	56                   	push   %esi
 805c074:	53                   	push   %ebx
 805c075:	83 ec 20             	sub    $0x20,%esp
 805c078:	e8 7c e1 ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805c07d:	81 c3 e3 a7 00 00    	add    $0xa7e3,%ebx
        int i;
        struct pginfo **mp;
        void *vp;

        /* Find the chunk number on the page */
        i = ((u_long)ptr & malloc_pagemask) >> info->shift;
 805c083:	8b 45 08             	mov    0x8(%ebp),%eax
 805c086:	25 ff 0f 00 00       	and    $0xfff,%eax
 805c08b:	89 c2                	mov    %eax,%edx
 805c08d:	8b 45 10             	mov    0x10(%ebp),%eax
 805c090:	0f b7 40 0a          	movzwl 0xa(%eax),%eax
 805c094:	88 c1                	mov    %al,%cl
 805c096:	d3 ea                	shr    %cl,%edx
 805c098:	89 d0                	mov    %edx,%eax
 805c09a:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if (((u_long)ptr & (info->size - 1))) {
 805c09d:	8b 45 10             	mov    0x10(%ebp),%eax
 805c0a0:	0f b7 40 08          	movzwl 0x8(%eax),%eax
 805c0a4:	48                   	dec    %eax
 805c0a5:	89 c2                	mov    %eax,%edx
 805c0a7:	8b 45 08             	mov    0x8(%ebp),%eax
 805c0aa:	21 d0                	and    %edx,%eax
 805c0ac:	85 c0                	test   %eax,%eax
 805c0ae:	74 13                	je     805c0c3 <free_bytes+0x53>
                wrtwarning("modified (chunk-) pointer.\n");
 805c0b0:	8d 83 ea d8 ff ff    	lea    -0x2716(%ebx),%eax
 805c0b6:	89 04 24             	mov    %eax,(%esp)
 805c0b9:	e8 13 ec ff ff       	call   805acd1 <wrtwarning>
                return;
 805c0be:	e9 9d 01 00 00       	jmp    805c260 <free_bytes+0x1f0>
        }

        if (info->bits[i / MALLOC_BITS] & (1 << (i % MALLOC_BITS))) {
 805c0c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805c0c6:	c1 e8 05             	shr    $0x5,%eax
 805c0c9:	89 c2                	mov    %eax,%edx
 805c0cb:	8b 45 10             	mov    0x10(%ebp),%eax
 805c0ce:	83 c2 04             	add    $0x4,%edx
 805c0d1:	8b 04 90             	mov    (%eax,%edx,4),%eax
 805c0d4:	8b 55 f0             	mov    -0x10(%ebp),%edx
 805c0d7:	83 e2 1f             	and    $0x1f,%edx
 805c0da:	be 01 00 00 00       	mov    $0x1,%esi
 805c0df:	88 d1                	mov    %dl,%cl
 805c0e1:	d3 e6                	shl    %cl,%esi
 805c0e3:	89 f2                	mov    %esi,%edx
 805c0e5:	21 d0                	and    %edx,%eax
 805c0e7:	85 c0                	test   %eax,%eax
 805c0e9:	74 13                	je     805c0fe <free_bytes+0x8e>
                wrtwarning("chunk is already free.\n");
 805c0eb:	8d 83 06 d9 ff ff    	lea    -0x26fa(%ebx),%eax
 805c0f1:	89 04 24             	mov    %eax,(%esp)
 805c0f4:	e8 d8 eb ff ff       	call   805acd1 <wrtwarning>
                return;
 805c0f9:	e9 62 01 00 00       	jmp    805c260 <free_bytes+0x1f0>
        }

        if (malloc_junk)
 805c0fe:	8b 83 b4 02 00 00    	mov    0x2b4(%ebx),%eax
 805c104:	85 c0                	test   %eax,%eax
 805c106:	74 1e                	je     805c126 <free_bytes+0xb6>
                memset(ptr, SOME_JUNK, info->size);
 805c108:	8b 45 10             	mov    0x10(%ebp),%eax
 805c10b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
 805c10f:	89 44 24 08          	mov    %eax,0x8(%esp)
 805c113:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
 805c11a:	00 
 805c11b:	8b 45 08             	mov    0x8(%ebp),%eax
 805c11e:	89 04 24             	mov    %eax,(%esp)
 805c121:	e8 85 e2 ff ff       	call   805a3ab <memset>

        info->bits[i / MALLOC_BITS] |= 1 << (i % MALLOC_BITS);
 805c126:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805c129:	c1 e8 05             	shr    $0x5,%eax
 805c12c:	8b 55 10             	mov    0x10(%ebp),%edx
 805c12f:	8d 48 04             	lea    0x4(%eax),%ecx
 805c132:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
 805c135:	8b 4d f0             	mov    -0x10(%ebp),%ecx
 805c138:	83 e1 1f             	and    $0x1f,%ecx
 805c13b:	be 01 00 00 00       	mov    $0x1,%esi
 805c140:	d3 e6                	shl    %cl,%esi
 805c142:	89 f1                	mov    %esi,%ecx
 805c144:	09 d1                	or     %edx,%ecx
 805c146:	8b 55 10             	mov    0x10(%ebp),%edx
 805c149:	83 c0 04             	add    $0x4,%eax
 805c14c:	89 0c 82             	mov    %ecx,(%edx,%eax,4)
        info->free++;
 805c14f:	8b 45 10             	mov    0x10(%ebp),%eax
 805c152:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
 805c156:	40                   	inc    %eax
 805c157:	0f b7 d0             	movzwl %ax,%edx
 805c15a:	8b 45 10             	mov    0x10(%ebp),%eax
 805c15d:	66 89 50 0c          	mov    %dx,0xc(%eax)

        mp = page_dir + info->shift;
 805c161:	8b 93 7c 02 00 00    	mov    0x27c(%ebx),%edx
 805c167:	8b 45 10             	mov    0x10(%ebp),%eax
 805c16a:	0f b7 40 0a          	movzwl 0xa(%eax),%eax
 805c16e:	c1 e0 02             	shl    $0x2,%eax
 805c171:	01 d0                	add    %edx,%eax
 805c173:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if (info->free == 1) {
 805c176:	8b 45 10             	mov    0x10(%ebp),%eax
 805c179:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
 805c17d:	83 f8 01             	cmp    $0x1,%eax
 805c180:	75 5e                	jne    805c1e0 <free_bytes+0x170>

                /* Page became non-full */

                mp = page_dir + info->shift;
 805c182:	8b 93 7c 02 00 00    	mov    0x27c(%ebx),%edx
 805c188:	8b 45 10             	mov    0x10(%ebp),%eax
 805c18b:	0f b7 40 0a          	movzwl 0xa(%eax),%eax
 805c18f:	c1 e0 02             	shl    $0x2,%eax
 805c192:	01 d0                	add    %edx,%eax
 805c194:	89 45 f4             	mov    %eax,-0xc(%ebp)
                /* Insert in address order */
                while (*mp && (*mp)->next && (*mp)->next->page < info->page)
 805c197:	eb 08                	jmp    805c1a1 <free_bytes+0x131>
                        mp = &(*mp)->next;
 805c199:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805c19c:	8b 00                	mov    (%eax),%eax
 805c19e:	89 45 f4             	mov    %eax,-0xc(%ebp)

                /* Page became non-full */

                mp = page_dir + info->shift;
                /* Insert in address order */
                while (*mp && (*mp)->next && (*mp)->next->page < info->page)
 805c1a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805c1a4:	8b 00                	mov    (%eax),%eax
 805c1a6:	85 c0                	test   %eax,%eax
 805c1a8:	74 1f                	je     805c1c9 <free_bytes+0x159>
 805c1aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805c1ad:	8b 00                	mov    (%eax),%eax
 805c1af:	8b 00                	mov    (%eax),%eax
 805c1b1:	85 c0                	test   %eax,%eax
 805c1b3:	74 14                	je     805c1c9 <free_bytes+0x159>
 805c1b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805c1b8:	8b 00                	mov    (%eax),%eax
 805c1ba:	8b 00                	mov    (%eax),%eax
 805c1bc:	8b 50 04             	mov    0x4(%eax),%edx
 805c1bf:	8b 45 10             	mov    0x10(%ebp),%eax
 805c1c2:	8b 40 04             	mov    0x4(%eax),%eax
 805c1c5:	39 c2                	cmp    %eax,%edx
 805c1c7:	72 d0                	jb     805c199 <free_bytes+0x129>
                        mp = &(*mp)->next;
                info->next = *mp;
 805c1c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805c1cc:	8b 10                	mov    (%eax),%edx
 805c1ce:	8b 45 10             	mov    0x10(%ebp),%eax
 805c1d1:	89 10                	mov    %edx,(%eax)
                *mp = info;
 805c1d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805c1d6:	8b 55 10             	mov    0x10(%ebp),%edx
 805c1d9:	89 10                	mov    %edx,(%eax)
                return;
 805c1db:	e9 80 00 00 00       	jmp    805c260 <free_bytes+0x1f0>
        }

        if (info->free != info->total)
 805c1e0:	8b 45 10             	mov    0x10(%ebp),%eax
 805c1e3:	0f b7 50 0c          	movzwl 0xc(%eax),%edx
 805c1e7:	8b 45 10             	mov    0x10(%ebp),%eax
 805c1ea:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
 805c1ee:	39 c2                	cmp    %eax,%edx
 805c1f0:	75 6d                	jne    805c25f <free_bytes+0x1ef>
                return;

        /* Find & remove this page in the queue */
        while (*mp != info) {
 805c1f2:	eb 08                	jmp    805c1fc <free_bytes+0x18c>
                mp = &((*mp)->next);
 805c1f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805c1f7:	8b 00                	mov    (%eax),%eax
 805c1f9:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if (info->free != info->total)
                return;

        /* Find & remove this page in the queue */
        while (*mp != info) {
 805c1fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805c1ff:	8b 00                	mov    (%eax),%eax
 805c201:	3b 45 10             	cmp    0x10(%ebp),%eax
 805c204:	75 ee                	jne    805c1f4 <free_bytes+0x184>
#ifdef EXTRA_SANITY
                if (!*mp)
                        wrterror("(ES): Not on queue\n");
#endif /* EXTRA_SANITY */
        }
        *mp = info->next;
 805c206:	8b 45 10             	mov    0x10(%ebp),%eax
 805c209:	8b 10                	mov    (%eax),%edx
 805c20b:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805c20e:	89 10                	mov    %edx,(%eax)

        /* Free the page & the info structure if need be */
        page_dir[ptr2index(info->page)] = MALLOC_FIRST;
 805c210:	8b 93 7c 02 00 00    	mov    0x27c(%ebx),%edx
 805c216:	8b 45 10             	mov    0x10(%ebp),%eax
 805c219:	8b 40 04             	mov    0x4(%eax),%eax
 805c21c:	c1 e8 0c             	shr    $0xc,%eax
 805c21f:	89 c1                	mov    %eax,%ecx
 805c221:	8b 83 74 02 00 00    	mov    0x274(%ebx),%eax
 805c227:	29 c1                	sub    %eax,%ecx
 805c229:	89 c8                	mov    %ecx,%eax
 805c22b:	c1 e0 02             	shl    $0x2,%eax
 805c22e:	01 d0                	add    %edx,%eax
 805c230:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
        vp = info->page;            /* Order is important ! */
 805c236:	8b 45 10             	mov    0x10(%ebp),%eax
 805c239:	8b 40 04             	mov    0x4(%eax),%eax
 805c23c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vp != (void *)info)
 805c23f:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805c242:	3b 45 10             	cmp    0x10(%ebp),%eax
 805c245:	74 0b                	je     805c252 <free_bytes+0x1e2>
                ifree(info);
 805c247:	8b 45 10             	mov    0x10(%ebp),%eax
 805c24a:	89 04 24             	mov    %eax,(%esp)
 805c24d:	e8 15 00 00 00       	call   805c267 <ifree>
        ifree(vp);
 805c252:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805c255:	89 04 24             	mov    %eax,(%esp)
 805c258:	e8 0a 00 00 00       	call   805c267 <ifree>
 805c25d:	eb 01                	jmp    805c260 <free_bytes+0x1f0>
                *mp = info;
                return;
        }

        if (info->free != info->total)
                return;
 805c25f:	90                   	nop
        page_dir[ptr2index(info->page)] = MALLOC_FIRST;
        vp = info->page;            /* Order is important ! */
        if (vp != (void *)info)
                ifree(info);
        ifree(vp);
}
 805c260:	83 c4 20             	add    $0x20,%esp
 805c263:	5b                   	pop    %ebx
 805c264:	5e                   	pop    %esi
 805c265:	5d                   	pop    %ebp
 805c266:	c3                   	ret    

0805c267 <ifree>:

static void
ifree(void *ptr)
{
 805c267:	55                   	push   %ebp
 805c268:	89 e5                	mov    %esp,%ebp
 805c26a:	56                   	push   %esi
 805c26b:	53                   	push   %ebx
 805c26c:	83 ec 50             	sub    $0x50,%esp
 805c26f:	e8 85 df ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805c274:	81 c3 ec a5 00 00    	add    $0xa5ec,%ebx
        struct pginfo *info;
        unsigned int index;

        /* This is legal */
        if (!ptr)
 805c27a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 805c27e:	0f 84 9c 06 00 00    	je     805c920 <ifree+0x6b9>
                return;

        if (!malloc_started) {
 805c284:	8b 83 6c 02 00 00    	mov    0x26c(%ebx),%eax
 805c28a:	85 c0                	test   %eax,%eax
 805c28c:	75 13                	jne    805c2a1 <ifree+0x3a>
                wrtwarning("malloc() has never been called.\n");
 805c28e:	8d 83 68 d9 ff ff    	lea    -0x2698(%ebx),%eax
 805c294:	89 04 24             	mov    %eax,(%esp)
 805c297:	e8 35 ea ff ff       	call   805acd1 <wrtwarning>
                return;
 805c29c:	e9 86 06 00 00       	jmp    805c927 <ifree+0x6c0>
        }

        /* If we're already sinking, don't make matters any worse. */
        if (suicide)
 805c2a1:	8b 83 9c 02 00 00    	mov    0x29c(%ebx),%eax
 805c2a7:	85 c0                	test   %eax,%eax
 805c2a9:	0f 85 74 06 00 00    	jne    805c923 <ifree+0x6bc>
                return;

        index = ptr2index(ptr);
 805c2af:	8b 45 08             	mov    0x8(%ebp),%eax
 805c2b2:	c1 e8 0c             	shr    $0xc,%eax
 805c2b5:	89 c2                	mov    %eax,%edx
 805c2b7:	8b 83 74 02 00 00    	mov    0x274(%ebx),%eax
 805c2bd:	29 c2                	sub    %eax,%edx
 805c2bf:	89 d0                	mov    %edx,%eax
 805c2c1:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if (index < malloc_pageshift) {
 805c2c4:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
 805c2c8:	77 13                	ja     805c2dd <ifree+0x76>
                wrtwarning("junk pointer, too low to make sense.\n");
 805c2ca:	8d 83 80 d8 ff ff    	lea    -0x2780(%ebx),%eax
 805c2d0:	89 04 24             	mov    %eax,(%esp)
 805c2d3:	e8 f9 e9 ff ff       	call   805acd1 <wrtwarning>
                return;
 805c2d8:	e9 4a 06 00 00       	jmp    805c927 <ifree+0x6c0>
        }

        if (index > last_index) {
 805c2dd:	8b 83 78 02 00 00    	mov    0x278(%ebx),%eax
 805c2e3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
 805c2e6:	76 13                	jbe    805c2fb <ifree+0x94>
                wrtwarning("junk pointer, too high to make sense.\n");
 805c2e8:	8d 83 a8 d8 ff ff    	lea    -0x2758(%ebx),%eax
 805c2ee:	89 04 24             	mov    %eax,(%esp)
 805c2f1:	e8 db e9 ff ff       	call   805acd1 <wrtwarning>
                return;
 805c2f6:	e9 2c 06 00 00       	jmp    805c927 <ifree+0x6c0>
        }

        info = page_dir[index];
 805c2fb:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805c301:	8b 55 f4             	mov    -0xc(%ebp),%edx
 805c304:	c1 e2 02             	shl    $0x2,%edx
 805c307:	01 d0                	add    %edx,%eax
 805c309:	8b 00                	mov    (%eax),%eax
 805c30b:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if (info < MALLOC_MAGIC)
 805c30e:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
 805c312:	0f 87 19 04 00 00    	ja     805c731 <ifree+0x4ca>
                free_pages(ptr, index, info);
 805c318:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805c31b:	8b 55 08             	mov    0x8(%ebp),%edx
 805c31e:	89 55 e8             	mov    %edx,-0x18(%ebp)
 805c321:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 805c324:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805c327:	89 45 e0             	mov    %eax,-0x20(%ebp)

static __inline__ void
free_pages(void *ptr, int index, struct pginfo *info)
{
        unsigned int i;
        struct pgfree *pf, *pt = 0;
 805c32a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
        u_long l;
        void *tail;

        if (info == MALLOC_FREE) {
 805c331:	83 7d e0 01          	cmpl   $0x1,-0x20(%ebp)
 805c335:	75 13                	jne    805c34a <ifree+0xe3>
                wrtwarning("page is already free.\n");
 805c337:	8d 83 36 d9 ff ff    	lea    -0x26ca(%ebx),%eax
 805c33d:	89 04 24             	mov    %eax,(%esp)
 805c340:	e8 8c e9 ff ff       	call   805acd1 <wrtwarning>

        if (info < MALLOC_MAGIC)
                free_pages(ptr, index, info);
        else
                free_bytes(ptr, index, info);
        return;
 805c345:	e9 dc 05 00 00       	jmp    805c926 <ifree+0x6bf>
        if (info == MALLOC_FREE) {
                wrtwarning("page is already free.\n");
                return;
        }

        if (info != MALLOC_FIRST) {
 805c34a:	83 7d e0 02          	cmpl   $0x2,-0x20(%ebp)
 805c34e:	74 13                	je     805c363 <ifree+0xfc>
                wrtwarning("pointer to wrong page.\n");
 805c350:	8d 83 1e d9 ff ff    	lea    -0x26e2(%ebx),%eax
 805c356:	89 04 24             	mov    %eax,(%esp)
 805c359:	e8 73 e9 ff ff       	call   805acd1 <wrtwarning>

        if (info < MALLOC_MAGIC)
                free_pages(ptr, index, info);
        else
                free_bytes(ptr, index, info);
        return;
 805c35e:	e9 c3 05 00 00       	jmp    805c926 <ifree+0x6bf>
        if (info != MALLOC_FIRST) {
                wrtwarning("pointer to wrong page.\n");
                return;
        }

        if ((u_long)ptr & malloc_pagemask) {
 805c363:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805c366:	25 ff 0f 00 00       	and    $0xfff,%eax
 805c36b:	85 c0                	test   %eax,%eax
 805c36d:	74 13                	je     805c382 <ifree+0x11b>
                wrtwarning("modified (page-) pointer.\n");
 805c36f:	8d 83 cf d8 ff ff    	lea    -0x2731(%ebx),%eax
 805c375:	89 04 24             	mov    %eax,(%esp)
 805c378:	e8 54 e9 ff ff       	call   805acd1 <wrtwarning>

        if (info < MALLOC_MAGIC)
                free_pages(ptr, index, info);
        else
                free_bytes(ptr, index, info);
        return;
 805c37d:	e9 a4 05 00 00       	jmp    805c926 <ifree+0x6bf>
                wrtwarning("modified (page-) pointer.\n");
                return;
        }

        /* Count how many pages and mark them free at the same time */
        page_dir[index] = MALLOC_FREE;
 805c382:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805c388:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 805c38b:	c1 e2 02             	shl    $0x2,%edx
 805c38e:	01 d0                	add    %edx,%eax
 805c390:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        for (i = 1; page_dir[index + i] == MALLOC_FOLLOW; i++)
 805c396:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
 805c39d:	eb 1c                	jmp    805c3bb <ifree+0x154>
                page_dir[index + i] = MALLOC_FREE;
 805c39f:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805c3a5:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
 805c3a8:	8b 55 d8             	mov    -0x28(%ebp),%edx
 805c3ab:	01 ca                	add    %ecx,%edx
 805c3ad:	c1 e2 02             	shl    $0x2,%edx
 805c3b0:	01 d0                	add    %edx,%eax
 805c3b2:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
                return;
        }

        /* Count how many pages and mark them free at the same time */
        page_dir[index] = MALLOC_FREE;
        for (i = 1; page_dir[index + i] == MALLOC_FOLLOW; i++)
 805c3b8:	ff 45 d8             	incl   -0x28(%ebp)
 805c3bb:	8b 83 7c 02 00 00    	mov    0x27c(%ebx),%eax
 805c3c1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
 805c3c4:	8b 55 d8             	mov    -0x28(%ebp),%edx
 805c3c7:	01 ca                	add    %ecx,%edx
 805c3c9:	c1 e2 02             	shl    $0x2,%edx
 805c3cc:	01 d0                	add    %edx,%eax
 805c3ce:	8b 00                	mov    (%eax),%eax
 805c3d0:	83 f8 03             	cmp    $0x3,%eax
 805c3d3:	74 ca                	je     805c39f <ifree+0x138>
                page_dir[index + i] = MALLOC_FREE;

        l = i << malloc_pageshift;
 805c3d5:	8b 45 d8             	mov    -0x28(%ebp),%eax
 805c3d8:	c1 e0 0c             	shl    $0xc,%eax
 805c3db:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        if (malloc_junk)
 805c3de:	8b 83 b4 02 00 00    	mov    0x2b4(%ebx),%eax
 805c3e4:	85 c0                	test   %eax,%eax
 805c3e6:	74 1a                	je     805c402 <ifree+0x19b>
                memset(ptr, SOME_JUNK, l);
 805c3e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805c3eb:	89 44 24 08          	mov    %eax,0x8(%esp)
 805c3ef:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
 805c3f6:	00 
 805c3f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805c3fa:	89 04 24             	mov    %eax,(%esp)
 805c3fd:	e8 a9 df ff ff       	call   805a3ab <memset>
#ifdef HAS_MADVISE
        if (malloc_hint)
                madvise(ptr, l, MADV_FREE);
#endif

        tail = (char *)ptr + l;
 805c402:	8b 55 e8             	mov    -0x18(%ebp),%edx
 805c405:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805c408:	01 d0                	add    %edx,%eax
 805c40a:	89 45 d0             	mov    %eax,-0x30(%ebp)

        /* add to free-list */
        if (!px)
 805c40d:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805c413:	85 c0                	test   %eax,%eax
 805c415:	75 12                	jne    805c429 <ifree+0x1c2>
                px = imalloc(sizeof * pt);      /* This cannot fail... */
 805c417:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
 805c41e:	e8 25 f5 ff ff       	call   805b948 <imalloc>
 805c423:	89 83 bc 02 00 00    	mov    %eax,0x2bc(%ebx)
        px->page = ptr;
 805c429:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805c42f:	8b 55 e8             	mov    -0x18(%ebp),%edx
 805c432:	89 50 08             	mov    %edx,0x8(%eax)
        px->end =  tail;
 805c435:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805c43b:	8b 55 d0             	mov    -0x30(%ebp),%edx
 805c43e:	89 50 0c             	mov    %edx,0xc(%eax)
        px->size = l;
 805c441:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805c447:	8b 55 d4             	mov    -0x2c(%ebp),%edx
 805c44a:	89 50 10             	mov    %edx,0x10(%eax)
        if (!free_list.next) {
 805c44d:	8b 83 84 02 00 00    	mov    0x284(%ebx),%eax
 805c453:	85 c0                	test   %eax,%eax
 805c455:	75 41                	jne    805c498 <ifree+0x231>

                /* Nothing on free list, put this at head */
                px->next = free_list.next;
 805c457:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805c45d:	8b 93 84 02 00 00    	mov    0x284(%ebx),%edx
 805c463:	89 10                	mov    %edx,(%eax)
                px->prev = &free_list;
 805c465:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805c46b:	8d 93 84 02 00 00    	lea    0x284(%ebx),%edx
 805c471:	89 50 04             	mov    %edx,0x4(%eax)
                free_list.next = px;
 805c474:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805c47a:	89 83 84 02 00 00    	mov    %eax,0x284(%ebx)
                pf = px;
 805c480:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805c486:	89 45 cc             	mov    %eax,-0x34(%ebp)
                px = 0;
 805c489:	c7 83 bc 02 00 00 00 	movl   $0x0,0x2bc(%ebx)
 805c490:	00 00 00 
 805c493:	e9 a5 01 00 00       	jmp    805c63d <ifree+0x3d6>

        } else {

                /* Find the right spot, leave pf pointing to the modified entry. */
                tail = (char *)ptr + l;
 805c498:	8b 55 e8             	mov    -0x18(%ebp),%edx
 805c49b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805c49e:	01 d0                	add    %edx,%eax
 805c4a0:	89 45 d0             	mov    %eax,-0x30(%ebp)

                for (pf = free_list.next; pf->end < ptr && pf->next; pf = pf->next)
 805c4a3:	8b 83 84 02 00 00    	mov    0x284(%ebx),%eax
 805c4a9:	89 45 cc             	mov    %eax,-0x34(%ebp)
 805c4ac:	eb 08                	jmp    805c4b6 <ifree+0x24f>
 805c4ae:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c4b1:	8b 00                	mov    (%eax),%eax
 805c4b3:	89 45 cc             	mov    %eax,-0x34(%ebp)
 805c4b6:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c4b9:	8b 40 0c             	mov    0xc(%eax),%eax
 805c4bc:	39 45 e8             	cmp    %eax,-0x18(%ebp)
 805c4bf:	76 09                	jbe    805c4ca <ifree+0x263>
 805c4c1:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c4c4:	8b 00                	mov    (%eax),%eax
 805c4c6:	85 c0                	test   %eax,%eax
 805c4c8:	75 e4                	jne    805c4ae <ifree+0x247>
                        ; /* Race ahead here */

                if (pf->page > tail) {
 805c4ca:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c4cd:	8b 40 08             	mov    0x8(%eax),%eax
 805c4d0:	39 45 d0             	cmp    %eax,-0x30(%ebp)
 805c4d3:	73 4f                	jae    805c524 <ifree+0x2bd>
                        /* Insert before entry */
                        px->next = pf;
 805c4d5:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805c4db:	8b 55 cc             	mov    -0x34(%ebp),%edx
 805c4de:	89 10                	mov    %edx,(%eax)
                        px->prev = pf->prev;
 805c4e0:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805c4e6:	8b 55 cc             	mov    -0x34(%ebp),%edx
 805c4e9:	8b 52 04             	mov    0x4(%edx),%edx
 805c4ec:	89 50 04             	mov    %edx,0x4(%eax)
                        pf->prev = px;
 805c4ef:	8b 93 bc 02 00 00    	mov    0x2bc(%ebx),%edx
 805c4f5:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c4f8:	89 50 04             	mov    %edx,0x4(%eax)
                        px->prev->next = px;
 805c4fb:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805c501:	8b 40 04             	mov    0x4(%eax),%eax
 805c504:	8b 93 bc 02 00 00    	mov    0x2bc(%ebx),%edx
 805c50a:	89 10                	mov    %edx,(%eax)
                        pf = px;
 805c50c:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805c512:	89 45 cc             	mov    %eax,-0x34(%ebp)
                        px = 0;
 805c515:	c7 83 bc 02 00 00 00 	movl   $0x0,0x2bc(%ebx)
 805c51c:	00 00 00 
 805c51f:	e9 19 01 00 00       	jmp    805c63d <ifree+0x3d6>
                } else if (pf->end == ptr) {
 805c524:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c527:	8b 40 0c             	mov    0xc(%eax),%eax
 805c52a:	39 45 e8             	cmp    %eax,-0x18(%ebp)
 805c52d:	0f 85 91 00 00 00    	jne    805c5c4 <ifree+0x35d>
                        /* Append to the previous entry */
                        pf->end = (char *)pf->end + l;
 805c533:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c536:	8b 50 0c             	mov    0xc(%eax),%edx
 805c539:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805c53c:	01 c2                	add    %eax,%edx
 805c53e:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c541:	89 50 0c             	mov    %edx,0xc(%eax)
                        pf->size += l;
 805c544:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c547:	8b 50 10             	mov    0x10(%eax),%edx
 805c54a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805c54d:	01 c2                	add    %eax,%edx
 805c54f:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c552:	89 50 10             	mov    %edx,0x10(%eax)
                        if (pf->next && pf->end == pf->next->page) {
 805c555:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c558:	8b 00                	mov    (%eax),%eax
 805c55a:	85 c0                	test   %eax,%eax
 805c55c:	0f 84 da 00 00 00    	je     805c63c <ifree+0x3d5>
 805c562:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c565:	8b 50 0c             	mov    0xc(%eax),%edx
 805c568:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c56b:	8b 00                	mov    (%eax),%eax
 805c56d:	8b 40 08             	mov    0x8(%eax),%eax
 805c570:	39 c2                	cmp    %eax,%edx
 805c572:	0f 85 c4 00 00 00    	jne    805c63c <ifree+0x3d5>
                                /* And collapse the next too. */
                                pt = pf->next;
 805c578:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c57b:	8b 00                	mov    (%eax),%eax
 805c57d:	89 45 dc             	mov    %eax,-0x24(%ebp)
                                pf->end = pt->end;
 805c580:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805c583:	8b 50 0c             	mov    0xc(%eax),%edx
 805c586:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c589:	89 50 0c             	mov    %edx,0xc(%eax)
                                pf->size += pt->size;
 805c58c:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c58f:	8b 50 10             	mov    0x10(%eax),%edx
 805c592:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805c595:	8b 40 10             	mov    0x10(%eax),%eax
 805c598:	01 c2                	add    %eax,%edx
 805c59a:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c59d:	89 50 10             	mov    %edx,0x10(%eax)
                                pf->next = pt->next;
 805c5a0:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805c5a3:	8b 10                	mov    (%eax),%edx
 805c5a5:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c5a8:	89 10                	mov    %edx,(%eax)
                                if (pf->next)
 805c5aa:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c5ad:	8b 00                	mov    (%eax),%eax
 805c5af:	85 c0                	test   %eax,%eax
 805c5b1:	0f 84 85 00 00 00    	je     805c63c <ifree+0x3d5>
                                        pf->next->prev = pf;
 805c5b7:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c5ba:	8b 00                	mov    (%eax),%eax
 805c5bc:	8b 55 cc             	mov    -0x34(%ebp),%edx
 805c5bf:	89 50 04             	mov    %edx,0x4(%eax)
 805c5c2:	eb 79                	jmp    805c63d <ifree+0x3d6>
                        }
                } else if (pf->page == tail) {
 805c5c4:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c5c7:	8b 40 08             	mov    0x8(%eax),%eax
 805c5ca:	39 45 d0             	cmp    %eax,-0x30(%ebp)
 805c5cd:	75 1c                	jne    805c5eb <ifree+0x384>
                        /* Prepend to entry */
                        pf->size += l;
 805c5cf:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c5d2:	8b 50 10             	mov    0x10(%eax),%edx
 805c5d5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805c5d8:	01 c2                	add    %eax,%edx
 805c5da:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c5dd:	89 50 10             	mov    %edx,0x10(%eax)
                        pf->page = ptr;
 805c5e0:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c5e3:	8b 55 e8             	mov    -0x18(%ebp),%edx
 805c5e6:	89 50 08             	mov    %edx,0x8(%eax)
 805c5e9:	eb 52                	jmp    805c63d <ifree+0x3d6>
                } else if (!pf->next) {
 805c5eb:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c5ee:	8b 00                	mov    (%eax),%eax
 805c5f0:	85 c0                	test   %eax,%eax
 805c5f2:	75 38                	jne    805c62c <ifree+0x3c5>
                        /* Append at tail of chain */
                        px->next = 0;
 805c5f4:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805c5fa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
                        px->prev = pf;
 805c600:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805c606:	8b 55 cc             	mov    -0x34(%ebp),%edx
 805c609:	89 50 04             	mov    %edx,0x4(%eax)
                        pf->next = px;
 805c60c:	8b 93 bc 02 00 00    	mov    0x2bc(%ebx),%edx
 805c612:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c615:	89 10                	mov    %edx,(%eax)
                        pf = px;
 805c617:	8b 83 bc 02 00 00    	mov    0x2bc(%ebx),%eax
 805c61d:	89 45 cc             	mov    %eax,-0x34(%ebp)
                        px = 0;
 805c620:	c7 83 bc 02 00 00 00 	movl   $0x0,0x2bc(%ebx)
 805c627:	00 00 00 
 805c62a:	eb 11                	jmp    805c63d <ifree+0x3d6>
                } else {
                        wrterror("freelist is destroyed.\n");
 805c62c:	8d 83 4d d9 ff ff    	lea    -0x26b3(%ebx),%eax
 805c632:	89 04 24             	mov    %eax,(%esp)
 805c635:	e8 c7 e5 ff ff       	call   805ac01 <wrterror>
 805c63a:	eb 01                	jmp    805c63d <ifree+0x3d6>
                                pt = pf->next;
                                pf->end = pt->end;
                                pf->size += pt->size;
                                pf->next = pt->next;
                                if (pf->next)
                                        pf->next->prev = pf;
 805c63c:	90                   	nop
                        wrterror("freelist is destroyed.\n");
                }
        }

        /* Return something to OS ? */
        if (!pf->next &&                            /* If we're the last one, */
 805c63d:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c640:	8b 00                	mov    (%eax),%eax
 805c642:	85 c0                	test   %eax,%eax
 805c644:	0f 85 cd 00 00 00    	jne    805c717 <ifree+0x4b0>
            pf->size > malloc_cache &&                /* ..and the cache is full, */
 805c64a:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c64d:	8b 50 10             	mov    0x10(%eax),%edx
 805c650:	8b 83 20 00 00 00    	mov    0x20(%ebx),%eax
                        wrterror("freelist is destroyed.\n");
                }
        }

        /* Return something to OS ? */
        if (!pf->next &&                            /* If we're the last one, */
 805c656:	39 c2                	cmp    %eax,%edx
 805c658:	0f 86 b9 00 00 00    	jbe    805c717 <ifree+0x4b0>
            pf->size > malloc_cache &&                /* ..and the cache is full, */
            pf->end == malloc_brk &&                  /* ..and none behind us, */
 805c65e:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c661:	8b 50 0c             	mov    0xc(%eax),%edx
 805c664:	8b 83 b8 02 00 00    	mov    0x2b8(%ebx),%eax
                }
        }

        /* Return something to OS ? */
        if (!pf->next &&                            /* If we're the last one, */
            pf->size > malloc_cache &&                /* ..and the cache is full, */
 805c66a:	39 c2                	cmp    %eax,%edx
 805c66c:	0f 85 a5 00 00 00    	jne    805c717 <ifree+0x4b0>
            pf->end == malloc_brk &&                  /* ..and none behind us, */
            malloc_brk == sbrk(0)) {                  /* ..and it's OK to do... */
 805c672:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 805c679:	e8 21 ce ff ff       	call   805949f <sbrk>
 805c67e:	89 c2                	mov    %eax,%edx
 805c680:	8b 83 b8 02 00 00    	mov    0x2b8(%ebx),%eax
        }

        /* Return something to OS ? */
        if (!pf->next &&                            /* If we're the last one, */
            pf->size > malloc_cache &&                /* ..and the cache is full, */
            pf->end == malloc_brk &&                  /* ..and none behind us, */
 805c686:	39 c2                	cmp    %eax,%edx
 805c688:	0f 85 89 00 00 00    	jne    805c717 <ifree+0x4b0>

                /*
                 * Keep the cache intact.  Notice that the '>' above guarantees that
                 * the pf will always have at least one page afterwards.
                 */
                pf->end = (char *)pf->page + malloc_cache;
 805c68e:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c691:	8b 50 08             	mov    0x8(%eax),%edx
 805c694:	8b 83 20 00 00 00    	mov    0x20(%ebx),%eax
 805c69a:	01 c2                	add    %eax,%edx
 805c69c:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c69f:	89 50 0c             	mov    %edx,0xc(%eax)
                pf->size = malloc_cache;
 805c6a2:	8b 93 20 00 00 00    	mov    0x20(%ebx),%edx
 805c6a8:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c6ab:	89 50 10             	mov    %edx,0x10(%eax)

                brk(pf->end);
 805c6ae:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c6b1:	8b 40 0c             	mov    0xc(%eax),%eax
 805c6b4:	89 04 24             	mov    %eax,(%esp)
 805c6b7:	e8 ac ce ff ff       	call   8059568 <brk>
                malloc_brk = pf->end;
 805c6bc:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c6bf:	8b 40 0c             	mov    0xc(%eax),%eax
 805c6c2:	89 83 b8 02 00 00    	mov    %eax,0x2b8(%ebx)

                index = ptr2index(pf->end);
 805c6c8:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805c6cb:	8b 40 0c             	mov    0xc(%eax),%eax
 805c6ce:	c1 e8 0c             	shr    $0xc,%eax
 805c6d1:	89 c2                	mov    %eax,%edx
 805c6d3:	8b 83 74 02 00 00    	mov    0x274(%ebx),%eax
 805c6d9:	29 c2                	sub    %eax,%edx
 805c6db:	89 d0                	mov    %edx,%eax
 805c6dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                last_index = index - 1;
 805c6e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805c6e3:	48                   	dec    %eax
 805c6e4:	89 83 78 02 00 00    	mov    %eax,0x278(%ebx)

                for (i = index; i <= last_index;)
 805c6ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805c6ed:	89 45 d8             	mov    %eax,-0x28(%ebp)
 805c6f0:	eb 1a                	jmp    805c70c <ifree+0x4a5>
                        page_dir[i++] = MALLOC_NOT_MINE;
 805c6f2:	8b 8b 7c 02 00 00    	mov    0x27c(%ebx),%ecx
 805c6f8:	8b 45 d8             	mov    -0x28(%ebp),%eax
 805c6fb:	8d 50 01             	lea    0x1(%eax),%edx
 805c6fe:	89 55 d8             	mov    %edx,-0x28(%ebp)
 805c701:	c1 e0 02             	shl    $0x2,%eax
 805c704:	01 c8                	add    %ecx,%eax
 805c706:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
                malloc_brk = pf->end;

                index = ptr2index(pf->end);
                last_index = index - 1;

                for (i = index; i <= last_index;)
 805c70c:	8b 83 78 02 00 00    	mov    0x278(%ebx),%eax
 805c712:	39 45 d8             	cmp    %eax,-0x28(%ebp)
 805c715:	76 db                	jbe    805c6f2 <ifree+0x48b>
                        page_dir[i++] = MALLOC_NOT_MINE;

                /* XXX: We could realloc/shrink the pagedir here I guess. */
        }
        if (pt)
 805c717:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
 805c71b:	0f 84 05 02 00 00    	je     805c926 <ifree+0x6bf>
                ifree(pt);
 805c721:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805c724:	89 04 24             	mov    %eax,(%esp)
 805c727:	e8 3b fb ff ff       	call   805c267 <ifree>

        if (info < MALLOC_MAGIC)
                free_pages(ptr, index, info);
        else
                free_bytes(ptr, index, info);
        return;
 805c72c:	e9 f5 01 00 00       	jmp    805c926 <ifree+0x6bf>
        info = page_dir[index];

        if (info < MALLOC_MAGIC)
                free_pages(ptr, index, info);
        else
                free_bytes(ptr, index, info);
 805c731:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805c734:	8b 55 08             	mov    0x8(%ebp),%edx
 805c737:	89 55 ec             	mov    %edx,-0x14(%ebp)
 805c73a:	89 45 c8             	mov    %eax,-0x38(%ebp)
 805c73d:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805c740:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        int i;
        struct pginfo **mp;
        void *vp;

        /* Find the chunk number on the page */
        i = ((u_long)ptr & malloc_pagemask) >> info->shift;
 805c743:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805c746:	25 ff 0f 00 00       	and    $0xfff,%eax
 805c74b:	89 c2                	mov    %eax,%edx
 805c74d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805c750:	0f b7 40 0a          	movzwl 0xa(%eax),%eax
 805c754:	88 c1                	mov    %al,%cl
 805c756:	d3 ea                	shr    %cl,%edx
 805c758:	89 d0                	mov    %edx,%eax
 805c75a:	89 45 c0             	mov    %eax,-0x40(%ebp)

        if (((u_long)ptr & (info->size - 1))) {
 805c75d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805c760:	0f b7 40 08          	movzwl 0x8(%eax),%eax
 805c764:	48                   	dec    %eax
 805c765:	89 c2                	mov    %eax,%edx
 805c767:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805c76a:	21 d0                	and    %edx,%eax
 805c76c:	85 c0                	test   %eax,%eax
 805c76e:	74 13                	je     805c783 <ifree+0x51c>
                wrtwarning("modified (chunk-) pointer.\n");
 805c770:	8d 83 ea d8 ff ff    	lea    -0x2716(%ebx),%eax
 805c776:	89 04 24             	mov    %eax,(%esp)
 805c779:	e8 53 e5 ff ff       	call   805acd1 <wrtwarning>

        if (info < MALLOC_MAGIC)
                free_pages(ptr, index, info);
        else
                free_bytes(ptr, index, info);
        return;
 805c77e:	e9 a3 01 00 00       	jmp    805c926 <ifree+0x6bf>
        if (((u_long)ptr & (info->size - 1))) {
                wrtwarning("modified (chunk-) pointer.\n");
                return;
        }

        if (info->bits[i / MALLOC_BITS] & (1 << (i % MALLOC_BITS))) {
 805c783:	8b 45 c0             	mov    -0x40(%ebp),%eax
 805c786:	c1 e8 05             	shr    $0x5,%eax
 805c789:	89 c2                	mov    %eax,%edx
 805c78b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805c78e:	83 c2 04             	add    $0x4,%edx
 805c791:	8b 04 90             	mov    (%eax,%edx,4),%eax
 805c794:	8b 55 c0             	mov    -0x40(%ebp),%edx
 805c797:	83 e2 1f             	and    $0x1f,%edx
 805c79a:	be 01 00 00 00       	mov    $0x1,%esi
 805c79f:	88 d1                	mov    %dl,%cl
 805c7a1:	d3 e6                	shl    %cl,%esi
 805c7a3:	89 f2                	mov    %esi,%edx
 805c7a5:	21 d0                	and    %edx,%eax
 805c7a7:	85 c0                	test   %eax,%eax
 805c7a9:	74 13                	je     805c7be <ifree+0x557>
                wrtwarning("chunk is already free.\n");
 805c7ab:	8d 83 06 d9 ff ff    	lea    -0x26fa(%ebx),%eax
 805c7b1:	89 04 24             	mov    %eax,(%esp)
 805c7b4:	e8 18 e5 ff ff       	call   805acd1 <wrtwarning>

        if (info < MALLOC_MAGIC)
                free_pages(ptr, index, info);
        else
                free_bytes(ptr, index, info);
        return;
 805c7b9:	e9 68 01 00 00       	jmp    805c926 <ifree+0x6bf>
        if (info->bits[i / MALLOC_BITS] & (1 << (i % MALLOC_BITS))) {
                wrtwarning("chunk is already free.\n");
                return;
        }

        if (malloc_junk)
 805c7be:	8b 83 b4 02 00 00    	mov    0x2b4(%ebx),%eax
 805c7c4:	85 c0                	test   %eax,%eax
 805c7c6:	74 1e                	je     805c7e6 <ifree+0x57f>
                memset(ptr, SOME_JUNK, info->size);
 805c7c8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805c7cb:	0f b7 40 08          	movzwl 0x8(%eax),%eax
 805c7cf:	89 44 24 08          	mov    %eax,0x8(%esp)
 805c7d3:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
 805c7da:	00 
 805c7db:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805c7de:	89 04 24             	mov    %eax,(%esp)
 805c7e1:	e8 c5 db ff ff       	call   805a3ab <memset>

        info->bits[i / MALLOC_BITS] |= 1 << (i % MALLOC_BITS);
 805c7e6:	8b 45 c0             	mov    -0x40(%ebp),%eax
 805c7e9:	c1 e8 05             	shr    $0x5,%eax
 805c7ec:	8b 55 c4             	mov    -0x3c(%ebp),%edx
 805c7ef:	8d 48 04             	lea    0x4(%eax),%ecx
 805c7f2:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
 805c7f5:	8b 4d c0             	mov    -0x40(%ebp),%ecx
 805c7f8:	83 e1 1f             	and    $0x1f,%ecx
 805c7fb:	be 01 00 00 00       	mov    $0x1,%esi
 805c800:	d3 e6                	shl    %cl,%esi
 805c802:	89 f1                	mov    %esi,%ecx
 805c804:	09 d1                	or     %edx,%ecx
 805c806:	8b 55 c4             	mov    -0x3c(%ebp),%edx
 805c809:	83 c0 04             	add    $0x4,%eax
 805c80c:	89 0c 82             	mov    %ecx,(%edx,%eax,4)
        info->free++;
 805c80f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805c812:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
 805c816:	40                   	inc    %eax
 805c817:	0f b7 d0             	movzwl %ax,%edx
 805c81a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805c81d:	66 89 50 0c          	mov    %dx,0xc(%eax)

        mp = page_dir + info->shift;
 805c821:	8b 93 7c 02 00 00    	mov    0x27c(%ebx),%edx
 805c827:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805c82a:	0f b7 40 0a          	movzwl 0xa(%eax),%eax
 805c82e:	c1 e0 02             	shl    $0x2,%eax
 805c831:	01 d0                	add    %edx,%eax
 805c833:	89 45 bc             	mov    %eax,-0x44(%ebp)

        if (info->free == 1) {
 805c836:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805c839:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
 805c83d:	83 f8 01             	cmp    $0x1,%eax
 805c840:	75 5e                	jne    805c8a0 <ifree+0x639>

                /* Page became non-full */

                mp = page_dir + info->shift;
 805c842:	8b 93 7c 02 00 00    	mov    0x27c(%ebx),%edx
 805c848:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805c84b:	0f b7 40 0a          	movzwl 0xa(%eax),%eax
 805c84f:	c1 e0 02             	shl    $0x2,%eax
 805c852:	01 d0                	add    %edx,%eax
 805c854:	89 45 bc             	mov    %eax,-0x44(%ebp)
 805c857:	eb 08                	jmp    805c861 <ifree+0x5fa>
                /* Insert in address order */
                while (*mp && (*mp)->next && (*mp)->next->page < info->page)
                        mp = &(*mp)->next;
 805c859:	8b 45 bc             	mov    -0x44(%ebp),%eax
 805c85c:	8b 00                	mov    (%eax),%eax
 805c85e:	89 45 bc             	mov    %eax,-0x44(%ebp)

                /* Page became non-full */

                mp = page_dir + info->shift;
                /* Insert in address order */
                while (*mp && (*mp)->next && (*mp)->next->page < info->page)
 805c861:	8b 45 bc             	mov    -0x44(%ebp),%eax
 805c864:	8b 00                	mov    (%eax),%eax
 805c866:	85 c0                	test   %eax,%eax
 805c868:	74 1f                	je     805c889 <ifree+0x622>
 805c86a:	8b 45 bc             	mov    -0x44(%ebp),%eax
 805c86d:	8b 00                	mov    (%eax),%eax
 805c86f:	8b 00                	mov    (%eax),%eax
 805c871:	85 c0                	test   %eax,%eax
 805c873:	74 14                	je     805c889 <ifree+0x622>
 805c875:	8b 45 bc             	mov    -0x44(%ebp),%eax
 805c878:	8b 00                	mov    (%eax),%eax
 805c87a:	8b 00                	mov    (%eax),%eax
 805c87c:	8b 50 04             	mov    0x4(%eax),%edx
 805c87f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805c882:	8b 40 04             	mov    0x4(%eax),%eax
 805c885:	39 c2                	cmp    %eax,%edx
 805c887:	72 d0                	jb     805c859 <ifree+0x5f2>
                        mp = &(*mp)->next;
                info->next = *mp;
 805c889:	8b 45 bc             	mov    -0x44(%ebp),%eax
 805c88c:	8b 10                	mov    (%eax),%edx
 805c88e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805c891:	89 10                	mov    %edx,(%eax)
                *mp = info;
 805c893:	8b 45 bc             	mov    -0x44(%ebp),%eax
 805c896:	8b 55 c4             	mov    -0x3c(%ebp),%edx
 805c899:	89 10                	mov    %edx,(%eax)

        if (info < MALLOC_MAGIC)
                free_pages(ptr, index, info);
        else
                free_bytes(ptr, index, info);
        return;
 805c89b:	e9 86 00 00 00       	jmp    805c926 <ifree+0x6bf>
                info->next = *mp;
                *mp = info;
                return;
        }

        if (info->free != info->total)
 805c8a0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805c8a3:	0f b7 50 0c          	movzwl 0xc(%eax),%edx
 805c8a7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805c8aa:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
 805c8ae:	39 c2                	cmp    %eax,%edx
 805c8b0:	75 74                	jne    805c926 <ifree+0x6bf>
 805c8b2:	eb 08                	jmp    805c8bc <ifree+0x655>
                return;

        /* Find & remove this page in the queue */
        while (*mp != info) {
                mp = &((*mp)->next);
 805c8b4:	8b 45 bc             	mov    -0x44(%ebp),%eax
 805c8b7:	8b 00                	mov    (%eax),%eax
 805c8b9:	89 45 bc             	mov    %eax,-0x44(%ebp)

        if (info->free != info->total)
                return;

        /* Find & remove this page in the queue */
        while (*mp != info) {
 805c8bc:	8b 45 bc             	mov    -0x44(%ebp),%eax
 805c8bf:	8b 00                	mov    (%eax),%eax
 805c8c1:	39 45 c4             	cmp    %eax,-0x3c(%ebp)
 805c8c4:	75 ee                	jne    805c8b4 <ifree+0x64d>
#ifdef EXTRA_SANITY
                if (!*mp)
                        wrterror("(ES): Not on queue\n");
#endif /* EXTRA_SANITY */
        }
        *mp = info->next;
 805c8c6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805c8c9:	8b 10                	mov    (%eax),%edx
 805c8cb:	8b 45 bc             	mov    -0x44(%ebp),%eax
 805c8ce:	89 10                	mov    %edx,(%eax)

        /* Free the page & the info structure if need be */
        page_dir[ptr2index(info->page)] = MALLOC_FIRST;
 805c8d0:	8b 93 7c 02 00 00    	mov    0x27c(%ebx),%edx
 805c8d6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805c8d9:	8b 40 04             	mov    0x4(%eax),%eax
 805c8dc:	c1 e8 0c             	shr    $0xc,%eax
 805c8df:	89 c1                	mov    %eax,%ecx
 805c8e1:	8b 83 74 02 00 00    	mov    0x274(%ebx),%eax
 805c8e7:	29 c1                	sub    %eax,%ecx
 805c8e9:	89 c8                	mov    %ecx,%eax
 805c8eb:	c1 e0 02             	shl    $0x2,%eax
 805c8ee:	01 d0                	add    %edx,%eax
 805c8f0:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
        vp = info->page;            /* Order is important ! */
 805c8f6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805c8f9:	8b 40 04             	mov    0x4(%eax),%eax
 805c8fc:	89 45 b8             	mov    %eax,-0x48(%ebp)
        if (vp != (void *)info)
 805c8ff:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805c902:	3b 45 b8             	cmp    -0x48(%ebp),%eax
 805c905:	74 0b                	je     805c912 <ifree+0x6ab>
                ifree(info);
 805c907:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805c90a:	89 04 24             	mov    %eax,(%esp)
 805c90d:	e8 55 f9 ff ff       	call   805c267 <ifree>
        ifree(vp);
 805c912:	8b 45 b8             	mov    -0x48(%ebp),%eax
 805c915:	89 04 24             	mov    %eax,(%esp)
 805c918:	e8 4a f9 ff ff       	call   805c267 <ifree>

        if (info < MALLOC_MAGIC)
                free_pages(ptr, index, info);
        else
                free_bytes(ptr, index, info);
        return;
 805c91d:	90                   	nop
 805c91e:	eb 06                	jmp    805c926 <ifree+0x6bf>
        struct pginfo *info;
        unsigned int index;

        /* This is legal */
        if (!ptr)
                return;
 805c920:	90                   	nop
 805c921:	eb 04                	jmp    805c927 <ifree+0x6c0>
                return;
        }

        /* If we're already sinking, don't make matters any worse. */
        if (suicide)
                return;
 805c923:	90                   	nop
 805c924:	eb 01                	jmp    805c927 <ifree+0x6c0>

        if (info < MALLOC_MAGIC)
                free_pages(ptr, index, info);
        else
                free_bytes(ptr, index, info);
        return;
 805c926:	90                   	nop
}
 805c927:	83 c4 50             	add    $0x50,%esp
 805c92a:	5b                   	pop    %ebx
 805c92b:	5e                   	pop    %esi
 805c92c:	5d                   	pop    %ebp
 805c92d:	c3                   	ret    

0805c92e <malloc>:
 */


void *
malloc(size_t size)
{
 805c92e:	55                   	push   %ebp
 805c92f:	89 e5                	mov    %esp,%ebp
 805c931:	56                   	push   %esi
 805c932:	53                   	push   %ebx
 805c933:	83 ec 10             	sub    $0x10,%esp
 805c936:	e8 be d8 ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805c93b:	81 c3 25 9f 00 00    	add    $0x9f25,%ebx
        register void *r;

        THREAD_LOCK();
        malloc_func = " in malloc():";
 805c941:	8d 83 89 d9 ff ff    	lea    -0x2677(%ebx),%eax
 805c947:	89 83 c0 02 00 00    	mov    %eax,0x2c0(%ebx)
        if (malloc_active++) {
 805c94d:	8b 83 70 02 00 00    	mov    0x270(%ebx),%eax
 805c953:	8d 50 01             	lea    0x1(%eax),%edx
 805c956:	89 93 70 02 00 00    	mov    %edx,0x270(%ebx)
 805c95c:	85 c0                	test   %eax,%eax
 805c95e:	74 22                	je     805c982 <malloc+0x54>
                wrtwarning("recursive call.\n");
 805c960:	8d 83 97 d9 ff ff    	lea    -0x2669(%ebx),%eax
 805c966:	89 04 24             	mov    %eax,(%esp)
 805c969:	e8 63 e3 ff ff       	call   805acd1 <wrtwarning>
                malloc_active--;
 805c96e:	8b 83 70 02 00 00    	mov    0x270(%ebx),%eax
 805c974:	48                   	dec    %eax
 805c975:	89 83 70 02 00 00    	mov    %eax,0x270(%ebx)
                return (0);
 805c97b:	b8 00 00 00 00       	mov    $0x0,%eax
 805c980:	eb 5e                	jmp    805c9e0 <malloc+0xb2>
        }
        if (!malloc_started) {
 805c982:	8b 83 6c 02 00 00    	mov    0x26c(%ebx),%eax
 805c988:	85 c0                	test   %eax,%eax
 805c98a:	75 05                	jne    805c991 <malloc+0x63>
                malloc_init();
 805c98c:	e8 97 e5 ff ff       	call   805af28 <malloc_init>
        }
        if (malloc_sysv && !size)
 805c991:	8b 83 ac 02 00 00    	mov    0x2ac(%ebx),%eax
 805c997:	85 c0                	test   %eax,%eax
 805c999:	74 0d                	je     805c9a8 <malloc+0x7a>
 805c99b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 805c99f:	75 07                	jne    805c9a8 <malloc+0x7a>
                r = 0;
 805c9a1:	be 00 00 00 00       	mov    $0x0,%esi
 805c9a6:	eb 0d                	jmp    805c9b5 <malloc+0x87>
        else
                r = imalloc(size);
 805c9a8:	8b 45 08             	mov    0x8(%ebp),%eax
 805c9ab:	89 04 24             	mov    %eax,(%esp)
 805c9ae:	e8 95 ef ff ff       	call   805b948 <imalloc>
 805c9b3:	89 c6                	mov    %eax,%esi
        UTRACE(0, size, r);
        malloc_active--;
 805c9b5:	8b 83 70 02 00 00    	mov    0x270(%ebx),%eax
 805c9bb:	48                   	dec    %eax
 805c9bc:	89 83 70 02 00 00    	mov    %eax,0x270(%ebx)
        THREAD_UNLOCK();
        if (malloc_xmalloc && !r)
 805c9c2:	8b 83 a8 02 00 00    	mov    0x2a8(%ebx),%eax
 805c9c8:	85 c0                	test   %eax,%eax
 805c9ca:	74 12                	je     805c9de <malloc+0xb0>
 805c9cc:	85 f6                	test   %esi,%esi
 805c9ce:	75 0e                	jne    805c9de <malloc+0xb0>
                wrterror("out of memory.\n");
 805c9d0:	8d 83 a8 d9 ff ff    	lea    -0x2658(%ebx),%eax
 805c9d6:	89 04 24             	mov    %eax,(%esp)
 805c9d9:	e8 23 e2 ff ff       	call   805ac01 <wrterror>
        return (r);
 805c9de:	89 f0                	mov    %esi,%eax
}
 805c9e0:	83 c4 10             	add    $0x10,%esp
 805c9e3:	5b                   	pop    %ebx
 805c9e4:	5e                   	pop    %esi
 805c9e5:	5d                   	pop    %ebp
 805c9e6:	c3                   	ret    

0805c9e7 <free>:

void
free(void *ptr)
{
 805c9e7:	55                   	push   %ebp
 805c9e8:	89 e5                	mov    %esp,%ebp
 805c9ea:	53                   	push   %ebx
 805c9eb:	83 ec 14             	sub    $0x14,%esp
 805c9ee:	e8 06 d8 ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805c9f3:	81 c3 6d 9e 00 00    	add    $0x9e6d,%ebx
        THREAD_LOCK();
        malloc_func = " in free():";
 805c9f9:	8d 83 b8 d9 ff ff    	lea    -0x2648(%ebx),%eax
 805c9ff:	89 83 c0 02 00 00    	mov    %eax,0x2c0(%ebx)
        if (malloc_active++) {
 805ca05:	8b 83 70 02 00 00    	mov    0x270(%ebx),%eax
 805ca0b:	8d 50 01             	lea    0x1(%eax),%edx
 805ca0e:	89 93 70 02 00 00    	mov    %edx,0x270(%ebx)
 805ca14:	85 c0                	test   %eax,%eax
 805ca16:	74 1d                	je     805ca35 <free+0x4e>
                wrtwarning("recursive call.\n");
 805ca18:	8d 83 97 d9 ff ff    	lea    -0x2669(%ebx),%eax
 805ca1e:	89 04 24             	mov    %eax,(%esp)
 805ca21:	e8 ab e2 ff ff       	call   805acd1 <wrtwarning>
                malloc_active--;
 805ca26:	8b 83 70 02 00 00    	mov    0x270(%ebx),%eax
 805ca2c:	48                   	dec    %eax
 805ca2d:	89 83 70 02 00 00    	mov    %eax,0x270(%ebx)
                return;
 805ca33:	eb 19                	jmp    805ca4e <free+0x67>
        } else {
                ifree(ptr);
 805ca35:	8b 45 08             	mov    0x8(%ebp),%eax
 805ca38:	89 04 24             	mov    %eax,(%esp)
 805ca3b:	e8 27 f8 ff ff       	call   805c267 <ifree>
                UTRACE(ptr, 0, 0);
        }
        malloc_active--;
 805ca40:	8b 83 70 02 00 00    	mov    0x270(%ebx),%eax
 805ca46:	48                   	dec    %eax
 805ca47:	89 83 70 02 00 00    	mov    %eax,0x270(%ebx)
        THREAD_UNLOCK();
        return;
 805ca4d:	90                   	nop
}
 805ca4e:	83 c4 14             	add    $0x14,%esp
 805ca51:	5b                   	pop    %ebx
 805ca52:	5d                   	pop    %ebp
 805ca53:	c3                   	ret    

0805ca54 <realloc>:

void *
realloc(void *ptr, size_t size)
{
 805ca54:	55                   	push   %ebp
 805ca55:	89 e5                	mov    %esp,%ebp
 805ca57:	56                   	push   %esi
 805ca58:	53                   	push   %ebx
 805ca59:	83 ec 10             	sub    $0x10,%esp
 805ca5c:	e8 98 d7 ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805ca61:	81 c3 ff 9d 00 00    	add    $0x9dff,%ebx
        register void *r;

        THREAD_LOCK();
        malloc_func = " in realloc():";
 805ca67:	8d 83 c4 d9 ff ff    	lea    -0x263c(%ebx),%eax
 805ca6d:	89 83 c0 02 00 00    	mov    %eax,0x2c0(%ebx)
        if (malloc_active++) {
 805ca73:	8b 83 70 02 00 00    	mov    0x270(%ebx),%eax
 805ca79:	8d 50 01             	lea    0x1(%eax),%edx
 805ca7c:	89 93 70 02 00 00    	mov    %edx,0x270(%ebx)
 805ca82:	85 c0                	test   %eax,%eax
 805ca84:	74 25                	je     805caab <realloc+0x57>
                wrtwarning("recursive call.\n");
 805ca86:	8d 83 97 d9 ff ff    	lea    -0x2669(%ebx),%eax
 805ca8c:	89 04 24             	mov    %eax,(%esp)
 805ca8f:	e8 3d e2 ff ff       	call   805acd1 <wrtwarning>
                malloc_active--;
 805ca94:	8b 83 70 02 00 00    	mov    0x270(%ebx),%eax
 805ca9a:	48                   	dec    %eax
 805ca9b:	89 83 70 02 00 00    	mov    %eax,0x270(%ebx)
                return (0);
 805caa1:	b8 00 00 00 00       	mov    $0x0,%eax
 805caa6:	e9 aa 00 00 00       	jmp    805cb55 <realloc+0x101>
        }
        if (ptr && !malloc_started) {
 805caab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 805caaf:	74 1f                	je     805cad0 <realloc+0x7c>
 805cab1:	8b 83 6c 02 00 00    	mov    0x26c(%ebx),%eax
 805cab7:	85 c0                	test   %eax,%eax
 805cab9:	75 15                	jne    805cad0 <realloc+0x7c>
                wrtwarning("malloc() has never been called.\n");
 805cabb:	8d 83 68 d9 ff ff    	lea    -0x2698(%ebx),%eax
 805cac1:	89 04 24             	mov    %eax,(%esp)
 805cac4:	e8 08 e2 ff ff       	call   805acd1 <wrtwarning>
                ptr = 0;
 805cac9:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
        }
        if (!malloc_started)
 805cad0:	8b 83 6c 02 00 00    	mov    0x26c(%ebx),%eax
 805cad6:	85 c0                	test   %eax,%eax
 805cad8:	75 05                	jne    805cadf <realloc+0x8b>
                malloc_init();
 805cada:	e8 49 e4 ff ff       	call   805af28 <malloc_init>
        if (malloc_sysv && !size) {
 805cadf:	8b 83 ac 02 00 00    	mov    0x2ac(%ebx),%eax
 805cae5:	85 c0                	test   %eax,%eax
 805cae7:	74 18                	je     805cb01 <realloc+0xad>
 805cae9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
 805caed:	75 12                	jne    805cb01 <realloc+0xad>
                ifree(ptr);
 805caef:	8b 45 08             	mov    0x8(%ebp),%eax
 805caf2:	89 04 24             	mov    %eax,(%esp)
 805caf5:	e8 6d f7 ff ff       	call   805c267 <ifree>
                r = 0;
 805cafa:	be 00 00 00 00       	mov    $0x0,%esi
 805caff:	eb 29                	jmp    805cb2a <realloc+0xd6>
        } else if (!ptr) {
 805cb01:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 805cb05:	75 0f                	jne    805cb16 <realloc+0xc2>
                r = imalloc(size);
 805cb07:	8b 45 0c             	mov    0xc(%ebp),%eax
 805cb0a:	89 04 24             	mov    %eax,(%esp)
 805cb0d:	e8 36 ee ff ff       	call   805b948 <imalloc>
 805cb12:	89 c6                	mov    %eax,%esi
 805cb14:	eb 14                	jmp    805cb2a <realloc+0xd6>
        } else {
                r = irealloc(ptr, size);
 805cb16:	8b 45 0c             	mov    0xc(%ebp),%eax
 805cb19:	89 44 24 04          	mov    %eax,0x4(%esp)
 805cb1d:	8b 45 08             	mov    0x8(%ebp),%eax
 805cb20:	89 04 24             	mov    %eax,(%esp)
 805cb23:	e8 d6 ee ff ff       	call   805b9fe <irealloc>
 805cb28:	89 c6                	mov    %eax,%esi
        }
        UTRACE(ptr, size, r);
        malloc_active--;
 805cb2a:	8b 83 70 02 00 00    	mov    0x270(%ebx),%eax
 805cb30:	48                   	dec    %eax
 805cb31:	89 83 70 02 00 00    	mov    %eax,0x270(%ebx)
        THREAD_UNLOCK();
        if (malloc_xmalloc && !r)
 805cb37:	8b 83 a8 02 00 00    	mov    0x2a8(%ebx),%eax
 805cb3d:	85 c0                	test   %eax,%eax
 805cb3f:	74 12                	je     805cb53 <realloc+0xff>
 805cb41:	85 f6                	test   %esi,%esi
 805cb43:	75 0e                	jne    805cb53 <realloc+0xff>
                wrterror("out of memory.\n");
 805cb45:	8d 83 a8 d9 ff ff    	lea    -0x2658(%ebx),%eax
 805cb4b:	89 04 24             	mov    %eax,(%esp)
 805cb4e:	e8 ae e0 ff ff       	call   805ac01 <wrterror>
        return (r);
 805cb53:	89 f0                	mov    %esi,%eax
}
 805cb55:	83 c4 10             	add    $0x10,%esp
 805cb58:	5b                   	pop    %ebx
 805cb59:	5e                   	pop    %esi
 805cb5a:	5d                   	pop    %ebp
 805cb5b:	c3                   	ret    

0805cb5c <calloc>:

/* Added */
void *calloc(size_t nelem, size_t elsize)
{
 805cb5c:	55                   	push   %ebp
 805cb5d:	89 e5                	mov    %esp,%ebp
 805cb5f:	53                   	push   %ebx
 805cb60:	83 ec 24             	sub    $0x24,%esp
 805cb63:	e8 91 d6 ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805cb68:	81 c3 f8 9c 00 00    	add    $0x9cf8,%ebx
        void *tmp;
        if (NULL == (tmp = malloc(nelem * elsize))) {
 805cb6e:	8b 45 08             	mov    0x8(%ebp),%eax
 805cb71:	0f af 45 0c          	imul   0xc(%ebp),%eax
 805cb75:	89 04 24             	mov    %eax,(%esp)
 805cb78:	e8 b1 fd ff ff       	call   805c92e <malloc>
 805cb7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
 805cb80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 805cb84:	75 07                	jne    805cb8d <calloc+0x31>
                return NULL;
 805cb86:	b8 00 00 00 00       	mov    $0x0,%eax
 805cb8b:	eb 21                	jmp    805cbae <calloc+0x52>
        } else {
                memset(tmp, 0, nelem * elsize);
 805cb8d:	8b 45 08             	mov    0x8(%ebp),%eax
 805cb90:	0f af 45 0c          	imul   0xc(%ebp),%eax
 805cb94:	89 44 24 08          	mov    %eax,0x8(%esp)
 805cb98:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 805cb9f:	00 
 805cba0:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805cba3:	89 04 24             	mov    %eax,(%esp)
 805cba6:	e8 00 d8 ff ff       	call   805a3ab <memset>
                return tmp;
 805cbab:	8b 45 f4             	mov    -0xc(%ebp),%eax
        }
}
 805cbae:	83 c4 24             	add    $0x24,%esp
 805cbb1:	5b                   	pop    %ebx
 805cbb2:	5d                   	pop    %ebp
 805cbb3:	c3                   	ret    

0805cbb4 <rand>:
#define RANDOM(lo,hi) ((lo)+(((hi)-(lo)+1)*(randseed = (randseed*4096+150889)%714025))/714025)

static unsigned long long randseed = 123456L;

int rand(void)
{
 805cbb4:	55                   	push   %ebp
 805cbb5:	89 e5                	mov    %esp,%ebp
 805cbb7:	53                   	push   %ebx
 805cbb8:	83 ec 14             	sub    $0x14,%esp
 805cbbb:	e8 39 d6 ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805cbc0:	81 c3 a0 9c 00 00    	add    $0x9ca0,%ebx
        randseed = (randseed * 4096 + 150889) % RAND_MAX;
 805cbc6:	8b 83 40 00 00 00    	mov    0x40(%ebx),%eax
 805cbcc:	8b 93 44 00 00 00    	mov    0x44(%ebx),%edx
 805cbd2:	0f a4 c2 0c          	shld   $0xc,%eax,%edx
 805cbd6:	c1 e0 0c             	shl    $0xc,%eax
 805cbd9:	05 69 4d 02 00       	add    $0x24d69,%eax
 805cbde:	83 d2 00             	adc    $0x0,%edx
 805cbe1:	c7 44 24 08 ff ff ff 	movl   $0x7fffffff,0x8(%esp)
 805cbe8:	7f 
 805cbe9:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 805cbf0:	00 
 805cbf1:	89 04 24             	mov    %eax,(%esp)
 805cbf4:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cbf8:	e8 69 0a 00 00       	call   805d666 <__umoddi3>
 805cbfd:	89 83 40 00 00 00    	mov    %eax,0x40(%ebx)
 805cc03:	89 93 44 00 00 00    	mov    %edx,0x44(%ebx)
        return randseed;
 805cc09:	8b 83 40 00 00 00    	mov    0x40(%ebx),%eax
 805cc0f:	8b 93 44 00 00 00    	mov    0x44(%ebx),%edx
}
 805cc15:	83 c4 14             	add    $0x14,%esp
 805cc18:	5b                   	pop    %ebx
 805cc19:	5d                   	pop    %ebp
 805cc1a:	c3                   	ret    

0805cc1b <srand>:

void srand(unsigned int seed)
{
 805cc1b:	55                   	push   %ebp
 805cc1c:	89 e5                	mov    %esp,%ebp
 805cc1e:	e8 d2 d5 ff ff       	call   805a1f5 <__x86.get_pc_thunk.cx>
 805cc23:	81 c1 3d 9c 00 00    	add    $0x9c3d,%ecx
        randseed = seed;
 805cc29:	8b 45 08             	mov    0x8(%ebp),%eax
 805cc2c:	ba 00 00 00 00       	mov    $0x0,%edx
 805cc31:	89 81 40 00 00 00    	mov    %eax,0x40(%ecx)
 805cc37:	89 91 44 00 00 00    	mov    %edx,0x44(%ecx)
}
 805cc3d:	90                   	nop
 805cc3e:	5d                   	pop    %ebp
 805cc3f:	c3                   	ret    

0805cc40 <printf>:

#include "stdio.h"
#include "unistd.h"

int printf(const char *fmt, ...)
{
 805cc40:	55                   	push   %ebp
 805cc41:	89 e5                	mov    %esp,%ebp
 805cc43:	53                   	push   %ebx
 805cc44:	83 ec 24             	sub    $0x24,%esp
 805cc47:	e8 a5 d5 ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805cc4c:	05 14 9c 00 00       	add    $0x9c14,%eax
        va_list args;
        int i;

        va_start(args, fmt);
 805cc51:	8d 55 0c             	lea    0xc(%ebp),%edx
 805cc54:	89 55 f0             	mov    %edx,-0x10(%ebp)
        i = vprintf(fmt, args);
 805cc57:	8b 55 f0             	mov    -0x10(%ebp),%edx
 805cc5a:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cc5e:	8b 55 08             	mov    0x8(%ebp),%edx
 805cc61:	89 14 24             	mov    %edx,(%esp)
 805cc64:	89 c3                	mov    %eax,%ebx
 805cc66:	e8 cd 00 00 00       	call   805cd38 <vprintf>
 805cc6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        va_end(args);
        return i;
 805cc6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 805cc71:	83 c4 24             	add    $0x24,%esp
 805cc74:	5b                   	pop    %ebx
 805cc75:	5d                   	pop    %ebp
 805cc76:	c3                   	ret    

0805cc77 <fprintf>:

int fprintf(FILE *stream, const char *fmt, ...)
{
 805cc77:	55                   	push   %ebp
 805cc78:	89 e5                	mov    %esp,%ebp
 805cc7a:	53                   	push   %ebx
 805cc7b:	83 ec 24             	sub    $0x24,%esp
 805cc7e:	e8 6e d5 ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805cc83:	05 dd 9b 00 00       	add    $0x9bdd,%eax
        va_list args;
        int i;

        va_start(args, fmt);
 805cc88:	8d 55 10             	lea    0x10(%ebp),%edx
 805cc8b:	89 55 f0             	mov    %edx,-0x10(%ebp)
        i = vfprintf(stream, fmt, args);
 805cc8e:	8b 55 f0             	mov    -0x10(%ebp),%edx
 805cc91:	89 54 24 08          	mov    %edx,0x8(%esp)
 805cc95:	8b 55 0c             	mov    0xc(%ebp),%edx
 805cc98:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cc9c:	8b 55 08             	mov    0x8(%ebp),%edx
 805cc9f:	89 14 24             	mov    %edx,(%esp)
 805cca2:	89 c3                	mov    %eax,%ebx
 805cca4:	e8 c6 00 00 00       	call   805cd6f <vfprintf>
 805cca9:	89 45 f4             	mov    %eax,-0xc(%ebp)
        va_end(args);
        return i;
 805ccac:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 805ccaf:	83 c4 24             	add    $0x24,%esp
 805ccb2:	5b                   	pop    %ebx
 805ccb3:	5d                   	pop    %ebp
 805ccb4:	c3                   	ret    

0805ccb5 <sprintf>:

int sprintf(char *buf, const char *fmt, ...)
{
 805ccb5:	55                   	push   %ebp
 805ccb6:	89 e5                	mov    %esp,%ebp
 805ccb8:	53                   	push   %ebx
 805ccb9:	83 ec 24             	sub    $0x24,%esp
 805ccbc:	e8 30 d5 ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805ccc1:	05 9f 9b 00 00       	add    $0x9b9f,%eax
        va_list args;
        int i;

        va_start(args, fmt);
 805ccc6:	8d 55 10             	lea    0x10(%ebp),%edx
 805ccc9:	89 55 f0             	mov    %edx,-0x10(%ebp)
        i = vsprintf(buf, fmt, args);
 805cccc:	8b 55 f0             	mov    -0x10(%ebp),%edx
 805cccf:	89 54 24 08          	mov    %edx,0x8(%esp)
 805ccd3:	8b 55 0c             	mov    0xc(%ebp),%edx
 805ccd6:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ccda:	8b 55 08             	mov    0x8(%ebp),%edx
 805ccdd:	89 14 24             	mov    %edx,(%esp)
 805cce0:	89 c3                	mov    %eax,%ebx
 805cce2:	e8 f4 00 00 00       	call   805cddb <vsprintf>
 805cce7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        va_end(args);
        return i;
 805ccea:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 805cced:	83 c4 24             	add    $0x24,%esp
 805ccf0:	5b                   	pop    %ebx
 805ccf1:	5d                   	pop    %ebp
 805ccf2:	c3                   	ret    

0805ccf3 <snprintf>:

int snprintf(char *buf, size_t size, const char *fmt, ...)
{
 805ccf3:	55                   	push   %ebp
 805ccf4:	89 e5                	mov    %esp,%ebp
 805ccf6:	53                   	push   %ebx
 805ccf7:	83 ec 24             	sub    $0x24,%esp
 805ccfa:	e8 f2 d4 ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805ccff:	05 61 9b 00 00       	add    $0x9b61,%eax
        va_list args;
        int i;

        va_start(args, fmt);
 805cd04:	8d 55 14             	lea    0x14(%ebp),%edx
 805cd07:	89 55 f0             	mov    %edx,-0x10(%ebp)
        i = vsnprintf(buf, size, fmt, args);
 805cd0a:	8b 55 f0             	mov    -0x10(%ebp),%edx
 805cd0d:	89 54 24 0c          	mov    %edx,0xc(%esp)
 805cd11:	8b 55 10             	mov    0x10(%ebp),%edx
 805cd14:	89 54 24 08          	mov    %edx,0x8(%esp)
 805cd18:	8b 55 0c             	mov    0xc(%ebp),%edx
 805cd1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cd1f:	8b 55 08             	mov    0x8(%ebp),%edx
 805cd22:	89 14 24             	mov    %edx,(%esp)
 805cd25:	89 c3                	mov    %eax,%ebx
 805cd27:	e8 27 0e 00 00       	call   805db53 <vsnprintf>
 805cd2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        va_end(args);
        return i;
 805cd2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 805cd32:	83 c4 24             	add    $0x24,%esp
 805cd35:	5b                   	pop    %ebx
 805cd36:	5d                   	pop    %ebp
 805cd37:	c3                   	ret    

0805cd38 <vprintf>:

int vprintf(const char *fmt, va_list args)
{
 805cd38:	55                   	push   %ebp
 805cd39:	89 e5                	mov    %esp,%ebp
 805cd3b:	53                   	push   %ebx
 805cd3c:	83 ec 14             	sub    $0x14,%esp
 805cd3f:	e8 ad d4 ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805cd44:	05 1c 9b 00 00       	add    $0x9b1c,%eax
        return vfprintf(stdout, fmt, args);
 805cd49:	8d 15 98 68 06 08    	lea    0x8066898,%edx
 805cd4f:	8b 12                	mov    (%edx),%edx
 805cd51:	8b 4d 0c             	mov    0xc(%ebp),%ecx
 805cd54:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cd58:	8b 4d 08             	mov    0x8(%ebp),%ecx
 805cd5b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
 805cd5f:	89 14 24             	mov    %edx,(%esp)
 805cd62:	89 c3                	mov    %eax,%ebx
 805cd64:	e8 06 00 00 00       	call   805cd6f <vfprintf>
}
 805cd69:	83 c4 14             	add    $0x14,%esp
 805cd6c:	5b                   	pop    %ebx
 805cd6d:	5d                   	pop    %ebp
 805cd6e:	c3                   	ret    

0805cd6f <vfprintf>:

#define __LIBC_PRINTF_BUFSIZE 1024
int vfprintf(FILE *stream, const char *fmt, va_list args)
{
 805cd6f:	55                   	push   %ebp
 805cd70:	89 e5                	mov    %esp,%ebp
 805cd72:	53                   	push   %ebx
 805cd73:	81 ec 24 04 00 00    	sub    $0x424,%esp
 805cd79:	e8 7b d4 ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805cd7e:	81 c3 e2 9a 00 00    	add    $0x9ae2,%ebx
        /* I'm really lazy */
        char buf[__LIBC_PRINTF_BUFSIZE];
        int ret = vsnprintf(buf, __LIBC_PRINTF_BUFSIZE, fmt, args);
 805cd84:	8b 45 10             	mov    0x10(%ebp),%eax
 805cd87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cd8b:	8b 45 0c             	mov    0xc(%ebp),%eax
 805cd8e:	89 44 24 08          	mov    %eax,0x8(%esp)
 805cd92:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
 805cd99:	00 
 805cd9a:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
 805cda0:	89 04 24             	mov    %eax,(%esp)
 805cda3:	e8 ab 0d 00 00       	call   805db53 <vsnprintf>
 805cda8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ret > 0) {
 805cdab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 805cdaf:	7e 1e                	jle    805cdcf <vfprintf+0x60>
                write(*stream, buf, ret);
 805cdb1:	8b 55 f4             	mov    -0xc(%ebp),%edx
 805cdb4:	8b 45 08             	mov    0x8(%ebp),%eax
 805cdb7:	8b 00                	mov    (%eax),%eax
 805cdb9:	89 54 24 08          	mov    %edx,0x8(%esp)
 805cdbd:	8d 95 f4 fb ff ff    	lea    -0x40c(%ebp),%edx
 805cdc3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cdc7:	89 04 24             	mov    %eax,(%esp)
 805cdca:	e8 a3 cc ff ff       	call   8059a72 <write>
        }
        return ret;
 805cdcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 805cdd2:	81 c4 24 04 00 00    	add    $0x424,%esp
 805cdd8:	5b                   	pop    %ebx
 805cdd9:	5d                   	pop    %ebp
 805cdda:	c3                   	ret    

0805cddb <vsprintf>:

int vsprintf(char *buf, const char *fmt, va_list args)
{
 805cddb:	55                   	push   %ebp
 805cddc:	89 e5                	mov    %esp,%ebp
 805cdde:	53                   	push   %ebx
 805cddf:	83 ec 14             	sub    $0x14,%esp
 805cde2:	e8 0a d4 ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805cde7:	05 79 9a 00 00       	add    $0x9a79,%eax
        return vsnprintf(buf, 0xffffffffUL, fmt, args);
 805cdec:	8b 55 10             	mov    0x10(%ebp),%edx
 805cdef:	89 54 24 0c          	mov    %edx,0xc(%esp)
 805cdf3:	8b 55 0c             	mov    0xc(%ebp),%edx
 805cdf6:	89 54 24 08          	mov    %edx,0x8(%esp)
 805cdfa:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 805ce01:	ff 
 805ce02:	8b 55 08             	mov    0x8(%ebp),%edx
 805ce05:	89 14 24             	mov    %edx,(%esp)
 805ce08:	89 c3                	mov    %eax,%ebx
 805ce0a:	e8 44 0d 00 00       	call   805db53 <vsnprintf>
}
 805ce0f:	83 c4 14             	add    $0x14,%esp
 805ce12:	5b                   	pop    %ebx
 805ce13:	5d                   	pop    %ebp
 805ce14:	c3                   	ret    

0805ce15 <fflush>:

int fflush(FILE *stream)
{
 805ce15:	55                   	push   %ebp
 805ce16:	89 e5                	mov    %esp,%ebp
 805ce18:	e8 d4 d3 ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805ce1d:	05 43 9a 00 00       	add    $0x9a43,%eax
        /* no-op */
        return 0;
 805ce22:	b8 00 00 00 00       	mov    $0x0,%eax
}
 805ce27:	5d                   	pop    %ebp
 805ce28:	c3                   	ret    

0805ce29 <shl>:
 * `fall out' the left (there never will be any such anyway).
 * We may assume len >= 0.  NOTE THAT THIS WRITES len+1 DIGITS.
 */
static void
shl(register digit *p, register int len, register int sh)
{
 805ce29:	55                   	push   %ebp
 805ce2a:	89 e5                	mov    %esp,%ebp
 805ce2c:	57                   	push   %edi
 805ce2d:	56                   	push   %esi
 805ce2e:	53                   	push   %ebx
 805ce2f:	83 ec 04             	sub    $0x4,%esp
 805ce32:	e8 ba d3 ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805ce37:	05 29 9a 00 00       	add    $0x9a29,%eax
 805ce3c:	8b 75 08             	mov    0x8(%ebp),%esi
        register int i;

        for (i = 0; i < len; i++)
 805ce3f:	bb 00 00 00 00       	mov    $0x0,%ebx
 805ce44:	eb 41                	jmp    805ce87 <shl+0x5e>
                p[i] = LHALF(p[i] << sh) | (p[i + 1] >> (HALF_BITS - sh));
 805ce46:	89 d8                	mov    %ebx,%eax
 805ce48:	c1 e0 02             	shl    $0x2,%eax
 805ce4b:	8d 3c 06             	lea    (%esi,%eax,1),%edi
 805ce4e:	89 d8                	mov    %ebx,%eax
 805ce50:	c1 e0 02             	shl    $0x2,%eax
 805ce53:	01 f0                	add    %esi,%eax
 805ce55:	8b 00                	mov    (%eax),%eax
 805ce57:	0f b6 4d 10          	movzbl 0x10(%ebp),%ecx
 805ce5b:	d3 e0                	shl    %cl,%eax
 805ce5d:	0f b7 c0             	movzwl %ax,%eax
 805ce60:	89 45 f0             	mov    %eax,-0x10(%ebp)
 805ce63:	89 d8                	mov    %ebx,%eax
 805ce65:	40                   	inc    %eax
 805ce66:	c1 e0 02             	shl    $0x2,%eax
 805ce69:	01 f0                	add    %esi,%eax
 805ce6b:	8b 00                	mov    (%eax),%eax
 805ce6d:	89 c1                	mov    %eax,%ecx
 805ce6f:	8b 55 10             	mov    0x10(%ebp),%edx
 805ce72:	b8 10 00 00 00       	mov    $0x10,%eax
 805ce77:	29 d0                	sub    %edx,%eax
 805ce79:	89 ca                	mov    %ecx,%edx
 805ce7b:	88 c1                	mov    %al,%cl
 805ce7d:	d3 ea                	shr    %cl,%edx
 805ce7f:	89 d0                	mov    %edx,%eax
 805ce81:	0b 45 f0             	or     -0x10(%ebp),%eax
 805ce84:	89 07                	mov    %eax,(%edi)
static void
shl(register digit *p, register int len, register int sh)
{
        register int i;

        for (i = 0; i < len; i++)
 805ce86:	43                   	inc    %ebx
 805ce87:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
 805ce8a:	7c ba                	jl     805ce46 <shl+0x1d>
                p[i] = LHALF(p[i] << sh) | (p[i + 1] >> (HALF_BITS - sh));
        p[i] = LHALF(p[i] << sh);
 805ce8c:	89 d8                	mov    %ebx,%eax
 805ce8e:	c1 e0 02             	shl    $0x2,%eax
 805ce91:	8d 14 06             	lea    (%esi,%eax,1),%edx
 805ce94:	89 d8                	mov    %ebx,%eax
 805ce96:	c1 e0 02             	shl    $0x2,%eax
 805ce99:	01 f0                	add    %esi,%eax
 805ce9b:	8b 00                	mov    (%eax),%eax
 805ce9d:	0f b6 4d 10          	movzbl 0x10(%ebp),%ecx
 805cea1:	d3 e0                	shl    %cl,%eax
 805cea3:	0f b7 c0             	movzwl %ax,%eax
 805cea6:	89 02                	mov    %eax,(%edx)
}
 805cea8:	90                   	nop
 805cea9:	83 c4 04             	add    $0x4,%esp
 805ceac:	5b                   	pop    %ebx
 805cead:	5e                   	pop    %esi
 805ceae:	5f                   	pop    %edi
 805ceaf:	5d                   	pop    %ebp
 805ceb0:	c3                   	ret    

0805ceb1 <__qdivrem>:
 * divisor are 4 `digits' in this base (they are shorter if they have
 * leading zeros).
 */
unsigned long long
__qdivrem(unsigned long long uq, unsigned long long vq, unsigned long long *arq)
{
 805ceb1:	55                   	push   %ebp
 805ceb2:	89 e5                	mov    %esp,%ebp
 805ceb4:	57                   	push   %edi
 805ceb5:	56                   	push   %esi
 805ceb6:	53                   	push   %ebx
 805ceb7:	81 ec b8 00 00 00    	sub    $0xb8,%esp
 805cebd:	e8 2f d3 ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805cec2:	05 9e 99 00 00       	add    $0x999e,%eax
 805cec7:	8b 55 08             	mov    0x8(%ebp),%edx
 805ceca:	89 95 58 ff ff ff    	mov    %edx,-0xa8(%ebp)
 805ced0:	8b 55 0c             	mov    0xc(%ebp),%edx
 805ced3:	89 95 5c ff ff ff    	mov    %edx,-0xa4(%ebp)
 805ced9:	8b 55 10             	mov    0x10(%ebp),%edx
 805cedc:	89 95 50 ff ff ff    	mov    %edx,-0xb0(%ebp)
 805cee2:	8b 55 14             	mov    0x14(%ebp),%edx
 805cee5:	89 95 54 ff ff ff    	mov    %edx,-0xac(%ebp)
        digit uspace[5], vspace[5], qspace[5];

        /*
         * Take care of special cases: divide by zero, and u < v.
         */
        if (vq == 0) {
 805ceeb:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
 805cef1:	0b 95 50 ff ff ff    	or     -0xb0(%ebp),%edx
 805cef7:	85 d2                	test   %edx,%edx
 805cef9:	75 40                	jne    805cf3b <__qdivrem+0x8a>
                /* divide by zero. */
                static volatile const unsigned int zero = 0;

                tmp.ul[H] = tmp.ul[L] = 1 / zero;
 805cefb:	8b b8 48 00 00 00    	mov    0x48(%eax),%edi
 805cf01:	b8 01 00 00 00       	mov    $0x1,%eax
 805cf06:	ba 00 00 00 00       	mov    $0x0,%edx
 805cf0b:	f7 f7                	div    %edi
 805cf0d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 805cf10:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 805cf13:	89 45 a8             	mov    %eax,-0x58(%ebp)
                if (arq)
 805cf16:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
 805cf1a:	74 14                	je     805cf30 <__qdivrem+0x7f>
                        *arq = uq;
 805cf1c:	8b 4d 18             	mov    0x18(%ebp),%ecx
 805cf1f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
 805cf25:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
 805cf2b:	89 01                	mov    %eax,(%ecx)
 805cf2d:	89 51 04             	mov    %edx,0x4(%ecx)
                return (tmp.q);
 805cf30:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 805cf33:	8b 55 a8             	mov    -0x58(%ebp),%edx
 805cf36:	e9 eb 05 00 00       	jmp    805d526 <__qdivrem+0x675>
        }
        if (uq < vq) {
 805cf3b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
 805cf41:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
 805cf47:	3b 95 54 ff ff ff    	cmp    -0xac(%ebp),%edx
 805cf4d:	77 39                	ja     805cf88 <__qdivrem+0xd7>
 805cf4f:	3b 95 54 ff ff ff    	cmp    -0xac(%ebp),%edx
 805cf55:	72 08                	jb     805cf5f <__qdivrem+0xae>
 805cf57:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
 805cf5d:	73 29                	jae    805cf88 <__qdivrem+0xd7>
                if (arq)
 805cf5f:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
 805cf63:	74 14                	je     805cf79 <__qdivrem+0xc8>
                        *arq = uq;
 805cf65:	8b 4d 18             	mov    0x18(%ebp),%ecx
 805cf68:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
 805cf6e:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
 805cf74:	89 01                	mov    %eax,(%ecx)
 805cf76:	89 51 04             	mov    %edx,0x4(%ecx)
                return (0);
 805cf79:	b8 00 00 00 00       	mov    $0x0,%eax
 805cf7e:	ba 00 00 00 00       	mov    $0x0,%edx
 805cf83:	e9 9e 05 00 00       	jmp    805d526 <__qdivrem+0x675>
        }
        u = &uspace[0];
 805cf88:	8d 45 90             	lea    -0x70(%ebp),%eax
 805cf8b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        v = &vspace[0];
 805cf8e:	8d 85 7c ff ff ff    	lea    -0x84(%ebp),%eax
 805cf94:	89 45 e8             	mov    %eax,-0x18(%ebp)
        q = &qspace[0];
 805cf97:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
 805cf9d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
         *      m >= 0 (otherwise u < v, which we already checked)
         *      m + n = 4
         * and thus
         *      m = 4 - n <= 2
         */
        tmp.uq = uq;
 805cfa0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
 805cfa6:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
 805cfac:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 805cfaf:	89 55 a8             	mov    %edx,-0x58(%ebp)
        u[0] = 0;
 805cfb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805cfb5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        u[1] = HHALF(tmp.ul[H]);
 805cfbb:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805cfbe:	83 c0 04             	add    $0x4,%eax
 805cfc1:	8b 55 a8             	mov    -0x58(%ebp),%edx
 805cfc4:	c1 ea 10             	shr    $0x10,%edx
 805cfc7:	89 10                	mov    %edx,(%eax)
        u[2] = LHALF(tmp.ul[H]);
 805cfc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805cfcc:	8d 50 08             	lea    0x8(%eax),%edx
 805cfcf:	8b 45 a8             	mov    -0x58(%ebp),%eax
 805cfd2:	0f b7 c0             	movzwl %ax,%eax
 805cfd5:	89 02                	mov    %eax,(%edx)
        u[3] = HHALF(tmp.ul[L]);
 805cfd7:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805cfda:	83 c0 0c             	add    $0xc,%eax
 805cfdd:	8b 55 a4             	mov    -0x5c(%ebp),%edx
 805cfe0:	c1 ea 10             	shr    $0x10,%edx
 805cfe3:	89 10                	mov    %edx,(%eax)
        u[4] = LHALF(tmp.ul[L]);
 805cfe5:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805cfe8:	8d 50 10             	lea    0x10(%eax),%edx
 805cfeb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 805cfee:	0f b7 c0             	movzwl %ax,%eax
 805cff1:	89 02                	mov    %eax,(%edx)
        tmp.uq = vq;
 805cff3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
 805cff9:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
 805cfff:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 805d002:	89 55 a8             	mov    %edx,-0x58(%ebp)
        v[1] = HHALF(tmp.ul[H]);
 805d005:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805d008:	83 c0 04             	add    $0x4,%eax
 805d00b:	8b 55 a8             	mov    -0x58(%ebp),%edx
 805d00e:	c1 ea 10             	shr    $0x10,%edx
 805d011:	89 10                	mov    %edx,(%eax)
        v[2] = LHALF(tmp.ul[H]);
 805d013:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805d016:	8d 50 08             	lea    0x8(%eax),%edx
 805d019:	8b 45 a8             	mov    -0x58(%ebp),%eax
 805d01c:	0f b7 c0             	movzwl %ax,%eax
 805d01f:	89 02                	mov    %eax,(%edx)
        v[3] = HHALF(tmp.ul[L]);
 805d021:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805d024:	83 c0 0c             	add    $0xc,%eax
 805d027:	8b 55 a4             	mov    -0x5c(%ebp),%edx
 805d02a:	c1 ea 10             	shr    $0x10,%edx
 805d02d:	89 10                	mov    %edx,(%eax)
        v[4] = LHALF(tmp.ul[L]);
 805d02f:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805d032:	8d 50 10             	lea    0x10(%eax),%edx
 805d035:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 805d038:	0f b7 c0             	movzwl %ax,%eax
 805d03b:	89 02                	mov    %eax,(%edx)
        for (n = 4; v[1] == 0; v++) {
 805d03d:	c7 45 d4 04 00 00 00 	movl   $0x4,-0x2c(%ebp)
 805d044:	e9 fc 00 00 00       	jmp    805d145 <__qdivrem+0x294>
                if (--n == 1) {
 805d049:	ff 4d d4             	decl   -0x2c(%ebp)
 805d04c:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
 805d050:	0f 85 eb 00 00 00    	jne    805d141 <__qdivrem+0x290>
                         *      for j = 1..4:
                         *              q[j] = floor((r*B + u[j]) / v),
                         *              r = (r*B + u[j]) % v;
                         * We unroll this completely here.
                         */
                        t = v[2];       /* nonzero, by definition */
 805d056:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805d059:	8b 40 08             	mov    0x8(%eax),%eax
 805d05c:	89 45 dc             	mov    %eax,-0x24(%ebp)
                        q1 = u[1] / t;
 805d05f:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d062:	83 c0 04             	add    $0x4,%eax
 805d065:	8b 00                	mov    (%eax),%eax
 805d067:	ba 00 00 00 00       	mov    $0x0,%edx
 805d06c:	f7 75 dc             	divl   -0x24(%ebp)
 805d06f:	89 45 c0             	mov    %eax,-0x40(%ebp)
                        rbj = COMBINE(u[1] % t, u[2]);
 805d072:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d075:	83 c0 04             	add    $0x4,%eax
 805d078:	8b 00                	mov    (%eax),%eax
 805d07a:	ba 00 00 00 00       	mov    $0x0,%edx
 805d07f:	f7 75 dc             	divl   -0x24(%ebp)
 805d082:	89 d0                	mov    %edx,%eax
 805d084:	c1 e0 10             	shl    $0x10,%eax
 805d087:	89 c2                	mov    %eax,%edx
 805d089:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d08c:	83 c0 08             	add    $0x8,%eax
 805d08f:	8b 00                	mov    (%eax),%eax
 805d091:	09 d0                	or     %edx,%eax
 805d093:	89 45 bc             	mov    %eax,-0x44(%ebp)
                        q2 = rbj / t;
 805d096:	8b 45 bc             	mov    -0x44(%ebp),%eax
 805d099:	ba 00 00 00 00       	mov    $0x0,%edx
 805d09e:	f7 75 dc             	divl   -0x24(%ebp)
 805d0a1:	89 45 b8             	mov    %eax,-0x48(%ebp)
                        rbj = COMBINE(rbj % t, u[3]);
 805d0a4:	8b 45 bc             	mov    -0x44(%ebp),%eax
 805d0a7:	ba 00 00 00 00       	mov    $0x0,%edx
 805d0ac:	f7 75 dc             	divl   -0x24(%ebp)
 805d0af:	89 d0                	mov    %edx,%eax
 805d0b1:	c1 e0 10             	shl    $0x10,%eax
 805d0b4:	89 c2                	mov    %eax,%edx
 805d0b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d0b9:	83 c0 0c             	add    $0xc,%eax
 805d0bc:	8b 00                	mov    (%eax),%eax
 805d0be:	09 d0                	or     %edx,%eax
 805d0c0:	89 45 bc             	mov    %eax,-0x44(%ebp)
                        q3 = rbj / t;
 805d0c3:	8b 45 bc             	mov    -0x44(%ebp),%eax
 805d0c6:	ba 00 00 00 00       	mov    $0x0,%edx
 805d0cb:	f7 75 dc             	divl   -0x24(%ebp)
 805d0ce:	89 45 b4             	mov    %eax,-0x4c(%ebp)
                        rbj = COMBINE(rbj % t, u[4]);
 805d0d1:	8b 45 bc             	mov    -0x44(%ebp),%eax
 805d0d4:	ba 00 00 00 00       	mov    $0x0,%edx
 805d0d9:	f7 75 dc             	divl   -0x24(%ebp)
 805d0dc:	89 d0                	mov    %edx,%eax
 805d0de:	c1 e0 10             	shl    $0x10,%eax
 805d0e1:	89 c2                	mov    %eax,%edx
 805d0e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d0e6:	83 c0 10             	add    $0x10,%eax
 805d0e9:	8b 00                	mov    (%eax),%eax
 805d0eb:	09 d0                	or     %edx,%eax
 805d0ed:	89 45 bc             	mov    %eax,-0x44(%ebp)
                        q4 = rbj / t;
 805d0f0:	8b 45 bc             	mov    -0x44(%ebp),%eax
 805d0f3:	ba 00 00 00 00       	mov    $0x0,%edx
 805d0f8:	f7 75 dc             	divl   -0x24(%ebp)
 805d0fb:	89 45 b0             	mov    %eax,-0x50(%ebp)
                        if (arq)
 805d0fe:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
 805d102:	74 1a                	je     805d11e <__qdivrem+0x26d>
                                *arq = rbj % t;
 805d104:	8b 45 bc             	mov    -0x44(%ebp),%eax
 805d107:	ba 00 00 00 00       	mov    $0x0,%edx
 805d10c:	f7 75 dc             	divl   -0x24(%ebp)
 805d10f:	89 d0                	mov    %edx,%eax
 805d111:	ba 00 00 00 00       	mov    $0x0,%edx
 805d116:	8b 4d 18             	mov    0x18(%ebp),%ecx
 805d119:	89 01                	mov    %eax,(%ecx)
 805d11b:	89 51 04             	mov    %edx,0x4(%ecx)
                        tmp.ul[H] = COMBINE(q1, q2);
 805d11e:	8b 45 c0             	mov    -0x40(%ebp),%eax
 805d121:	c1 e0 10             	shl    $0x10,%eax
 805d124:	0b 45 b8             	or     -0x48(%ebp),%eax
 805d127:	89 45 a8             	mov    %eax,-0x58(%ebp)
                        tmp.ul[L] = COMBINE(q3, q4);
 805d12a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
 805d12d:	c1 e0 10             	shl    $0x10,%eax
 805d130:	0b 45 b0             	or     -0x50(%ebp),%eax
 805d133:	89 45 a4             	mov    %eax,-0x5c(%ebp)
                        return (tmp.q);
 805d136:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 805d139:	8b 55 a8             	mov    -0x58(%ebp),%edx
 805d13c:	e9 e5 03 00 00       	jmp    805d526 <__qdivrem+0x675>
        tmp.uq = vq;
        v[1] = HHALF(tmp.ul[H]);
        v[2] = LHALF(tmp.ul[H]);
        v[3] = HHALF(tmp.ul[L]);
        v[4] = LHALF(tmp.ul[L]);
        for (n = 4; v[1] == 0; v++) {
 805d141:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
 805d145:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805d148:	83 c0 04             	add    $0x4,%eax
 805d14b:	8b 00                	mov    (%eax),%eax
 805d14d:	85 c0                	test   %eax,%eax
 805d14f:	0f 84 f4 fe ff ff    	je     805d049 <__qdivrem+0x198>
        /*
         * By adjusting q once we determine m, we can guarantee that
         * there is a complete four-digit quotient at &qspace[1] when
         * we finally stop.
         */
        for (m = 4 - n; u[1] == 0; u++)
 805d155:	b8 04 00 00 00       	mov    $0x4,%eax
 805d15a:	2b 45 d4             	sub    -0x2c(%ebp),%eax
 805d15d:	89 45 d8             	mov    %eax,-0x28(%ebp)
 805d160:	eb 07                	jmp    805d169 <__qdivrem+0x2b8>
                m--;
 805d162:	ff 4d d8             	decl   -0x28(%ebp)
        /*
         * By adjusting q once we determine m, we can guarantee that
         * there is a complete four-digit quotient at &qspace[1] when
         * we finally stop.
         */
        for (m = 4 - n; u[1] == 0; u++)
 805d165:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
 805d169:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d16c:	83 c0 04             	add    $0x4,%eax
 805d16f:	8b 00                	mov    (%eax),%eax
 805d171:	85 c0                	test   %eax,%eax
 805d173:	74 ed                	je     805d162 <__qdivrem+0x2b1>
                m--;
        for (i = 4 - m; --i >= 0;)
 805d175:	b8 04 00 00 00       	mov    $0x4,%eax
 805d17a:	2b 45 d8             	sub    -0x28(%ebp),%eax
 805d17d:	89 45 c8             	mov    %eax,-0x38(%ebp)
 805d180:	eb 15                	jmp    805d197 <__qdivrem+0x2e6>
                q[i] = 0;
 805d182:	8b 45 c8             	mov    -0x38(%ebp),%eax
 805d185:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 805d18c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805d18f:	01 d0                	add    %edx,%eax
 805d191:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
         * there is a complete four-digit quotient at &qspace[1] when
         * we finally stop.
         */
        for (m = 4 - n; u[1] == 0; u++)
                m--;
        for (i = 4 - m; --i >= 0;)
 805d197:	ff 4d c8             	decl   -0x38(%ebp)
 805d19a:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
 805d19e:	79 e2                	jns    805d182 <__qdivrem+0x2d1>
                q[i] = 0;
        q += 4 - m;
 805d1a0:	b8 04 00 00 00       	mov    $0x4,%eax
 805d1a5:	2b 45 d8             	sub    -0x28(%ebp),%eax
 805d1a8:	c1 e0 02             	shl    $0x2,%eax
 805d1ab:	01 45 c4             	add    %eax,-0x3c(%ebp)
         * Here we run Program D, translated from MIX to C and acquiring
         * a few minor changes.
         *
         * D1: choose multiplier 1 << d to ensure v[1] >= B/2.
         */
        d = 0;
 805d1ae:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
        for (t = v[1]; t < B / 2; t <<= 1)
 805d1b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805d1b8:	8b 40 04             	mov    0x4(%eax),%eax
 805d1bb:	89 45 dc             	mov    %eax,-0x24(%ebp)
 805d1be:	eb 06                	jmp    805d1c6 <__qdivrem+0x315>
                d++;
 805d1c0:	ff 45 d0             	incl   -0x30(%ebp)
         * a few minor changes.
         *
         * D1: choose multiplier 1 << d to ensure v[1] >= B/2.
         */
        d = 0;
        for (t = v[1]; t < B / 2; t <<= 1)
 805d1c3:	d1 65 dc             	shll   -0x24(%ebp)
 805d1c6:	81 7d dc ff 7f 00 00 	cmpl   $0x7fff,-0x24(%ebp)
 805d1cd:	76 f1                	jbe    805d1c0 <__qdivrem+0x30f>
                d++;
        if (d > 0) {
 805d1cf:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
 805d1d3:	7e 3d                	jle    805d212 <__qdivrem+0x361>
                shl(&u[0], m + n, d);           /* u <<= d */
 805d1d5:	8b 55 d8             	mov    -0x28(%ebp),%edx
 805d1d8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805d1db:	01 c2                	add    %eax,%edx
 805d1dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805d1e0:	89 44 24 08          	mov    %eax,0x8(%esp)
 805d1e4:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d1e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d1eb:	89 04 24             	mov    %eax,(%esp)
 805d1ee:	e8 36 fc ff ff       	call   805ce29 <shl>
                shl(&v[1], n - 1, d);           /* v <<= d */
 805d1f3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805d1f6:	8d 48 ff             	lea    -0x1(%eax),%ecx
 805d1f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805d1fc:	8d 50 04             	lea    0x4(%eax),%edx
 805d1ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805d202:	89 44 24 08          	mov    %eax,0x8(%esp)
 805d206:	89 4c 24 04          	mov    %ecx,0x4(%esp)
 805d20a:	89 14 24             	mov    %edx,(%esp)
 805d20d:	e8 17 fc ff ff       	call   805ce29 <shl>
        }
        /*
         * D2: j = 0.
         */
        j = 0;
 805d212:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
        v1 = v[1];      /* for D3 -- note that v[1..n] are constant */
 805d219:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805d21c:	8b 58 04             	mov    0x4(%eax),%ebx
        v2 = v[2];      /* for D3 */
 805d21f:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805d222:	8b 40 08             	mov    0x8(%eax),%eax
 805d225:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
                 * let rhat = (u[j]*B + u[j+1]) mod v[1].
                 * While rhat < B and v[2]*qhat > rhat*B+u[j+2],
                 * decrement qhat and increase rhat correspondingly.
                 * Note that if rhat >= B, v[2]*qhat < rhat*B.
                 */
                uj0 = u[j + 0]; /* for D3 only -- note that u[j+...] change */
 805d22b:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805d22e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 805d235:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d238:	01 d0                	add    %edx,%eax
 805d23a:	8b 38                	mov    (%eax),%edi
                uj1 = u[j + 1]; /* for D3 only */
 805d23c:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805d23f:	40                   	inc    %eax
 805d240:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 805d247:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d24a:	01 d0                	add    %edx,%eax
 805d24c:	8b 30                	mov    (%eax),%esi
                uj2 = u[j + 2]; /* for D3 only */
 805d24e:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805d251:	83 c0 02             	add    $0x2,%eax
 805d254:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 805d25b:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d25e:	01 d0                	add    %edx,%eax
 805d260:	8b 00                	mov    (%eax),%eax
 805d262:	89 c1                	mov    %eax,%ecx
                if (uj0 == v1) {
 805d264:	39 df                	cmp    %ebx,%edi
 805d266:	75 0c                	jne    805d274 <__qdivrem+0x3c3>
                        qhat = B;
 805d268:	c7 45 e4 00 00 01 00 	movl   $0x10000,-0x1c(%ebp)
                        rhat = uj1;
 805d26f:	89 75 e0             	mov    %esi,-0x20(%ebp)
                        goto qhat_too_big;
 805d272:	eb 26                	jmp    805d29a <__qdivrem+0x3e9>
                } else {
                        unsigned long nn = COMBINE(uj0, uj1);
 805d274:	89 f8                	mov    %edi,%eax
 805d276:	c1 e0 10             	shl    $0x10,%eax
 805d279:	09 f0                	or     %esi,%eax
 805d27b:	89 45 ac             	mov    %eax,-0x54(%ebp)
                        qhat = nn / v1;
 805d27e:	8b 45 ac             	mov    -0x54(%ebp),%eax
 805d281:	ba 00 00 00 00       	mov    $0x0,%edx
 805d286:	f7 f3                	div    %ebx
 805d288:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                        rhat = nn % v1;
 805d28b:	8b 45 ac             	mov    -0x54(%ebp),%eax
 805d28e:	ba 00 00 00 00       	mov    $0x0,%edx
 805d293:	f7 f3                	div    %ebx
 805d295:	89 55 e0             	mov    %edx,-0x20(%ebp)
                }
                while (v2 * qhat > COMBINE(rhat, uj2)) {
 805d298:	eb 0f                	jmp    805d2a9 <__qdivrem+0x3f8>
qhat_too_big:
                        qhat--;
 805d29a:	ff 4d e4             	decl   -0x1c(%ebp)
                        if ((rhat += v1) >= B)
 805d29d:	01 5d e0             	add    %ebx,-0x20(%ebp)
 805d2a0:	81 7d e0 ff ff 00 00 	cmpl   $0xffff,-0x20(%ebp)
 805d2a7:	77 1a                	ja     805d2c3 <__qdivrem+0x412>
                } else {
                        unsigned long nn = COMBINE(uj0, uj1);
                        qhat = nn / v1;
                        rhat = nn % v1;
                }
                while (v2 * qhat > COMBINE(rhat, uj2)) {
 805d2a9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
 805d2af:	0f af 45 e4          	imul   -0x1c(%ebp),%eax
 805d2b3:	8b 55 e0             	mov    -0x20(%ebp),%edx
 805d2b6:	c1 e2 10             	shl    $0x10,%edx
 805d2b9:	89 cf                	mov    %ecx,%edi
 805d2bb:	09 fa                	or     %edi,%edx
 805d2bd:	39 d0                	cmp    %edx,%eax
 805d2bf:	77 d9                	ja     805d29a <__qdivrem+0x3e9>
 805d2c1:	eb 01                	jmp    805d2c4 <__qdivrem+0x413>
qhat_too_big:
                        qhat--;
                        if ((rhat += v1) >= B)
                                break;
 805d2c3:	90                   	nop
                 * D4: Multiply and subtract.
                 * The variable `t' holds any borrows across the loop.
                 * We split this up so that we do not require v[0] = 0,
                 * and to eliminate a final special case.
                 */
                for (t = 0, i = n; i > 0; i--) {
 805d2c4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
 805d2cb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805d2ce:	89 45 c8             	mov    %eax,-0x38(%ebp)
 805d2d1:	eb 64                	jmp    805d337 <__qdivrem+0x486>
                        t = u[i + j] - v[i] * qhat - t;
 805d2d3:	8b 55 c8             	mov    -0x38(%ebp),%edx
 805d2d6:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805d2d9:	01 d0                	add    %edx,%eax
 805d2db:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 805d2e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d2e5:	01 d0                	add    %edx,%eax
 805d2e7:	8b 10                	mov    (%eax),%edx
 805d2e9:	8b 45 c8             	mov    -0x38(%ebp),%eax
 805d2ec:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
 805d2f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805d2f6:	01 c8                	add    %ecx,%eax
 805d2f8:	8b 00                	mov    (%eax),%eax
 805d2fa:	0f af 45 e4          	imul   -0x1c(%ebp),%eax
 805d2fe:	29 c2                	sub    %eax,%edx
 805d300:	89 d0                	mov    %edx,%eax
 805d302:	2b 45 dc             	sub    -0x24(%ebp),%eax
 805d305:	89 45 dc             	mov    %eax,-0x24(%ebp)
                        u[i + j] = LHALF(t);
 805d308:	8b 55 c8             	mov    -0x38(%ebp),%edx
 805d30b:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805d30e:	01 d0                	add    %edx,%eax
 805d310:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 805d317:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d31a:	01 c2                	add    %eax,%edx
 805d31c:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805d31f:	0f b7 c0             	movzwl %ax,%eax
 805d322:	89 02                	mov    %eax,(%edx)
                        t = (B - HHALF(t)) & (B - 1);
 805d324:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805d327:	c1 e8 10             	shr    $0x10,%eax
 805d32a:	f7 d8                	neg    %eax
 805d32c:	25 ff ff 00 00       	and    $0xffff,%eax
 805d331:	89 45 dc             	mov    %eax,-0x24(%ebp)
                 * D4: Multiply and subtract.
                 * The variable `t' holds any borrows across the loop.
                 * We split this up so that we do not require v[0] = 0,
                 * and to eliminate a final special case.
                 */
                for (t = 0, i = n; i > 0; i--) {
 805d334:	ff 4d c8             	decl   -0x38(%ebp)
 805d337:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
 805d33b:	7f 96                	jg     805d2d3 <__qdivrem+0x422>
                        t = u[i + j] - v[i] * qhat - t;
                        u[i + j] = LHALF(t);
                        t = (B - HHALF(t)) & (B - 1);
                }
                t = u[j] - t;
 805d33d:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805d340:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 805d347:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d34a:	01 d0                	add    %edx,%eax
 805d34c:	8b 00                	mov    (%eax),%eax
 805d34e:	2b 45 dc             	sub    -0x24(%ebp),%eax
 805d351:	89 45 dc             	mov    %eax,-0x24(%ebp)
                u[j] = LHALF(t);
 805d354:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805d357:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 805d35e:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d361:	01 c2                	add    %eax,%edx
 805d363:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805d366:	0f b7 c0             	movzwl %ax,%eax
 805d369:	89 02                	mov    %eax,(%edx)
                 * D5: test remainder.
                 * There is a borrow if and only if HHALF(t) is nonzero;
                 * in that (rare) case, qhat was too large (by exactly 1).
                 * Fix it by adding v[1..n] to u[j..j+n].
                 */
                if (HHALF(t)) {
 805d36b:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805d36e:	c1 e8 10             	shr    $0x10,%eax
 805d371:	85 c0                	test   %eax,%eax
 805d373:	0f 84 91 00 00 00    	je     805d40a <__qdivrem+0x559>
                        qhat--;
 805d379:	ff 4d e4             	decl   -0x1c(%ebp)
                        for (t = 0, i = n; i > 0; i--) { /* D6: add back. */
 805d37c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
 805d383:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805d386:	89 45 c8             	mov    %eax,-0x38(%ebp)
 805d389:	eb 4f                	jmp    805d3da <__qdivrem+0x529>
                                t += u[i + j] + v[i];
 805d38b:	8b 55 c8             	mov    -0x38(%ebp),%edx
 805d38e:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805d391:	01 d0                	add    %edx,%eax
 805d393:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 805d39a:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d39d:	01 d0                	add    %edx,%eax
 805d39f:	8b 10                	mov    (%eax),%edx
 805d3a1:	8b 45 c8             	mov    -0x38(%ebp),%eax
 805d3a4:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
 805d3ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805d3ae:	01 c8                	add    %ecx,%eax
 805d3b0:	8b 00                	mov    (%eax),%eax
 805d3b2:	01 d0                	add    %edx,%eax
 805d3b4:	01 45 dc             	add    %eax,-0x24(%ebp)
                                u[i + j] = LHALF(t);
 805d3b7:	8b 55 c8             	mov    -0x38(%ebp),%edx
 805d3ba:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805d3bd:	01 d0                	add    %edx,%eax
 805d3bf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 805d3c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d3c9:	01 c2                	add    %eax,%edx
 805d3cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805d3ce:	0f b7 c0             	movzwl %ax,%eax
 805d3d1:	89 02                	mov    %eax,(%edx)
                                t = HHALF(t);
 805d3d3:	c1 6d dc 10          	shrl   $0x10,-0x24(%ebp)
                 * in that (rare) case, qhat was too large (by exactly 1).
                 * Fix it by adding v[1..n] to u[j..j+n].
                 */
                if (HHALF(t)) {
                        qhat--;
                        for (t = 0, i = n; i > 0; i--) { /* D6: add back. */
 805d3d7:	ff 4d c8             	decl   -0x38(%ebp)
 805d3da:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
 805d3de:	7f ab                	jg     805d38b <__qdivrem+0x4da>
                                t += u[i + j] + v[i];
                                u[i + j] = LHALF(t);
                                t = HHALF(t);
                        }
                        u[j] = LHALF(u[j] + t);
 805d3e0:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805d3e3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 805d3ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d3ed:	01 c2                	add    %eax,%edx
 805d3ef:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805d3f2:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
 805d3f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d3fc:	01 c8                	add    %ecx,%eax
 805d3fe:	8b 08                	mov    (%eax),%ecx
 805d400:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805d403:	01 c8                	add    %ecx,%eax
 805d405:	0f b7 c0             	movzwl %ax,%eax
 805d408:	89 02                	mov    %eax,(%edx)
                }
                q[j] = qhat;
 805d40a:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805d40d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 805d414:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 805d417:	01 c2                	add    %eax,%edx
 805d419:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805d41c:	89 02                	mov    %eax,(%edx)
        } while (++j <= m);             /* D7: loop on j. */
 805d41e:	ff 45 cc             	incl   -0x34(%ebp)
 805d421:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805d424:	3b 45 d8             	cmp    -0x28(%ebp),%eax
 805d427:	0f 8e fe fd ff ff    	jle    805d22b <__qdivrem+0x37a>
        /*
         * If caller wants the remainder, we have to calculate it as
         * u[m..m+n] >> d (this is at most n digits and thus fits in
         * u[m+1..m+n], but we may need more source digits).
         */
        if (arq) {
 805d42d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
 805d431:	0f 84 bd 00 00 00    	je     805d4f4 <__qdivrem+0x643>
                if (d) {
 805d437:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
 805d43b:	0f 84 85 00 00 00    	je     805d4c6 <__qdivrem+0x615>
                        for (i = m + n; i > m; --i)
 805d441:	8b 55 d8             	mov    -0x28(%ebp),%edx
 805d444:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805d447:	01 d0                	add    %edx,%eax
 805d449:	89 45 c8             	mov    %eax,-0x38(%ebp)
 805d44c:	eb 5b                	jmp    805d4a9 <__qdivrem+0x5f8>
                                u[i] = (u[i] >> d) |
 805d44e:	8b 45 c8             	mov    -0x38(%ebp),%eax
 805d451:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 805d458:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d45b:	01 c2                	add    %eax,%edx
 805d45d:	8b 45 c8             	mov    -0x38(%ebp),%eax
 805d460:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
 805d467:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d46a:	01 c8                	add    %ecx,%eax
 805d46c:	8b 18                	mov    (%eax),%ebx
 805d46e:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805d471:	89 de                	mov    %ebx,%esi
 805d473:	88 c1                	mov    %al,%cl
 805d475:	d3 ee                	shr    %cl,%esi
                                       LHALF(u[i - 1] << (HALF_BITS - d));
 805d477:	8b 45 c8             	mov    -0x38(%ebp),%eax
 805d47a:	05 ff ff ff 3f       	add    $0x3fffffff,%eax
 805d47f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
 805d486:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d489:	01 c8                	add    %ecx,%eax
 805d48b:	8b 18                	mov    (%eax),%ebx
 805d48d:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805d490:	b9 10 00 00 00       	mov    $0x10,%ecx
 805d495:	29 c1                	sub    %eax,%ecx
 805d497:	89 c8                	mov    %ecx,%eax
 805d499:	88 c1                	mov    %al,%cl
 805d49b:	d3 e3                	shl    %cl,%ebx
 805d49d:	89 d8                	mov    %ebx,%eax
 805d49f:	0f b7 c0             	movzwl %ax,%eax
         * u[m+1..m+n], but we may need more source digits).
         */
        if (arq) {
                if (d) {
                        for (i = m + n; i > m; --i)
                                u[i] = (u[i] >> d) |
 805d4a2:	09 f0                	or     %esi,%eax
 805d4a4:	89 02                	mov    %eax,(%edx)
         * u[m..m+n] >> d (this is at most n digits and thus fits in
         * u[m+1..m+n], but we may need more source digits).
         */
        if (arq) {
                if (d) {
                        for (i = m + n; i > m; --i)
 805d4a6:	ff 4d c8             	decl   -0x38(%ebp)
 805d4a9:	8b 45 c8             	mov    -0x38(%ebp),%eax
 805d4ac:	3b 45 d8             	cmp    -0x28(%ebp),%eax
 805d4af:	7f 9d                	jg     805d44e <__qdivrem+0x59d>
                                u[i] = (u[i] >> d) |
                                       LHALF(u[i - 1] << (HALF_BITS - d));
                        u[i] = 0;
 805d4b1:	8b 45 c8             	mov    -0x38(%ebp),%eax
 805d4b4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 805d4bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805d4be:	01 d0                	add    %edx,%eax
 805d4c0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
                }
                tmp.ul[H] = COMBINE(uspace[1], uspace[2]);
 805d4c6:	8b 45 94             	mov    -0x6c(%ebp),%eax
 805d4c9:	c1 e0 10             	shl    $0x10,%eax
 805d4cc:	89 c2                	mov    %eax,%edx
 805d4ce:	8b 45 98             	mov    -0x68(%ebp),%eax
 805d4d1:	09 d0                	or     %edx,%eax
 805d4d3:	89 45 a8             	mov    %eax,-0x58(%ebp)
                tmp.ul[L] = COMBINE(uspace[3], uspace[4]);
 805d4d6:	8b 45 9c             	mov    -0x64(%ebp),%eax
 805d4d9:	c1 e0 10             	shl    $0x10,%eax
 805d4dc:	89 c2                	mov    %eax,%edx
 805d4de:	8b 45 a0             	mov    -0x60(%ebp),%eax
 805d4e1:	09 d0                	or     %edx,%eax
 805d4e3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
                *arq = tmp.q;
 805d4e6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 805d4e9:	8b 55 a8             	mov    -0x58(%ebp),%edx
 805d4ec:	8b 4d 18             	mov    0x18(%ebp),%ecx
 805d4ef:	89 01                	mov    %eax,(%ecx)
 805d4f1:	89 51 04             	mov    %edx,0x4(%ecx)
        }

        tmp.ul[H] = COMBINE(qspace[1], qspace[2]);
 805d4f4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
 805d4fa:	c1 e0 10             	shl    $0x10,%eax
 805d4fd:	89 c2                	mov    %eax,%edx
 805d4ff:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
 805d505:	09 d0                	or     %edx,%eax
 805d507:	89 45 a8             	mov    %eax,-0x58(%ebp)
        tmp.ul[L] = COMBINE(qspace[3], qspace[4]);
 805d50a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
 805d510:	c1 e0 10             	shl    $0x10,%eax
 805d513:	89 c2                	mov    %eax,%edx
 805d515:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
 805d51b:	09 d0                	or     %edx,%eax
 805d51d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
        return (tmp.q);
 805d520:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 805d523:	8b 55 a8             	mov    -0x58(%ebp),%edx
}
 805d526:	81 c4 b8 00 00 00    	add    $0xb8,%esp
 805d52c:	5b                   	pop    %ebx
 805d52d:	5e                   	pop    %esi
 805d52e:	5f                   	pop    %edi
 805d52f:	5d                   	pop    %ebp
 805d530:	c3                   	ret    

0805d531 <__divdi3>:
/*
 * Divide two signed quads.
 * ??? if -1/2 should produce -1 on this machine, this code is wrong
 */
long long __divdi3(long long a, long long b)
{
 805d531:	55                   	push   %ebp
 805d532:	89 e5                	mov    %esp,%ebp
 805d534:	53                   	push   %ebx
 805d535:	83 ec 54             	sub    $0x54,%esp
 805d538:	e8 b8 cc ff ff       	call   805a1f5 <__x86.get_pc_thunk.cx>
 805d53d:	81 c1 23 93 00 00    	add    $0x9323,%ecx
 805d543:	8b 45 08             	mov    0x8(%ebp),%eax
 805d546:	89 45 d0             	mov    %eax,-0x30(%ebp)
 805d549:	8b 45 0c             	mov    0xc(%ebp),%eax
 805d54c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 805d54f:	8b 45 10             	mov    0x10(%ebp),%eax
 805d552:	89 45 c8             	mov    %eax,-0x38(%ebp)
 805d555:	8b 45 14             	mov    0x14(%ebp),%eax
 805d558:	89 45 cc             	mov    %eax,-0x34(%ebp)
        unsigned long long ua, ub, uq;
        int neg;

        if (a < 0)
 805d55b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
 805d55f:	79 1c                	jns    805d57d <__divdi3+0x4c>
                ua = -(unsigned long long)a, neg = 1;
 805d561:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805d564:	8b 55 d4             	mov    -0x2c(%ebp),%edx
 805d567:	f7 d8                	neg    %eax
 805d569:	83 d2 00             	adc    $0x0,%edx
 805d56c:	f7 da                	neg    %edx
 805d56e:	89 45 f0             	mov    %eax,-0x10(%ebp)
 805d571:	89 55 f4             	mov    %edx,-0xc(%ebp)
 805d574:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
 805d57b:	eb 13                	jmp    805d590 <__divdi3+0x5f>
        else
                ua = a, neg = 0;
 805d57d:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805d580:	8b 55 d4             	mov    -0x2c(%ebp),%edx
 805d583:	89 45 f0             	mov    %eax,-0x10(%ebp)
 805d586:	89 55 f4             	mov    %edx,-0xc(%ebp)
 805d589:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (b < 0)
 805d590:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
 805d594:	79 19                	jns    805d5af <__divdi3+0x7e>
                ub = -(unsigned long long)b, neg ^= 1;
 805d596:	8b 45 c8             	mov    -0x38(%ebp),%eax
 805d599:	8b 55 cc             	mov    -0x34(%ebp),%edx
 805d59c:	f7 d8                	neg    %eax
 805d59e:	83 d2 00             	adc    $0x0,%edx
 805d5a1:	f7 da                	neg    %edx
 805d5a3:	89 45 e8             	mov    %eax,-0x18(%ebp)
 805d5a6:	89 55 ec             	mov    %edx,-0x14(%ebp)
 805d5a9:	83 75 e4 01          	xorl   $0x1,-0x1c(%ebp)
 805d5ad:	eb 0c                	jmp    805d5bb <__divdi3+0x8a>
        else
                ub = b;
 805d5af:	8b 45 c8             	mov    -0x38(%ebp),%eax
 805d5b2:	8b 55 cc             	mov    -0x34(%ebp),%edx
 805d5b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
 805d5b8:	89 55 ec             	mov    %edx,-0x14(%ebp)
        uq = __qdivrem(ua, ub, (unsigned long long *)0);
 805d5bb:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 805d5c2:	00 
 805d5c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805d5c6:	8b 55 ec             	mov    -0x14(%ebp),%edx
 805d5c9:	89 44 24 08          	mov    %eax,0x8(%esp)
 805d5cd:	89 54 24 0c          	mov    %edx,0xc(%esp)
 805d5d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805d5d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
 805d5d7:	89 04 24             	mov    %eax,(%esp)
 805d5da:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d5de:	89 cb                	mov    %ecx,%ebx
 805d5e0:	e8 cc f8 ff ff       	call   805ceb1 <__qdivrem>
 805d5e5:	89 45 d8             	mov    %eax,-0x28(%ebp)
 805d5e8:	89 55 dc             	mov    %edx,-0x24(%ebp)
        return (neg ? -uq : uq);
 805d5eb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
 805d5ef:	74 0f                	je     805d600 <__divdi3+0xcf>
 805d5f1:	8b 45 d8             	mov    -0x28(%ebp),%eax
 805d5f4:	8b 55 dc             	mov    -0x24(%ebp),%edx
 805d5f7:	f7 d8                	neg    %eax
 805d5f9:	83 d2 00             	adc    $0x0,%edx
 805d5fc:	f7 da                	neg    %edx
 805d5fe:	eb 06                	jmp    805d606 <__divdi3+0xd5>
 805d600:	8b 45 d8             	mov    -0x28(%ebp),%eax
 805d603:	8b 55 dc             	mov    -0x24(%ebp),%edx
}
 805d606:	83 c4 54             	add    $0x54,%esp
 805d609:	5b                   	pop    %ebx
 805d60a:	5d                   	pop    %ebp
 805d60b:	c3                   	ret    

0805d60c <__udivdi3>:
/*
 * Divide two unsigned quads.
 */
unsigned long long
__udivdi3(unsigned long long a, unsigned long long b)
{
 805d60c:	55                   	push   %ebp
 805d60d:	89 e5                	mov    %esp,%ebp
 805d60f:	53                   	push   %ebx
 805d610:	83 ec 34             	sub    $0x34,%esp
 805d613:	e8 dd cb ff ff       	call   805a1f5 <__x86.get_pc_thunk.cx>
 805d618:	81 c1 48 92 00 00    	add    $0x9248,%ecx
 805d61e:	8b 45 08             	mov    0x8(%ebp),%eax
 805d621:	89 45 f0             	mov    %eax,-0x10(%ebp)
 805d624:	8b 45 0c             	mov    0xc(%ebp),%eax
 805d627:	89 45 f4             	mov    %eax,-0xc(%ebp)
 805d62a:	8b 45 10             	mov    0x10(%ebp),%eax
 805d62d:	89 45 e8             	mov    %eax,-0x18(%ebp)
 805d630:	8b 45 14             	mov    0x14(%ebp),%eax
 805d633:	89 45 ec             	mov    %eax,-0x14(%ebp)
        return (__qdivrem(a, b, (unsigned long long *)0));
 805d636:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 805d63d:	00 
 805d63e:	8b 45 e8             	mov    -0x18(%ebp),%eax
 805d641:	8b 55 ec             	mov    -0x14(%ebp),%edx
 805d644:	89 44 24 08          	mov    %eax,0x8(%esp)
 805d648:	89 54 24 0c          	mov    %edx,0xc(%esp)
 805d64c:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805d64f:	8b 55 f4             	mov    -0xc(%ebp),%edx
 805d652:	89 04 24             	mov    %eax,(%esp)
 805d655:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d659:	89 cb                	mov    %ecx,%ebx
 805d65b:	e8 51 f8 ff ff       	call   805ceb1 <__qdivrem>
}
 805d660:	83 c4 34             	add    $0x34,%esp
 805d663:	5b                   	pop    %ebx
 805d664:	5d                   	pop    %ebp
 805d665:	c3                   	ret    

0805d666 <__umoddi3>:
/*
 * Return remainder after dividing two unsigned quads.
 */
unsigned long long
__umoddi3(unsigned long long a, unsigned long long b)
{
 805d666:	55                   	push   %ebp
 805d667:	89 e5                	mov    %esp,%ebp
 805d669:	53                   	push   %ebx
 805d66a:	83 ec 44             	sub    $0x44,%esp
 805d66d:	e8 83 cb ff ff       	call   805a1f5 <__x86.get_pc_thunk.cx>
 805d672:	81 c1 ee 91 00 00    	add    $0x91ee,%ecx
 805d678:	8b 45 08             	mov    0x8(%ebp),%eax
 805d67b:	89 45 e0             	mov    %eax,-0x20(%ebp)
 805d67e:	8b 45 0c             	mov    0xc(%ebp),%eax
 805d681:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 805d684:	8b 45 10             	mov    0x10(%ebp),%eax
 805d687:	89 45 d8             	mov    %eax,-0x28(%ebp)
 805d68a:	8b 45 14             	mov    0x14(%ebp),%eax
 805d68d:	89 45 dc             	mov    %eax,-0x24(%ebp)
        unsigned long long r;

        (void)__qdivrem(a, b, &r);
 805d690:	8d 45 f0             	lea    -0x10(%ebp),%eax
 805d693:	89 44 24 10          	mov    %eax,0x10(%esp)
 805d697:	8b 45 d8             	mov    -0x28(%ebp),%eax
 805d69a:	8b 55 dc             	mov    -0x24(%ebp),%edx
 805d69d:	89 44 24 08          	mov    %eax,0x8(%esp)
 805d6a1:	89 54 24 0c          	mov    %edx,0xc(%esp)
 805d6a5:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805d6a8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 805d6ab:	89 04 24             	mov    %eax,(%esp)
 805d6ae:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d6b2:	89 cb                	mov    %ecx,%ebx
 805d6b4:	e8 f8 f7 ff ff       	call   805ceb1 <__qdivrem>
        return (r);
 805d6b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805d6bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
}
 805d6bf:	83 c4 44             	add    $0x44,%esp
 805d6c2:	5b                   	pop    %ebx
 805d6c3:	5d                   	pop    %ebp
 805d6c4:	c3                   	ret    

0805d6c5 <__tolower>:

#define isascii(c) (((unsigned char)(c))<=0x7f)
#define toascii(c) (((unsigned char)(c))&0x7f)

static inline unsigned char __tolower(unsigned char c)
{
 805d6c5:	55                   	push   %ebp
 805d6c6:	89 e5                	mov    %esp,%ebp
 805d6c8:	83 ec 04             	sub    $0x4,%esp
 805d6cb:	e8 66 0a 00 00       	call   805e136 <__x86.get_pc_thunk.dx>
 805d6d0:	81 c2 90 91 00 00    	add    $0x9190,%edx
 805d6d6:	8b 45 08             	mov    0x8(%ebp),%eax
 805d6d9:	88 45 fc             	mov    %al,-0x4(%ebp)
        if (isupper(c))
 805d6dc:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
 805d6e0:	0f b6 84 02 60 00 00 	movzbl 0x60(%edx,%eax,1),%eax
 805d6e7:	00 
 805d6e8:	0f b6 c0             	movzbl %al,%eax
 805d6eb:	83 e0 01             	and    $0x1,%eax
 805d6ee:	85 c0                	test   %eax,%eax
 805d6f0:	74 04                	je     805d6f6 <__tolower+0x31>
                c -= 'A' - 'a';
 805d6f2:	80 45 fc 20          	addb   $0x20,-0x4(%ebp)
        return c;
 805d6f6:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
}
 805d6fa:	c9                   	leave  
 805d6fb:	c3                   	ret    

0805d6fc <__toupper>:

static inline unsigned char __toupper(unsigned char c)
{
 805d6fc:	55                   	push   %ebp
 805d6fd:	89 e5                	mov    %esp,%ebp
 805d6ff:	83 ec 04             	sub    $0x4,%esp
 805d702:	e8 2f 0a 00 00       	call   805e136 <__x86.get_pc_thunk.dx>
 805d707:	81 c2 59 91 00 00    	add    $0x9159,%edx
 805d70d:	8b 45 08             	mov    0x8(%ebp),%eax
 805d710:	88 45 fc             	mov    %al,-0x4(%ebp)
        if (islower(c))
 805d713:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
 805d717:	0f b6 84 02 60 00 00 	movzbl 0x60(%edx,%eax,1),%eax
 805d71e:	00 
 805d71f:	0f b6 c0             	movzbl %al,%eax
 805d722:	83 e0 02             	and    $0x2,%eax
 805d725:	85 c0                	test   %eax,%eax
 805d727:	74 04                	je     805d72d <__toupper+0x31>
                c -= 'a' - 'A';
 805d729:	80 6d fc 20          	subb   $0x20,-0x4(%ebp)
        return c;
 805d72d:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
}
 805d731:	c9                   	leave  
 805d732:	c3                   	ret    

0805d733 <skip_atoi>:
#include "stddef.h"
#include "stdio.h"
#include "string.h"

static int skip_atoi(const char **s)
{
 805d733:	55                   	push   %ebp
 805d734:	89 e5                	mov    %esp,%ebp
 805d736:	56                   	push   %esi
 805d737:	53                   	push   %ebx
 805d738:	83 ec 10             	sub    $0x10,%esp
 805d73b:	e8 b5 ca ff ff       	call   805a1f5 <__x86.get_pc_thunk.cx>
 805d740:	81 c1 20 91 00 00    	add    $0x9120,%ecx
        int i = 0;
 805d746:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

        while (isdigit(**s))
 805d74d:	eb 29                	jmp    805d778 <skip_atoi+0x45>
                i = i * 10 + *((*s)++) - '0';
 805d74f:	8b 55 f4             	mov    -0xc(%ebp),%edx
 805d752:	89 d0                	mov    %edx,%eax
 805d754:	c1 e0 02             	shl    $0x2,%eax
 805d757:	01 d0                	add    %edx,%eax
 805d759:	01 c0                	add    %eax,%eax
 805d75b:	89 c6                	mov    %eax,%esi
 805d75d:	8b 45 08             	mov    0x8(%ebp),%eax
 805d760:	8b 00                	mov    (%eax),%eax
 805d762:	8d 58 01             	lea    0x1(%eax),%ebx
 805d765:	8b 55 08             	mov    0x8(%ebp),%edx
 805d768:	89 1a                	mov    %ebx,(%edx)
 805d76a:	0f b6 00             	movzbl (%eax),%eax
 805d76d:	0f be c0             	movsbl %al,%eax
 805d770:	01 f0                	add    %esi,%eax
 805d772:	83 e8 30             	sub    $0x30,%eax
 805d775:	89 45 f4             	mov    %eax,-0xc(%ebp)

static int skip_atoi(const char **s)
{
        int i = 0;

        while (isdigit(**s))
 805d778:	8b 45 08             	mov    0x8(%ebp),%eax
 805d77b:	8b 00                	mov    (%eax),%eax
 805d77d:	0f b6 00             	movzbl (%eax),%eax
 805d780:	0f b6 c0             	movzbl %al,%eax
 805d783:	0f b6 84 01 60 00 00 	movzbl 0x60(%ecx,%eax,1),%eax
 805d78a:	00 
 805d78b:	0f b6 c0             	movzbl %al,%eax
 805d78e:	83 e0 04             	and    $0x4,%eax
 805d791:	85 c0                	test   %eax,%eax
 805d793:	75 ba                	jne    805d74f <skip_atoi+0x1c>
                i = i * 10 + *((*s)++) - '0';
        return i;
 805d795:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 805d798:	83 c4 10             	add    $0x10,%esp
 805d79b:	5b                   	pop    %ebx
 805d79c:	5e                   	pop    %esi
 805d79d:	5d                   	pop    %ebp
 805d79e:	c3                   	ret    

0805d79f <number>:
#define LEFT    16              /* left justified */
#define SPECIAL 32              /* 0x */
#define LARGE   64              /* use 'ABCDEF' instead of 'abcdef' */

static char *number(char *buf, char *end, long long num, int base, int size, int precision, int type)
{
 805d79f:	55                   	push   %ebp
 805d7a0:	89 e5                	mov    %esp,%ebp
 805d7a2:	57                   	push   %edi
 805d7a3:	56                   	push   %esi
 805d7a4:	53                   	push   %ebx
 805d7a5:	81 ec dc 00 00 00    	sub    $0xdc,%esp
 805d7ab:	e8 8a 09 00 00       	call   805e13a <__x86.get_pc_thunk.si>
 805d7b0:	81 c6 b0 90 00 00    	add    $0x90b0,%esi
 805d7b6:	8b 45 10             	mov    0x10(%ebp),%eax
 805d7b9:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
 805d7bf:	8b 45 14             	mov    0x14(%ebp),%eax
 805d7c2:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
        char c, sign, tmp[66];
        const char *digits;
        const char small_digits[] = "0123456789abcdefghijklmnopqrstuvwxyz";
 805d7c8:	8d 85 65 ff ff ff    	lea    -0x9b(%ebp),%eax
 805d7ce:	8d 96 d4 d9 ff ff    	lea    -0x262c(%esi),%edx
 805d7d4:	bb 25 00 00 00       	mov    $0x25,%ebx
 805d7d9:	89 c1                	mov    %eax,%ecx
 805d7db:	83 e1 01             	and    $0x1,%ecx
 805d7de:	85 c9                	test   %ecx,%ecx
 805d7e0:	74 0c                	je     805d7ee <number+0x4f>
 805d7e2:	0f b6 0a             	movzbl (%edx),%ecx
 805d7e5:	88 08                	mov    %cl,(%eax)
 805d7e7:	8d 40 01             	lea    0x1(%eax),%eax
 805d7ea:	8d 52 01             	lea    0x1(%edx),%edx
 805d7ed:	4b                   	dec    %ebx
 805d7ee:	89 c1                	mov    %eax,%ecx
 805d7f0:	83 e1 02             	and    $0x2,%ecx
 805d7f3:	85 c9                	test   %ecx,%ecx
 805d7f5:	74 0f                	je     805d806 <number+0x67>
 805d7f7:	0f b7 0a             	movzwl (%edx),%ecx
 805d7fa:	66 89 08             	mov    %cx,(%eax)
 805d7fd:	8d 40 02             	lea    0x2(%eax),%eax
 805d800:	8d 52 02             	lea    0x2(%edx),%edx
 805d803:	83 eb 02             	sub    $0x2,%ebx
 805d806:	89 df                	mov    %ebx,%edi
 805d808:	83 e7 fc             	and    $0xfffffffc,%edi
 805d80b:	89 bd 2c ff ff ff    	mov    %edi,-0xd4(%ebp)
 805d811:	b9 00 00 00 00       	mov    $0x0,%ecx
 805d816:	8b 3c 0a             	mov    (%edx,%ecx,1),%edi
 805d819:	89 3c 08             	mov    %edi,(%eax,%ecx,1)
 805d81c:	83 c1 04             	add    $0x4,%ecx
 805d81f:	3b 8d 2c ff ff ff    	cmp    -0xd4(%ebp),%ecx
 805d825:	72 ef                	jb     805d816 <number+0x77>
 805d827:	01 c8                	add    %ecx,%eax
 805d829:	01 ca                	add    %ecx,%edx
 805d82b:	b9 00 00 00 00       	mov    $0x0,%ecx
 805d830:	89 df                	mov    %ebx,%edi
 805d832:	83 e7 02             	and    $0x2,%edi
 805d835:	85 ff                	test   %edi,%edi
 805d837:	74 0b                	je     805d844 <number+0xa5>
 805d839:	0f b7 3c 0a          	movzwl (%edx,%ecx,1),%edi
 805d83d:	66 89 3c 08          	mov    %di,(%eax,%ecx,1)
 805d841:	83 c1 02             	add    $0x2,%ecx
 805d844:	83 e3 01             	and    $0x1,%ebx
 805d847:	85 db                	test   %ebx,%ebx
 805d849:	74 07                	je     805d852 <number+0xb3>
 805d84b:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
 805d84f:	88 14 08             	mov    %dl,(%eax,%ecx,1)
        const char large_digits[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 805d852:	8d 8d 40 ff ff ff    	lea    -0xc0(%ebp),%ecx
 805d858:	8d 96 fc d9 ff ff    	lea    -0x2604(%esi),%edx
 805d85e:	b8 25 00 00 00       	mov    $0x25,%eax
 805d863:	83 e0 fc             	and    $0xfffffffc,%eax
 805d866:	89 c7                	mov    %eax,%edi
 805d868:	b8 00 00 00 00       	mov    $0x0,%eax
 805d86d:	8b 9c 06 fc d9 ff ff 	mov    -0x2604(%esi,%eax,1),%ebx
 805d874:	89 9c 05 40 ff ff ff 	mov    %ebx,-0xc0(%ebp,%eax,1)
 805d87b:	83 c0 04             	add    $0x4,%eax
 805d87e:	39 f8                	cmp    %edi,%eax
 805d880:	72 eb                	jb     805d86d <number+0xce>
 805d882:	01 c1                	add    %eax,%ecx
 805d884:	01 c2                	add    %eax,%edx
 805d886:	0f b6 02             	movzbl (%edx),%eax
 805d889:	88 01                	mov    %al,(%ecx)
        int i;

        digits = (type & LARGE) ? large_digits : small_digits;
 805d88b:	8b 45 24             	mov    0x24(%ebp),%eax
 805d88e:	83 e0 40             	and    $0x40,%eax
 805d891:	85 c0                	test   %eax,%eax
 805d893:	74 08                	je     805d89d <number+0xfe>
 805d895:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
 805d89b:	eb 06                	jmp    805d8a3 <number+0x104>
 805d89d:	8d 85 65 ff ff ff    	lea    -0x9b(%ebp),%eax
 805d8a3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (type & LEFT)
 805d8a6:	8b 45 24             	mov    0x24(%ebp),%eax
 805d8a9:	83 e0 10             	and    $0x10,%eax
 805d8ac:	85 c0                	test   %eax,%eax
 805d8ae:	74 04                	je     805d8b4 <number+0x115>
                type &= ~ZEROPAD;
 805d8b0:	83 65 24 fe          	andl   $0xfffffffe,0x24(%ebp)
        if (base < 2 || base > 36)
 805d8b4:	83 7d 18 01          	cmpl   $0x1,0x18(%ebp)
 805d8b8:	7e 06                	jle    805d8c0 <number+0x121>
 805d8ba:	83 7d 18 24          	cmpl   $0x24,0x18(%ebp)
 805d8be:	7e 08                	jle    805d8c8 <number+0x129>
                return buf;
 805d8c0:	8b 45 08             	mov    0x8(%ebp),%eax
 805d8c3:	e9 80 02 00 00       	jmp    805db48 <number+0x3a9>
        c = (type & ZEROPAD) ? '0' : ' ';
 805d8c8:	8b 45 24             	mov    0x24(%ebp),%eax
 805d8cb:	83 e0 01             	and    $0x1,%eax
 805d8ce:	85 c0                	test   %eax,%eax
 805d8d0:	74 04                	je     805d8d6 <number+0x137>
 805d8d2:	b0 30                	mov    $0x30,%al
 805d8d4:	eb 02                	jmp    805d8d8 <number+0x139>
 805d8d6:	b0 20                	mov    $0x20,%al
 805d8d8:	88 45 d3             	mov    %al,-0x2d(%ebp)
        sign = 0;
 805d8db:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
        if (type & SIGN) {
 805d8df:	8b 45 24             	mov    0x24(%ebp),%eax
 805d8e2:	83 e0 02             	and    $0x2,%eax
 805d8e5:	85 c0                	test   %eax,%eax
 805d8e7:	74 49                	je     805d932 <number+0x193>
                if (num < 0) {
 805d8e9:	83 bd 34 ff ff ff 00 	cmpl   $0x0,-0xcc(%ebp)
 805d8f0:	79 1c                	jns    805d90e <number+0x16f>
                        sign = '-';
 805d8f2:	c6 45 e7 2d          	movb   $0x2d,-0x19(%ebp)
                        num = -num;
 805d8f6:	f7 9d 30 ff ff ff    	negl   -0xd0(%ebp)
 805d8fc:	83 95 34 ff ff ff 00 	adcl   $0x0,-0xcc(%ebp)
 805d903:	f7 9d 34 ff ff ff    	negl   -0xcc(%ebp)
                        size--;
 805d909:	ff 4d 1c             	decl   0x1c(%ebp)
 805d90c:	eb 24                	jmp    805d932 <number+0x193>
                } else if (type & PLUS) {
 805d90e:	8b 45 24             	mov    0x24(%ebp),%eax
 805d911:	83 e0 04             	and    $0x4,%eax
 805d914:	85 c0                	test   %eax,%eax
 805d916:	74 09                	je     805d921 <number+0x182>
                        sign = '+';
 805d918:	c6 45 e7 2b          	movb   $0x2b,-0x19(%ebp)
                        size--;
 805d91c:	ff 4d 1c             	decl   0x1c(%ebp)
 805d91f:	eb 11                	jmp    805d932 <number+0x193>
                } else if (type & SPACE) {
 805d921:	8b 45 24             	mov    0x24(%ebp),%eax
 805d924:	83 e0 08             	and    $0x8,%eax
 805d927:	85 c0                	test   %eax,%eax
 805d929:	74 07                	je     805d932 <number+0x193>
                        sign = ' ';
 805d92b:	c6 45 e7 20          	movb   $0x20,-0x19(%ebp)
                        size--;
 805d92f:	ff 4d 1c             	decl   0x1c(%ebp)
                }
        }
        if (type & SPECIAL) {
 805d932:	8b 45 24             	mov    0x24(%ebp),%eax
 805d935:	83 e0 20             	and    $0x20,%eax
 805d938:	85 c0                	test   %eax,%eax
 805d93a:	74 15                	je     805d951 <number+0x1b2>
                if (base == 16)
 805d93c:	83 7d 18 10          	cmpl   $0x10,0x18(%ebp)
 805d940:	75 06                	jne    805d948 <number+0x1a9>
                        size -= 2;
 805d942:	83 6d 1c 02          	subl   $0x2,0x1c(%ebp)
 805d946:	eb 09                	jmp    805d951 <number+0x1b2>
                else if (base == 8)
 805d948:	83 7d 18 08          	cmpl   $0x8,0x18(%ebp)
 805d94c:	75 03                	jne    805d951 <number+0x1b2>
                        size--;
 805d94e:	ff 4d 1c             	decl   0x1c(%ebp)
        }
        i = 0;
 805d951:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        if (num == 0) {
 805d958:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
 805d95e:	0b 85 30 ff ff ff    	or     -0xd0(%ebp),%eax
 805d964:	85 c0                	test   %eax,%eax
 805d966:	75 13                	jne    805d97b <number+0x1dc>
                tmp[i++] = '0';
 805d968:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805d96b:	8d 50 01             	lea    0x1(%eax),%edx
 805d96e:	89 55 e0             	mov    %edx,-0x20(%ebp)
 805d971:	c6 44 05 8a 30       	movb   $0x30,-0x76(%ebp,%eax,1)
 805d976:	e9 89 00 00 00       	jmp    805da04 <number+0x265>
        } else {
                /* XXX KAF: force unsigned mod and div. */
                /* XXX kernel does not support long long division */
                unsigned long long num2 = (unsigned long long)num;
 805d97b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
 805d981:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
 805d987:	89 45 d8             	mov    %eax,-0x28(%ebp)
 805d98a:	89 55 dc             	mov    %edx,-0x24(%ebp)
                unsigned int base2 = (unsigned int)base;
 805d98d:	8b 45 18             	mov    0x18(%ebp),%eax
 805d990:	89 45 cc             	mov    %eax,-0x34(%ebp)
                while (num2 != 0) {
 805d993:	eb 65                	jmp    805d9fa <number+0x25b>
                        tmp[i++] = digits[num2 % base2];
 805d995:	8b 7d e0             	mov    -0x20(%ebp),%edi
 805d998:	8d 47 01             	lea    0x1(%edi),%eax
 805d99b:	89 45 e0             	mov    %eax,-0x20(%ebp)
 805d99e:	8b 4d cc             	mov    -0x34(%ebp),%ecx
 805d9a1:	bb 00 00 00 00       	mov    $0x0,%ebx
 805d9a6:	8b 45 d8             	mov    -0x28(%ebp),%eax
 805d9a9:	8b 55 dc             	mov    -0x24(%ebp),%edx
 805d9ac:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d9b0:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
 805d9b4:	89 04 24             	mov    %eax,(%esp)
 805d9b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d9bb:	89 f3                	mov    %esi,%ebx
 805d9bd:	e8 a4 fc ff ff       	call   805d666 <__umoddi3>
 805d9c2:	89 c2                	mov    %eax,%edx
 805d9c4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805d9c7:	01 d0                	add    %edx,%eax
 805d9c9:	0f b6 00             	movzbl (%eax),%eax
 805d9cc:	88 44 3d 8a          	mov    %al,-0x76(%ebp,%edi,1)
                        num2 /= base2;
 805d9d0:	8b 45 cc             	mov    -0x34(%ebp),%eax
 805d9d3:	ba 00 00 00 00       	mov    $0x0,%edx
 805d9d8:	89 44 24 08          	mov    %eax,0x8(%esp)
 805d9dc:	89 54 24 0c          	mov    %edx,0xc(%esp)
 805d9e0:	8b 45 d8             	mov    -0x28(%ebp),%eax
 805d9e3:	8b 55 dc             	mov    -0x24(%ebp),%edx
 805d9e6:	89 04 24             	mov    %eax,(%esp)
 805d9e9:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d9ed:	89 f3                	mov    %esi,%ebx
 805d9ef:	e8 18 fc ff ff       	call   805d60c <__udivdi3>
 805d9f4:	89 45 d8             	mov    %eax,-0x28(%ebp)
 805d9f7:	89 55 dc             	mov    %edx,-0x24(%ebp)
        } else {
                /* XXX KAF: force unsigned mod and div. */
                /* XXX kernel does not support long long division */
                unsigned long long num2 = (unsigned long long)num;
                unsigned int base2 = (unsigned int)base;
                while (num2 != 0) {
 805d9fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805d9fd:	0b 45 d8             	or     -0x28(%ebp),%eax
 805da00:	85 c0                	test   %eax,%eax
 805da02:	75 91                	jne    805d995 <number+0x1f6>
                        tmp[i++] = digits[num2 % base2];
                        num2 /= base2;
                }
        }
        if (i > precision)
 805da04:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805da07:	3b 45 20             	cmp    0x20(%ebp),%eax
 805da0a:	7e 06                	jle    805da12 <number+0x273>
                precision = i;
 805da0c:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805da0f:	89 45 20             	mov    %eax,0x20(%ebp)
        size -= precision;
 805da12:	8b 45 20             	mov    0x20(%ebp),%eax
 805da15:	29 45 1c             	sub    %eax,0x1c(%ebp)
        if (!(type & (ZEROPAD + LEFT))) {
 805da18:	8b 45 24             	mov    0x24(%ebp),%eax
 805da1b:	83 e0 11             	and    $0x11,%eax
 805da1e:	85 c0                	test   %eax,%eax
 805da20:	75 20                	jne    805da42 <number+0x2a3>
                while (size-- > 0) {
 805da22:	eb 11                	jmp    805da35 <number+0x296>
                        if (buf <= end)
 805da24:	8b 45 08             	mov    0x8(%ebp),%eax
 805da27:	3b 45 0c             	cmp    0xc(%ebp),%eax
 805da2a:	77 06                	ja     805da32 <number+0x293>
                                *buf = ' ';
 805da2c:	8b 45 08             	mov    0x8(%ebp),%eax
 805da2f:	c6 00 20             	movb   $0x20,(%eax)
                        ++buf;
 805da32:	ff 45 08             	incl   0x8(%ebp)
        }
        if (i > precision)
                precision = i;
        size -= precision;
        if (!(type & (ZEROPAD + LEFT))) {
                while (size-- > 0) {
 805da35:	8b 45 1c             	mov    0x1c(%ebp),%eax
 805da38:	8d 50 ff             	lea    -0x1(%eax),%edx
 805da3b:	89 55 1c             	mov    %edx,0x1c(%ebp)
 805da3e:	85 c0                	test   %eax,%eax
 805da40:	7f e2                	jg     805da24 <number+0x285>
                        if (buf <= end)
                                *buf = ' ';
                        ++buf;
                }
        }
        if (sign) {
 805da42:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
 805da46:	74 14                	je     805da5c <number+0x2bd>
                if (buf <= end)
 805da48:	8b 45 08             	mov    0x8(%ebp),%eax
 805da4b:	3b 45 0c             	cmp    0xc(%ebp),%eax
 805da4e:	77 09                	ja     805da59 <number+0x2ba>
                        *buf = sign;
 805da50:	8b 45 08             	mov    0x8(%ebp),%eax
 805da53:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
 805da57:	88 10                	mov    %dl,(%eax)
                ++buf;
 805da59:	ff 45 08             	incl   0x8(%ebp)
        }
        if (type & SPECIAL) {
 805da5c:	8b 45 24             	mov    0x24(%ebp),%eax
 805da5f:	83 e0 20             	and    $0x20,%eax
 805da62:	85 c0                	test   %eax,%eax
 805da64:	74 47                	je     805daad <number+0x30e>
                if (base == 8) {
 805da66:	83 7d 18 08          	cmpl   $0x8,0x18(%ebp)
 805da6a:	75 13                	jne    805da7f <number+0x2e0>
                        if (buf <= end)
 805da6c:	8b 45 08             	mov    0x8(%ebp),%eax
 805da6f:	3b 45 0c             	cmp    0xc(%ebp),%eax
 805da72:	77 06                	ja     805da7a <number+0x2db>
                                *buf = '0';
 805da74:	8b 45 08             	mov    0x8(%ebp),%eax
 805da77:	c6 00 30             	movb   $0x30,(%eax)
                        ++buf;
 805da7a:	ff 45 08             	incl   0x8(%ebp)
 805da7d:	eb 2e                	jmp    805daad <number+0x30e>
                } else if (base == 16) {
 805da7f:	83 7d 18 10          	cmpl   $0x10,0x18(%ebp)
 805da83:	75 28                	jne    805daad <number+0x30e>
                        if (buf <= end)
 805da85:	8b 45 08             	mov    0x8(%ebp),%eax
 805da88:	3b 45 0c             	cmp    0xc(%ebp),%eax
 805da8b:	77 06                	ja     805da93 <number+0x2f4>
                                *buf = '0';
 805da8d:	8b 45 08             	mov    0x8(%ebp),%eax
 805da90:	c6 00 30             	movb   $0x30,(%eax)
                        ++buf;
 805da93:	ff 45 08             	incl   0x8(%ebp)
                        if (buf <= end)
 805da96:	8b 45 08             	mov    0x8(%ebp),%eax
 805da99:	3b 45 0c             	cmp    0xc(%ebp),%eax
 805da9c:	77 0c                	ja     805daaa <number+0x30b>
                                *buf = digits[33];
 805da9e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805daa1:	0f b6 50 21          	movzbl 0x21(%eax),%edx
 805daa5:	8b 45 08             	mov    0x8(%ebp),%eax
 805daa8:	88 10                	mov    %dl,(%eax)
                        ++buf;
 805daaa:	ff 45 08             	incl   0x8(%ebp)
                }
        }
        if (!(type & LEFT)) {
 805daad:	8b 45 24             	mov    0x24(%ebp),%eax
 805dab0:	83 e0 10             	and    $0x10,%eax
 805dab3:	85 c0                	test   %eax,%eax
 805dab5:	75 36                	jne    805daed <number+0x34e>
                while (size-- > 0) {
 805dab7:	eb 14                	jmp    805dacd <number+0x32e>
                        if (buf <= end)
 805dab9:	8b 45 08             	mov    0x8(%ebp),%eax
 805dabc:	3b 45 0c             	cmp    0xc(%ebp),%eax
 805dabf:	77 09                	ja     805daca <number+0x32b>
                                *buf = c;
 805dac1:	8b 45 08             	mov    0x8(%ebp),%eax
 805dac4:	0f b6 55 d3          	movzbl -0x2d(%ebp),%edx
 805dac8:	88 10                	mov    %dl,(%eax)
                        ++buf;
 805daca:	ff 45 08             	incl   0x8(%ebp)
                                *buf = digits[33];
                        ++buf;
                }
        }
        if (!(type & LEFT)) {
                while (size-- > 0) {
 805dacd:	8b 45 1c             	mov    0x1c(%ebp),%eax
 805dad0:	8d 50 ff             	lea    -0x1(%eax),%edx
 805dad3:	89 55 1c             	mov    %edx,0x1c(%ebp)
 805dad6:	85 c0                	test   %eax,%eax
 805dad8:	7f df                	jg     805dab9 <number+0x31a>
                        if (buf <= end)
                                *buf = c;
                        ++buf;
                }
        }
        while (i < precision--) {
 805dada:	eb 11                	jmp    805daed <number+0x34e>
                if (buf <= end)
 805dadc:	8b 45 08             	mov    0x8(%ebp),%eax
 805dadf:	3b 45 0c             	cmp    0xc(%ebp),%eax
 805dae2:	77 06                	ja     805daea <number+0x34b>
                        *buf = '0';
 805dae4:	8b 45 08             	mov    0x8(%ebp),%eax
 805dae7:	c6 00 30             	movb   $0x30,(%eax)
                ++buf;
 805daea:	ff 45 08             	incl   0x8(%ebp)
                        if (buf <= end)
                                *buf = c;
                        ++buf;
                }
        }
        while (i < precision--) {
 805daed:	8b 45 20             	mov    0x20(%ebp),%eax
 805daf0:	8d 50 ff             	lea    -0x1(%eax),%edx
 805daf3:	89 55 20             	mov    %edx,0x20(%ebp)
 805daf6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
 805daf9:	7f e1                	jg     805dadc <number+0x33d>
                if (buf <= end)
                        *buf = '0';
                ++buf;
        }
        while (i-- > 0) {
 805dafb:	eb 1b                	jmp    805db18 <number+0x379>
                if (buf <= end)
 805dafd:	8b 45 08             	mov    0x8(%ebp),%eax
 805db00:	3b 45 0c             	cmp    0xc(%ebp),%eax
 805db03:	77 10                	ja     805db15 <number+0x376>
                        *buf = tmp[i];
 805db05:	8d 55 8a             	lea    -0x76(%ebp),%edx
 805db08:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805db0b:	01 d0                	add    %edx,%eax
 805db0d:	0f b6 10             	movzbl (%eax),%edx
 805db10:	8b 45 08             	mov    0x8(%ebp),%eax
 805db13:	88 10                	mov    %dl,(%eax)
                ++buf;
 805db15:	ff 45 08             	incl   0x8(%ebp)
        while (i < precision--) {
                if (buf <= end)
                        *buf = '0';
                ++buf;
        }
        while (i-- > 0) {
 805db18:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805db1b:	8d 50 ff             	lea    -0x1(%eax),%edx
 805db1e:	89 55 e0             	mov    %edx,-0x20(%ebp)
 805db21:	85 c0                	test   %eax,%eax
 805db23:	7f d8                	jg     805dafd <number+0x35e>
                if (buf <= end)
                        *buf = tmp[i];
                ++buf;
        }
        while (size-- > 0) {
 805db25:	eb 11                	jmp    805db38 <number+0x399>
                if (buf <= end)
 805db27:	8b 45 08             	mov    0x8(%ebp),%eax
 805db2a:	3b 45 0c             	cmp    0xc(%ebp),%eax
 805db2d:	77 06                	ja     805db35 <number+0x396>
                        *buf = ' ';
 805db2f:	8b 45 08             	mov    0x8(%ebp),%eax
 805db32:	c6 00 20             	movb   $0x20,(%eax)
                ++buf;
 805db35:	ff 45 08             	incl   0x8(%ebp)
        while (i-- > 0) {
                if (buf <= end)
                        *buf = tmp[i];
                ++buf;
        }
        while (size-- > 0) {
 805db38:	8b 45 1c             	mov    0x1c(%ebp),%eax
 805db3b:	8d 50 ff             	lea    -0x1(%eax),%edx
 805db3e:	89 55 1c             	mov    %edx,0x1c(%ebp)
 805db41:	85 c0                	test   %eax,%eax
 805db43:	7f e2                	jg     805db27 <number+0x388>
                if (buf <= end)
                        *buf = ' ';
                ++buf;
        }
        return buf;
 805db45:	8b 45 08             	mov    0x8(%ebp),%eax
}
 805db48:	81 c4 dc 00 00 00    	add    $0xdc,%esp
 805db4e:	5b                   	pop    %ebx
 805db4f:	5e                   	pop    %esi
 805db50:	5f                   	pop    %edi
 805db51:	5d                   	pop    %ebp
 805db52:	c3                   	ret    

0805db53 <vsnprintf>:
*
* Call this function if you are already dealing with a va_list.
* You probably want snprintf instead.
 */
int vsnprintf(char *buf, size_t size, const char *fmt, va_list args)
{
 805db53:	55                   	push   %ebp
 805db54:	89 e5                	mov    %esp,%ebp
 805db56:	53                   	push   %ebx
 805db57:	83 ec 64             	sub    $0x64,%esp
 805db5a:	e8 9a c6 ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805db5f:	81 c3 01 8d 00 00    	add    $0x8d01,%ebx
                                   number of chars for from string */
        int qualifier;              /* 'h', 'l', or 'L' for integer fields */
        /* 'z' support added 23/7/1999 S.H.    */
        /* 'z' changed to 'Z' --davidm 1/25/99 */

        str = buf;
 805db65:	8b 45 08             	mov    0x8(%ebp),%eax
 805db68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        end = buf + size - 1;
 805db6b:	8b 45 0c             	mov    0xc(%ebp),%eax
 805db6e:	8d 50 ff             	lea    -0x1(%eax),%edx
 805db71:	8b 45 08             	mov    0x8(%ebp),%eax
 805db74:	01 d0                	add    %edx,%eax
 805db76:	89 45 e0             	mov    %eax,-0x20(%ebp)

        if (end < buf - 1) {
 805db79:	8b 45 08             	mov    0x8(%ebp),%eax
 805db7c:	48                   	dec    %eax
 805db7d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
 805db80:	0f 86 76 05 00 00    	jbe    805e0fc <.L138+0x116>
                end = ((void *) - 1);
 805db86:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
                size = end - buf + 1;
 805db8d:	8b 55 e0             	mov    -0x20(%ebp),%edx
 805db90:	8b 45 08             	mov    0x8(%ebp),%eax
 805db93:	29 c2                	sub    %eax,%edx
 805db95:	89 d0                	mov    %edx,%eax
 805db97:	40                   	inc    %eax
 805db98:	89 45 0c             	mov    %eax,0xc(%ebp)
        }

        for (; *fmt ; ++fmt) {
 805db9b:	e9 5c 05 00 00       	jmp    805e0fc <.L138+0x116>
                if (*fmt != '%') {
 805dba0:	8b 45 10             	mov    0x10(%ebp),%eax
 805dba3:	0f b6 00             	movzbl (%eax),%eax
 805dba6:	3c 25                	cmp    $0x25,%al
 805dba8:	74 1b                	je     805dbc5 <vsnprintf+0x72>
                        if (str <= end)
 805dbaa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805dbad:	3b 45 e0             	cmp    -0x20(%ebp),%eax
 805dbb0:	77 0b                	ja     805dbbd <vsnprintf+0x6a>
                                *str = *fmt;
 805dbb2:	8b 45 10             	mov    0x10(%ebp),%eax
 805dbb5:	0f b6 10             	movzbl (%eax),%edx
 805dbb8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805dbbb:	88 10                	mov    %dl,(%eax)
                        ++str;
 805dbbd:	ff 45 e4             	incl   -0x1c(%ebp)
                        continue;
 805dbc0:	e9 30 05 00 00       	jmp    805e0f5 <.L138+0x10f>
                }

                /* process flags */
                flags = 0;
 805dbc5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
repeat:
                ++fmt;          /* this also skips first '%' */
 805dbcc:	8b 45 10             	mov    0x10(%ebp),%eax
 805dbcf:	40                   	inc    %eax
 805dbd0:	89 45 10             	mov    %eax,0x10(%ebp)
                switch (*fmt) {
 805dbd3:	8b 45 10             	mov    0x10(%ebp),%eax
 805dbd6:	0f b6 00             	movzbl (%eax),%eax
 805dbd9:	0f be c0             	movsbl %al,%eax
 805dbdc:	83 e8 20             	sub    $0x20,%eax
 805dbdf:	83 f8 10             	cmp    $0x10,%eax
 805dbe2:	77 2c                	ja     805dc10 <.L70>
 805dbe4:	c1 e0 02             	shl    $0x2,%eax
 805dbe7:	8b 84 18 28 da ff ff 	mov    -0x25d8(%eax,%ebx,1),%eax
 805dbee:	01 d8                	add    %ebx,%eax
 805dbf0:	ff e0                	jmp    *%eax

0805dbf2 <.L75>:
                        case '-': flags |= LEFT; goto repeat;
 805dbf2:	83 4d d8 10          	orl    $0x10,-0x28(%ebp)
 805dbf6:	eb d4                	jmp    805dbcc <vsnprintf+0x79>

0805dbf8 <.L74>:
                        case '+': flags |= PLUS; goto repeat;
 805dbf8:	83 4d d8 04          	orl    $0x4,-0x28(%ebp)
 805dbfc:	eb ce                	jmp    805dbcc <vsnprintf+0x79>

0805dbfe <.L71>:
                        case ' ': flags |= SPACE; goto repeat;
 805dbfe:	83 4d d8 08          	orl    $0x8,-0x28(%ebp)
 805dc02:	eb c8                	jmp    805dbcc <vsnprintf+0x79>

0805dc04 <.L73>:
                        case '#': flags |= SPECIAL; goto repeat;
 805dc04:	83 4d d8 20          	orl    $0x20,-0x28(%ebp)
 805dc08:	eb c2                	jmp    805dbcc <vsnprintf+0x79>

0805dc0a <.L76>:
                        case '0': flags |= ZEROPAD; goto repeat;
 805dc0a:	83 4d d8 01          	orl    $0x1,-0x28(%ebp)
 805dc0e:	eb bc                	jmp    805dbcc <vsnprintf+0x79>

0805dc10 <.L70>:
                }

                /* get field width */
                field_width = -1;
 805dc10:	c7 45 d4 ff ff ff ff 	movl   $0xffffffff,-0x2c(%ebp)
                if (isdigit(*fmt))
 805dc17:	8b 45 10             	mov    0x10(%ebp),%eax
 805dc1a:	0f b6 00             	movzbl (%eax),%eax
 805dc1d:	0f b6 c0             	movzbl %al,%eax
 805dc20:	0f b6 84 03 60 00 00 	movzbl 0x60(%ebx,%eax,1),%eax
 805dc27:	00 
 805dc28:	0f b6 c0             	movzbl %al,%eax
 805dc2b:	83 e0 04             	and    $0x4,%eax
 805dc2e:	85 c0                	test   %eax,%eax
 805dc30:	74 10                	je     805dc42 <.L70+0x32>
                        field_width = skip_atoi(&fmt);
 805dc32:	8d 45 10             	lea    0x10(%ebp),%eax
 805dc35:	89 04 24             	mov    %eax,(%esp)
 805dc38:	e8 f6 fa ff ff       	call   805d733 <skip_atoi>
 805dc3d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 805dc40:	eb 2c                	jmp    805dc6e <.L70+0x5e>
                else if (*fmt == '*') {
 805dc42:	8b 45 10             	mov    0x10(%ebp),%eax
 805dc45:	0f b6 00             	movzbl (%eax),%eax
 805dc48:	3c 2a                	cmp    $0x2a,%al
 805dc4a:	75 22                	jne    805dc6e <.L70+0x5e>
                        ++fmt;
 805dc4c:	8b 45 10             	mov    0x10(%ebp),%eax
 805dc4f:	40                   	inc    %eax
 805dc50:	89 45 10             	mov    %eax,0x10(%ebp)
                        /* it's the next argument */
                        field_width = va_arg(args, int);
 805dc53:	8b 45 14             	mov    0x14(%ebp),%eax
 805dc56:	8d 50 04             	lea    0x4(%eax),%edx
 805dc59:	89 55 14             	mov    %edx,0x14(%ebp)
 805dc5c:	8b 00                	mov    (%eax),%eax
 805dc5e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
                        if (field_width < 0) {
 805dc61:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
 805dc65:	79 07                	jns    805dc6e <.L70+0x5e>
                                field_width = -field_width;
 805dc67:	f7 5d d4             	negl   -0x2c(%ebp)
                                flags |= LEFT;
 805dc6a:	83 4d d8 10          	orl    $0x10,-0x28(%ebp)
                        }
                }

                /* get the precision */
                precision = -1;
 805dc6e:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,-0x30(%ebp)
                if (*fmt == '.') {
 805dc75:	8b 45 10             	mov    0x10(%ebp),%eax
 805dc78:	0f b6 00             	movzbl (%eax),%eax
 805dc7b:	3c 2e                	cmp    $0x2e,%al
 805dc7d:	75 5e                	jne    805dcdd <.L70+0xcd>
                        ++fmt;
 805dc7f:	8b 45 10             	mov    0x10(%ebp),%eax
 805dc82:	40                   	inc    %eax
 805dc83:	89 45 10             	mov    %eax,0x10(%ebp)
                        if (isdigit(*fmt))
 805dc86:	8b 45 10             	mov    0x10(%ebp),%eax
 805dc89:	0f b6 00             	movzbl (%eax),%eax
 805dc8c:	0f b6 c0             	movzbl %al,%eax
 805dc8f:	0f b6 84 03 60 00 00 	movzbl 0x60(%ebx,%eax,1),%eax
 805dc96:	00 
 805dc97:	0f b6 c0             	movzbl %al,%eax
 805dc9a:	83 e0 04             	and    $0x4,%eax
 805dc9d:	85 c0                	test   %eax,%eax
 805dc9f:	74 10                	je     805dcb1 <.L70+0xa1>
                                precision = skip_atoi(&fmt);
 805dca1:	8d 45 10             	lea    0x10(%ebp),%eax
 805dca4:	89 04 24             	mov    %eax,(%esp)
 805dca7:	e8 87 fa ff ff       	call   805d733 <skip_atoi>
 805dcac:	89 45 d0             	mov    %eax,-0x30(%ebp)
 805dcaf:	eb 1f                	jmp    805dcd0 <.L70+0xc0>
                        else if (*fmt == '*') {
 805dcb1:	8b 45 10             	mov    0x10(%ebp),%eax
 805dcb4:	0f b6 00             	movzbl (%eax),%eax
 805dcb7:	3c 2a                	cmp    $0x2a,%al
 805dcb9:	75 15                	jne    805dcd0 <.L70+0xc0>
                                ++fmt;
 805dcbb:	8b 45 10             	mov    0x10(%ebp),%eax
 805dcbe:	40                   	inc    %eax
 805dcbf:	89 45 10             	mov    %eax,0x10(%ebp)
                                /* it's the next argument */
                                precision = va_arg(args, int);
 805dcc2:	8b 45 14             	mov    0x14(%ebp),%eax
 805dcc5:	8d 50 04             	lea    0x4(%eax),%edx
 805dcc8:	89 55 14             	mov    %edx,0x14(%ebp)
 805dccb:	8b 00                	mov    (%eax),%eax
 805dccd:	89 45 d0             	mov    %eax,-0x30(%ebp)
                        }
                        if (precision < 0)
 805dcd0:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
 805dcd4:	79 07                	jns    805dcdd <.L70+0xcd>
                                precision = 0;
 805dcd6:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
                }

                /* get the conversion qualifier */
                qualifier = -1;
 805dcdd:	c7 45 cc ff ff ff ff 	movl   $0xffffffff,-0x34(%ebp)
                if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' || *fmt == 'Z') {
 805dce4:	8b 45 10             	mov    0x10(%ebp),%eax
 805dce7:	0f b6 00             	movzbl (%eax),%eax
 805dcea:	3c 68                	cmp    $0x68,%al
 805dcec:	74 1e                	je     805dd0c <.L70+0xfc>
 805dcee:	8b 45 10             	mov    0x10(%ebp),%eax
 805dcf1:	0f b6 00             	movzbl (%eax),%eax
 805dcf4:	3c 6c                	cmp    $0x6c,%al
 805dcf6:	74 14                	je     805dd0c <.L70+0xfc>
 805dcf8:	8b 45 10             	mov    0x10(%ebp),%eax
 805dcfb:	0f b6 00             	movzbl (%eax),%eax
 805dcfe:	3c 4c                	cmp    $0x4c,%al
 805dd00:	74 0a                	je     805dd0c <.L70+0xfc>
 805dd02:	8b 45 10             	mov    0x10(%ebp),%eax
 805dd05:	0f b6 00             	movzbl (%eax),%eax
 805dd08:	3c 5a                	cmp    $0x5a,%al
 805dd0a:	75 31                	jne    805dd3d <.L70+0x12d>
                        qualifier = *fmt;
 805dd0c:	8b 45 10             	mov    0x10(%ebp),%eax
 805dd0f:	0f b6 00             	movzbl (%eax),%eax
 805dd12:	0f be c0             	movsbl %al,%eax
 805dd15:	89 45 cc             	mov    %eax,-0x34(%ebp)
                        ++fmt;
 805dd18:	8b 45 10             	mov    0x10(%ebp),%eax
 805dd1b:	40                   	inc    %eax
 805dd1c:	89 45 10             	mov    %eax,0x10(%ebp)
                        if (qualifier == 'l' && *fmt == 'l') {
 805dd1f:	83 7d cc 6c          	cmpl   $0x6c,-0x34(%ebp)
 805dd23:	75 18                	jne    805dd3d <.L70+0x12d>
 805dd25:	8b 45 10             	mov    0x10(%ebp),%eax
 805dd28:	0f b6 00             	movzbl (%eax),%eax
 805dd2b:	3c 6c                	cmp    $0x6c,%al
 805dd2d:	75 0e                	jne    805dd3d <.L70+0x12d>
                                qualifier = 'L';
 805dd2f:	c7 45 cc 4c 00 00 00 	movl   $0x4c,-0x34(%ebp)
                                ++fmt;
 805dd36:	8b 45 10             	mov    0x10(%ebp),%eax
 805dd39:	40                   	inc    %eax
 805dd3a:	89 45 10             	mov    %eax,0x10(%ebp)
                        }
                }
                if (*fmt == 'q') {
 805dd3d:	8b 45 10             	mov    0x10(%ebp),%eax
 805dd40:	0f b6 00             	movzbl (%eax),%eax
 805dd43:	3c 71                	cmp    $0x71,%al
 805dd45:	75 0e                	jne    805dd55 <.L70+0x145>
                        qualifier = 'L';
 805dd47:	c7 45 cc 4c 00 00 00 	movl   $0x4c,-0x34(%ebp)
                        ++fmt;
 805dd4e:	8b 45 10             	mov    0x10(%ebp),%eax
 805dd51:	40                   	inc    %eax
 805dd52:	89 45 10             	mov    %eax,0x10(%ebp)
                }

                /* default base */
                base = 10;
 805dd55:	c7 45 e8 0a 00 00 00 	movl   $0xa,-0x18(%ebp)

                switch (*fmt) {
 805dd5c:	8b 45 10             	mov    0x10(%ebp),%eax
 805dd5f:	0f b6 00             	movzbl (%eax),%eax
 805dd62:	0f be c0             	movsbl %al,%eax
 805dd65:	83 e8 25             	sub    $0x25,%eax
 805dd68:	83 f8 53             	cmp    $0x53,%eax
 805dd6b:	0f 87 33 02 00 00    	ja     805dfa4 <.L85>
 805dd71:	c1 e0 02             	shl    $0x2,%eax
 805dd74:	8b 84 18 6c da ff ff 	mov    -0x2594(%eax,%ebx,1),%eax
 805dd7b:	01 d8                	add    %ebx,%eax
 805dd7d:	ff e0                	jmp    *%eax

0805dd7f <.L90>:
                        case 'c':
                                if (!(flags & LEFT)) {
 805dd7f:	8b 45 d8             	mov    -0x28(%ebp),%eax
 805dd82:	83 e0 10             	and    $0x10,%eax
 805dd85:	85 c0                	test   %eax,%eax
 805dd87:	75 1c                	jne    805dda5 <.L90+0x26>
                                        while (--field_width > 0) {
 805dd89:	eb 11                	jmp    805dd9c <.L90+0x1d>
                                                if (str <= end)
 805dd8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805dd8e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
 805dd91:	77 06                	ja     805dd99 <.L90+0x1a>
                                                        *str = ' ';
 805dd93:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805dd96:	c6 00 20             	movb   $0x20,(%eax)
                                                ++str;
 805dd99:	ff 45 e4             	incl   -0x1c(%ebp)
                base = 10;

                switch (*fmt) {
                        case 'c':
                                if (!(flags & LEFT)) {
                                        while (--field_width > 0) {
 805dd9c:	ff 4d d4             	decl   -0x2c(%ebp)
 805dd9f:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
 805dda3:	7f e6                	jg     805dd8b <.L90+0xc>
                                                if (str <= end)
                                                        *str = ' ';
                                                ++str;
                                        }
                                }
                                c = (unsigned char) va_arg(args, int);
 805dda5:	8b 45 14             	mov    0x14(%ebp),%eax
 805dda8:	8d 50 04             	lea    0x4(%eax),%edx
 805ddab:	89 55 14             	mov    %edx,0x14(%ebp)
 805ddae:	8b 00                	mov    (%eax),%eax
 805ddb0:	88 45 cb             	mov    %al,-0x35(%ebp)
                                if (str <= end)
 805ddb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805ddb6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
 805ddb9:	77 09                	ja     805ddc4 <.L90+0x45>
                                        *str = c;
 805ddbb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805ddbe:	0f b6 55 cb          	movzbl -0x35(%ebp),%edx
 805ddc2:	88 10                	mov    %dl,(%eax)
                                ++str;
 805ddc4:	ff 45 e4             	incl   -0x1c(%ebp)
                                while (--field_width > 0) {
 805ddc7:	eb 11                	jmp    805ddda <.L90+0x5b>
                                        if (str <= end)
 805ddc9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805ddcc:	3b 45 e0             	cmp    -0x20(%ebp),%eax
 805ddcf:	77 06                	ja     805ddd7 <.L90+0x58>
                                                *str = ' ';
 805ddd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805ddd4:	c6 00 20             	movb   $0x20,(%eax)
                                        ++str;
 805ddd7:	ff 45 e4             	incl   -0x1c(%ebp)
                                }
                                c = (unsigned char) va_arg(args, int);
                                if (str <= end)
                                        *str = c;
                                ++str;
                                while (--field_width > 0) {
 805ddda:	ff 4d d4             	decl   -0x2c(%ebp)
 805dddd:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
 805dde1:	7f e6                	jg     805ddc9 <.L90+0x4a>
                                        if (str <= end)
                                                *str = ' ';
                                        ++str;
                                }
                                continue;
 805dde3:	e9 0d 03 00 00       	jmp    805e0f5 <.L138+0x10f>

0805dde8 <.L95>:

                        case 's':
                                s = va_arg(args, char *);
 805dde8:	8b 45 14             	mov    0x14(%ebp),%eax
 805ddeb:	8d 50 04             	lea    0x4(%eax),%edx
 805ddee:	89 55 14             	mov    %edx,0x14(%ebp)
 805ddf1:	8b 00                	mov    (%eax),%eax
 805ddf3:	89 45 dc             	mov    %eax,-0x24(%ebp)
                                if (!s)
 805ddf6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
 805ddfa:	75 09                	jne    805de05 <.L95+0x1d>
                                        s = "<NULL>";
 805ddfc:	8d 83 21 da ff ff    	lea    -0x25df(%ebx),%eax
 805de02:	89 45 dc             	mov    %eax,-0x24(%ebp)

                                len = strnlen(s, precision);
 805de05:	8b 45 d0             	mov    -0x30(%ebp),%eax
 805de08:	89 44 24 04          	mov    %eax,0x4(%esp)
 805de0c:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805de0f:	89 04 24             	mov    %eax,(%esp)
 805de12:	e8 cc c5 ff ff       	call   805a3e3 <strnlen>
 805de17:	89 45 c4             	mov    %eax,-0x3c(%ebp)

                                if (!(flags & LEFT)) {
 805de1a:	8b 45 d8             	mov    -0x28(%ebp),%eax
 805de1d:	83 e0 10             	and    $0x10,%eax
 805de20:	85 c0                	test   %eax,%eax
 805de22:	75 21                	jne    805de45 <.L95+0x5d>
                                        while (len < field_width--) {
 805de24:	eb 11                	jmp    805de37 <.L95+0x4f>
                                                if (str <= end)
 805de26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805de29:	3b 45 e0             	cmp    -0x20(%ebp),%eax
 805de2c:	77 06                	ja     805de34 <.L95+0x4c>
                                                        *str = ' ';
 805de2e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805de31:	c6 00 20             	movb   $0x20,(%eax)
                                                ++str;
 805de34:	ff 45 e4             	incl   -0x1c(%ebp)
                                        s = "<NULL>";

                                len = strnlen(s, precision);

                                if (!(flags & LEFT)) {
                                        while (len < field_width--) {
 805de37:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805de3a:	8d 50 ff             	lea    -0x1(%eax),%edx
 805de3d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 805de40:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
 805de43:	7f e1                	jg     805de26 <.L95+0x3e>
                                                if (str <= end)
                                                        *str = ' ';
                                                ++str;
                                        }
                                }
                                for (i = 0; i < len; ++i) {
 805de45:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
 805de4c:	eb 1c                	jmp    805de6a <.L95+0x82>
                                        if (str <= end)
 805de4e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805de51:	3b 45 e0             	cmp    -0x20(%ebp),%eax
 805de54:	77 0b                	ja     805de61 <.L95+0x79>
                                                *str = *s;
 805de56:	8b 45 dc             	mov    -0x24(%ebp),%eax
 805de59:	0f b6 10             	movzbl (%eax),%edx
 805de5c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805de5f:	88 10                	mov    %dl,(%eax)
                                        ++str; ++s;
 805de61:	ff 45 e4             	incl   -0x1c(%ebp)
 805de64:	ff 45 dc             	incl   -0x24(%ebp)
                                                if (str <= end)
                                                        *str = ' ';
                                                ++str;
                                        }
                                }
                                for (i = 0; i < len; ++i) {
 805de67:	ff 45 ec             	incl   -0x14(%ebp)
 805de6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
 805de6d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
 805de70:	7c dc                	jl     805de4e <.L95+0x66>
                                        if (str <= end)
                                                *str = *s;
                                        ++str; ++s;
                                }
                                while (len < field_width--) {
 805de72:	eb 11                	jmp    805de85 <.L95+0x9d>
                                        if (str <= end)
 805de74:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805de77:	3b 45 e0             	cmp    -0x20(%ebp),%eax
 805de7a:	77 06                	ja     805de82 <.L95+0x9a>
                                                *str = ' ';
 805de7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805de7f:	c6 00 20             	movb   $0x20,(%eax)
                                        ++str;
 805de82:	ff 45 e4             	incl   -0x1c(%ebp)
                                for (i = 0; i < len; ++i) {
                                        if (str <= end)
                                                *str = *s;
                                        ++str; ++s;
                                }
                                while (len < field_width--) {
 805de85:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 805de88:	8d 50 ff             	lea    -0x1(%eax),%edx
 805de8b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 805de8e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
 805de91:	7f e1                	jg     805de74 <.L95+0x8c>
                                        if (str <= end)
                                                *str = ' ';
                                        ++str;
                                }
                                continue;
 805de93:	e9 5d 02 00 00       	jmp    805e0f5 <.L138+0x10f>

0805de98 <.L94>:

                        case 'p':
                                if (field_width == -1) {
 805de98:	83 7d d4 ff          	cmpl   $0xffffffff,-0x2c(%ebp)
 805de9c:	75 0b                	jne    805dea9 <.L94+0x11>
                                        field_width = 2 * sizeof(void *);
 805de9e:	c7 45 d4 08 00 00 00 	movl   $0x8,-0x2c(%ebp)
                                        flags |= ZEROPAD;
 805dea5:	83 4d d8 01          	orl    $0x1,-0x28(%ebp)
                                }
                                str = number(str, end,
                                             (unsigned long) va_arg(args, void *),
 805dea9:	8b 45 14             	mov    0x14(%ebp),%eax
 805deac:	8d 50 04             	lea    0x4(%eax),%edx
 805deaf:	89 55 14             	mov    %edx,0x14(%ebp)
 805deb2:	8b 00                	mov    (%eax),%eax
                        case 'p':
                                if (field_width == -1) {
                                        field_width = 2 * sizeof(void *);
                                        flags |= ZEROPAD;
                                }
                                str = number(str, end,
 805deb4:	ba 00 00 00 00       	mov    $0x0,%edx
 805deb9:	8b 4d d8             	mov    -0x28(%ebp),%ecx
 805debc:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
 805dec0:	8b 4d d0             	mov    -0x30(%ebp),%ecx
 805dec3:	89 4c 24 18          	mov    %ecx,0x18(%esp)
 805dec7:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
 805deca:	89 4c 24 14          	mov    %ecx,0x14(%esp)
 805dece:	c7 44 24 10 10 00 00 	movl   $0x10,0x10(%esp)
 805ded5:	00 
 805ded6:	89 44 24 08          	mov    %eax,0x8(%esp)
 805deda:	89 54 24 0c          	mov    %edx,0xc(%esp)
 805dede:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805dee1:	89 44 24 04          	mov    %eax,0x4(%esp)
 805dee5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805dee8:	89 04 24             	mov    %eax,(%esp)
 805deeb:	e8 af f8 ff ff       	call   805d79f <number>
 805def0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                                             (unsigned long) va_arg(args, void *),
                                             16, field_width, precision, flags);
                                continue;
 805def3:	e9 fd 01 00 00       	jmp    805e0f5 <.L138+0x10f>

0805def8 <.L92>:


                        case 'n':
                                /* FIXME:
                                 * What does C99 say about the overflow case here? */
                                if (qualifier == 'l') {
 805def8:	83 7d cc 6c          	cmpl   $0x6c,-0x34(%ebp)
 805defc:	75 20                	jne    805df1e <.L92+0x26>
                                        long *ip = va_arg(args, long *);
 805defe:	8b 45 14             	mov    0x14(%ebp),%eax
 805df01:	8d 50 04             	lea    0x4(%eax),%edx
 805df04:	89 55 14             	mov    %edx,0x14(%ebp)
 805df07:	8b 00                	mov    (%eax),%eax
 805df09:	89 45 c0             	mov    %eax,-0x40(%ebp)
                                        *ip = (str - buf);
 805df0c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 805df0f:	8b 45 08             	mov    0x8(%ebp),%eax
 805df12:	29 c2                	sub    %eax,%edx
 805df14:	8b 45 c0             	mov    -0x40(%ebp),%eax
 805df17:	89 10                	mov    %edx,(%eax)
                                        *ip = (str - buf);
                                } else {
                                        int *ip = va_arg(args, int *);
                                        *ip = (str - buf);
                                }
                                continue;
 805df19:	e9 d7 01 00 00       	jmp    805e0f5 <.L138+0x10f>
                                /* FIXME:
                                 * What does C99 say about the overflow case here? */
                                if (qualifier == 'l') {
                                        long *ip = va_arg(args, long *);
                                        *ip = (str - buf);
                                } else if (qualifier == 'Z') {
 805df1e:	83 7d cc 5a          	cmpl   $0x5a,-0x34(%ebp)
 805df22:	75 24                	jne    805df48 <.L92+0x50>
                                        size_t *ip = va_arg(args, size_t *);
 805df24:	8b 45 14             	mov    0x14(%ebp),%eax
 805df27:	8d 50 04             	lea    0x4(%eax),%edx
 805df2a:	89 55 14             	mov    %edx,0x14(%ebp)
 805df2d:	8b 00                	mov    (%eax),%eax
 805df2f:	89 45 bc             	mov    %eax,-0x44(%ebp)
                                        *ip = (str - buf);
 805df32:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 805df35:	8b 45 08             	mov    0x8(%ebp),%eax
 805df38:	29 c2                	sub    %eax,%edx
 805df3a:	89 d0                	mov    %edx,%eax
 805df3c:	89 c2                	mov    %eax,%edx
 805df3e:	8b 45 bc             	mov    -0x44(%ebp),%eax
 805df41:	89 10                	mov    %edx,(%eax)
                                } else {
                                        int *ip = va_arg(args, int *);
                                        *ip = (str - buf);
                                }
                                continue;
 805df43:	e9 ad 01 00 00       	jmp    805e0f5 <.L138+0x10f>
                                        *ip = (str - buf);
                                } else if (qualifier == 'Z') {
                                        size_t *ip = va_arg(args, size_t *);
                                        *ip = (str - buf);
                                } else {
                                        int *ip = va_arg(args, int *);
 805df48:	8b 45 14             	mov    0x14(%ebp),%eax
 805df4b:	8d 50 04             	lea    0x4(%eax),%edx
 805df4e:	89 55 14             	mov    %edx,0x14(%ebp)
 805df51:	8b 00                	mov    (%eax),%eax
 805df53:	89 45 b8             	mov    %eax,-0x48(%ebp)
                                        *ip = (str - buf);
 805df56:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 805df59:	8b 45 08             	mov    0x8(%ebp),%eax
 805df5c:	29 c2                	sub    %eax,%edx
 805df5e:	8b 45 b8             	mov    -0x48(%ebp),%eax
 805df61:	89 10                	mov    %edx,(%eax)
                                }
                                continue;
 805df63:	e9 8d 01 00 00       	jmp    805e0f5 <.L138+0x10f>

0805df68 <.L86>:

                        case '%':
                                if (str <= end)
 805df68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805df6b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
 805df6e:	77 06                	ja     805df76 <.L86+0xe>
                                        *str = '%';
 805df70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805df73:	c6 00 25             	movb   $0x25,(%eax)
                                ++str;
 805df76:	ff 45 e4             	incl   -0x1c(%ebp)
                                continue;
 805df79:	e9 77 01 00 00       	jmp    805e0f5 <.L138+0x10f>

0805df7e <.L93>:

                                /* integer number formats - set up the flags and "break" */
                        case 'o':
                                base = 8;
 805df7e:	c7 45 e8 08 00 00 00 	movl   $0x8,-0x18(%ebp)
                                break;
 805df85:	eb 60                	jmp    805dfe7 <.L138+0x1>

0805df87 <.L89>:

                        case 'X':
                                flags |= LARGE;
 805df87:	83 4d d8 40          	orl    $0x40,-0x28(%ebp)

0805df8b <.L97>:
                        case 'x':
                                base = 16;
 805df8b:	c7 45 e8 10 00 00 00 	movl   $0x10,-0x18(%ebp)
                                break;
 805df92:	eb 53                	jmp    805dfe7 <.L138+0x1>

0805df94 <.L91>:

                        case 'd':
                        case 'i':
                                flags |= SIGN;
 805df94:	83 4d d8 02          	orl    $0x2,-0x28(%ebp)
                        case 'u':
                                break;
 805df98:	eb 4c                	jmp    805dfe6 <.L138>

0805df9a <.L88>:
                                /* Added - TODO - alvin */
                        case 'f':
                        case 'F':
                        case 'g':
                        case 'G':
                                return -1;
 805df9a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 805df9f:	e9 8c 01 00 00       	jmp    805e130 <.L138+0x14a>

0805dfa4 <.L85>:


                        default:
                                if (str <= end)
 805dfa4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805dfa7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
 805dfaa:	77 06                	ja     805dfb2 <.L85+0xe>
                                        *str = '%';
 805dfac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805dfaf:	c6 00 25             	movb   $0x25,(%eax)
                                ++str;
 805dfb2:	ff 45 e4             	incl   -0x1c(%ebp)
                                if (*fmt) {
 805dfb5:	8b 45 10             	mov    0x10(%ebp),%eax
 805dfb8:	0f b6 00             	movzbl (%eax),%eax
 805dfbb:	84 c0                	test   %al,%al
 805dfbd:	74 1b                	je     805dfda <.L85+0x36>
                                        if (str <= end)
 805dfbf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805dfc2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
 805dfc5:	77 0b                	ja     805dfd2 <.L85+0x2e>
                                                *str = *fmt;
 805dfc7:	8b 45 10             	mov    0x10(%ebp),%eax
 805dfca:	0f b6 10             	movzbl (%eax),%edx
 805dfcd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805dfd0:	88 10                	mov    %dl,(%eax)
                                        ++str;
 805dfd2:	ff 45 e4             	incl   -0x1c(%ebp)
                                } else {
                                        --fmt;
                                }
                                continue;
 805dfd5:	e9 1b 01 00 00       	jmp    805e0f5 <.L138+0x10f>
                                if (*fmt) {
                                        if (str <= end)
                                                *str = *fmt;
                                        ++str;
                                } else {
                                        --fmt;
 805dfda:	8b 45 10             	mov    0x10(%ebp),%eax
 805dfdd:	48                   	dec    %eax
 805dfde:	89 45 10             	mov    %eax,0x10(%ebp)
                                }
                                continue;
 805dfe1:	e9 0f 01 00 00       	jmp    805e0f5 <.L138+0x10f>

0805dfe6 <.L138>:

                        case 'd':
                        case 'i':
                                flags |= SIGN;
                        case 'u':
                                break;
 805dfe6:	90                   	nop
                                } else {
                                        --fmt;
                                }
                                continue;
                }
                if (qualifier == 'L')
 805dfe7:	83 7d cc 4c          	cmpl   $0x4c,-0x34(%ebp)
 805dfeb:	75 19                	jne    805e006 <.L138+0x20>
                        num = va_arg(args, long long);
 805dfed:	8b 45 14             	mov    0x14(%ebp),%eax
 805dff0:	8d 50 08             	lea    0x8(%eax),%edx
 805dff3:	89 55 14             	mov    %edx,0x14(%ebp)
 805dff6:	8b 50 04             	mov    0x4(%eax),%edx
 805dff9:	8b 00                	mov    (%eax),%eax
 805dffb:	89 45 f0             	mov    %eax,-0x10(%ebp)
 805dffe:	89 55 f4             	mov    %edx,-0xc(%ebp)
 805e001:	e9 b0 00 00 00       	jmp    805e0b6 <.L138+0xd0>
                else if (qualifier == 'l') {
 805e006:	83 7d cc 6c          	cmpl   $0x6c,-0x34(%ebp)
 805e00a:	75 2f                	jne    805e03b <.L138+0x55>
                        num = va_arg(args, unsigned long);
 805e00c:	8b 45 14             	mov    0x14(%ebp),%eax
 805e00f:	8d 50 04             	lea    0x4(%eax),%edx
 805e012:	89 55 14             	mov    %edx,0x14(%ebp)
 805e015:	8b 00                	mov    (%eax),%eax
 805e017:	89 45 f0             	mov    %eax,-0x10(%ebp)
 805e01a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
                        if (flags & SIGN)
 805e021:	8b 45 d8             	mov    -0x28(%ebp),%eax
 805e024:	83 e0 02             	and    $0x2,%eax
 805e027:	85 c0                	test   %eax,%eax
 805e029:	0f 84 87 00 00 00    	je     805e0b6 <.L138+0xd0>
                                num = (signed long) num;
 805e02f:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805e032:	99                   	cltd   
 805e033:	89 45 f0             	mov    %eax,-0x10(%ebp)
 805e036:	89 55 f4             	mov    %edx,-0xc(%ebp)
 805e039:	eb 7b                	jmp    805e0b6 <.L138+0xd0>
                } else if (qualifier == 'Z') {
 805e03b:	83 7d cc 5a          	cmpl   $0x5a,-0x34(%ebp)
 805e03f:	75 17                	jne    805e058 <.L138+0x72>
                        num = va_arg(args, size_t);
 805e041:	8b 45 14             	mov    0x14(%ebp),%eax
 805e044:	8d 50 04             	lea    0x4(%eax),%edx
 805e047:	89 55 14             	mov    %edx,0x14(%ebp)
 805e04a:	8b 00                	mov    (%eax),%eax
 805e04c:	89 45 f0             	mov    %eax,-0x10(%ebp)
 805e04f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 805e056:	eb 5e                	jmp    805e0b6 <.L138+0xd0>
                } else if (qualifier == 'h') {
 805e058:	83 7d cc 68          	cmpl   $0x68,-0x34(%ebp)
 805e05c:	75 2f                	jne    805e08d <.L138+0xa7>
                        num = (unsigned short) va_arg(args, int);
 805e05e:	8b 45 14             	mov    0x14(%ebp),%eax
 805e061:	8d 50 04             	lea    0x4(%eax),%edx
 805e064:	89 55 14             	mov    %edx,0x14(%ebp)
 805e067:	8b 00                	mov    (%eax),%eax
 805e069:	0f b7 c0             	movzwl %ax,%eax
 805e06c:	89 45 f0             	mov    %eax,-0x10(%ebp)
 805e06f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
                        if (flags & SIGN)
 805e076:	8b 45 d8             	mov    -0x28(%ebp),%eax
 805e079:	83 e0 02             	and    $0x2,%eax
 805e07c:	85 c0                	test   %eax,%eax
 805e07e:	74 36                	je     805e0b6 <.L138+0xd0>
                                num = (signed short) num;
 805e080:	0f bf 45 f0          	movswl -0x10(%ebp),%eax
 805e084:	99                   	cltd   
 805e085:	89 45 f0             	mov    %eax,-0x10(%ebp)
 805e088:	89 55 f4             	mov    %edx,-0xc(%ebp)
 805e08b:	eb 29                	jmp    805e0b6 <.L138+0xd0>
                } else {
                        num = va_arg(args, unsigned int);
 805e08d:	8b 45 14             	mov    0x14(%ebp),%eax
 805e090:	8d 50 04             	lea    0x4(%eax),%edx
 805e093:	89 55 14             	mov    %edx,0x14(%ebp)
 805e096:	8b 00                	mov    (%eax),%eax
 805e098:	89 45 f0             	mov    %eax,-0x10(%ebp)
 805e09b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
                        if (flags & SIGN)
 805e0a2:	8b 45 d8             	mov    -0x28(%ebp),%eax
 805e0a5:	83 e0 02             	and    $0x2,%eax
 805e0a8:	85 c0                	test   %eax,%eax
 805e0aa:	74 0a                	je     805e0b6 <.L138+0xd0>
                                num = (signed int) num;
 805e0ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805e0af:	99                   	cltd   
 805e0b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
 805e0b3:	89 55 f4             	mov    %edx,-0xc(%ebp)
                }

                str = number(str, end, num, base,
 805e0b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
 805e0b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
 805e0bc:	8b 4d d8             	mov    -0x28(%ebp),%ecx
 805e0bf:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
 805e0c3:	8b 4d d0             	mov    -0x30(%ebp),%ecx
 805e0c6:	89 4c 24 18          	mov    %ecx,0x18(%esp)
 805e0ca:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
 805e0cd:	89 4c 24 14          	mov    %ecx,0x14(%esp)
 805e0d1:	8b 4d e8             	mov    -0x18(%ebp),%ecx
 805e0d4:	89 4c 24 10          	mov    %ecx,0x10(%esp)
 805e0d8:	89 44 24 08          	mov    %eax,0x8(%esp)
 805e0dc:	89 54 24 0c          	mov    %edx,0xc(%esp)
 805e0e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805e0e3:	89 44 24 04          	mov    %eax,0x4(%esp)
 805e0e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805e0ea:	89 04 24             	mov    %eax,(%esp)
 805e0ed:	e8 ad f6 ff ff       	call   805d79f <number>
 805e0f2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (end < buf - 1) {
                end = ((void *) - 1);
                size = end - buf + 1;
        }

        for (; *fmt ; ++fmt) {
 805e0f5:	8b 45 10             	mov    0x10(%ebp),%eax
 805e0f8:	40                   	inc    %eax
 805e0f9:	89 45 10             	mov    %eax,0x10(%ebp)
 805e0fc:	8b 45 10             	mov    0x10(%ebp),%eax
 805e0ff:	0f b6 00             	movzbl (%eax),%eax
 805e102:	84 c0                	test   %al,%al
 805e104:	0f 85 96 fa ff ff    	jne    805dba0 <vsnprintf+0x4d>
                }

                str = number(str, end, num, base,
                             field_width, precision, flags);
        }
        if (str <= end)
 805e10a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805e10d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
 805e110:	77 08                	ja     805e11a <.L138+0x134>
                *str = '\0';
 805e112:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805e115:	c6 00 00             	movb   $0x0,(%eax)
 805e118:	eb 0c                	jmp    805e126 <.L138+0x140>
        else if (size > 0)
 805e11a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
 805e11e:	74 06                	je     805e126 <.L138+0x140>
                /* don't write out a null byte if the buf size is zero */
                *end = '\0';
 805e120:	8b 45 e0             	mov    -0x20(%ebp),%eax
 805e123:	c6 00 00             	movb   $0x0,(%eax)
        /* the trailing null byte doesn't count towards the total
         * ++str;
         */
        return str - buf;
 805e126:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 805e129:	8b 45 08             	mov    0x8(%ebp),%eax
 805e12c:	29 c2                	sub    %eax,%edx
 805e12e:	89 d0                	mov    %edx,%eax
}
 805e130:	83 c4 64             	add    $0x64,%esp
 805e133:	5b                   	pop    %ebx
 805e134:	5d                   	pop    %ebp
 805e135:	c3                   	ret    

0805e136 <__x86.get_pc_thunk.dx>:
 805e136:	8b 14 24             	mov    (%esp),%edx
 805e139:	c3                   	ret    

0805e13a <__x86.get_pc_thunk.si>:
 805e13a:	8b 34 24             	mov    (%esp),%esi
 805e13d:	c3                   	ret    

0805e13e <test_init>:
static test_pass_func_t _pass_func = _default_test_pass;
static test_fail_func_t _fail_func = _default_test_fail;

void
test_init(void)
{
 805e13e:	55                   	push   %ebp
 805e13f:	89 e5                	mov    %esp,%ebp
 805e141:	53                   	push   %ebx
 805e142:	83 ec 34             	sub    $0x34,%esp
 805e145:	e8 af c0 ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805e14a:	81 c3 16 87 00 00    	add    $0x8716,%ebx
        int zfd = -1;
 805e150:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)

        if (0 > (zfd = open("/dev/zero", O_RDWR, 0))) {
 805e157:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 805e15e:	00 
 805e15f:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 805e166:	00 
 805e167:	8d 83 bc db ff ff    	lea    -0x2444(%ebx),%eax
 805e16d:	89 04 24             	mov    %eax,(%esp)
 805e170:	e8 f7 b7 ff ff       	call   805996c <open>
 805e175:	89 45 f4             	mov    %eax,-0xc(%ebp)
 805e178:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 805e17c:	79 27                	jns    805e1a5 <test_init+0x67>
                printf("test_init: open(\"/dev/zero\"): %s\n", strerror(errno));
 805e17e:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 805e184:	8b 00                	mov    (%eax),%eax
 805e186:	89 04 24             	mov    %eax,(%esp)
 805e189:	e8 6a c5 ff ff       	call   805a6f8 <strerror>
 805e18e:	89 44 24 04          	mov    %eax,0x4(%esp)
 805e192:	8d 83 c8 db ff ff    	lea    -0x2438(%ebx),%eax
 805e198:	89 04 24             	mov    %eax,(%esp)
 805e19b:	e8 a0 ea ff ff       	call   805cc40 <printf>
                goto failed;
 805e1a0:	e9 b6 00 00 00       	jmp    805e25b <test_init+0x11d>
        }

        if (MAP_FAILED == (_test_data = mmap(NULL, sizeof(*_test_data), PROT_READ | PROT_WRITE, MAP_SHARED, zfd, 0))) {
 805e1a5:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 805e1ac:	00 
 805e1ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805e1b0:	89 44 24 10          	mov    %eax,0x10(%esp)
 805e1b4:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
 805e1bb:	00 
 805e1bc:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
 805e1c3:	00 
 805e1c4:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
 805e1cb:	00 
 805e1cc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 805e1d3:	e8 a8 b6 ff ff       	call   8059880 <mmap>
 805e1d8:	89 83 c4 02 00 00    	mov    %eax,0x2c4(%ebx)
 805e1de:	8b 83 c4 02 00 00    	mov    0x2c4(%ebx),%eax
 805e1e4:	83 f8 ff             	cmp    $0xffffffff,%eax
 805e1e7:	75 24                	jne    805e20d <test_init+0xcf>
                printf("test_init: mmap(\"/dev/zero\"): %s\n", strerror(errno));
 805e1e9:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 805e1ef:	8b 00                	mov    (%eax),%eax
 805e1f1:	89 04 24             	mov    %eax,(%esp)
 805e1f4:	e8 ff c4 ff ff       	call   805a6f8 <strerror>
 805e1f9:	89 44 24 04          	mov    %eax,0x4(%esp)
 805e1fd:	8d 83 ec db ff ff    	lea    -0x2414(%ebx),%eax
 805e203:	89 04 24             	mov    %eax,(%esp)
 805e206:	e8 35 ea ff ff       	call   805cc40 <printf>
                goto failed;
 805e20b:	eb 4e                	jmp    805e25b <test_init+0x11d>
        }

        if (0 > close(zfd)) {
 805e20d:	8b 45 f4             	mov    -0xc(%ebp),%eax
 805e210:	89 04 24             	mov    %eax,(%esp)
 805e213:	e8 ab b8 ff ff       	call   8059ac3 <close>
 805e218:	85 c0                	test   %eax,%eax
 805e21a:	79 24                	jns    805e240 <test_init+0x102>
                printf("test_init: close(\"/dev/zero\"): %s\n", strerror(errno));
 805e21c:	8d 05 28 6b 06 08    	lea    0x8066b28,%eax
 805e222:	8b 00                	mov    (%eax),%eax
 805e224:	89 04 24             	mov    %eax,(%esp)
 805e227:	e8 cc c4 ff ff       	call   805a6f8 <strerror>
 805e22c:	89 44 24 04          	mov    %eax,0x4(%esp)
 805e230:	8d 83 10 dc ff ff    	lea    -0x23f0(%ebx),%eax
 805e236:	89 04 24             	mov    %eax,(%esp)
 805e239:	e8 02 ea ff ff       	call   805cc40 <printf>
                goto failed;
 805e23e:	eb 1b                	jmp    805e25b <test_init+0x11d>
        }

        _test_data->td_passed = 0;
 805e240:	8b 83 c4 02 00 00    	mov    0x2c4(%ebx),%eax
 805e246:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        _test_data->td_failed = 0;
 805e24c:	8b 83 c4 02 00 00    	mov    0x2c4(%ebx),%eax
 805e252:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        return;
 805e259:	eb 1a                	jmp    805e275 <test_init+0x137>

failed:
        printf("could not initialize testing library, exiting\n");
 805e25b:	8d 83 34 dc ff ff    	lea    -0x23cc(%ebx),%eax
 805e261:	89 04 24             	mov    %eax,(%esp)
 805e264:	e8 d7 e9 ff ff       	call   805cc40 <printf>
        exit(-1);
 805e269:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 805e270:	e8 19 b4 ff ff       	call   805968e <exit>
}
 805e275:	83 c4 34             	add    $0x34,%esp
 805e278:	5b                   	pop    %ebx
 805e279:	5d                   	pop    %ebp
 805e27a:	c3                   	ret    

0805e27b <test_fini>:

void
test_fini(const char *name)
{
 805e27b:	55                   	push   %ebp
 805e27c:	89 e5                	mov    %esp,%ebp
 805e27e:	53                   	push   %ebx
 805e27f:	83 ec 14             	sub    $0x14,%esp
 805e282:	e8 72 bf ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805e287:	81 c3 d9 85 00 00    	add    $0x85d9,%ebx
        if (NULL == name) {
 805e28d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 805e291:	75 45                	jne    805e2d8 <test_fini+0x5d>
                printf("tests completed:\n");
 805e293:	8d 83 63 dc ff ff    	lea    -0x239d(%ebx),%eax
 805e299:	89 04 24             	mov    %eax,(%esp)
 805e29c:	e8 9f e9 ff ff       	call   805cc40 <printf>
                printf("%d passed\n", _test_data->td_passed);
 805e2a1:	8b 83 c4 02 00 00    	mov    0x2c4(%ebx),%eax
 805e2a7:	8b 00                	mov    (%eax),%eax
 805e2a9:	89 44 24 04          	mov    %eax,0x4(%esp)
 805e2ad:	8d 83 75 dc ff ff    	lea    -0x238b(%ebx),%eax
 805e2b3:	89 04 24             	mov    %eax,(%esp)
 805e2b6:	e8 85 e9 ff ff       	call   805cc40 <printf>
                printf("%d failed\n", _test_data->td_failed);
 805e2bb:	8b 83 c4 02 00 00    	mov    0x2c4(%ebx),%eax
 805e2c1:	8b 40 04             	mov    0x4(%eax),%eax
 805e2c4:	89 44 24 04          	mov    %eax,0x4(%esp)
 805e2c8:	8d 83 80 dc ff ff    	lea    -0x2380(%ebx),%eax
 805e2ce:	89 04 24             	mov    %eax,(%esp)
 805e2d1:	e8 6a e9 ff ff       	call   805cc40 <printf>
        } else {
                printf("%s subtests completed, ", name);
                printf("%d passed and ", _test_data->td_passed);
                printf("%d failed so far\n", _test_data->td_failed);
        }
}
 805e2d6:	eb 4a                	jmp    805e322 <test_fini+0xa7>
        if (NULL == name) {
                printf("tests completed:\n");
                printf("%d passed\n", _test_data->td_passed);
                printf("%d failed\n", _test_data->td_failed);
        } else {
                printf("%s subtests completed, ", name);
 805e2d8:	8b 45 08             	mov    0x8(%ebp),%eax
 805e2db:	89 44 24 04          	mov    %eax,0x4(%esp)
 805e2df:	8d 83 8b dc ff ff    	lea    -0x2375(%ebx),%eax
 805e2e5:	89 04 24             	mov    %eax,(%esp)
 805e2e8:	e8 53 e9 ff ff       	call   805cc40 <printf>
                printf("%d passed and ", _test_data->td_passed);
 805e2ed:	8b 83 c4 02 00 00    	mov    0x2c4(%ebx),%eax
 805e2f3:	8b 00                	mov    (%eax),%eax
 805e2f5:	89 44 24 04          	mov    %eax,0x4(%esp)
 805e2f9:	8d 83 a3 dc ff ff    	lea    -0x235d(%ebx),%eax
 805e2ff:	89 04 24             	mov    %eax,(%esp)
 805e302:	e8 39 e9 ff ff       	call   805cc40 <printf>
                printf("%d failed so far\n", _test_data->td_failed);
 805e307:	8b 83 c4 02 00 00    	mov    0x2c4(%ebx),%eax
 805e30d:	8b 40 04             	mov    0x4(%eax),%eax
 805e310:	89 44 24 04          	mov    %eax,0x4(%esp)
 805e314:	8d 83 b2 dc ff ff    	lea    -0x234e(%ebx),%eax
 805e31a:	89 04 24             	mov    %eax,(%esp)
 805e31d:	e8 1e e9 ff ff       	call   805cc40 <printf>
        }
}
 805e322:	90                   	nop
 805e323:	83 c4 14             	add    $0x14,%esp
 805e326:	5b                   	pop    %ebx
 805e327:	5d                   	pop    %ebp
 805e328:	c3                   	ret    

0805e329 <test_errstr>:

const char *
test_errstr(int err)
{
 805e329:	55                   	push   %ebp
 805e32a:	89 e5                	mov    %esp,%ebp
 805e32c:	e8 c0 be ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805e331:	05 2f 85 00 00       	add    $0x852f,%eax
        switch (err) {
 805e336:	83 7d 08 28          	cmpl   $0x28,0x8(%ebp)
 805e33a:	0f 87 99 01 00 00    	ja     805e4d9 <.L12>
 805e340:	8b 55 08             	mov    0x8(%ebp),%edx
 805e343:	c1 e2 02             	shl    $0x2,%edx
 805e346:	8b 94 02 e4 dd ff ff 	mov    -0x221c(%edx,%eax,1),%edx
 805e34d:	01 c2                	add    %eax,%edx
 805e34f:	ff e2                	jmp    *%edx

0805e351 <.L13>:
                case 1:
                        return "EPERM";
 805e351:	8d 80 c4 dc ff ff    	lea    -0x233c(%eax),%eax
 805e357:	e9 83 01 00 00       	jmp    805e4df <.L12+0x6>

0805e35c <.L15>:
                case 2:
                        return "ENOENT";
 805e35c:	8d 80 ca dc ff ff    	lea    -0x2336(%eax),%eax
 805e362:	e9 78 01 00 00       	jmp    805e4df <.L12+0x6>

0805e367 <.L16>:
                case 3:
                        return "ESRCH";
 805e367:	8d 80 d1 dc ff ff    	lea    -0x232f(%eax),%eax
 805e36d:	e9 6d 01 00 00       	jmp    805e4df <.L12+0x6>

0805e372 <.L17>:
                case 4:
                        return "EINTR";
 805e372:	8d 80 d7 dc ff ff    	lea    -0x2329(%eax),%eax
 805e378:	e9 62 01 00 00       	jmp    805e4df <.L12+0x6>

0805e37d <.L18>:
                case 5:
                        return "EIO";
 805e37d:	8d 80 dd dc ff ff    	lea    -0x2323(%eax),%eax
 805e383:	e9 57 01 00 00       	jmp    805e4df <.L12+0x6>

0805e388 <.L19>:
                case 6:
                        return "ENXIO";
 805e388:	8d 80 e1 dc ff ff    	lea    -0x231f(%eax),%eax
 805e38e:	e9 4c 01 00 00       	jmp    805e4df <.L12+0x6>

0805e393 <.L20>:
                case 7:
                        return "E2BIG";
 805e393:	8d 80 e7 dc ff ff    	lea    -0x2319(%eax),%eax
 805e399:	e9 41 01 00 00       	jmp    805e4df <.L12+0x6>

0805e39e <.L21>:
                case 8:
                        return "ENOEXEC";
 805e39e:	8d 80 ed dc ff ff    	lea    -0x2313(%eax),%eax
 805e3a4:	e9 36 01 00 00       	jmp    805e4df <.L12+0x6>

0805e3a9 <.L22>:
                case 9:
                        return "EBADF";
 805e3a9:	8d 80 f5 dc ff ff    	lea    -0x230b(%eax),%eax
 805e3af:	e9 2b 01 00 00       	jmp    805e4df <.L12+0x6>

0805e3b4 <.L23>:
                case 10:
                        return "ECHILD";
 805e3b4:	8d 80 fb dc ff ff    	lea    -0x2305(%eax),%eax
 805e3ba:	e9 20 01 00 00       	jmp    805e4df <.L12+0x6>

0805e3bf <.L24>:
                case 11:
                        return "EAGAIN";
 805e3bf:	8d 80 02 dd ff ff    	lea    -0x22fe(%eax),%eax
 805e3c5:	e9 15 01 00 00       	jmp    805e4df <.L12+0x6>

0805e3ca <.L25>:
                case 12:
                        return "ENOMEM";
 805e3ca:	8d 80 09 dd ff ff    	lea    -0x22f7(%eax),%eax
 805e3d0:	e9 0a 01 00 00       	jmp    805e4df <.L12+0x6>

0805e3d5 <.L26>:
                case 13:
                        return "EACCES";
 805e3d5:	8d 80 10 dd ff ff    	lea    -0x22f0(%eax),%eax
 805e3db:	e9 ff 00 00 00       	jmp    805e4df <.L12+0x6>

0805e3e0 <.L27>:
                case 14:
                        return "EFAULT";
 805e3e0:	8d 80 17 dd ff ff    	lea    -0x22e9(%eax),%eax
 805e3e6:	e9 f4 00 00 00       	jmp    805e4df <.L12+0x6>

0805e3eb <.L28>:
                case 15:
                        return "ENOTBLK";
 805e3eb:	8d 80 1e dd ff ff    	lea    -0x22e2(%eax),%eax
 805e3f1:	e9 e9 00 00 00       	jmp    805e4df <.L12+0x6>

0805e3f6 <.L29>:
                case 16:
                        return "EBUSY";
 805e3f6:	8d 80 26 dd ff ff    	lea    -0x22da(%eax),%eax
 805e3fc:	e9 de 00 00 00       	jmp    805e4df <.L12+0x6>

0805e401 <.L30>:
                case 17:
                        return "EEXIST";
 805e401:	8d 80 2c dd ff ff    	lea    -0x22d4(%eax),%eax
 805e407:	e9 d3 00 00 00       	jmp    805e4df <.L12+0x6>

0805e40c <.L31>:
                case 18:
                        return "EXDEV";
 805e40c:	8d 80 33 dd ff ff    	lea    -0x22cd(%eax),%eax
 805e412:	e9 c8 00 00 00       	jmp    805e4df <.L12+0x6>

0805e417 <.L32>:
                case 19:
                        return "ENODEV";
 805e417:	8d 80 39 dd ff ff    	lea    -0x22c7(%eax),%eax
 805e41d:	e9 bd 00 00 00       	jmp    805e4df <.L12+0x6>

0805e422 <.L33>:
                case 20:
                        return "ENOTDIR";
 805e422:	8d 80 40 dd ff ff    	lea    -0x22c0(%eax),%eax
 805e428:	e9 b2 00 00 00       	jmp    805e4df <.L12+0x6>

0805e42d <.L34>:
                case 21:
                        return "EISDIR";
 805e42d:	8d 80 48 dd ff ff    	lea    -0x22b8(%eax),%eax
 805e433:	e9 a7 00 00 00       	jmp    805e4df <.L12+0x6>

0805e438 <.L35>:
                case 22:
                        return "EINVAL";
 805e438:	8d 80 4f dd ff ff    	lea    -0x22b1(%eax),%eax
 805e43e:	e9 9c 00 00 00       	jmp    805e4df <.L12+0x6>

0805e443 <.L36>:
                case 23:
                        return "ENFILE";
 805e443:	8d 80 56 dd ff ff    	lea    -0x22aa(%eax),%eax
 805e449:	e9 91 00 00 00       	jmp    805e4df <.L12+0x6>

0805e44e <.L37>:
                case 24:
                        return "EMFILE";
 805e44e:	8d 80 5d dd ff ff    	lea    -0x22a3(%eax),%eax
 805e454:	e9 86 00 00 00       	jmp    805e4df <.L12+0x6>

0805e459 <.L38>:
                case 25:
                        return "ENOTTY";
 805e459:	8d 80 64 dd ff ff    	lea    -0x229c(%eax),%eax
 805e45f:	eb 7e                	jmp    805e4df <.L12+0x6>

0805e461 <.L39>:
                case 26:
                        return "ETXTBSY";
 805e461:	8d 80 6b dd ff ff    	lea    -0x2295(%eax),%eax
 805e467:	eb 76                	jmp    805e4df <.L12+0x6>

0805e469 <.L40>:
                case 27:
                        return "EFBIG";
 805e469:	8d 80 73 dd ff ff    	lea    -0x228d(%eax),%eax
 805e46f:	eb 6e                	jmp    805e4df <.L12+0x6>

0805e471 <.L41>:
                case 28:
                        return "ENOSPC";
 805e471:	8d 80 79 dd ff ff    	lea    -0x2287(%eax),%eax
 805e477:	eb 66                	jmp    805e4df <.L12+0x6>

0805e479 <.L42>:
                case 29:
                        return "ESPIPE";
 805e479:	8d 80 80 dd ff ff    	lea    -0x2280(%eax),%eax
 805e47f:	eb 5e                	jmp    805e4df <.L12+0x6>

0805e481 <.L43>:
                case 30:
                        return "EROFS";
 805e481:	8d 80 87 dd ff ff    	lea    -0x2279(%eax),%eax
 805e487:	eb 56                	jmp    805e4df <.L12+0x6>

0805e489 <.L44>:
                case 31:
                        return "EMLINK";
 805e489:	8d 80 8d dd ff ff    	lea    -0x2273(%eax),%eax
 805e48f:	eb 4e                	jmp    805e4df <.L12+0x6>

0805e491 <.L45>:
                case 32:
                        return "EPIPE";
 805e491:	8d 80 94 dd ff ff    	lea    -0x226c(%eax),%eax
 805e497:	eb 46                	jmp    805e4df <.L12+0x6>

0805e499 <.L46>:
                case 33:
                        return "EDOM";
 805e499:	8d 80 9a dd ff ff    	lea    -0x2266(%eax),%eax
 805e49f:	eb 3e                	jmp    805e4df <.L12+0x6>

0805e4a1 <.L47>:
                case 34:
                        return "ERANGE";
 805e4a1:	8d 80 9f dd ff ff    	lea    -0x2261(%eax),%eax
 805e4a7:	eb 36                	jmp    805e4df <.L12+0x6>

0805e4a9 <.L48>:
                case 35:
                        return "EDEADLK";
 805e4a9:	8d 80 a6 dd ff ff    	lea    -0x225a(%eax),%eax
 805e4af:	eb 2e                	jmp    805e4df <.L12+0x6>

0805e4b1 <.L49>:
                case 36:
                        return "ENAMETOOLONG";
 805e4b1:	8d 80 ae dd ff ff    	lea    -0x2252(%eax),%eax
 805e4b7:	eb 26                	jmp    805e4df <.L12+0x6>

0805e4b9 <.L50>:
                case 37:
                        return "ENOLCK";
 805e4b9:	8d 80 bb dd ff ff    	lea    -0x2245(%eax),%eax
 805e4bf:	eb 1e                	jmp    805e4df <.L12+0x6>

0805e4c1 <.L51>:
                case 38:
                        return "ENOSYS";
 805e4c1:	8d 80 c2 dd ff ff    	lea    -0x223e(%eax),%eax
 805e4c7:	eb 16                	jmp    805e4df <.L12+0x6>

0805e4c9 <.L52>:
                case 39:
                        return "ENOTEMPTY";
 805e4c9:	8d 80 c9 dd ff ff    	lea    -0x2237(%eax),%eax
 805e4cf:	eb 0e                	jmp    805e4df <.L12+0x6>

0805e4d1 <.L53>:
                case 40:
                        return "ELOOP";
 805e4d1:	8d 80 d3 dd ff ff    	lea    -0x222d(%eax),%eax
 805e4d7:	eb 06                	jmp    805e4df <.L12+0x6>

0805e4d9 <.L12>:
                default:
                        return "UNKNOWN";
 805e4d9:	8d 80 d9 dd ff ff    	lea    -0x2227(%eax),%eax
        }
}
 805e4df:	5d                   	pop    %ebp
 805e4e0:	c3                   	ret    

0805e4e1 <_default_test_fail>:

static void
_default_test_fail(const char *file, int line, const char *name, const char *fmt, va_list args)
{
 805e4e1:	55                   	push   %ebp
 805e4e2:	89 e5                	mov    %esp,%ebp
 805e4e4:	53                   	push   %ebx
 805e4e5:	83 ec 14             	sub    $0x14,%esp
 805e4e8:	e8 0c bd ff ff       	call   805a1f9 <__x86.get_pc_thunk.bx>
 805e4ed:	81 c3 73 83 00 00    	add    $0x8373,%ebx
        _test_data->td_failed++;
 805e4f3:	8b 83 c4 02 00 00    	mov    0x2c4(%ebx),%eax
 805e4f9:	8b 50 04             	mov    0x4(%eax),%edx
 805e4fc:	42                   	inc    %edx
 805e4fd:	89 50 04             	mov    %edx,0x4(%eax)
        if (NULL == fmt) {
 805e500:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
 805e504:	75 25                	jne    805e52b <_default_test_fail+0x4a>
                printf("FAILED: %s(%d): %s\n", file, line, name);
 805e506:	8b 45 10             	mov    0x10(%ebp),%eax
 805e509:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e50d:	8b 45 0c             	mov    0xc(%ebp),%eax
 805e510:	89 44 24 08          	mov    %eax,0x8(%esp)
 805e514:	8b 45 08             	mov    0x8(%ebp),%eax
 805e517:	89 44 24 04          	mov    %eax,0x4(%esp)
 805e51b:	8d 83 88 de ff ff    	lea    -0x2178(%ebx),%eax
 805e521:	89 04 24             	mov    %eax,(%esp)
 805e524:	e8 17 e7 ff ff       	call   805cc40 <printf>
        } else {
                printf("FAILED: %s(%d): %s: ", file, line, name);
                vprintf(fmt, args);
                printf("\n");
        }
}
 805e529:	eb 43                	jmp    805e56e <_default_test_fail+0x8d>
{
        _test_data->td_failed++;
        if (NULL == fmt) {
                printf("FAILED: %s(%d): %s\n", file, line, name);
        } else {
                printf("FAILED: %s(%d): %s: ", file, line, name);
 805e52b:	8b 45 10             	mov    0x10(%ebp),%eax
 805e52e:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e532:	8b 45 0c             	mov    0xc(%ebp),%eax
 805e535:	89 44 24 08          	mov    %eax,0x8(%esp)
 805e539:	8b 45 08             	mov    0x8(%ebp),%eax
 805e53c:	89 44 24 04          	mov    %eax,0x4(%esp)
 805e540:	8d 83 9c de ff ff    	lea    -0x2164(%ebx),%eax
 805e546:	89 04 24             	mov    %eax,(%esp)
 805e549:	e8 f2 e6 ff ff       	call   805cc40 <printf>
                vprintf(fmt, args);
 805e54e:	8b 45 18             	mov    0x18(%ebp),%eax
 805e551:	89 44 24 04          	mov    %eax,0x4(%esp)
 805e555:	8b 45 14             	mov    0x14(%ebp),%eax
 805e558:	89 04 24             	mov    %eax,(%esp)
 805e55b:	e8 d8 e7 ff ff       	call   805cd38 <vprintf>
                printf("\n");
 805e560:	8d 83 b1 de ff ff    	lea    -0x214f(%ebx),%eax
 805e566:	89 04 24             	mov    %eax,(%esp)
 805e569:	e8 d2 e6 ff ff       	call   805cc40 <printf>
        }
}
 805e56e:	90                   	nop
 805e56f:	83 c4 14             	add    $0x14,%esp
 805e572:	5b                   	pop    %ebx
 805e573:	5d                   	pop    %ebp
 805e574:	c3                   	ret    

0805e575 <_default_test_pass>:

static void
_default_test_pass(int val, const char *file, int line, const char *name, const char *fmt, va_list args)
{
 805e575:	55                   	push   %ebp
 805e576:	89 e5                	mov    %esp,%ebp
 805e578:	e8 74 bc ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805e57d:	05 e3 82 00 00       	add    $0x82e3,%eax
        _test_data->td_passed++;
 805e582:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
 805e588:	8b 10                	mov    (%eax),%edx
 805e58a:	42                   	inc    %edx
 805e58b:	89 10                	mov    %edx,(%eax)
}
 805e58d:	90                   	nop
 805e58e:	5d                   	pop    %ebp
 805e58f:	c3                   	ret    

0805e590 <_test_assert>:

int
_test_assert(int val, const char *file, int line, const char *name, const char *fmt, ...)
{
 805e590:	55                   	push   %ebp
 805e591:	89 e5                	mov    %esp,%ebp
 805e593:	83 ec 38             	sub    $0x38,%esp
 805e596:	e8 56 bc ff ff       	call   805a1f1 <__x86.get_pc_thunk.ax>
 805e59b:	05 c5 82 00 00       	add    $0x82c5,%eax
        va_list args;
        va_start(args, fmt);
 805e5a0:	8d 55 1c             	lea    0x1c(%ebp),%edx
 805e5a3:	89 55 f4             	mov    %edx,-0xc(%ebp)

        if (0 == val) {
 805e5a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 805e5aa:	75 36                	jne    805e5e2 <_test_assert+0x52>
                if (NULL != _fail_func) {
 805e5ac:	8b 90 64 01 00 00    	mov    0x164(%eax),%edx
 805e5b2:	85 d2                	test   %edx,%edx
 805e5b4:	74 67                	je     805e61d <_test_assert+0x8d>
                        _fail_func(file, line, name, fmt, args);
 805e5b6:	8b 80 64 01 00 00    	mov    0x164(%eax),%eax
 805e5bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
 805e5bf:	89 54 24 10          	mov    %edx,0x10(%esp)
 805e5c3:	8b 55 18             	mov    0x18(%ebp),%edx
 805e5c6:	89 54 24 0c          	mov    %edx,0xc(%esp)
 805e5ca:	8b 55 14             	mov    0x14(%ebp),%edx
 805e5cd:	89 54 24 08          	mov    %edx,0x8(%esp)
 805e5d1:	8b 55 10             	mov    0x10(%ebp),%edx
 805e5d4:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e5d8:	8b 55 0c             	mov    0xc(%ebp),%edx
 805e5db:	89 14 24             	mov    %edx,(%esp)
 805e5de:	ff d0                	call   *%eax
 805e5e0:	eb 3b                	jmp    805e61d <_test_assert+0x8d>
                }
        } else {
                if (NULL != _pass_func) {
 805e5e2:	8b 90 60 01 00 00    	mov    0x160(%eax),%edx
 805e5e8:	85 d2                	test   %edx,%edx
 805e5ea:	74 31                	je     805e61d <_test_assert+0x8d>
                        _pass_func(val, file, line, name, fmt, args);
 805e5ec:	8b 80 60 01 00 00    	mov    0x160(%eax),%eax
 805e5f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
 805e5f5:	89 54 24 14          	mov    %edx,0x14(%esp)
 805e5f9:	8b 55 18             	mov    0x18(%ebp),%edx
 805e5fc:	89 54 24 10          	mov    %edx,0x10(%esp)
 805e600:	8b 55 14             	mov    0x14(%ebp),%edx
 805e603:	89 54 24 0c          	mov    %edx,0xc(%esp)
 805e607:	8b 55 10             	mov    0x10(%ebp),%edx
 805e60a:	89 54 24 08          	mov    %edx,0x8(%esp)
 805e60e:	8b 55 0c             	mov    0xc(%ebp),%edx
 805e611:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e615:	8b 55 08             	mov    0x8(%ebp),%edx
 805e618:	89 14 24             	mov    %edx,(%esp)
 805e61b:	ff d0                	call   *%eax
                }
        }

        va_end(args);
        return val;
 805e61d:	8b 45 08             	mov    0x8(%ebp),%eax
}
 805e620:	c9                   	leave  
 805e621:	c3                   	ret    
